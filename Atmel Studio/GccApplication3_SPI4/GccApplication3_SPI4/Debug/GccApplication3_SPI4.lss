
GccApplication3_SPI4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000035e  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  000003f2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000b48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006eb  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000219  00000000  00000000  000012b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003dc  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  000018a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001d2  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000135  00000000  00000000  00001b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001caf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e5       	ldi	r30, 0x5E	; 94
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a9 30       	cpi	r26, 0x09	; 9
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  c8:	0c 94 ad 01 	jmp	0x35a	; 0x35a <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <Init_SPISystem>:
{
	

	/* Set MOSI and SCK and CS2 and CS1 and CLK0 and RDY output, all others input */
	
	DDRB |= (1<<PORTB5)|(1<<PORTB7)|(1<<PORTB2)|(1<<PORTB4)|(1<<PORTB1)|(1<<PORTB0);
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	87 6b       	ori	r24, 0xB7	; 183
  d4:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, sclk is Fosc/4 -> 250Khz (Fosc = 1Mhz)*/
	SPCR = (1<<SPE) | (1<<MSTR); //Pulls up the MOSI to indicate that ATmega is MASTER
  d6:	80 e5       	ldi	r24, 0x50	; 80
  d8:	8c bd       	out	0x2c, r24	; 44
	
	

}
  da:	08 95       	ret

000000dc <AFETransmit>:
				 AFETransmit(0x100063);//ADC Control Register 2
				 */
	
}

void AFETransmit(unsigned long data){ 
  dc:	cf 92       	push	r12
  de:	df 92       	push	r13
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	6b 01       	movw	r12, r22
  ea:	7c 01       	movw	r14, r24
	//Sends 3 Byte (24Bit) value as 3 separate 8 bit Char's to SPITransmit() Fn.
	//CSdown();
	SPITransmit(data);//1st byte
  ec:	cc e8       	ldi	r28, 0x8C	; 140
  ee:	d0 e0       	ldi	r29, 0x00	; 0
  f0:	fe 01       	movw	r30, r28
  f2:	09 95       	icall
	SPITransmit(data<<8);//2nd byte
  f4:	9e 2d       	mov	r25, r14
  f6:	8d 2d       	mov	r24, r13
  f8:	7c 2d       	mov	r23, r12
  fa:	66 27       	eor	r22, r22
  fc:	fe 01       	movw	r30, r28
  fe:	09 95       	icall
	SPITransmit(data<<16);//3rd byte
 100:	c6 01       	movw	r24, r12
 102:	77 27       	eor	r23, r23
 104:	66 27       	eor	r22, r22
 106:	fe 01       	movw	r30, r28
 108:	09 95       	icall
	//msb=SPIReceive();
	//CSup();
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	ff 90       	pop	r15
 110:	ef 90       	pop	r14
 112:	df 90       	pop	r13
 114:	cf 90       	pop	r12
 116:	08 95       	ret

00000118 <SPITransmit>:


void SPITransmit(unsigned char data){
	SPDR=data;
 118:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){
 11a:	0d b4       	in	r0, 0x2d	; 45
 11c:	07 fe       	sbrs	r0, 7
 11e:	fd cf       	rjmp	.-6      	; 0x11a <SPITransmit+0x2>
		//do nothing
	}
}
 120:	08 95       	ret

00000122 <CSup>:
	return SPDR;
}

void CSup(){
	// chip select line UP
	PORTB |= (1<<PORTB4);
 122:	2c 9a       	sbi	0x05, 4	; 5
}
 124:	08 95       	ret

00000126 <CSdown>:

void CSdown(){
	// chip select line DOWN
	PORTB &= ~(1<<PORTB4);
 126:	2c 98       	cbi	0x05, 4	; 5
}
 128:	08 95       	ret

0000012a <Init_AFE_BCM>:
	

}

void Init_AFE_BCM(void)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
				AFETransmit(0x014140);//ADC Control Register 1
 12e:	ce e6       	ldi	r28, 0x6E	; 110
 130:	d0 e0       	ldi	r29, 0x00	; 0
 132:	60 e4       	ldi	r22, 0x40	; 64
 134:	71 e4       	ldi	r23, 0x41	; 65
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	fe 01       	movw	r30, r28
 13c:	09 95       	icall
				AFETransmit(0x020000);//Misc Reg 1
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fe 01       	movw	r30, r28
 148:	09 95       	icall
				AFETransmit(0x03FFFF);//Misc Reg 2
 14a:	6f ef       	ldi	r22, 0xFF	; 255
 14c:	7f ef       	ldi	r23, 0xFF	; 255
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fe 01       	movw	r30, r28
 154:	09 95       	icall
				AFETransmit(0x096006);//Device Control 1
 156:	66 e0       	ldi	r22, 0x06	; 6
 158:	70 e6       	ldi	r23, 0x60	; 96
 15a:	89 e0       	ldi	r24, 0x09	; 9
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	fe 01       	movw	r30, r28
 160:	09 95       	icall
				AFETransmit(0x0A8040);//ISW_Mux
 162:	60 e4       	ldi	r22, 0x40	; 64
 164:	70 e8       	ldi	r23, 0x80	; 128
 166:	8a e0       	ldi	r24, 0x0A	; 10
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fe 01       	movw	r30, r28
 16c:	09 95       	icall
				AFETransmit(0x0B8040);//VSENSE_Mux
 16e:	60 e4       	ldi	r22, 0x40	; 64
 170:	70 e8       	ldi	r23, 0x80	; 128
 172:	8b e0       	ldi	r24, 0x0B	; 11
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	fe 01       	movw	r30, r28
 178:	09 95       	icall
				AFETransmit(0x0E0001);//BCM_DAC_FREQ
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	8e e0       	ldi	r24, 0x0E	; 14
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	fe 01       	movw	r30, r28
 184:	09 95       	icall
				AFETransmit(0x100063);//ADC Control Register 2
 186:	63 e6       	ldi	r22, 0x63	; 99
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	80 e1       	ldi	r24, 0x10	; 16
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	fe 01       	movw	r30, r28
 190:	09 95       	icall
				AFETransmit(0x1A0030);//Misc Reg 3
 192:	60 e3       	ldi	r22, 0x30	; 48
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	8a e1       	ldi	r24, 0x1A	; 26
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	fe 01       	movw	r30, r28
 19c:	09 95       	icall
				 AFETransmit(0x0E00FF);//BCM_DAC_FREQ
				 AFETransmit(0x0F0000);//Device Control 2
				 AFETransmit(0x100063);//ADC Control Register 2
				 */
	
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SPIReceive>:
	}
}

unsigned char SPIReceive(){
	/* Wait for reception complete */
	SPDR=0xff;
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 1a8:	0d b4       	in	r0, 0x2d	; 45
 1aa:	07 fe       	sbrs	r0, 7
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <SPIReceive+0x4>
	/* Return Data Register */
	return SPDR;
 1ae:	8e b5       	in	r24, 0x2e	; 46
}
 1b0:	08 95       	ret

000001b2 <SPITranceive>:

unsigned char SPITranceive(unsigned char data){
	/* Wait for reception complete */
	SPDR=data;
 1b2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 1b4:	0d b4       	in	r0, 0x2d	; 45
 1b6:	07 fe       	sbrs	r0, 7
 1b8:	fd cf       	rjmp	.-6      	; 0x1b4 <SPITranceive+0x2>
	/* Return Data Register */
	return SPDR;
 1ba:	8e b5       	in	r24, 0x2e	; 46
}
 1bc:	08 95       	ret

000001be <main>:

int main(void)
{
	while(1){
		Init_SPISystem();
	CSdown();
 1be:	c3 e9       	ldi	r28, 0x93	; 147
 1c0:	d0 e0       	ldi	r29, 0x00	; 0
		SPITransmit(0x00);
 1c2:	0c e8       	ldi	r16, 0x8C	; 140
 1c4:	10 e0       	ldi	r17, 0x00	; 0
		SPITransmit(0x01);
		CSup();
 1c6:	0f 2e       	mov	r0, r31
 1c8:	f1 e9       	ldi	r31, 0x91	; 145
 1ca:	ef 2e       	mov	r14, r31
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	ff 2e       	mov	r15, r31
 1d0:	f0 2d       	mov	r31, r0
uint8_t status;

int main(void)
{
	while(1){
		Init_SPISystem();
 1d2:	0e 94 68 00 	call	0xd0	; 0xd0 <Init_SPISystem>
	CSdown();
 1d6:	fe 01       	movw	r30, r28
 1d8:	09 95       	icall
		SPITransmit(0x00);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	f8 01       	movw	r30, r16
 1e0:	09 95       	icall
		SPITransmit(0x01);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	f8 01       	movw	r30, r16
 1e8:	09 95       	icall
		CSup();
 1ea:	f7 01       	movw	r30, r14
 1ec:	09 95       	icall
	
		CSdown();
 1ee:	fe 01       	movw	r30, r28
 1f0:	09 95       	icall
		rtd_data=SPITranceive(0x02);
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SPITranceive>
 1f8:	80 93 00 01 	sts	0x0100, r24
		CSup();
 1fc:	f7 01       	movw	r30, r14
 1fe:	09 95       	icall
 200:	e8 cf       	rjmp	.-48     	; 0x1d2 <main+0x14>

00000202 <wait_one_second>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	8f e3       	ldi	r24, 0x3F	; 63
 204:	9d e0       	ldi	r25, 0x0D	; 13
 206:	a3 e0       	ldi	r26, 0x03	; 3
 208:	81 50       	subi	r24, 0x01	; 1
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	a0 40       	sbci	r26, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <wait_one_second+0x6>
 210:	00 c0       	rjmp	.+0      	; 0x212 <wait_one_second+0x10>
 212:	00 00       	nop

int wait_one_second(void)
{
	_delay_ms(1000);
	return 1;
}
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	08 95       	ret

0000021a <set_PORTD_bit>:
{
	// Sets or clears the bit in position 'position'
	// either high or low (1 or 0) to match 'value'.
	// Leaves all other bits in PORTB unchanged.
	
	if (value == 0)
 21a:	61 15       	cp	r22, r1
 21c:	71 05       	cpc	r23, r1
 21e:	71 f4       	brne	.+28     	; 0x23c <set_PORTD_bit+0x22>
	{
		PORTD &= ~(1 << position);      // Set bit # 'position' low
 220:	4b b1       	in	r20, 0x0b	; 11
 222:	21 e0       	ldi	r18, 0x01	; 1
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	b9 01       	movw	r22, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <set_PORTD_bit+0x14>
 22a:	66 0f       	add	r22, r22
 22c:	77 1f       	adc	r23, r23
 22e:	8a 95       	dec	r24
 230:	e2 f7       	brpl	.-8      	; 0x22a <set_PORTD_bit+0x10>
 232:	cb 01       	movw	r24, r22
 234:	80 95       	com	r24
 236:	84 23       	and	r24, r20
 238:	8b b9       	out	0x0b, r24	; 11
 23a:	0c c0       	rjmp	.+24     	; 0x254 <set_PORTD_bit+0x3a>
	}
	else
	{
		PORTD |= (1 << position);       // Set bit # 'position' high
 23c:	4b b1       	in	r20, 0x0b	; 11
 23e:	21 e0       	ldi	r18, 0x01	; 1
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	b9 01       	movw	r22, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <set_PORTD_bit+0x30>
 246:	66 0f       	add	r22, r22
 248:	77 1f       	adc	r23, r23
 24a:	8a 95       	dec	r24
 24c:	e2 f7       	brpl	.-8      	; 0x246 <set_PORTD_bit+0x2c>
 24e:	cb 01       	movw	r24, r22
 250:	84 2b       	or	r24, r20
 252:	8b b9       	out	0x0b, r24	; 11
	}
	return 1;
}
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	08 95       	ret

0000025a <main2>:
}
int main2(void)
{
	//while(1)
	//{
		DDRD = 0b01100000;  // Enabling PB3
 25a:	80 e6       	ldi	r24, 0x60	; 96
 25c:	8a b9       	out	0x0a, r24	; 10
		Init_SPISystem(); //Set up SPI Protocol
 25e:	0e 94 68 00 	call	0xd0	; 0xd0 <Init_SPISystem>
		CSup(); //Need to pull it UP after setting it as an Output
 262:	01 e9       	ldi	r16, 0x91	; 145
 264:	10 e0       	ldi	r17, 0x00	; 0
 266:	f8 01       	movw	r30, r16
 268:	09 95       	icall
		CSdown();
 26a:	0f 2e       	mov	r0, r31
 26c:	f3 e9       	ldi	r31, 0x93	; 147
 26e:	ef 2e       	mov	r14, r31
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	ff 2e       	mov	r15, r31
 274:	f0 2d       	mov	r31, r0
 276:	f7 01       	movw	r30, r14
 278:	09 95       	icall
			
		    	
			//	
			AFETransmit(0x020000);//Misc Reg 1
 27a:	ce e6       	ldi	r28, 0x6E	; 110
 27c:	d0 e0       	ldi	r29, 0x00	; 0
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	fe 01       	movw	r30, r28
 288:	09 95       	icall
			
			//
			AFETransmit(0x03FFFF);//Misc Reg 2
 28a:	6f ef       	ldi	r22, 0xFF	; 255
 28c:	7f ef       	ldi	r23, 0xFF	; 255
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	fe 01       	movw	r30, r28
 294:	09 95       	icall
			AFETransmit(0x096006);//Device Control 1
 296:	66 e0       	ldi	r22, 0x06	; 6
 298:	70 e6       	ldi	r23, 0x60	; 96
 29a:	89 e0       	ldi	r24, 0x09	; 9
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	fe 01       	movw	r30, r28
 2a0:	09 95       	icall
			AFETransmit(0x0A8040);//ISW_Mux
 2a2:	60 e4       	ldi	r22, 0x40	; 64
 2a4:	70 e8       	ldi	r23, 0x80	; 128
 2a6:	8a e0       	ldi	r24, 0x0A	; 10
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	fe 01       	movw	r30, r28
 2ac:	09 95       	icall
			AFETransmit(0x0B8040);//VSENSE_Mux
 2ae:	60 e4       	ldi	r22, 0x40	; 64
 2b0:	70 e8       	ldi	r23, 0x80	; 128
 2b2:	8b e0       	ldi	r24, 0x0B	; 11
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	fe 01       	movw	r30, r28
 2b8:	09 95       	icall
			//AFETransmit(0x0C0000);//I/Q Mode Enable
			//AFETransmit(0x0D0000);//Weight Scale Control
			AFETransmit(0x0E00FF);//BCM_DAC_FREQ
 2ba:	6f ef       	ldi	r22, 0xFF	; 255
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	8e e0       	ldi	r24, 0x0E	; 14
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	fe 01       	movw	r30, r28
 2c4:	09 95       	icall
			//AFETransmit(0x0F0000);//Device Control 2
			AFETransmit(0x100063);//ADC Control Register 2
 2c6:	63 e6       	ldi	r22, 0x63	; 99
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	80 e1       	ldi	r24, 0x10	; 16
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	fe 01       	movw	r30, r28
 2d0:	09 95       	icall
			AFETransmit(0x1A0030);//Misc Reg 3
 2d2:	60 e3       	ldi	r22, 0x30	; 48
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	8a e1       	ldi	r24, 0x1A	; 26
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	fe 01       	movw	r30, r28
 2dc:	09 95       	icall
			
		CSup();
 2de:	f8 01       	movw	r30, r16
 2e0:	09 95       	icall
		//while(1){
			CSdown();	
 2e2:	f7 01       	movw	r30, r14
 2e4:	09 95       	icall
			SPITransmit(0x01);//ADC Control Register 1
 2e6:	cc e8       	ldi	r28, 0x8C	; 140
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	fe 01       	movw	r30, r28
 2f0:	09 95       	icall
			SPITransmit(0xC9);
 2f2:	89 ec       	ldi	r24, 0xC9	; 201
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	fe 01       	movw	r30, r28
 2f8:	09 95       	icall
			SPITransmit(0xC0); //f0?
 2fa:	80 ec       	ldi	r24, 0xC0	; 192
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	fe 01       	movw	r30, r28
 300:	09 95       	icall
			CSup();
 302:	f8 01       	movw	r30, r16
 304:	09 95       	icall
			
		
			while(status==0){
 306:	80 91 08 01 	lds	r24, 0x0108
 30a:	88 23       	and	r24, r24
 30c:	49 f4       	brne	.+18     	; 0x320 <main2+0xc6>
				set_PORTD_bit(6,1);
 30e:	86 e0       	ldi	r24, 0x06	; 6
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	0e 94 0d 01 	call	0x21a	; 0x21a <set_PORTD_bit>
				status=PINB0;
 31a:	10 92 08 01 	sts	0x0108, r1
 31e:	14 c0       	rjmp	.+40     	; 0x348 <main2+0xee>
			}				
						
			
			CSdown();
 320:	f7 01       	movw	r30, r14
 322:	09 95       	icall
			SPITransmit(0x20);
 324:	80 e2       	ldi	r24, 0x20	; 32
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	fe 01       	movw	r30, r28
 32a:	09 95       	icall
			huh=SPIReceive();
 32c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SPIReceive>
 330:	80 93 07 01 	sts	0x0107, r24
			huh2=SPIReceive();
 334:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SPIReceive>
 338:	80 93 06 01 	sts	0x0106, r24
			CSup();
 33c:	f8 01       	movw	r30, r16
 33e:	09 95       	icall
			
			exit(-1);
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	9f ef       	ldi	r25, 0xFF	; 255
 344:	0e 94 ad 01 	call	0x35a	; 0x35a <_exit>
			SPITransmit(0xC0); //f0?
			CSup();
			
		
			while(status==0){
				set_PORTD_bit(6,1);
 348:	86 e0       	ldi	r24, 0x06	; 6
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	0e 94 0d 01 	call	0x21a	; 0x21a <set_PORTD_bit>
				status=PINB0;
 354:	10 92 08 01 	sts	0x0108, r1
 358:	f7 cf       	rjmp	.-18     	; 0x348 <main2+0xee>

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>
