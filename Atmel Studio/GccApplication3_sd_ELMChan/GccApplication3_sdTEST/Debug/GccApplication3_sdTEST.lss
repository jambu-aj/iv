
GccApplication3_sdTEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00004886  0000491a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004886  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025b  0080011c  0080011c  00004936  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00004938  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00005004  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00005090  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002717  00000000  00000000  00005190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000557  00000000  00000000  000078a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fdf  00000000  00000000  00007dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bdc  00000000  00000000  00008de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066e  00000000  00000000  000099bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000058b2  00000000  00000000  0000a02a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000f8dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e8       	ldi	r30, 0x86	; 134
      a0:	f8 e4       	ldi	r31, 0x48	; 72
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 31       	cpi	r26, 0x1C	; 28
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
      b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
      b4:	13 e0       	ldi	r17, 0x03	; 3
      b6:	ac e1       	ldi	r26, 0x1C	; 28
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a7 37       	cpi	r26, 0x77	; 119
      c0:	b1 07       	cpc	r27, r17
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <main>
      c8:	0c 94 41 24 	jmp	0x4882	; 0x4882 <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
      d0:	41 15       	cp	r20, r1
      d2:	51 05       	cpc	r21, r1
      d4:	49 f0       	breq	.+18     	; 0xe8 <mem_cpy+0x18>
      d6:	a6 2f       	mov	r26, r22
      d8:	b7 2f       	mov	r27, r23
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
      da:	e8 2f       	mov	r30, r24
      dc:	f9 2f       	mov	r31, r25
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
      de:	8d 91       	ld	r24, X+
      e0:	81 93       	st	Z+, r24
      e2:	41 50       	subi	r20, 0x01	; 1
      e4:	50 40       	sbci	r21, 0x00	; 0
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
      e6:	d9 f7       	brne	.-10     	; 0xde <mem_cpy+0xe>
      e8:	08 95       	ret

000000ea <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
      ea:	41 15       	cp	r20, r1
      ec:	51 05       	cpc	r21, r1
      ee:	31 f0       	breq	.+12     	; 0xfc <mem_set+0x12>
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
      f0:	e8 2f       	mov	r30, r24
      f2:	f9 2f       	mov	r31, r25

	while (cnt--)
		*d++ = (BYTE)val;
      f4:	61 93       	st	Z+, r22
      f6:	41 50       	subi	r20, 0x01	; 1
      f8:	50 40       	sbci	r21, 0x00	; 0
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
      fa:	e1 f7       	brne	.-8      	; 0xf4 <mem_set+0xa>
      fc:	08 95       	ret

000000fe <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIRS *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
      fe:	ef 92       	push	r14
     100:	ff 92       	push	r15
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	fc 01       	movw	r30, r24
     10c:	7b 01       	movw	r14, r22
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
     10e:	8b 01       	movw	r16, r22
     110:	07 5f       	subi	r16, 0xF7	; 247
     112:	1f 4f       	sbci	r17, 0xFF	; 255
	if (dj->sect) {
     114:	86 85       	ldd	r24, Z+14	; 0x0e
     116:	97 85       	ldd	r25, Z+15	; 0x0f
     118:	a0 89       	ldd	r26, Z+16	; 0x10
     11a:	b1 89       	ldd	r27, Z+17	; 0x11
     11c:	00 97       	sbiw	r24, 0x00	; 0
     11e:	a1 05       	cpc	r26, r1
     120:	b1 05       	cpc	r27, r1
     122:	09 f4       	brne	.+2      	; 0x126 <get_fileinfo+0x28>
     124:	65 c0       	rjmp	.+202    	; 0x1f0 <get_fileinfo+0xf2>
		dir = dj->dir;
     126:	c2 89       	ldd	r28, Z+18	; 0x12
     128:	d3 89       	ldd	r29, Z+19	; 0x13
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
     12a:	28 81       	ld	r18, Y
			if (c == ' ') break;
     12c:	20 32       	cpi	r18, 0x20	; 32
     12e:	99 f0       	breq	.+38     	; 0x156 <get_fileinfo+0x58>
/*-----------------------------------------------------------------------*/
/* Get file information from directory entry                             */
/*-----------------------------------------------------------------------*/
#if _FS_MINIMIZE <= 1
static
void get_fileinfo (		/* No return code */
     130:	de 01       	movw	r26, r28
     132:	11 96       	adiw	r26, 0x01	; 1
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
     134:	f8 01       	movw	r30, r16

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	90 e0       	ldi	r25, 0x00	; 0
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
     13a:	35 ee       	ldi	r19, 0xE5	; 229
     13c:	03 c0       	rjmp	.+6      	; 0x144 <get_fileinfo+0x46>
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
     13e:	2d 91       	ld	r18, X+
			if (c == ' ') break;
     140:	20 32       	cpi	r18, 0x20	; 32
     142:	49 f0       	breq	.+18     	; 0x156 <get_fileinfo+0x58>
			if (c == NDDE) c = (TCHAR)DDE;
     144:	25 30       	cpi	r18, 0x05	; 5
     146:	09 f4       	brne	.+2      	; 0x14a <get_fileinfo+0x4c>
     148:	23 2f       	mov	r18, r19
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
     14a:	21 93       	st	Z+, r18
     14c:	8f 01       	movw	r16, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
     14e:	01 96       	adiw	r24, 0x01	; 1
     150:	88 30       	cpi	r24, 0x08	; 8
     152:	91 05       	cpc	r25, r1
     154:	a1 f7       	brne	.-24     	; 0x13e <get_fileinfo+0x40>
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
     156:	88 85       	ldd	r24, Y+8	; 0x08
     158:	80 32       	cpi	r24, 0x20	; 32
     15a:	81 f0       	breq	.+32     	; 0x17c <get_fileinfo+0x7e>
			*p++ = '.';
     15c:	8e e2       	ldi	r24, 0x2E	; 46
     15e:	f8 01       	movw	r30, r16
     160:	80 83       	st	Z, r24
			for (i = 8; i < 11; i++) {
				c = dir[i];
     162:	88 85       	ldd	r24, Y+8	; 0x08
				if (c == ' ') break;
     164:	80 32       	cpi	r24, 0x20	; 32
     166:	09 f0       	breq	.+2      	; 0x16a <get_fileinfo+0x6c>
     168:	4c c0       	rjmp	.+152    	; 0x202 <get_fileinfo+0x104>
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
     16a:	0f 5f       	subi	r16, 0xFF	; 255
     16c:	1f 4f       	sbci	r17, 0xFF	; 255
     16e:	06 c0       	rjmp	.+12     	; 0x17c <get_fileinfo+0x7e>
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
     170:	8c 01       	movw	r16, r24
     172:	04 c0       	rjmp	.+8      	; 0x17c <get_fileinfo+0x7e>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     174:	f8 01       	movw	r30, r16
     176:	23 83       	std	Z+3, r18	; 0x03
     178:	0c 5f       	subi	r16, 0xFC	; 252
     17a:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     17c:	8b 85       	ldd	r24, Y+11	; 0x0b
     17e:	f7 01       	movw	r30, r14
     180:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     182:	8f 8d       	ldd	r24, Y+31	; 0x1f
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e0       	ldi	r27, 0x00	; 0
     18a:	b8 2f       	mov	r27, r24
     18c:	aa 27       	eor	r26, r26
     18e:	99 27       	eor	r25, r25
     190:	88 27       	eor	r24, r24
     192:	4e 8d       	ldd	r20, Y+30	; 0x1e
     194:	50 e0       	ldi	r21, 0x00	; 0
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	70 e0       	ldi	r23, 0x00	; 0
     19a:	ba 01       	movw	r22, r20
     19c:	55 27       	eor	r21, r21
     19e:	44 27       	eor	r20, r20
     1a0:	48 2b       	or	r20, r24
     1a2:	59 2b       	or	r21, r25
     1a4:	6a 2b       	or	r22, r26
     1a6:	7b 2b       	or	r23, r27
     1a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b0 e0       	ldi	r27, 0x00	; 0
     1b0:	48 2b       	or	r20, r24
     1b2:	59 2b       	or	r21, r25
     1b4:	6a 2b       	or	r22, r26
     1b6:	7b 2b       	or	r23, r27
     1b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	a0 e0       	ldi	r26, 0x00	; 0
     1be:	b0 e0       	ldi	r27, 0x00	; 0
     1c0:	84 2b       	or	r24, r20
     1c2:	95 2b       	or	r25, r21
     1c4:	a6 2b       	or	r26, r22
     1c6:	b7 2b       	or	r27, r23
     1c8:	80 83       	st	Z, r24
     1ca:	91 83       	std	Z+1, r25	; 0x01
     1cc:	a2 83       	std	Z+2, r26	; 0x02
     1ce:	b3 83       	std	Z+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     1d0:	39 8d       	ldd	r19, Y+25	; 0x19
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	88 8d       	ldd	r24, Y+24	; 0x18
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	82 2b       	or	r24, r18
     1da:	93 2b       	or	r25, r19
     1dc:	95 83       	std	Z+5, r25	; 0x05
     1de:	84 83       	std	Z+4, r24	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     1e0:	9f 89       	ldd	r25, Y+23	; 0x17
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	2e 89       	ldd	r18, Y+22	; 0x16
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	82 2b       	or	r24, r18
     1ea:	93 2b       	or	r25, r19
     1ec:	97 83       	std	Z+7, r25	; 0x07
     1ee:	86 83       	std	Z+6, r24	; 0x06
	}
	*p = 0;		/* Terminate SFN str by a \0 */
     1f0:	f8 01       	movw	r30, r16
     1f2:	10 82       	st	Z, r1
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
	}
#endif
}
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	1f 91       	pop	r17
     1fa:	0f 91       	pop	r16
     1fc:	ff 90       	pop	r15
     1fe:	ef 90       	pop	r14
     200:	08 95       	ret
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     202:	f8 01       	movw	r30, r16
     204:	81 83       	std	Z+1, r24	; 0x01
     206:	c8 01       	movw	r24, r16
     208:	02 96       	adiw	r24, 0x02	; 2
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
     20a:	29 85       	ldd	r18, Y+9	; 0x09
				if (c == ' ') break;
     20c:	20 32       	cpi	r18, 0x20	; 32
     20e:	09 f4       	brne	.+2      	; 0x212 <get_fileinfo+0x114>
     210:	af cf       	rjmp	.-162    	; 0x170 <get_fileinfo+0x72>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     212:	22 83       	std	Z+2, r18	; 0x02
     214:	c8 01       	movw	r24, r16
     216:	03 96       	adiw	r24, 0x03	; 3
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
     218:	2a 85       	ldd	r18, Y+10	; 0x0a
				if (c == ' ') break;
     21a:	20 32       	cpi	r18, 0x20	; 32
     21c:	09 f0       	breq	.+2      	; 0x220 <get_fileinfo+0x122>
     21e:	aa cf       	rjmp	.-172    	; 0x174 <get_fileinfo+0x76>
     220:	a7 cf       	rjmp	.-178    	; 0x170 <get_fileinfo+0x72>

00000222 <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
     222:	00 97       	sbiw	r24, 0x00	; 0
     224:	81 f0       	breq	.+32     	; 0x246 <validate+0x24>
     226:	fc 01       	movw	r30, r24
     228:	20 81       	ld	r18, Z
     22a:	22 23       	and	r18, r18
     22c:	71 f0       	breq	.+28     	; 0x24a <validate+0x28>
     22e:	26 81       	ldd	r18, Z+6	; 0x06
     230:	37 81       	ldd	r19, Z+7	; 0x07
     232:	26 17       	cp	r18, r22
     234:	37 07       	cpc	r19, r23
     236:	59 f4       	brne	.+22     	; 0x24e <validate+0x2c>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
     238:	81 81       	ldd	r24, Z+1	; 0x01
     23a:	0e 94 a8 21 	call	0x4350	; 0x4350 <disk_status>
     23e:	80 ff       	sbrs	r24, 0
     240:	08 c0       	rjmp	.+16     	; 0x252 <validate+0x30>
		return FR_NOT_READY;
     242:	83 e0       	ldi	r24, 0x03	; 3
     244:	08 95       	ret
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
     246:	89 e0       	ldi	r24, 0x09	; 9
     248:	08 95       	ret
     24a:	89 e0       	ldi	r24, 0x09	; 9
     24c:	08 95       	ret
     24e:	89 e0       	ldi	r24, 0x09	; 9
     250:	08 95       	ret
	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
     252:	80 e0       	ldi	r24, 0x00	; 0
}
     254:	08 95       	ret

00000256 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	ec 01       	movw	r28, r24
     260:	9a 01       	movw	r18, r20
     262:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
     264:	bc 01       	movw	r22, r24
     266:	6e 5c       	subi	r22, 0xCE	; 206
     268:	7f 4f       	sbci	r23, 0xFF	; 255
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	01 e0       	ldi	r16, 0x01	; 1
     26e:	10 e0       	ldi	r17, 0x00	; 0
     270:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <disk_read>
     274:	88 23       	and	r24, r24
     276:	09 f0       	breq	.+2      	; 0x27a <check_fs+0x24>
     278:	83 c0       	rjmp	.+262    	; 0x380 <check_fs+0x12a>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
     27a:	fe 01       	movw	r30, r28
     27c:	ef 5c       	subi	r30, 0xCF	; 207
     27e:	fd 4f       	sbci	r31, 0xFD	; 253
     280:	90 81       	ld	r25, Z
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	fe 01       	movw	r30, r28
     286:	e0 5d       	subi	r30, 0xD0	; 208
     288:	fd 4f       	sbci	r31, 0xFD	; 253
     28a:	20 81       	ld	r18, Z
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	82 2b       	or	r24, r18
     290:	93 2b       	or	r25, r19
     292:	2a ea       	ldi	r18, 0xAA	; 170
     294:	85 35       	cpi	r24, 0x55	; 85
     296:	92 07       	cpc	r25, r18
     298:	09 f0       	breq	.+2      	; 0x29c <check_fs+0x46>
     29a:	74 c0       	rjmp	.+232    	; 0x384 <check_fs+0x12e>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     29c:	fe 01       	movw	r30, r28
     29e:	e5 59       	subi	r30, 0x95	; 149
     2a0:	ff 4f       	sbci	r31, 0xFF	; 255
     2a2:	80 81       	ld	r24, Z
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	a0 e0       	ldi	r26, 0x00	; 0
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	b8 2f       	mov	r27, r24
     2ac:	aa 27       	eor	r26, r26
     2ae:	99 27       	eor	r25, r25
     2b0:	88 27       	eor	r24, r24
     2b2:	fe 01       	movw	r30, r28
     2b4:	e6 59       	subi	r30, 0x96	; 150
     2b6:	ff 4f       	sbci	r31, 0xFF	; 255
     2b8:	40 81       	ld	r20, Z
     2ba:	50 e0       	ldi	r21, 0x00	; 0
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	70 e0       	ldi	r23, 0x00	; 0
     2c0:	ba 01       	movw	r22, r20
     2c2:	55 27       	eor	r21, r21
     2c4:	44 27       	eor	r20, r20
     2c6:	48 2b       	or	r20, r24
     2c8:	59 2b       	or	r21, r25
     2ca:	6a 2b       	or	r22, r26
     2cc:	7b 2b       	or	r23, r27
     2ce:	fe 01       	movw	r30, r28
     2d0:	e8 59       	subi	r30, 0x98	; 152
     2d2:	ff 4f       	sbci	r31, 0xFF	; 255
     2d4:	80 81       	ld	r24, Z
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	a0 e0       	ldi	r26, 0x00	; 0
     2da:	b0 e0       	ldi	r27, 0x00	; 0
     2dc:	48 2b       	or	r20, r24
     2de:	59 2b       	or	r21, r25
     2e0:	6a 2b       	or	r22, r26
     2e2:	7b 2b       	or	r23, r27
     2e4:	fe 01       	movw	r30, r28
     2e6:	e7 59       	subi	r30, 0x97	; 151
     2e8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ea:	90 81       	ld	r25, Z
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	a0 e0       	ldi	r26, 0x00	; 0
     2f0:	b0 e0       	ldi	r27, 0x00	; 0
     2f2:	48 2b       	or	r20, r24
     2f4:	59 2b       	or	r21, r25
     2f6:	6a 2b       	or	r22, r26
     2f8:	7b 2b       	or	r23, r27
     2fa:	70 70       	andi	r23, 0x00	; 0
     2fc:	46 34       	cpi	r20, 0x46	; 70
     2fe:	81 e4       	ldi	r24, 0x41	; 65
     300:	58 07       	cpc	r21, r24
     302:	84 e5       	ldi	r24, 0x54	; 84
     304:	68 07       	cpc	r22, r24
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	78 07       	cpc	r23, r24
     30a:	f1 f1       	breq	.+124    	; 0x388 <check_fs+0x132>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
     30c:	fe 01       	movw	r30, r28
     30e:	e9 57       	subi	r30, 0x79	; 121
     310:	ff 4f       	sbci	r31, 0xFF	; 255
     312:	80 81       	ld	r24, Z
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	a0 e0       	ldi	r26, 0x00	; 0
     318:	b0 e0       	ldi	r27, 0x00	; 0
     31a:	b8 2f       	mov	r27, r24
     31c:	aa 27       	eor	r26, r26
     31e:	99 27       	eor	r25, r25
     320:	88 27       	eor	r24, r24
     322:	fe 01       	movw	r30, r28
     324:	ea 57       	subi	r30, 0x7A	; 122
     326:	ff 4f       	sbci	r31, 0xFF	; 255
     328:	40 81       	ld	r20, Z
     32a:	50 e0       	ldi	r21, 0x00	; 0
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	ba 01       	movw	r22, r20
     332:	55 27       	eor	r21, r21
     334:	44 27       	eor	r20, r20
     336:	48 2b       	or	r20, r24
     338:	59 2b       	or	r21, r25
     33a:	6a 2b       	or	r22, r26
     33c:	7b 2b       	or	r23, r27
     33e:	fe 01       	movw	r30, r28
     340:	ec 57       	subi	r30, 0x7C	; 124
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	80 81       	ld	r24, Z
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	a0 e0       	ldi	r26, 0x00	; 0
     34a:	b0 e0       	ldi	r27, 0x00	; 0
     34c:	48 2b       	or	r20, r24
     34e:	59 2b       	or	r21, r25
     350:	6a 2b       	or	r22, r26
     352:	7b 2b       	or	r23, r27
     354:	cb 57       	subi	r28, 0x7B	; 123
     356:	df 4f       	sbci	r29, 0xFF	; 255
     358:	98 81       	ld	r25, Y
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	a0 e0       	ldi	r26, 0x00	; 0
     35e:	b0 e0       	ldi	r27, 0x00	; 0
     360:	48 2b       	or	r20, r24
     362:	59 2b       	or	r21, r25
     364:	6a 2b       	or	r22, r26
     366:	7b 2b       	or	r23, r27
     368:	70 70       	andi	r23, 0x00	; 0
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	46 34       	cpi	r20, 0x46	; 70
     36e:	91 e4       	ldi	r25, 0x41	; 65
     370:	59 07       	cpc	r21, r25
     372:	94 e5       	ldi	r25, 0x54	; 84
     374:	69 07       	cpc	r22, r25
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	79 07       	cpc	r23, r25
     37a:	39 f4       	brne	.+14     	; 0x38a <check_fs+0x134>
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	05 c0       	rjmp	.+10     	; 0x38a <check_fs+0x134>
     380:	83 e0       	ldi	r24, 0x03	; 3
     382:	03 c0       	rjmp	.+6      	; 0x38a <check_fs+0x134>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
     384:	82 e0       	ldi	r24, 0x02	; 2
     386:	01 c0       	rjmp	.+2      	; 0x38a <check_fs+0x134>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
     388:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	1f 91       	pop	r17
     390:	0f 91       	pop	r16
     392:	08 95       	ret

00000394 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
     394:	2f 92       	push	r2
     396:	3f 92       	push	r3
     398:	4f 92       	push	r4
     39a:	5f 92       	push	r5
     39c:	6f 92       	push	r6
     39e:	7f 92       	push	r7
     3a0:	8f 92       	push	r8
     3a2:	9f 92       	push	r9
     3a4:	af 92       	push	r10
     3a6:	bf 92       	push	r11
     3a8:	cf 92       	push	r12
     3aa:	df 92       	push	r13
     3ac:	ef 92       	push	r14
     3ae:	ff 92       	push	r15
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
     3bc:	60 97       	sbiw	r28, 0x10	; 16
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	cd bf       	out	0x3d, r28	; 61
     3c8:	dc 01       	movw	r26, r24
     3ca:	04 2f       	mov	r16, r20
	BYTE fmt, b, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
     3cc:	ed 91       	ld	r30, X+
     3ce:	fc 91       	ld	r31, X
     3d0:	11 97       	sbiw	r26, 0x01	; 1
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
     3d2:	80 81       	ld	r24, Z
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	c0 97       	sbiw	r24, 0x30	; 48
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
     3d8:	8a 30       	cpi	r24, 0x0A	; 10
     3da:	91 05       	cpc	r25, r1
     3dc:	40 f4       	brcc	.+16     	; 0x3ee <chk_mounted+0x5a>
     3de:	21 81       	ldd	r18, Z+1	; 0x01
     3e0:	2a 33       	cpi	r18, 0x3A	; 58
     3e2:	29 f4       	brne	.+10     	; 0x3ee <chk_mounted+0x5a>
		p += 2; *path = p;				/* Return pointer to the path name */
     3e4:	32 96       	adiw	r30, 0x02	; 2
     3e6:	11 96       	adiw	r26, 0x01	; 1
     3e8:	fc 93       	st	X, r31
     3ea:	ee 93       	st	-X, r30
     3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <chk_mounted+0x60>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
     3ee:	80 91 1e 01 	lds	r24, 0x011E
     3f2:	90 e0       	ldi	r25, 0x00	; 0
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
     3f4:	00 97       	sbiw	r24, 0x00	; 0
     3f6:	09 f0       	breq	.+2      	; 0x3fa <chk_mounted+0x66>
     3f8:	a0 c3       	rjmp	.+1856   	; 0xb3a <chk_mounted+0x7a6>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
     3fa:	e0 90 1c 01 	lds	r14, 0x011C
     3fe:	f0 90 1d 01 	lds	r15, 0x011D
     402:	db 01       	movw	r26, r22
     404:	11 96       	adiw	r26, 0x01	; 1
     406:	fc 92       	st	X, r15
     408:	ee 92       	st	-X, r14
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     40a:	e1 14       	cp	r14, r1
     40c:	f1 04       	cpc	r15, r1
     40e:	09 f4       	brne	.+2      	; 0x412 <chk_mounted+0x7e>
     410:	96 c3       	rjmp	.+1836   	; 0xb3e <chk_mounted+0x7aa>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
     412:	f7 01       	movw	r30, r14
     414:	80 81       	ld	r24, Z
     416:	88 23       	and	r24, r24
     418:	61 f0       	breq	.+24     	; 0x432 <chk_mounted+0x9e>
		stat = disk_status(fs->drv);
     41a:	81 81       	ldd	r24, Z+1	; 0x01
     41c:	0e 94 a8 21 	call	0x4350	; 0x4350 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
     420:	80 fd       	sbrc	r24, 0
     422:	07 c0       	rjmp	.+14     	; 0x432 <chk_mounted+0x9e>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
     424:	00 23       	and	r16, r16
     426:	09 f4       	brne	.+2      	; 0x42a <chk_mounted+0x96>
     428:	8c c3       	rjmp	.+1816   	; 0xb42 <chk_mounted+0x7ae>
     42a:	82 fd       	sbrc	r24, 2
     42c:	8c c3       	rjmp	.+1816   	; 0xb46 <chk_mounted+0x7b2>
				return FR_WRITE_PROTECTED;
#endif
			return FR_OK;				/* The file system object is valid */
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	ab c3       	rjmp	.+1878   	; 0xb88 <chk_mounted+0x7f4>
	}

	/* The logical drive must be mounted. */
	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
     432:	d7 01       	movw	r26, r14
     434:	1c 92       	st	X, r1
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
     436:	11 96       	adiw	r26, 0x01	; 1
     438:	1c 92       	st	X, r1
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	0e 94 af 21 	call	0x435e	; 0x435e <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
     440:	80 fd       	sbrc	r24, 0
     442:	83 c3       	rjmp	.+1798   	; 0xb4a <chk_mounted+0x7b6>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
     444:	00 23       	and	r16, r16
     446:	11 f0       	breq	.+4      	; 0x44c <chk_mounted+0xb8>
     448:	82 fd       	sbrc	r24, 2
     44a:	81 c3       	rjmp	.+1794   	; 0xb4e <chk_mounted+0x7ba>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
     44c:	c7 01       	movw	r24, r14
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	ba 01       	movw	r22, r20
     454:	0e 94 2b 01 	call	0x256	; 0x256 <check_fs>
	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
     458:	81 30       	cpi	r24, 0x01	; 1
     45a:	e9 f5       	brne	.+122    	; 0x4d6 <chk_mounted+0x142>
		/* Check the partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * SZ_PTE];/* Partition table */
		if (tbl[4]) {									/* Is the partition existing? */
     45c:	f7 01       	movw	r30, r14
     45e:	ec 50       	subi	r30, 0x0C	; 12
     460:	fe 4f       	sbci	r31, 0xFE	; 254
     462:	80 81       	ld	r24, Z
     464:	88 23       	and	r24, r24
     466:	09 f4       	brne	.+2      	; 0x46a <chk_mounted+0xd6>
     468:	74 c3       	rjmp	.+1768   	; 0xb52 <chk_mounted+0x7be>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
     46a:	f7 01       	movw	r30, r14
     46c:	e5 50       	subi	r30, 0x05	; 5
     46e:	fe 4f       	sbci	r31, 0xFE	; 254
     470:	80 81       	ld	r24, Z
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	a0 e0       	ldi	r26, 0x00	; 0
     476:	b0 e0       	ldi	r27, 0x00	; 0
     478:	b8 2f       	mov	r27, r24
     47a:	aa 27       	eor	r26, r26
     47c:	99 27       	eor	r25, r25
     47e:	88 27       	eor	r24, r24
     480:	f7 01       	movw	r30, r14
     482:	e6 50       	subi	r30, 0x06	; 6
     484:	fe 4f       	sbci	r31, 0xFE	; 254
     486:	40 81       	ld	r20, Z
     488:	50 e0       	ldi	r21, 0x00	; 0
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	ba 01       	movw	r22, r20
     490:	55 27       	eor	r21, r21
     492:	44 27       	eor	r20, r20
     494:	84 2b       	or	r24, r20
     496:	95 2b       	or	r25, r21
     498:	a6 2b       	or	r26, r22
     49a:	b7 2b       	or	r27, r23
     49c:	f7 01       	movw	r30, r14
     49e:	e8 50       	subi	r30, 0x08	; 8
     4a0:	fe 4f       	sbci	r31, 0xFE	; 254
     4a2:	40 81       	ld	r20, Z
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	48 2b       	or	r20, r24
     4ac:	59 2b       	or	r21, r25
     4ae:	6a 2b       	or	r22, r26
     4b0:	7b 2b       	or	r23, r27
     4b2:	f7 01       	movw	r30, r14
     4b4:	e7 50       	subi	r30, 0x07	; 7
     4b6:	fe 4f       	sbci	r31, 0xFE	; 254
     4b8:	90 81       	ld	r25, Z
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	4c 01       	movw	r8, r24
     4be:	aa 24       	eor	r10, r10
     4c0:	bb 24       	eor	r11, r11
     4c2:	84 2a       	or	r8, r20
     4c4:	95 2a       	or	r9, r21
     4c6:	a6 2a       	or	r10, r22
     4c8:	b7 2a       	or	r11, r23
			fmt = check_fs(fs, bsect);					/* Check the partition */
     4ca:	c7 01       	movw	r24, r14
     4cc:	b5 01       	movw	r22, r10
     4ce:	a4 01       	movw	r20, r8
     4d0:	0e 94 2b 01 	call	0x256	; 0x256 <check_fs>
     4d4:	03 c0       	rjmp	.+6      	; 0x4dc <chk_mounted+0x148>
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
     4d6:	88 24       	eor	r8, r8
     4d8:	99 24       	eor	r9, r9
     4da:	54 01       	movw	r10, r8
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     4dc:	83 30       	cpi	r24, 0x03	; 3
     4de:	09 f4       	brne	.+2      	; 0x4e2 <chk_mounted+0x14e>
     4e0:	3a c3       	rjmp	.+1652   	; 0xb56 <chk_mounted+0x7c2>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
     4e2:	88 23       	and	r24, r24
     4e4:	09 f0       	breq	.+2      	; 0x4e8 <chk_mounted+0x154>
     4e6:	39 c3       	rjmp	.+1650   	; 0xb5a <chk_mounted+0x7c6>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
     4e8:	f7 01       	movw	r30, r14
     4ea:	96 ad       	sts	0x66, r25
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	25 ad       	sts	0x65, r18
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	82 2b       	or	r24, r18
     4f4:	93 2b       	or	r25, r19
     4f6:	f2 e0       	ldi	r31, 0x02	; 2
     4f8:	80 30       	cpi	r24, 0x00	; 0
     4fa:	9f 07       	cpc	r25, r31
     4fc:	09 f0       	breq	.+2      	; 0x500 <chk_mounted+0x16c>
     4fe:	2f c3       	rjmp	.+1630   	; 0xb5e <chk_mounted+0x7ca>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
     500:	f7 01       	movw	r30, r14
     502:	e7 5b       	subi	r30, 0xB7	; 183
     504:	ff 4f       	sbci	r31, 0xFF	; 255
     506:	30 81       	ld	r19, Z
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	f7 01       	movw	r30, r14
     50c:	e8 5b       	subi	r30, 0xB8	; 184
     50e:	ff 4f       	sbci	r31, 0xFF	; 255
     510:	80 81       	ld	r24, Z
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	82 2b       	or	r24, r18
     516:	93 2b       	or	r25, r19
     518:	2c 01       	movw	r4, r24
     51a:	66 24       	eor	r6, r6
     51c:	77 24       	eor	r7, r7
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
     51e:	41 14       	cp	r4, r1
     520:	51 04       	cpc	r5, r1
     522:	61 04       	cpc	r6, r1
     524:	71 04       	cpc	r7, r1
     526:	89 f5       	brne	.+98     	; 0x58a <chk_mounted+0x1f6>
     528:	f7 01       	movw	r30, r14
     52a:	e7 5a       	subi	r30, 0xA7	; 167
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	40 81       	ld	r20, Z
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	74 2f       	mov	r23, r20
     538:	66 27       	eor	r22, r22
     53a:	55 27       	eor	r21, r21
     53c:	44 27       	eor	r20, r20
     53e:	f7 01       	movw	r30, r14
     540:	e8 5a       	subi	r30, 0xA8	; 168
     542:	ff 4f       	sbci	r31, 0xFF	; 255
     544:	80 81       	ld	r24, Z
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	a0 e0       	ldi	r26, 0x00	; 0
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	dc 01       	movw	r26, r24
     54e:	99 27       	eor	r25, r25
     550:	88 27       	eor	r24, r24
     552:	48 2b       	or	r20, r24
     554:	59 2b       	or	r21, r25
     556:	6a 2b       	or	r22, r26
     558:	7b 2b       	or	r23, r27
     55a:	f7 01       	movw	r30, r14
     55c:	ea 5a       	subi	r30, 0xAA	; 170
     55e:	ff 4f       	sbci	r31, 0xFF	; 255
     560:	80 81       	ld	r24, Z
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	a0 e0       	ldi	r26, 0x00	; 0
     566:	b0 e0       	ldi	r27, 0x00	; 0
     568:	48 2b       	or	r20, r24
     56a:	59 2b       	or	r21, r25
     56c:	6a 2b       	or	r22, r26
     56e:	7b 2b       	or	r23, r27
     570:	f7 01       	movw	r30, r14
     572:	e9 5a       	subi	r30, 0xA9	; 169
     574:	ff 4f       	sbci	r31, 0xFF	; 255
     576:	90 81       	ld	r25, Z
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	a0 e0       	ldi	r26, 0x00	; 0
     57c:	b0 e0       	ldi	r27, 0x00	; 0
     57e:	2a 01       	movw	r4, r20
     580:	3b 01       	movw	r6, r22
     582:	48 2a       	or	r4, r24
     584:	59 2a       	or	r5, r25
     586:	6a 2a       	or	r6, r26
     588:	7b 2a       	or	r7, r27
	fs->fsize = fasize;
     58a:	d7 01       	movw	r26, r14
     58c:	5e 96       	adiw	r26, 0x1e	; 30
     58e:	4d 92       	st	X+, r4
     590:	5d 92       	st	X+, r5
     592:	6d 92       	st	X+, r6
     594:	7c 92       	st	X, r7
     596:	91 97       	sbiw	r26, 0x21	; 33

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
     598:	f7 01       	movw	r30, r14
     59a:	ee 5b       	subi	r30, 0xBE	; 190
     59c:	ff 4f       	sbci	r31, 0xFF	; 255
     59e:	c0 80       	ld	r12, Z
     5a0:	f7 01       	movw	r30, r14
     5a2:	c3 82       	std	Z+3, r12	; 0x03
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
     5a4:	8c 2d       	mov	r24, r12
     5a6:	81 50       	subi	r24, 0x01	; 1
     5a8:	82 30       	cpi	r24, 0x02	; 2
     5aa:	08 f0       	brcs	.+2      	; 0x5ae <chk_mounted+0x21a>
     5ac:	da c2       	rjmp	.+1460   	; 0xb62 <chk_mounted+0x7ce>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
     5ae:	d7 ac       	sts	0xa7, r29
     5b0:	d2 82       	std	Z+2, r13	; 0x02
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
     5b2:	dd 20       	and	r13, r13
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <chk_mounted+0x224>
     5b6:	d7 c2       	rjmp	.+1454   	; 0xb66 <chk_mounted+0x7d2>
     5b8:	8d 2d       	mov	r24, r13
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	9c 01       	movw	r18, r24
     5be:	21 50       	subi	r18, 0x01	; 1
     5c0:	30 40       	sbci	r19, 0x00	; 0
     5c2:	82 23       	and	r24, r18
     5c4:	93 23       	and	r25, r19
     5c6:	00 97       	sbiw	r24, 0x00	; 0
     5c8:	09 f0       	breq	.+2      	; 0x5cc <chk_mounted+0x238>
     5ca:	cf c2       	rjmp	.+1438   	; 0xb6a <chk_mounted+0x7d6>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
     5cc:	ec 5b       	subi	r30, 0xBC	; 188
     5ce:	ff 4f       	sbci	r31, 0xFF	; 255
     5d0:	30 81       	ld	r19, Z
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	f7 01       	movw	r30, r14
     5d6:	ed 5b       	subi	r30, 0xBD	; 189
     5d8:	ff 4f       	sbci	r31, 0xFF	; 255
     5da:	80 81       	ld	r24, Z
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	19 01       	movw	r2, r18
     5e0:	28 2a       	or	r2, r24
     5e2:	39 2a       	or	r3, r25
     5e4:	19 96       	adiw	r26, 0x09	; 9
     5e6:	3c 92       	st	X, r3
     5e8:	2e 92       	st	-X, r2
     5ea:	18 97       	sbiw	r26, 0x08	; 8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
     5ec:	c1 01       	movw	r24, r2
     5ee:	8f 70       	andi	r24, 0x0F	; 15
     5f0:	90 70       	andi	r25, 0x00	; 0
     5f2:	00 97       	sbiw	r24, 0x00	; 0
     5f4:	09 f0       	breq	.+2      	; 0x5f8 <chk_mounted+0x264>
     5f6:	bb c2       	rjmp	.+1398   	; 0xb6e <chk_mounted+0x7da>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
     5f8:	f7 01       	movw	r30, r14
     5fa:	ea 5b       	subi	r30, 0xBA	; 186
     5fc:	ff 4f       	sbci	r31, 0xFF	; 255
     5fe:	30 81       	ld	r19, Z
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	f7 01       	movw	r30, r14
     604:	eb 5b       	subi	r30, 0xBB	; 187
     606:	ff 4f       	sbci	r31, 0xFF	; 255
     608:	80 81       	ld	r24, Z
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	82 2b       	or	r24, r18
     60e:	93 2b       	or	r25, r19
     610:	8c 01       	movw	r16, r24
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	09 83       	std	Y+1, r16	; 0x01
     618:	1a 83       	std	Y+2, r17	; 0x02
     61a:	2b 83       	std	Y+3, r18	; 0x03
     61c:	3c 83       	std	Y+4, r19	; 0x04
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
     61e:	01 15       	cp	r16, r1
     620:	11 05       	cpc	r17, r1
     622:	21 05       	cpc	r18, r1
     624:	31 05       	cpc	r19, r1
     626:	a9 f5       	brne	.+106    	; 0x692 <chk_mounted+0x2fe>
     628:	f7 01       	movw	r30, r14
     62a:	eb 5a       	subi	r30, 0xAB	; 171
     62c:	ff 4f       	sbci	r31, 0xFF	; 255
     62e:	80 81       	ld	r24, Z
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	a0 e0       	ldi	r26, 0x00	; 0
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	78 2f       	mov	r23, r24
     638:	66 27       	eor	r22, r22
     63a:	55 27       	eor	r21, r21
     63c:	44 27       	eor	r20, r20
     63e:	f7 01       	movw	r30, r14
     640:	ec 5a       	subi	r30, 0xAC	; 172
     642:	ff 4f       	sbci	r31, 0xFF	; 255
     644:	80 81       	ld	r24, Z
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	a0 e0       	ldi	r26, 0x00	; 0
     64a:	b0 e0       	ldi	r27, 0x00	; 0
     64c:	dc 01       	movw	r26, r24
     64e:	99 27       	eor	r25, r25
     650:	88 27       	eor	r24, r24
     652:	48 2b       	or	r20, r24
     654:	59 2b       	or	r21, r25
     656:	6a 2b       	or	r22, r26
     658:	7b 2b       	or	r23, r27
     65a:	f7 01       	movw	r30, r14
     65c:	ee 5a       	subi	r30, 0xAE	; 174
     65e:	ff 4f       	sbci	r31, 0xFF	; 255
     660:	80 81       	ld	r24, Z
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	a0 e0       	ldi	r26, 0x00	; 0
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	48 2b       	or	r20, r24
     66a:	59 2b       	or	r21, r25
     66c:	6a 2b       	or	r22, r26
     66e:	7b 2b       	or	r23, r27
     670:	f7 01       	movw	r30, r14
     672:	ed 5a       	subi	r30, 0xAD	; 173
     674:	ff 4f       	sbci	r31, 0xFF	; 255
     676:	90 81       	ld	r25, Z
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	a0 e0       	ldi	r26, 0x00	; 0
     67c:	b0 e0       	ldi	r27, 0x00	; 0
     67e:	8a 01       	movw	r16, r20
     680:	9b 01       	movw	r18, r22
     682:	08 2b       	or	r16, r24
     684:	19 2b       	or	r17, r25
     686:	2a 2b       	or	r18, r26
     688:	3b 2b       	or	r19, r27
     68a:	09 83       	std	Y+1, r16	; 0x01
     68c:	1a 83       	std	Y+2, r17	; 0x02
     68e:	2b 83       	std	Y+3, r18	; 0x03
     690:	3c 83       	std	Y+4, r19	; 0x04

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
     692:	f7 01       	movw	r30, r14
     694:	ef 5b       	subi	r30, 0xBF	; 191
     696:	ff 4f       	sbci	r31, 0xFF	; 255
     698:	30 81       	ld	r19, Z
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	f7 01       	movw	r30, r14
     69e:	e0 5c       	subi	r30, 0xC0	; 192
     6a0:	ff 4f       	sbci	r31, 0xFF	; 255
     6a2:	80 81       	ld	r24, Z
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	89 01       	movw	r16, r18
     6a8:	08 2b       	or	r16, r24
     6aa:	19 2b       	or	r17, r25
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
     6ac:	01 15       	cp	r16, r1
     6ae:	11 05       	cpc	r17, r1
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <chk_mounted+0x320>
     6b2:	5f c2       	rjmp	.+1214   	; 0xb72 <chk_mounted+0x7de>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
     6b4:	2c 2d       	mov	r18, r12
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	40 e0       	ldi	r20, 0x00	; 0
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	c3 01       	movw	r24, r6
     6be:	b2 01       	movw	r22, r4
     6c0:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsi3>
     6c4:	6d 87       	std	Y+13, r22	; 0x0d
     6c6:	7e 87       	std	Y+14, r23	; 0x0e
     6c8:	8f 87       	std	Y+15, r24	; 0x0f
     6ca:	98 8b       	std	Y+16, r25	; 0x10

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIRS */
     6cc:	98 01       	movw	r18, r16
     6ce:	40 e0       	ldi	r20, 0x00	; 0
     6d0:	50 e0       	ldi	r21, 0x00	; 0
     6d2:	29 87       	std	Y+9, r18	; 0x09
     6d4:	3a 87       	std	Y+10, r19	; 0x0a
     6d6:	4b 87       	std	Y+11, r20	; 0x0b
     6d8:	5c 87       	std	Y+12, r21	; 0x0c
     6da:	c1 01       	movw	r24, r2
     6dc:	92 95       	swap	r25
     6de:	82 95       	swap	r24
     6e0:	8f 70       	andi	r24, 0x0F	; 15
     6e2:	89 27       	eor	r24, r25
     6e4:	9f 70       	andi	r25, 0x0F	; 15
     6e6:	89 27       	eor	r24, r25
     6e8:	a0 e0       	ldi	r26, 0x00	; 0
     6ea:	b0 e0       	ldi	r27, 0x00	; 0
     6ec:	82 0f       	add	r24, r18
     6ee:	93 1f       	adc	r25, r19
     6f0:	a4 1f       	adc	r26, r20
     6f2:	b5 1f       	adc	r27, r21
     6f4:	0d 85       	ldd	r16, Y+13	; 0x0d
     6f6:	1e 85       	ldd	r17, Y+14	; 0x0e
     6f8:	2f 85       	ldd	r18, Y+15	; 0x0f
     6fa:	38 89       	ldd	r19, Y+16	; 0x10
     6fc:	08 0f       	add	r16, r24
     6fe:	19 1f       	adc	r17, r25
     700:	2a 1f       	adc	r18, r26
     702:	3b 1f       	adc	r19, r27
     704:	0d 83       	std	Y+5, r16	; 0x05
     706:	1e 83       	std	Y+6, r17	; 0x06
     708:	2f 83       	std	Y+7, r18	; 0x07
     70a:	38 87       	std	Y+8, r19	; 0x08
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	9a 81       	ldd	r25, Y+2	; 0x02
     710:	ab 81       	ldd	r26, Y+3	; 0x03
     712:	bc 81       	ldd	r27, Y+4	; 0x04
     714:	80 17       	cp	r24, r16
     716:	91 07       	cpc	r25, r17
     718:	a2 07       	cpc	r26, r18
     71a:	b3 07       	cpc	r27, r19
     71c:	08 f4       	brcc	.+2      	; 0x720 <chk_mounted+0x38c>
     71e:	2b c2       	rjmp	.+1110   	; 0xb76 <chk_mounted+0x7e2>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
     720:	bc 01       	movw	r22, r24
     722:	cd 01       	movw	r24, r26
     724:	60 1b       	sub	r22, r16
     726:	71 0b       	sbc	r23, r17
     728:	82 0b       	sbc	r24, r18
     72a:	93 0b       	sbc	r25, r19
     72c:	2d 2d       	mov	r18, r13
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e0       	ldi	r20, 0x00	; 0
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	0e 94 1f 24 	call	0x483e	; 0x483e <__udivmodsi4>
     738:	89 01       	movw	r16, r18
     73a:	9a 01       	movw	r18, r20
     73c:	d9 01       	movw	r26, r18
     73e:	c8 01       	movw	r24, r16
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
     740:	01 15       	cp	r16, r1
     742:	11 05       	cpc	r17, r1
     744:	21 05       	cpc	r18, r1
     746:	31 05       	cpc	r19, r1
     748:	09 f4       	brne	.+2      	; 0x74c <chk_mounted+0x3b8>
     74a:	17 c2       	rjmp	.+1070   	; 0xb7a <chk_mounted+0x7e6>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
     74c:	06 3f       	cpi	r16, 0xF6	; 246
     74e:	ef e0       	ldi	r30, 0x0F	; 15
     750:	1e 07       	cpc	r17, r30
     752:	e0 e0       	ldi	r30, 0x00	; 0
     754:	2e 07       	cpc	r18, r30
     756:	e0 e0       	ldi	r30, 0x00	; 0
     758:	3e 07       	cpc	r19, r30
     75a:	18 f4       	brcc	.+6      	; 0x762 <chk_mounted+0x3ce>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIRS */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
     75c:	dd 24       	eor	r13, r13
     75e:	d3 94       	inc	r13
     760:	03 c0       	rjmp	.+6      	; 0x768 <chk_mounted+0x3d4>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
     762:	dd 24       	eor	r13, r13
     764:	68 94       	set
     766:	d1 f8       	bld	r13, 1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
     768:	86 3f       	cpi	r24, 0xF6	; 246
     76a:	ff ef       	ldi	r31, 0xFF	; 255
     76c:	9f 07       	cpc	r25, r31
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	af 07       	cpc	r26, r31
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	bf 07       	cpc	r27, r31
     776:	08 f0       	brcs	.+2      	; 0x77a <chk_mounted+0x3e6>
     778:	20 c2       	rjmp	.+1088   	; 0xbba <chk_mounted+0x826>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     77a:	b9 01       	movw	r22, r18
     77c:	a8 01       	movw	r20, r16
     77e:	4e 5f       	subi	r20, 0xFE	; 254
     780:	5f 4f       	sbci	r21, 0xFF	; 255
     782:	6f 4f       	sbci	r22, 0xFF	; 255
     784:	7f 4f       	sbci	r23, 0xFF	; 255
     786:	d7 01       	movw	r26, r14
     788:	5a 96       	adiw	r26, 0x1a	; 26
     78a:	4d 93       	st	X+, r20
     78c:	5d 93       	st	X+, r21
     78e:	6d 93       	st	X+, r22
     790:	7c 93       	st	X, r23
     792:	5d 97       	sbiw	r26, 0x1d	; 29
	fs->database = bsect + sysect;						/* Data start sector */
     794:	8d 81       	ldd	r24, Y+5	; 0x05
     796:	9e 81       	ldd	r25, Y+6	; 0x06
     798:	af 81       	ldd	r26, Y+7	; 0x07
     79a:	b8 85       	ldd	r27, Y+8	; 0x08
     79c:	88 0d       	add	r24, r8
     79e:	99 1d       	adc	r25, r9
     7a0:	aa 1d       	adc	r26, r10
     7a2:	bb 1d       	adc	r27, r11
     7a4:	f7 01       	movw	r30, r14
     7a6:	82 a7       	lds	r24, 0x72
     7a8:	93 a7       	lds	r25, 0x73
     7aa:	a4 a7       	lds	r26, 0x74
     7ac:	b5 a7       	lds	r27, 0x75
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     7ae:	89 85       	ldd	r24, Y+9	; 0x09
     7b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7b2:	ab 85       	ldd	r26, Y+11	; 0x0b
     7b4:	bc 85       	ldd	r27, Y+12	; 0x0c
     7b6:	88 0d       	add	r24, r8
     7b8:	99 1d       	adc	r25, r9
     7ba:	aa 1d       	adc	r26, r10
     7bc:	bb 1d       	adc	r27, r11
     7be:	82 a3       	lds	r24, 0x52
     7c0:	93 a3       	lds	r25, 0x53
     7c2:	a4 a3       	lds	r26, 0x54
     7c4:	b5 a3       	lds	r27, 0x55
	if (fmt == FS_FAT32) {
     7c6:	f3 e0       	ldi	r31, 0x03	; 3
     7c8:	df 16       	cp	r13, r31
     7ca:	09 f0       	breq	.+2      	; 0x7ce <chk_mounted+0x43a>
     7cc:	41 c0       	rjmp	.+130    	; 0x850 <chk_mounted+0x4bc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
     7ce:	21 14       	cp	r2, r1
     7d0:	31 04       	cpc	r3, r1
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <chk_mounted+0x442>
     7d4:	d4 c1       	rjmp	.+936    	; 0xb7e <chk_mounted+0x7ea>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
     7d6:	f7 01       	movw	r30, r14
     7d8:	ef 59       	subi	r30, 0x9F	; 159
     7da:	ff 4f       	sbci	r31, 0xFF	; 255
     7dc:	80 81       	ld	r24, Z
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	a0 e0       	ldi	r26, 0x00	; 0
     7e2:	b0 e0       	ldi	r27, 0x00	; 0
     7e4:	38 2f       	mov	r19, r24
     7e6:	22 27       	eor	r18, r18
     7e8:	11 27       	eor	r17, r17
     7ea:	00 27       	eor	r16, r16
     7ec:	f7 01       	movw	r30, r14
     7ee:	e0 5a       	subi	r30, 0xA0	; 160
     7f0:	ff 4f       	sbci	r31, 0xFF	; 255
     7f2:	80 81       	ld	r24, Z
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	a0 e0       	ldi	r26, 0x00	; 0
     7f8:	b0 e0       	ldi	r27, 0x00	; 0
     7fa:	dc 01       	movw	r26, r24
     7fc:	99 27       	eor	r25, r25
     7fe:	88 27       	eor	r24, r24
     800:	08 2b       	or	r16, r24
     802:	19 2b       	or	r17, r25
     804:	2a 2b       	or	r18, r26
     806:	3b 2b       	or	r19, r27
     808:	f7 01       	movw	r30, r14
     80a:	e2 5a       	subi	r30, 0xA2	; 162
     80c:	ff 4f       	sbci	r31, 0xFF	; 255
     80e:	80 81       	ld	r24, Z
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	a0 e0       	ldi	r26, 0x00	; 0
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	08 2b       	or	r16, r24
     818:	19 2b       	or	r17, r25
     81a:	2a 2b       	or	r18, r26
     81c:	3b 2b       	or	r19, r27
     81e:	f7 01       	movw	r30, r14
     820:	e1 5a       	subi	r30, 0xA1	; 161
     822:	ff 4f       	sbci	r31, 0xFF	; 255
     824:	90 81       	ld	r25, Z
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	a0 e0       	ldi	r26, 0x00	; 0
     82a:	b0 e0       	ldi	r27, 0x00	; 0
     82c:	80 2b       	or	r24, r16
     82e:	91 2b       	or	r25, r17
     830:	a2 2b       	or	r26, r18
     832:	b3 2b       	or	r27, r19
     834:	f7 01       	movw	r30, r14
     836:	86 a3       	lds	r24, 0x56
     838:	97 a3       	lds	r25, 0x57
     83a:	a0 a7       	lds	r26, 0x70
     83c:	b1 a7       	lds	r27, 0x71
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
     83e:	44 0f       	add	r20, r20
     840:	55 1f       	adc	r21, r21
     842:	66 1f       	adc	r22, r22
     844:	77 1f       	adc	r23, r23
     846:	44 0f       	add	r20, r20
     848:	55 1f       	adc	r21, r21
     84a:	66 1f       	adc	r22, r22
     84c:	77 1f       	adc	r23, r23
     84e:	2f c0       	rjmp	.+94     	; 0x8ae <chk_mounted+0x51a>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
     850:	21 14       	cp	r2, r1
     852:	31 04       	cpc	r3, r1
     854:	09 f4       	brne	.+2      	; 0x858 <chk_mounted+0x4c4>
     856:	95 c1       	rjmp	.+810    	; 0xb82 <chk_mounted+0x7ee>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
     858:	0d 85       	ldd	r16, Y+13	; 0x0d
     85a:	1e 85       	ldd	r17, Y+14	; 0x0e
     85c:	2f 85       	ldd	r18, Y+15	; 0x0f
     85e:	38 89       	ldd	r19, Y+16	; 0x10
     860:	80 0f       	add	r24, r16
     862:	91 1f       	adc	r25, r17
     864:	a2 1f       	adc	r26, r18
     866:	b3 1f       	adc	r27, r19
     868:	f7 01       	movw	r30, r14
     86a:	86 a3       	lds	r24, 0x56
     86c:	97 a3       	lds	r25, 0x57
     86e:	a0 a7       	lds	r26, 0x70
     870:	b1 a7       	lds	r27, 0x71
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
     872:	f2 e0       	ldi	r31, 0x02	; 2
     874:	df 16       	cp	r13, r31
     876:	29 f4       	brne	.+10     	; 0x882 <chk_mounted+0x4ee>
     878:	44 0f       	add	r20, r20
     87a:	55 1f       	adc	r21, r21
     87c:	66 1f       	adc	r22, r22
     87e:	77 1f       	adc	r23, r23
     880:	16 c0       	rjmp	.+44     	; 0x8ae <chk_mounted+0x51a>
     882:	db 01       	movw	r26, r22
     884:	ca 01       	movw	r24, r20
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	aa 1f       	adc	r26, r26
     88c:	bb 1f       	adc	r27, r27
     88e:	84 0f       	add	r24, r20
     890:	95 1f       	adc	r25, r21
     892:	a6 1f       	adc	r26, r22
     894:	b7 1f       	adc	r27, r23
     896:	b6 95       	lsr	r27
     898:	a7 95       	ror	r26
     89a:	97 95       	ror	r25
     89c:	87 95       	ror	r24
     89e:	41 70       	andi	r20, 0x01	; 1
     8a0:	50 70       	andi	r21, 0x00	; 0
     8a2:	60 70       	andi	r22, 0x00	; 0
     8a4:	70 70       	andi	r23, 0x00	; 0
     8a6:	48 0f       	add	r20, r24
     8a8:	59 1f       	adc	r21, r25
     8aa:	6a 1f       	adc	r22, r26
     8ac:	7b 1f       	adc	r23, r27
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
     8ae:	db 01       	movw	r26, r22
     8b0:	ca 01       	movw	r24, r20
     8b2:	81 50       	subi	r24, 0x01	; 1
     8b4:	9e 4f       	sbci	r25, 0xFE	; 254
     8b6:	af 4f       	sbci	r26, 0xFF	; 255
     8b8:	bf 4f       	sbci	r27, 0xFF	; 255
     8ba:	07 2e       	mov	r0, r23
     8bc:	79 e0       	ldi	r23, 0x09	; 9
     8be:	b6 95       	lsr	r27
     8c0:	a7 95       	ror	r26
     8c2:	97 95       	ror	r25
     8c4:	87 95       	ror	r24
     8c6:	7a 95       	dec	r23
     8c8:	d1 f7       	brne	.-12     	; 0x8be <chk_mounted+0x52a>
     8ca:	70 2d       	mov	r23, r0
     8cc:	48 16       	cp	r4, r24
     8ce:	59 06       	cpc	r5, r25
     8d0:	6a 06       	cpc	r6, r26
     8d2:	7b 06       	cpc	r7, r27
     8d4:	08 f4       	brcc	.+2      	; 0x8d8 <chk_mounted+0x544>
     8d6:	57 c1       	rjmp	.+686    	; 0xb86 <chk_mounted+0x7f2>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
     8d8:	8f ef       	ldi	r24, 0xFF	; 255
     8da:	9f ef       	ldi	r25, 0xFF	; 255
     8dc:	dc 01       	movw	r26, r24
     8de:	f7 01       	movw	r30, r14
     8e0:	86 87       	std	Z+14, r24	; 0x0e
     8e2:	97 87       	std	Z+15, r25	; 0x0f
     8e4:	a0 8b       	std	Z+16, r26	; 0x10
     8e6:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
     8e8:	12 86       	std	Z+10, r1	; 0x0a
     8ea:	13 86       	std	Z+11, r1	; 0x0b
     8ec:	14 86       	std	Z+12, r1	; 0x0c
     8ee:	15 86       	std	Z+13, r1	; 0x0d

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
     8f0:	b3 e0       	ldi	r27, 0x03	; 3
     8f2:	db 16       	cp	r13, r27
     8f4:	09 f0       	breq	.+2      	; 0x8f8 <chk_mounted+0x564>
     8f6:	04 c1       	rjmp	.+520    	; 0xb00 <chk_mounted+0x76c>
	 	fs->fsi_flag = 0;
     8f8:	15 82       	std	Z+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
     8fa:	ed 59       	subi	r30, 0x9D	; 157
     8fc:	ff 4f       	sbci	r31, 0xFF	; 255
     8fe:	30 81       	ld	r19, Z
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	f7 01       	movw	r30, r14
     904:	ee 59       	subi	r30, 0x9E	; 158
     906:	ff 4f       	sbci	r31, 0xFF	; 255
     908:	80 81       	ld	r24, Z
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	82 2b       	or	r24, r18
     90e:	93 2b       	or	r25, r19
     910:	a0 e0       	ldi	r26, 0x00	; 0
     912:	b0 e0       	ldi	r27, 0x00	; 0
     914:	a5 01       	movw	r20, r10
     916:	94 01       	movw	r18, r8
     918:	28 0f       	add	r18, r24
     91a:	39 1f       	adc	r19, r25
     91c:	4a 1f       	adc	r20, r26
     91e:	5b 1f       	adc	r21, r27
     920:	d7 01       	movw	r26, r14
     922:	52 96       	adiw	r26, 0x12	; 18
     924:	2d 93       	st	X+, r18
     926:	3d 93       	st	X+, r19
     928:	4d 93       	st	X+, r20
     92a:	5c 93       	st	X, r21
     92c:	55 97       	sbiw	r26, 0x15	; 21
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
     92e:	b7 01       	movw	r22, r14
     930:	6e 5c       	subi	r22, 0xCE	; 206
     932:	7f 4f       	sbci	r23, 0xFF	; 255
     934:	11 96       	adiw	r26, 0x01	; 1
     936:	8c 91       	ld	r24, X
     938:	01 e0       	ldi	r16, 0x01	; 1
     93a:	10 e0       	ldi	r17, 0x00	; 0
     93c:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <disk_read>
     940:	88 23       	and	r24, r24
     942:	09 f0       	breq	.+2      	; 0x946 <chk_mounted+0x5b2>
     944:	dd c0       	rjmp	.+442    	; 0xb00 <chk_mounted+0x76c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
     946:	f7 01       	movw	r30, r14
     948:	ef 5c       	subi	r30, 0xCF	; 207
     94a:	fd 4f       	sbci	r31, 0xFD	; 253
     94c:	30 81       	ld	r19, Z
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	f7 01       	movw	r30, r14
     952:	e0 5d       	subi	r30, 0xD0	; 208
     954:	fd 4f       	sbci	r31, 0xFD	; 253
     956:	80 81       	ld	r24, Z
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	82 2b       	or	r24, r18
     95c:	93 2b       	or	r25, r19

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
     95e:	ba ea       	ldi	r27, 0xAA	; 170
     960:	85 35       	cpi	r24, 0x55	; 85
     962:	9b 07       	cpc	r25, r27
     964:	09 f0       	breq	.+2      	; 0x968 <chk_mounted+0x5d4>
     966:	cc c0       	rjmp	.+408    	; 0xb00 <chk_mounted+0x76c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
     968:	f7 01       	movw	r30, r14
     96a:	45 a9       	sts	0x45, r20
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	74 2f       	mov	r23, r20
     974:	66 27       	eor	r22, r22
     976:	55 27       	eor	r21, r21
     978:	44 27       	eor	r20, r20
     97a:	84 a9       	sts	0x44, r24
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	a0 e0       	ldi	r26, 0x00	; 0
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	dc 01       	movw	r26, r24
     984:	99 27       	eor	r25, r25
     986:	88 27       	eor	r24, r24
     988:	48 2b       	or	r20, r24
     98a:	59 2b       	or	r21, r25
     98c:	6a 2b       	or	r22, r26
     98e:	7b 2b       	or	r23, r27
     990:	82 a9       	sts	0x42, r24
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	a0 e0       	ldi	r26, 0x00	; 0
     996:	b0 e0       	ldi	r27, 0x00	; 0
     998:	48 2b       	or	r20, r24
     99a:	59 2b       	or	r21, r25
     99c:	6a 2b       	or	r22, r26
     99e:	7b 2b       	or	r23, r27
     9a0:	93 a9       	sts	0x43, r25
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	a0 e0       	ldi	r26, 0x00	; 0
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	84 2b       	or	r24, r20
     9aa:	95 2b       	or	r25, r21
     9ac:	a6 2b       	or	r26, r22
     9ae:	b7 2b       	or	r27, r23
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
     9b0:	82 35       	cpi	r24, 0x52	; 82
     9b2:	f2 e5       	ldi	r31, 0x52	; 82
     9b4:	9f 07       	cpc	r25, r31
     9b6:	f1 e6       	ldi	r31, 0x61	; 97
     9b8:	af 07       	cpc	r26, r31
     9ba:	f1 e4       	ldi	r31, 0x41	; 65
     9bc:	bf 07       	cpc	r27, r31
     9be:	09 f0       	breq	.+2      	; 0x9c2 <chk_mounted+0x62e>
     9c0:	9f c0       	rjmp	.+318    	; 0xb00 <chk_mounted+0x76c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
     9c2:	f7 01       	movw	r30, r14
     9c4:	e7 5e       	subi	r30, 0xE7	; 231
     9c6:	fd 4f       	sbci	r31, 0xFD	; 253
     9c8:	80 81       	ld	r24, Z
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	a0 e0       	ldi	r26, 0x00	; 0
     9ce:	b0 e0       	ldi	r27, 0x00	; 0
     9d0:	b8 2f       	mov	r27, r24
     9d2:	aa 27       	eor	r26, r26
     9d4:	99 27       	eor	r25, r25
     9d6:	88 27       	eor	r24, r24
     9d8:	f7 01       	movw	r30, r14
     9da:	e8 5e       	subi	r30, 0xE8	; 232
     9dc:	fd 4f       	sbci	r31, 0xFD	; 253
     9de:	40 81       	ld	r20, Z
     9e0:	50 e0       	ldi	r21, 0x00	; 0
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	ba 01       	movw	r22, r20
     9e8:	55 27       	eor	r21, r21
     9ea:	44 27       	eor	r20, r20
     9ec:	84 2b       	or	r24, r20
     9ee:	95 2b       	or	r25, r21
     9f0:	a6 2b       	or	r26, r22
     9f2:	b7 2b       	or	r27, r23
     9f4:	f7 01       	movw	r30, r14
     9f6:	ea 5e       	subi	r30, 0xEA	; 234
     9f8:	fd 4f       	sbci	r31, 0xFD	; 253
     9fa:	40 81       	ld	r20, Z
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	48 2b       	or	r20, r24
     a04:	59 2b       	or	r21, r25
     a06:	6a 2b       	or	r22, r26
     a08:	7b 2b       	or	r23, r27
     a0a:	f7 01       	movw	r30, r14
     a0c:	e9 5e       	subi	r30, 0xE9	; 233
     a0e:	fd 4f       	sbci	r31, 0xFD	; 253
     a10:	90 81       	ld	r25, Z
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	a0 e0       	ldi	r26, 0x00	; 0
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	84 2b       	or	r24, r20
     a1a:	95 2b       	or	r25, r21
     a1c:	a6 2b       	or	r26, r22
     a1e:	b7 2b       	or	r27, r23
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
     a20:	82 37       	cpi	r24, 0x72	; 114
     a22:	02 e7       	ldi	r16, 0x72	; 114
     a24:	90 07       	cpc	r25, r16
     a26:	01 e4       	ldi	r16, 0x41	; 65
     a28:	a0 07       	cpc	r26, r16
     a2a:	01 e6       	ldi	r16, 0x61	; 97
     a2c:	b0 07       	cpc	r27, r16
     a2e:	09 f0       	breq	.+2      	; 0xa32 <chk_mounted+0x69e>
     a30:	67 c0       	rjmp	.+206    	; 0xb00 <chk_mounted+0x76c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
     a32:	f7 01       	movw	r30, r14
     a34:	ef 5d       	subi	r30, 0xDF	; 223
     a36:	fd 4f       	sbci	r31, 0xFD	; 253
     a38:	80 81       	ld	r24, Z
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	a0 e0       	ldi	r26, 0x00	; 0
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	b8 2f       	mov	r27, r24
     a42:	aa 27       	eor	r26, r26
     a44:	99 27       	eor	r25, r25
     a46:	88 27       	eor	r24, r24
     a48:	f7 01       	movw	r30, r14
     a4a:	e0 5e       	subi	r30, 0xE0	; 224
     a4c:	fd 4f       	sbci	r31, 0xFD	; 253
     a4e:	40 81       	ld	r20, Z
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	ba 01       	movw	r22, r20
     a58:	55 27       	eor	r21, r21
     a5a:	44 27       	eor	r20, r20
     a5c:	84 2b       	or	r24, r20
     a5e:	95 2b       	or	r25, r21
     a60:	a6 2b       	or	r26, r22
     a62:	b7 2b       	or	r27, r23
     a64:	f7 01       	movw	r30, r14
     a66:	e2 5e       	subi	r30, 0xE2	; 226
     a68:	fd 4f       	sbci	r31, 0xFD	; 253
     a6a:	40 81       	ld	r20, Z
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	48 2b       	or	r20, r24
     a74:	59 2b       	or	r21, r25
     a76:	6a 2b       	or	r22, r26
     a78:	7b 2b       	or	r23, r27
     a7a:	f7 01       	movw	r30, r14
     a7c:	e1 5e       	subi	r30, 0xE1	; 225
     a7e:	fd 4f       	sbci	r31, 0xFD	; 253
     a80:	90 81       	ld	r25, Z
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	a0 e0       	ldi	r26, 0x00	; 0
     a86:	b0 e0       	ldi	r27, 0x00	; 0
     a88:	84 2b       	or	r24, r20
     a8a:	95 2b       	or	r25, r21
     a8c:	a6 2b       	or	r26, r22
     a8e:	b7 2b       	or	r27, r23
     a90:	f7 01       	movw	r30, r14
     a92:	82 87       	std	Z+10, r24	; 0x0a
     a94:	93 87       	std	Z+11, r25	; 0x0b
     a96:	a4 87       	std	Z+12, r26	; 0x0c
     a98:	b5 87       	std	Z+13, r27	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
     a9a:	e3 5e       	subi	r30, 0xE3	; 227
     a9c:	fd 4f       	sbci	r31, 0xFD	; 253
     a9e:	80 81       	ld	r24, Z
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	a0 e0       	ldi	r26, 0x00	; 0
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	b8 2f       	mov	r27, r24
     aa8:	aa 27       	eor	r26, r26
     aaa:	99 27       	eor	r25, r25
     aac:	88 27       	eor	r24, r24
     aae:	f7 01       	movw	r30, r14
     ab0:	e4 5e       	subi	r30, 0xE4	; 228
     ab2:	fd 4f       	sbci	r31, 0xFD	; 253
     ab4:	40 81       	ld	r20, Z
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	ba 01       	movw	r22, r20
     abe:	55 27       	eor	r21, r21
     ac0:	44 27       	eor	r20, r20
     ac2:	84 2b       	or	r24, r20
     ac4:	95 2b       	or	r25, r21
     ac6:	a6 2b       	or	r26, r22
     ac8:	b7 2b       	or	r27, r23
     aca:	f7 01       	movw	r30, r14
     acc:	e6 5e       	subi	r30, 0xE6	; 230
     ace:	fd 4f       	sbci	r31, 0xFD	; 253
     ad0:	40 81       	ld	r20, Z
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	48 2b       	or	r20, r24
     ada:	59 2b       	or	r21, r25
     adc:	6a 2b       	or	r22, r26
     ade:	7b 2b       	or	r23, r27
     ae0:	f7 01       	movw	r30, r14
     ae2:	e5 5e       	subi	r30, 0xE5	; 229
     ae4:	fd 4f       	sbci	r31, 0xFD	; 253
     ae6:	90 81       	ld	r25, Z
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	84 2b       	or	r24, r20
     af0:	95 2b       	or	r25, r21
     af2:	a6 2b       	or	r26, r22
     af4:	b7 2b       	or	r27, r23
     af6:	f7 01       	movw	r30, r14
     af8:	86 87       	std	Z+14, r24	; 0x0e
     afa:	97 87       	std	Z+15, r25	; 0x0f
     afc:	a0 8b       	std	Z+16, r26	; 0x10
     afe:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
     b00:	d7 01       	movw	r26, r14
     b02:	dc 92       	st	X, r13
	fs->id = ++Fsid;		/* File system mount ID */
     b04:	80 91 1f 01 	lds	r24, 0x011F
     b08:	90 91 20 01 	lds	r25, 0x0120
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	90 93 20 01 	sts	0x0120, r25
     b12:	80 93 1f 01 	sts	0x011F, r24
     b16:	17 96       	adiw	r26, 0x07	; 7
     b18:	9c 93       	st	X, r25
     b1a:	8e 93       	st	-X, r24
     b1c:	16 97       	sbiw	r26, 0x06	; 6
	fs->winsect = 0;		/* Invalidate sector cache */
     b1e:	f7 01       	movw	r30, r14
     b20:	16 a6       	lds	r17, 0xb6
     b22:	17 a6       	lds	r17, 0xb7
     b24:	10 aa       	sts	0x90, r17
     b26:	11 aa       	sts	0x91, r17
	fs->wflag = 0;
     b28:	14 82       	std	Z+4, r1	; 0x04
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
     b2a:	56 96       	adiw	r26, 0x16	; 22
     b2c:	1d 92       	st	X+, r1
     b2e:	1d 92       	st	X+, r1
     b30:	1d 92       	st	X+, r1
     b32:	1c 92       	st	X, r1
     b34:	59 97       	sbiw	r26, 0x19	; 25
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	27 c0       	rjmp	.+78     	; 0xb88 <chk_mounted+0x7f4>
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
     b3a:	8b e0       	ldi	r24, 0x0B	; 11
     b3c:	25 c0       	rjmp	.+74     	; 0xb88 <chk_mounted+0x7f4>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     b3e:	8c e0       	ldi	r24, 0x0C	; 12
     b40:	23 c0       	rjmp	.+70     	; 0xb88 <chk_mounted+0x7f4>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
#endif
			return FR_OK;				/* The file system object is valid */
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	21 c0       	rjmp	.+66     	; 0xb88 <chk_mounted+0x7f4>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
     b46:	8a e0       	ldi	r24, 0x0A	; 10
     b48:	1f c0       	rjmp	.+62     	; 0xb88 <chk_mounted+0x7f4>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	1d c0       	rjmp	.+58     	; 0xb88 <chk_mounted+0x7f4>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
     b4e:	8a e0       	ldi	r24, 0x0A	; 10
     b50:	1b c0       	rjmp	.+54     	; 0xb88 <chk_mounted+0x7f4>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
     b52:	8d e0       	ldi	r24, 0x0D	; 13
     b54:	19 c0       	rjmp	.+50     	; 0xb88 <chk_mounted+0x7f4>
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	17 c0       	rjmp	.+46     	; 0xb88 <chk_mounted+0x7f4>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
     b5a:	8d e0       	ldi	r24, 0x0D	; 13
     b5c:	15 c0       	rjmp	.+42     	; 0xb88 <chk_mounted+0x7f4>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
     b5e:	8d e0       	ldi	r24, 0x0D	; 13
     b60:	13 c0       	rjmp	.+38     	; 0xb88 <chk_mounted+0x7f4>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
     b62:	8d e0       	ldi	r24, 0x0D	; 13
     b64:	11 c0       	rjmp	.+34     	; 0xb88 <chk_mounted+0x7f4>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
     b66:	8d e0       	ldi	r24, 0x0D	; 13
     b68:	0f c0       	rjmp	.+30     	; 0xb88 <chk_mounted+0x7f4>
     b6a:	8d e0       	ldi	r24, 0x0D	; 13
     b6c:	0d c0       	rjmp	.+26     	; 0xb88 <chk_mounted+0x7f4>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
     b6e:	8d e0       	ldi	r24, 0x0D	; 13
     b70:	0b c0       	rjmp	.+22     	; 0xb88 <chk_mounted+0x7f4>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
     b72:	8d e0       	ldi	r24, 0x0D	; 13
     b74:	09 c0       	rjmp	.+18     	; 0xb88 <chk_mounted+0x7f4>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIRS */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
     b76:	8d e0       	ldi	r24, 0x0D	; 13
     b78:	07 c0       	rjmp	.+14     	; 0xb88 <chk_mounted+0x7f4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
     b7a:	8d e0       	ldi	r24, 0x0D	; 13
     b7c:	05 c0       	rjmp	.+10     	; 0xb88 <chk_mounted+0x7f4>
	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
     b7e:	8d e0       	ldi	r24, 0x0D	; 13
     b80:	03 c0       	rjmp	.+6      	; 0xb88 <chk_mounted+0x7f4>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
     b82:	8d e0       	ldi	r24, 0x0D	; 13
     b84:	01 c0       	rjmp	.+2      	; 0xb88 <chk_mounted+0x7f4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;
     b86:	8d e0       	ldi	r24, 0x0D	; 13
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
     b88:	60 96       	adiw	r28, 0x10	; 16
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	f8 94       	cli
     b8e:	de bf       	out	0x3e, r29	; 62
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	cd bf       	out	0x3d, r28	; 61
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	df 90       	pop	r13
     ba2:	cf 90       	pop	r12
     ba4:	bf 90       	pop	r11
     ba6:	af 90       	pop	r10
     ba8:	9f 90       	pop	r9
     baa:	8f 90       	pop	r8
     bac:	7f 90       	pop	r7
     bae:	6f 90       	pop	r6
     bb0:	5f 90       	pop	r5
     bb2:	4f 90       	pop	r4
     bb4:	3f 90       	pop	r3
     bb6:	2f 90       	pop	r2
     bb8:	08 95       	ret
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     bba:	b9 01       	movw	r22, r18
     bbc:	a8 01       	movw	r20, r16
     bbe:	4e 5f       	subi	r20, 0xFE	; 254
     bc0:	5f 4f       	sbci	r21, 0xFF	; 255
     bc2:	6f 4f       	sbci	r22, 0xFF	; 255
     bc4:	7f 4f       	sbci	r23, 0xFF	; 255
     bc6:	f7 01       	movw	r30, r14
     bc8:	42 8f       	std	Z+26, r20	; 0x1a
     bca:	53 8f       	std	Z+27, r21	; 0x1b
     bcc:	64 8f       	std	Z+28, r22	; 0x1c
     bce:	75 8f       	std	Z+29, r23	; 0x1d
	fs->database = bsect + sysect;						/* Data start sector */
     bd0:	8d 81       	ldd	r24, Y+5	; 0x05
     bd2:	9e 81       	ldd	r25, Y+6	; 0x06
     bd4:	af 81       	ldd	r26, Y+7	; 0x07
     bd6:	b8 85       	ldd	r27, Y+8	; 0x08
     bd8:	88 0d       	add	r24, r8
     bda:	99 1d       	adc	r25, r9
     bdc:	aa 1d       	adc	r26, r10
     bde:	bb 1d       	adc	r27, r11
     be0:	82 a7       	lds	r24, 0x72
     be2:	93 a7       	lds	r25, 0x73
     be4:	a4 a7       	lds	r26, 0x74
     be6:	b5 a7       	lds	r27, 0x75
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     be8:	89 85       	ldd	r24, Y+9	; 0x09
     bea:	9a 85       	ldd	r25, Y+10	; 0x0a
     bec:	ab 85       	ldd	r26, Y+11	; 0x0b
     bee:	bc 85       	ldd	r27, Y+12	; 0x0c
     bf0:	88 0d       	add	r24, r8
     bf2:	99 1d       	adc	r25, r9
     bf4:	aa 1d       	adc	r26, r10
     bf6:	bb 1d       	adc	r27, r11
     bf8:	82 a3       	lds	r24, 0x52
     bfa:	93 a3       	lds	r25, 0x53
     bfc:	a4 a3       	lds	r26, 0x54
     bfe:	b5 a3       	lds	r27, 0x55
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
     c00:	0f 2e       	mov	r0, r31
     c02:	f3 e0       	ldi	r31, 0x03	; 3
     c04:	df 2e       	mov	r13, r31
     c06:	f0 2d       	mov	r31, r0
     c08:	e2 cd       	rjmp	.-1084   	; 0x7ce <chk_mounted+0x43a>

00000c0a <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
     c0a:	4f 92       	push	r4
     c0c:	5f 92       	push	r5
     c0e:	6f 92       	push	r6
     c10:	7f 92       	push	r7
     c12:	8f 92       	push	r8
     c14:	9f 92       	push	r9
     c16:	af 92       	push	r10
     c18:	bf 92       	push	r11
     c1a:	cf 92       	push	r12
     c1c:	df 92       	push	r13
     c1e:	ef 92       	push	r14
     c20:	ff 92       	push	r15
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
     c28:	5c 01       	movw	r10, r24
     c2a:	2a 01       	movw	r4, r20
     c2c:	3b 01       	movw	r6, r22
	DWORD wsect;


	wsect = fs->winsect;
     c2e:	fc 01       	movw	r30, r24
     c30:	c6 a4       	lds	r28, 0xa6
     c32:	d7 a4       	lds	r29, 0xa7
     c34:	e0 a8       	sts	0x00, r30
     c36:	f1 a8       	sts	0x81, r31
	if (wsect != sector) {	/* Changed current window */
     c38:	c4 16       	cp	r12, r20
     c3a:	d5 06       	cpc	r13, r21
     c3c:	e6 06       	cpc	r14, r22
     c3e:	f7 06       	cpc	r15, r23
     c40:	09 f4       	brne	.+2      	; 0xc44 <move_window+0x3a>
     c42:	57 c0       	rjmp	.+174    	; 0xcf2 <move_window+0xe8>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
     c44:	84 81       	ldd	r24, Z+4	; 0x04
     c46:	88 23       	and	r24, r24
     c48:	e1 f1       	breq	.+120    	; 0xcc2 <move_window+0xb8>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
     c4a:	0f 2e       	mov	r0, r31
     c4c:	f2 e3       	ldi	r31, 0x32	; 50
     c4e:	8f 2e       	mov	r8, r31
     c50:	99 24       	eor	r9, r9
     c52:	f0 2d       	mov	r31, r0
     c54:	8a 0c       	add	r8, r10
     c56:	9b 1c       	adc	r9, r11
     c58:	81 81       	ldd	r24, Z+1	; 0x01
     c5a:	b4 01       	movw	r22, r8
     c5c:	a7 01       	movw	r20, r14
     c5e:	96 01       	movw	r18, r12
     c60:	01 e0       	ldi	r16, 0x01	; 1
     c62:	10 e0       	ldi	r17, 0x00	; 0
     c64:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <disk_write>
     c68:	88 23       	and	r24, r24
     c6a:	09 f0       	breq	.+2      	; 0xc6e <move_window+0x64>
     c6c:	44 c0       	rjmp	.+136    	; 0xcf6 <move_window+0xec>
				return FR_DISK_ERR;
			fs->wflag = 0;
     c6e:	f5 01       	movw	r30, r10
     c70:	14 82       	std	Z+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
     c72:	46 8d       	ldd	r20, Z+30	; 0x1e
     c74:	57 8d       	ldd	r21, Z+31	; 0x1f
     c76:	60 a1       	lds	r22, 0x40
     c78:	71 a1       	lds	r23, 0x41
     c7a:	82 a1       	lds	r24, 0x42
     c7c:	93 a1       	lds	r25, 0x43
     c7e:	a4 a1       	lds	r26, 0x44
     c80:	b5 a1       	lds	r27, 0x45
     c82:	84 0f       	add	r24, r20
     c84:	95 1f       	adc	r25, r21
     c86:	a6 1f       	adc	r26, r22
     c88:	b7 1f       	adc	r27, r23
     c8a:	c8 16       	cp	r12, r24
     c8c:	d9 06       	cpc	r13, r25
     c8e:	ea 06       	cpc	r14, r26
     c90:	fb 06       	cpc	r15, r27
     c92:	b8 f4       	brcc	.+46     	; 0xcc2 <move_window+0xb8>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
     c94:	c3 81       	ldd	r28, Z+3	; 0x03
     c96:	c2 30       	cpi	r28, 0x02	; 2
     c98:	a0 f0       	brcs	.+40     	; 0xcc2 <move_window+0xb8>
					wsect += fs->fsize;
     c9a:	f5 01       	movw	r30, r10
     c9c:	86 8d       	ldd	r24, Z+30	; 0x1e
     c9e:	97 8d       	ldd	r25, Z+31	; 0x1f
     ca0:	a0 a1       	lds	r26, 0x40
     ca2:	b1 a1       	lds	r27, 0x41
     ca4:	c8 0e       	add	r12, r24
     ca6:	d9 1e       	adc	r13, r25
     ca8:	ea 1e       	adc	r14, r26
     caa:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
     cac:	81 81       	ldd	r24, Z+1	; 0x01
     cae:	b4 01       	movw	r22, r8
     cb0:	a7 01       	movw	r20, r14
     cb2:	96 01       	movw	r18, r12
     cb4:	01 e0       	ldi	r16, 0x01	; 1
     cb6:	10 e0       	ldi	r17, 0x00	; 0
     cb8:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
     cbc:	c1 50       	subi	r28, 0x01	; 1
     cbe:	c1 30       	cpi	r28, 0x01	; 1
     cc0:	61 f7       	brne	.-40     	; 0xc9a <move_window+0x90>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
     cc2:	41 14       	cp	r4, r1
     cc4:	51 04       	cpc	r5, r1
     cc6:	61 04       	cpc	r6, r1
     cc8:	71 04       	cpc	r7, r1
     cca:	b9 f0       	breq	.+46     	; 0xcfa <move_window+0xf0>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
     ccc:	b5 01       	movw	r22, r10
     cce:	6e 5c       	subi	r22, 0xCE	; 206
     cd0:	7f 4f       	sbci	r23, 0xFF	; 255
     cd2:	f5 01       	movw	r30, r10
     cd4:	81 81       	ldd	r24, Z+1	; 0x01
     cd6:	a3 01       	movw	r20, r6
     cd8:	92 01       	movw	r18, r4
     cda:	01 e0       	ldi	r16, 0x01	; 1
     cdc:	10 e0       	ldi	r17, 0x00	; 0
     cde:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <disk_read>
     ce2:	88 23       	and	r24, r24
     ce4:	61 f4       	brne	.+24     	; 0xcfe <move_window+0xf4>
				return FR_DISK_ERR;
			fs->winsect = sector;
     ce6:	f5 01       	movw	r30, r10
     ce8:	46 a6       	lds	r20, 0xb6
     cea:	57 a6       	lds	r21, 0xb7
     cec:	60 aa       	sts	0x90, r22
     cee:	71 aa       	sts	0x91, r23
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <move_window+0xf6>
		}
	}

	return FR_OK;
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <move_window+0xf6>
	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	03 c0       	rjmp	.+6      	; 0xd00 <move_window+0xf6>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <move_window+0xf6>
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	ef 90       	pop	r14
     d0a:	df 90       	pop	r13
     d0c:	cf 90       	pop	r12
     d0e:	bf 90       	pop	r11
     d10:	af 90       	pop	r10
     d12:	9f 90       	pop	r9
     d14:	8f 90       	pop	r8
     d16:	7f 90       	pop	r7
     d18:	6f 90       	pop	r6
     d1a:	5f 90       	pop	r5
     d1c:	4f 90       	pop	r4
     d1e:	08 95       	ret

00000d20 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
     d20:	ef 92       	push	r14
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	7c 01       	movw	r14, r24
	FRESULT res;


	res = move_window(fs, 0);
     d2c:	40 e0       	ldi	r20, 0x00	; 0
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	ba 01       	movw	r22, r20
     d32:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
     d36:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
     d38:	88 23       	and	r24, r24
     d3a:	09 f0       	breq	.+2      	; 0xd3e <sync+0x1e>
     d3c:	77 c0       	rjmp	.+238    	; 0xe2c <sync+0x10c>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
     d3e:	f7 01       	movw	r30, r14
     d40:	80 81       	ld	r24, Z
     d42:	83 30       	cpi	r24, 0x03	; 3
     d44:	09 f0       	breq	.+2      	; 0xd48 <sync+0x28>
     d46:	69 c0       	rjmp	.+210    	; 0xe1a <sync+0xfa>
     d48:	85 81       	ldd	r24, Z+5	; 0x05
     d4a:	88 23       	and	r24, r24
     d4c:	09 f4       	brne	.+2      	; 0xd50 <sync+0x30>
     d4e:	65 c0       	rjmp	.+202    	; 0xe1a <sync+0xfa>
			fs->winsect = 0;
     d50:	16 a6       	lds	r17, 0xb6
     d52:	17 a6       	lds	r17, 0xb7
     d54:	10 aa       	sts	0x90, r17
     d56:	11 aa       	sts	0x91, r17
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
     d58:	87 01       	movw	r16, r14
     d5a:	0e 5c       	subi	r16, 0xCE	; 206
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	c8 01       	movw	r24, r16
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	40 e0       	ldi	r20, 0x00	; 0
     d66:	52 e0       	ldi	r21, 0x02	; 2
     d68:	0e 94 75 00 	call	0xea	; 0xea <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
     d6c:	f7 01       	movw	r30, r14
     d6e:	e0 5d       	subi	r30, 0xD0	; 208
     d70:	fd 4f       	sbci	r31, 0xFD	; 253
     d72:	85 e5       	ldi	r24, 0x55	; 85
     d74:	80 83       	st	Z, r24
     d76:	f7 01       	movw	r30, r14
     d78:	ef 5c       	subi	r30, 0xCF	; 207
     d7a:	fd 4f       	sbci	r31, 0xFD	; 253
     d7c:	8a ea       	ldi	r24, 0xAA	; 170
     d7e:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
     d80:	82 e5       	ldi	r24, 0x52	; 82
     d82:	f7 01       	movw	r30, r14
     d84:	82 ab       	sts	0x52, r24
     d86:	83 ab       	sts	0x53, r24
     d88:	81 e6       	ldi	r24, 0x61	; 97
     d8a:	84 ab       	sts	0x54, r24
     d8c:	91 e4       	ldi	r25, 0x41	; 65
     d8e:	95 ab       	sts	0x55, r25
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
     d90:	ea 5e       	subi	r30, 0xEA	; 234
     d92:	fd 4f       	sbci	r31, 0xFD	; 253
     d94:	22 e7       	ldi	r18, 0x72	; 114
     d96:	20 83       	st	Z, r18
     d98:	f7 01       	movw	r30, r14
     d9a:	e9 5e       	subi	r30, 0xE9	; 233
     d9c:	fd 4f       	sbci	r31, 0xFD	; 253
     d9e:	20 83       	st	Z, r18
     da0:	f7 01       	movw	r30, r14
     da2:	e8 5e       	subi	r30, 0xE8	; 232
     da4:	fd 4f       	sbci	r31, 0xFD	; 253
     da6:	90 83       	st	Z, r25
     da8:	f7 01       	movw	r30, r14
     daa:	e7 5e       	subi	r30, 0xE7	; 231
     dac:	fd 4f       	sbci	r31, 0xFD	; 253
     dae:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
     db0:	f7 01       	movw	r30, r14
     db2:	36 85       	ldd	r19, Z+14	; 0x0e
     db4:	27 85       	ldd	r18, Z+15	; 0x0f
     db6:	90 89       	ldd	r25, Z+16	; 0x10
     db8:	81 89       	ldd	r24, Z+17	; 0x11
     dba:	e6 5e       	subi	r30, 0xE6	; 230
     dbc:	fd 4f       	sbci	r31, 0xFD	; 253
     dbe:	30 83       	st	Z, r19
     dc0:	f7 01       	movw	r30, r14
     dc2:	e5 5e       	subi	r30, 0xE5	; 229
     dc4:	fd 4f       	sbci	r31, 0xFD	; 253
     dc6:	20 83       	st	Z, r18
     dc8:	f7 01       	movw	r30, r14
     dca:	e4 5e       	subi	r30, 0xE4	; 228
     dcc:	fd 4f       	sbci	r31, 0xFD	; 253
     dce:	90 83       	st	Z, r25
     dd0:	f7 01       	movw	r30, r14
     dd2:	e3 5e       	subi	r30, 0xE3	; 227
     dd4:	fd 4f       	sbci	r31, 0xFD	; 253
     dd6:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
     dd8:	f7 01       	movw	r30, r14
     dda:	32 85       	ldd	r19, Z+10	; 0x0a
     ddc:	23 85       	ldd	r18, Z+11	; 0x0b
     dde:	94 85       	ldd	r25, Z+12	; 0x0c
     de0:	85 85       	ldd	r24, Z+13	; 0x0d
     de2:	e2 5e       	subi	r30, 0xE2	; 226
     de4:	fd 4f       	sbci	r31, 0xFD	; 253
     de6:	30 83       	st	Z, r19
     de8:	f7 01       	movw	r30, r14
     dea:	e1 5e       	subi	r30, 0xE1	; 225
     dec:	fd 4f       	sbci	r31, 0xFD	; 253
     dee:	20 83       	st	Z, r18
     df0:	f7 01       	movw	r30, r14
     df2:	e0 5e       	subi	r30, 0xE0	; 224
     df4:	fd 4f       	sbci	r31, 0xFD	; 253
     df6:	90 83       	st	Z, r25
     df8:	f7 01       	movw	r30, r14
     dfa:	ef 5d       	subi	r30, 0xDF	; 223
     dfc:	fd 4f       	sbci	r31, 0xFD	; 253
     dfe:	80 83       	st	Z, r24
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
     e00:	f7 01       	movw	r30, r14
     e02:	22 89       	ldd	r18, Z+18	; 0x12
     e04:	33 89       	ldd	r19, Z+19	; 0x13
     e06:	44 89       	ldd	r20, Z+20	; 0x14
     e08:	55 89       	ldd	r21, Z+21	; 0x15
     e0a:	81 81       	ldd	r24, Z+1	; 0x01
     e0c:	b8 01       	movw	r22, r16
     e0e:	01 e0       	ldi	r16, 0x01	; 1
     e10:	10 e0       	ldi	r17, 0x00	; 0
     e12:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <disk_write>
			fs->fsi_flag = 0;
     e16:	f7 01       	movw	r30, r14
     e18:	15 82       	std	Z+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
     e1a:	f7 01       	movw	r30, r14
     e1c:	81 81       	ldd	r24, Z+1	; 0x01
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	40 e0       	ldi	r20, 0x00	; 0
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	0e 94 3b 23 	call	0x4676	; 0x4676 <disk_ioctl>
     e28:	81 11       	cpse	r24, r1
			res = FR_DISK_ERR;
     e2a:	c1 e0       	ldi	r28, 0x01	; 1
	}

	return res;
}
     e2c:	8c 2f       	mov	r24, r28
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	08 95       	ret

00000e3a <get_fattime>:
	| (WORD)(4 << 11)               // rtcHour
	| (WORD)(30 << 5)               // rtcMin
	| (WORD)(0 >> 1);               // rtcSec

	return tmr;
}
     e3a:	60 ec       	ldi	r22, 0xC0	; 192
     e3c:	73 e2       	ldi	r23, 0x23	; 35
     e3e:	8b e2       	ldi	r24, 0x2B	; 43
     e40:	93 e0       	ldi	r25, 0x03	; 3
     e42:	08 95       	ret

00000e44 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	ec 01       	movw	r28, r24
     e4e:	db 01       	movw	r26, r22
     e50:	ca 01       	movw	r24, r20
	clst -= 2;
     e52:	02 97       	sbiw	r24, 0x02	; 2
     e54:	a1 09       	sbc	r26, r1
     e56:	b1 09       	sbc	r27, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     e58:	4a 8d       	ldd	r20, Y+26	; 0x1a
     e5a:	5b 8d       	ldd	r21, Y+27	; 0x1b
     e5c:	6c 8d       	ldd	r22, Y+28	; 0x1c
     e5e:	7d 8d       	ldd	r23, Y+29	; 0x1d
     e60:	42 50       	subi	r20, 0x02	; 2
     e62:	50 40       	sbci	r21, 0x00	; 0
     e64:	60 40       	sbci	r22, 0x00	; 0
     e66:	70 40       	sbci	r23, 0x00	; 0
     e68:	84 17       	cp	r24, r20
     e6a:	95 07       	cpc	r25, r21
     e6c:	a6 07       	cpc	r26, r22
     e6e:	b7 07       	cpc	r27, r23
     e70:	98 f4       	brcc	.+38     	; 0xe98 <clust2sect+0x54>
	return clst * fs->csize + fs->database;
     e72:	2a 81       	ldd	r18, Y+2	; 0x02
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e0       	ldi	r20, 0x00	; 0
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	bc 01       	movw	r22, r24
     e7c:	cd 01       	movw	r24, r26
     e7e:	0e 94 00 24 	call	0x4800	; 0x4800 <__mulsi3>
     e82:	8b 01       	movw	r16, r22
     e84:	9c 01       	movw	r18, r24
     e86:	8a a5       	lds	r24, 0x6a
     e88:	9b a5       	lds	r25, 0x6b
     e8a:	ac a5       	lds	r26, 0x6c
     e8c:	bd a5       	lds	r27, 0x6d
     e8e:	08 0f       	add	r16, r24
     e90:	19 1f       	adc	r17, r25
     e92:	2a 1f       	adc	r18, r26
     e94:	3b 1f       	adc	r19, r27
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <clust2sect+0x5a>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     e98:	00 e0       	ldi	r16, 0x00	; 0
     e9a:	10 e0       	ldi	r17, 0x00	; 0
     e9c:	98 01       	movw	r18, r16
	return clst * fs->csize + fs->database;
}
     e9e:	60 2f       	mov	r22, r16
     ea0:	71 2f       	mov	r23, r17
     ea2:	82 2f       	mov	r24, r18
     ea4:	93 2f       	mov	r25, r19
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	08 95       	ret

00000eb0 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
     eb0:	bf 92       	push	r11
     eb2:	cf 92       	push	r12
     eb4:	df 92       	push	r13
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	ec 01       	movw	r28, r24
     ec4:	6a 01       	movw	r12, r20
     ec6:	7b 01       	movw	r14, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
     ec8:	42 30       	cpi	r20, 0x02	; 2
     eca:	51 05       	cpc	r21, r1
     ecc:	61 05       	cpc	r22, r1
     ece:	71 05       	cpc	r23, r1
     ed0:	08 f4       	brcc	.+2      	; 0xed4 <get_fat+0x24>
     ed2:	cf c0       	rjmp	.+414    	; 0x1072 <get_fat+0x1c2>
     ed4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ed6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ed8:	ac 8d       	ldd	r26, Y+28	; 0x1c
     eda:	bd 8d       	ldd	r27, Y+29	; 0x1d
     edc:	48 17       	cp	r20, r24
     ede:	59 07       	cpc	r21, r25
     ee0:	6a 07       	cpc	r22, r26
     ee2:	7b 07       	cpc	r23, r27
     ee4:	08 f0       	brcs	.+2      	; 0xee8 <get_fat+0x38>
     ee6:	ca c0       	rjmp	.+404    	; 0x107c <get_fat+0x1cc>
		return 1;

	switch (fs->fs_type) {
     ee8:	88 81       	ld	r24, Y
     eea:	82 30       	cpi	r24, 0x02	; 2
     eec:	09 f4       	brne	.+2      	; 0xef0 <get_fat+0x40>
     eee:	5c c0       	rjmp	.+184    	; 0xfa8 <get_fat+0xf8>
     ef0:	83 30       	cpi	r24, 0x03	; 3
     ef2:	09 f4       	brne	.+2      	; 0xef6 <get_fat+0x46>
     ef4:	7b c0       	rjmp	.+246    	; 0xfec <get_fat+0x13c>
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	09 f0       	breq	.+2      	; 0xefc <get_fat+0x4c>
     efa:	c5 c0       	rjmp	.+394    	; 0x1086 <get_fat+0x1d6>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
     efc:	9a 01       	movw	r18, r20
     efe:	36 95       	lsr	r19
     f00:	27 95       	ror	r18
     f02:	89 01       	movw	r16, r18
     f04:	04 0f       	add	r16, r20
     f06:	15 1f       	adc	r17, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
     f08:	a8 01       	movw	r20, r16
     f0a:	45 2f       	mov	r20, r21
     f0c:	55 27       	eor	r21, r21
     f0e:	46 95       	lsr	r20
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	8a a1       	lds	r24, 0x4a
     f16:	9b a1       	lds	r25, 0x4b
     f18:	ac a1       	lds	r26, 0x4c
     f1a:	bd a1       	lds	r27, 0x4d
     f1c:	48 0f       	add	r20, r24
     f1e:	59 1f       	adc	r21, r25
     f20:	6a 1f       	adc	r22, r26
     f22:	7b 1f       	adc	r23, r27
     f24:	ce 01       	movw	r24, r28
     f26:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
     f2a:	88 23       	and	r24, r24
     f2c:	09 f0       	breq	.+2      	; 0xf30 <get_fat+0x80>
     f2e:	af c0       	rjmp	.+350    	; 0x108e <get_fat+0x1de>
		wc = fs->win[bc % SS(fs)]; bc++;
     f30:	f8 01       	movw	r30, r16
     f32:	f1 70       	andi	r31, 0x01	; 1
     f34:	ec 0f       	add	r30, r28
     f36:	fd 1f       	adc	r31, r29
     f38:	b2 a8       	sts	0x82, r27
     f3a:	0f 5f       	subi	r16, 0xFF	; 255
     f3c:	1f 4f       	sbci	r17, 0xFF	; 255
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
     f3e:	a8 01       	movw	r20, r16
     f40:	45 2f       	mov	r20, r21
     f42:	55 27       	eor	r21, r21
     f44:	46 95       	lsr	r20
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	8a a1       	lds	r24, 0x4a
     f4c:	9b a1       	lds	r25, 0x4b
     f4e:	ac a1       	lds	r26, 0x4c
     f50:	bd a1       	lds	r27, 0x4d
     f52:	48 0f       	add	r20, r24
     f54:	59 1f       	adc	r21, r25
     f56:	6a 1f       	adc	r22, r26
     f58:	7b 1f       	adc	r23, r27
     f5a:	ce 01       	movw	r24, r28
     f5c:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
     f60:	88 23       	and	r24, r24
     f62:	09 f0       	breq	.+2      	; 0xf66 <get_fat+0xb6>
     f64:	98 c0       	rjmp	.+304    	; 0x1096 <get_fat+0x1e6>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
     f66:	2b 2d       	mov	r18, r11
     f68:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
     f6a:	f8 01       	movw	r30, r16
     f6c:	f1 70       	andi	r31, 0x01	; 1
     f6e:	ec 0f       	add	r30, r28
     f70:	fd 1f       	adc	r31, r29
     f72:	92 a9       	sts	0x42, r25
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	82 2b       	or	r24, r18
     f78:	93 2b       	or	r25, r19
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     f7a:	21 e0       	ldi	r18, 0x01	; 1
     f7c:	c2 22       	and	r12, r18
     f7e:	dd 24       	eor	r13, r13
     f80:	c1 14       	cp	r12, r1
     f82:	d1 04       	cpc	r13, r1
     f84:	51 f0       	breq	.+20     	; 0xf9a <get_fat+0xea>
     f86:	92 95       	swap	r25
     f88:	82 95       	swap	r24
     f8a:	8f 70       	andi	r24, 0x0F	; 15
     f8c:	89 27       	eor	r24, r25
     f8e:	9f 70       	andi	r25, 0x0F	; 15
     f90:	89 27       	eor	r24, r25
     f92:	8c 01       	movw	r16, r24
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	89 c0       	rjmp	.+274    	; 0x10ac <get_fat+0x1fc>
     f9a:	8c 01       	movw	r16, r24
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	1f 70       	andi	r17, 0x0F	; 15
     fa2:	20 70       	andi	r18, 0x00	; 0
     fa4:	30 70       	andi	r19, 0x00	; 0
     fa6:	82 c0       	rjmp	.+260    	; 0x10ac <get_fat+0x1fc>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
     fa8:	45 2f       	mov	r20, r21
     faa:	56 2f       	mov	r21, r22
     fac:	67 2f       	mov	r22, r23
     fae:	77 27       	eor	r23, r23
     fb0:	8a a1       	lds	r24, 0x4a
     fb2:	9b a1       	lds	r25, 0x4b
     fb4:	ac a1       	lds	r26, 0x4c
     fb6:	bd a1       	lds	r27, 0x4d
     fb8:	48 0f       	add	r20, r24
     fba:	59 1f       	adc	r21, r25
     fbc:	6a 1f       	adc	r22, r26
     fbe:	7b 1f       	adc	r23, r27
     fc0:	ce 01       	movw	r24, r28
     fc2:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
     fc6:	88 23       	and	r24, r24
     fc8:	09 f0       	breq	.+2      	; 0xfcc <get_fat+0x11c>
     fca:	69 c0       	rjmp	.+210    	; 0x109e <get_fat+0x1ee>
		p = &fs->win[clst * 2 % SS(fs)];
     fcc:	f6 01       	movw	r30, r12
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	f1 70       	andi	r31, 0x01	; 1
		return LD_WORD(p);
     fd4:	ce 0f       	add	r28, r30
     fd6:	df 1f       	adc	r29, r31
     fd8:	9b a9       	sts	0x4b, r25
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	0a a9       	sts	0x4a, r16
     fde:	10 e0       	ldi	r17, 0x00	; 0
     fe0:	80 2b       	or	r24, r16
     fe2:	91 2b       	or	r25, r17
     fe4:	8c 01       	movw	r16, r24
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	60 c0       	rjmp	.+192    	; 0x10ac <get_fat+0x1fc>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
     fec:	68 94       	set
     fee:	16 f8       	bld	r1, 6
     ff0:	76 95       	lsr	r23
     ff2:	67 95       	ror	r22
     ff4:	57 95       	ror	r21
     ff6:	47 95       	ror	r20
     ff8:	16 94       	lsr	r1
     ffa:	d1 f7       	brne	.-12     	; 0xff0 <get_fat+0x140>
     ffc:	8a a1       	lds	r24, 0x4a
     ffe:	9b a1       	lds	r25, 0x4b
    1000:	ac a1       	lds	r26, 0x4c
    1002:	bd a1       	lds	r27, 0x4d
    1004:	48 0f       	add	r20, r24
    1006:	59 1f       	adc	r21, r25
    1008:	6a 1f       	adc	r22, r26
    100a:	7b 1f       	adc	r23, r27
    100c:	ce 01       	movw	r24, r28
    100e:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
    1012:	88 23       	and	r24, r24
    1014:	09 f0       	breq	.+2      	; 0x1018 <get_fat+0x168>
    1016:	47 c0       	rjmp	.+142    	; 0x10a6 <get_fat+0x1f6>
		p = &fs->win[clst * 4 % SS(fs)];
    1018:	f6 01       	movw	r30, r12
    101a:	ee 0f       	add	r30, r30
    101c:	ff 1f       	adc	r31, r31
    101e:	ee 0f       	add	r30, r30
    1020:	ff 1f       	adc	r31, r31
    1022:	f1 70       	andi	r31, 0x01	; 1
		return LD_DWORD(p) & 0x0FFFFFFF;
    1024:	ce 0f       	add	r28, r30
    1026:	df 1f       	adc	r29, r31
    1028:	0d a9       	sts	0x4d, r16
    102a:	10 e0       	ldi	r17, 0x00	; 0
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	30 2f       	mov	r19, r16
    1032:	22 27       	eor	r18, r18
    1034:	11 27       	eor	r17, r17
    1036:	00 27       	eor	r16, r16
    1038:	8c a9       	sts	0x4c, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	a0 e0       	ldi	r26, 0x00	; 0
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	dc 01       	movw	r26, r24
    1042:	99 27       	eor	r25, r25
    1044:	88 27       	eor	r24, r24
    1046:	08 2b       	or	r16, r24
    1048:	19 2b       	or	r17, r25
    104a:	2a 2b       	or	r18, r26
    104c:	3b 2b       	or	r19, r27
    104e:	8a a9       	sts	0x4a, r24
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a0 e0       	ldi	r26, 0x00	; 0
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	08 2b       	or	r16, r24
    1058:	19 2b       	or	r17, r25
    105a:	2a 2b       	or	r18, r26
    105c:	3b 2b       	or	r19, r27
    105e:	9b a9       	sts	0x4b, r25
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	a0 e0       	ldi	r26, 0x00	; 0
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	08 2b       	or	r16, r24
    1068:	19 2b       	or	r17, r25
    106a:	2a 2b       	or	r18, r26
    106c:	3b 2b       	or	r19, r27
    106e:	3f 70       	andi	r19, 0x0F	; 15
    1070:	1d c0       	rjmp	.+58     	; 0x10ac <get_fat+0x1fc>
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;
    1072:	01 e0       	ldi	r16, 0x01	; 1
    1074:	10 e0       	ldi	r17, 0x00	; 0
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	18 c0       	rjmp	.+48     	; 0x10ac <get_fat+0x1fc>
    107c:	01 e0       	ldi	r16, 0x01	; 1
    107e:	10 e0       	ldi	r17, 0x00	; 0
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	13 c0       	rjmp	.+38     	; 0x10ac <get_fat+0x1fc>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    1086:	0f ef       	ldi	r16, 0xFF	; 255
    1088:	1f ef       	ldi	r17, 0xFF	; 255
    108a:	98 01       	movw	r18, r16
    108c:	0f c0       	rjmp	.+30     	; 0x10ac <get_fat+0x1fc>
    108e:	0f ef       	ldi	r16, 0xFF	; 255
    1090:	1f ef       	ldi	r17, 0xFF	; 255
    1092:	98 01       	movw	r18, r16
    1094:	0b c0       	rjmp	.+22     	; 0x10ac <get_fat+0x1fc>
    1096:	0f ef       	ldi	r16, 0xFF	; 255
    1098:	1f ef       	ldi	r17, 0xFF	; 255
    109a:	98 01       	movw	r18, r16
    109c:	07 c0       	rjmp	.+14     	; 0x10ac <get_fat+0x1fc>
    109e:	0f ef       	ldi	r16, 0xFF	; 255
    10a0:	1f ef       	ldi	r17, 0xFF	; 255
    10a2:	98 01       	movw	r18, r16
    10a4:	03 c0       	rjmp	.+6      	; 0x10ac <get_fat+0x1fc>
    10a6:	0f ef       	ldi	r16, 0xFF	; 255
    10a8:	1f ef       	ldi	r17, 0xFF	; 255
    10aa:	98 01       	movw	r18, r16
}
    10ac:	60 2f       	mov	r22, r16
    10ae:	71 2f       	mov	r23, r17
    10b0:	82 2f       	mov	r24, r18
    10b2:	93 2f       	mov	r25, r19
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	df 90       	pop	r13
    10c2:	cf 90       	pop	r12
    10c4:	bf 90       	pop	r11
    10c6:	08 95       	ret

000010c8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIRS *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    10c8:	ef 92       	push	r14
    10ca:	ff 92       	push	r15
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	ec 01       	movw	r28, r24
    10d6:	8b 01       	movw	r16, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    10d8:	7d 83       	std	Y+5, r23	; 0x05
    10da:	6c 83       	std	Y+4, r22	; 0x04
	clst = dj->sclust;
    10dc:	4e 81       	ldd	r20, Y+6	; 0x06
    10de:	5f 81       	ldd	r21, Y+7	; 0x07
    10e0:	68 85       	ldd	r22, Y+8	; 0x08
    10e2:	79 85       	ldd	r23, Y+9	; 0x09
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    10e4:	41 30       	cpi	r20, 0x01	; 1
    10e6:	51 05       	cpc	r21, r1
    10e8:	61 05       	cpc	r22, r1
    10ea:	71 05       	cpc	r23, r1
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <dir_sdi+0x28>
    10ee:	9f c0       	rjmp	.+318    	; 0x122e <dir_sdi+0x166>
    10f0:	e8 81       	ld	r30, Y
    10f2:	f9 81       	ldd	r31, Y+1	; 0x01
    10f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    10f6:	93 8d       	ldd	r25, Z+27	; 0x1b
    10f8:	a4 8d       	ldd	r26, Z+28	; 0x1c
    10fa:	b5 8d       	ldd	r27, Z+29	; 0x1d
    10fc:	48 17       	cp	r20, r24
    10fe:	59 07       	cpc	r21, r25
    1100:	6a 07       	cpc	r22, r26
    1102:	7b 07       	cpc	r23, r27
    1104:	08 f0       	brcs	.+2      	; 0x1108 <dir_sdi+0x40>
    1106:	95 c0       	rjmp	.+298    	; 0x1232 <dir_sdi+0x16a>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1108:	41 15       	cp	r20, r1
    110a:	51 05       	cpc	r21, r1
    110c:	61 05       	cpc	r22, r1
    110e:	71 05       	cpc	r23, r1
    1110:	69 f5       	brne	.+90     	; 0x116c <dir_sdi+0xa4>
    1112:	80 81       	ld	r24, Z
    1114:	83 30       	cpi	r24, 0x03	; 3
    1116:	49 f4       	brne	.+18     	; 0x112a <dir_sdi+0x62>
		clst = dj->fs->dirbase;
    1118:	46 a1       	lds	r20, 0x46
    111a:	57 a1       	lds	r21, 0x47
    111c:	60 a5       	lds	r22, 0x60
    111e:	71 a5       	lds	r23, 0x61

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    1120:	41 15       	cp	r20, r1
    1122:	51 05       	cpc	r21, r1
    1124:	61 05       	cpc	r22, r1
    1126:	71 05       	cpc	r23, r1
    1128:	09 f5       	brne	.+66     	; 0x116c <dir_sdi+0xa4>
		dj->clust = clst;
    112a:	1a 86       	std	Y+10, r1	; 0x0a
    112c:	1b 86       	std	Y+11, r1	; 0x0b
    112e:	1c 86       	std	Y+12, r1	; 0x0c
    1130:	1d 86       	std	Y+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1132:	80 85       	ldd	r24, Z+8	; 0x08
    1134:	91 85       	ldd	r25, Z+9	; 0x09
    1136:	08 17       	cp	r16, r24
    1138:	19 07       	cpc	r17, r25
    113a:	08 f0       	brcs	.+2      	; 0x113e <dir_sdi+0x76>
    113c:	7c c0       	rjmp	.+248    	; 0x1236 <dir_sdi+0x16e>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    113e:	c8 01       	movw	r24, r16
    1140:	92 95       	swap	r25
    1142:	82 95       	swap	r24
    1144:	8f 70       	andi	r24, 0x0F	; 15
    1146:	89 27       	eor	r24, r25
    1148:	9f 70       	andi	r25, 0x0F	; 15
    114a:	89 27       	eor	r24, r25
    114c:	ac 01       	movw	r20, r24
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	86 a1       	lds	r24, 0x46
    1154:	97 a1       	lds	r25, 0x47
    1156:	a0 a5       	lds	r26, 0x60
    1158:	b1 a5       	lds	r27, 0x61
    115a:	84 0f       	add	r24, r20
    115c:	95 1f       	adc	r25, r21
    115e:	a6 1f       	adc	r26, r22
    1160:	b7 1f       	adc	r27, r23
    1162:	8e 87       	std	Y+14, r24	; 0x0e
    1164:	9f 87       	std	Y+15, r25	; 0x0f
    1166:	a8 8b       	std	Y+16, r26	; 0x10
    1168:	b9 8b       	std	Y+17, r27	; 0x11
    116a:	4e c0       	rjmp	.+156    	; 0x1208 <dir_sdi+0x140>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    116c:	82 81       	ldd	r24, Z+2	; 0x02
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	7c 01       	movw	r14, r24
    1172:	ee 0c       	add	r14, r14
    1174:	ff 1c       	adc	r15, r15
    1176:	ee 0c       	add	r14, r14
    1178:	ff 1c       	adc	r15, r15
    117a:	ee 0c       	add	r14, r14
    117c:	ff 1c       	adc	r15, r15
    117e:	ee 0c       	add	r14, r14
    1180:	ff 1c       	adc	r15, r15
		while (idx >= ic) {	/* Follow cluster chain */
    1182:	0e 15       	cp	r16, r14
    1184:	1f 05       	cpc	r17, r15
    1186:	28 f1       	brcs	.+74     	; 0x11d2 <dir_sdi+0x10a>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1188:	88 81       	ld	r24, Y
    118a:	99 81       	ldd	r25, Y+1	; 0x01
    118c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <get_fat>
    1190:	ab 01       	movw	r20, r22
    1192:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1194:	4f 3f       	cpi	r20, 0xFF	; 255
    1196:	8f ef       	ldi	r24, 0xFF	; 255
    1198:	58 07       	cpc	r21, r24
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	68 07       	cpc	r22, r24
    119e:	8f ef       	ldi	r24, 0xFF	; 255
    11a0:	78 07       	cpc	r23, r24
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <dir_sdi+0xde>
    11a4:	4a c0       	rjmp	.+148    	; 0x123a <dir_sdi+0x172>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    11a6:	42 30       	cpi	r20, 0x02	; 2
    11a8:	51 05       	cpc	r21, r1
    11aa:	61 05       	cpc	r22, r1
    11ac:	71 05       	cpc	r23, r1
    11ae:	08 f4       	brcc	.+2      	; 0x11b2 <dir_sdi+0xea>
    11b0:	46 c0       	rjmp	.+140    	; 0x123e <dir_sdi+0x176>
    11b2:	e8 81       	ld	r30, Y
    11b4:	f9 81       	ldd	r31, Y+1	; 0x01
    11b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    11b8:	93 8d       	ldd	r25, Z+27	; 0x1b
    11ba:	a4 8d       	ldd	r26, Z+28	; 0x1c
    11bc:	b5 8d       	ldd	r27, Z+29	; 0x1d
    11be:	48 17       	cp	r20, r24
    11c0:	59 07       	cpc	r21, r25
    11c2:	6a 07       	cpc	r22, r26
    11c4:	7b 07       	cpc	r23, r27
    11c6:	e8 f5       	brcc	.+122    	; 0x1242 <dir_sdi+0x17a>
				return FR_INT_ERR;
			idx -= ic;
    11c8:	0e 19       	sub	r16, r14
    11ca:	1f 09       	sbc	r17, r15
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    11cc:	0e 15       	cp	r16, r14
    11ce:	1f 05       	cpc	r17, r15
    11d0:	d8 f6       	brcc	.-74     	; 0x1188 <dir_sdi+0xc0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    11d2:	4a 87       	std	Y+10, r20	; 0x0a
    11d4:	5b 87       	std	Y+11, r21	; 0x0b
    11d6:	6c 87       	std	Y+12, r22	; 0x0c
    11d8:	7d 87       	std	Y+13, r23	; 0x0d
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    11da:	88 81       	ld	r24, Y
    11dc:	99 81       	ldd	r25, Y+1	; 0x01
    11de:	0e 94 22 07 	call	0xe44	; 0xe44 <clust2sect>
    11e2:	ab 01       	movw	r20, r22
    11e4:	bc 01       	movw	r22, r24
    11e6:	c8 01       	movw	r24, r16
    11e8:	92 95       	swap	r25
    11ea:	82 95       	swap	r24
    11ec:	8f 70       	andi	r24, 0x0F	; 15
    11ee:	89 27       	eor	r24, r25
    11f0:	9f 70       	andi	r25, 0x0F	; 15
    11f2:	89 27       	eor	r24, r25
    11f4:	a0 e0       	ldi	r26, 0x00	; 0
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	84 0f       	add	r24, r20
    11fa:	95 1f       	adc	r25, r21
    11fc:	a6 1f       	adc	r26, r22
    11fe:	b7 1f       	adc	r27, r23
    1200:	8e 87       	std	Y+14, r24	; 0x0e
    1202:	9f 87       	std	Y+15, r25	; 0x0f
    1204:	a8 8b       	std	Y+16, r26	; 0x10
    1206:	b9 8b       	std	Y+17, r27	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    1208:	88 81       	ld	r24, Y
    120a:	99 81       	ldd	r25, Y+1	; 0x01
    120c:	c2 96       	adiw	r24, 0x32	; 50
    120e:	0f 70       	andi	r16, 0x0F	; 15
    1210:	10 70       	andi	r17, 0x00	; 0
    1212:	00 0f       	add	r16, r16
    1214:	11 1f       	adc	r17, r17
    1216:	02 95       	swap	r16
    1218:	12 95       	swap	r17
    121a:	10 7f       	andi	r17, 0xF0	; 240
    121c:	10 27       	eor	r17, r16
    121e:	00 7f       	andi	r16, 0xF0	; 240
    1220:	10 27       	eor	r17, r16
    1222:	80 0f       	add	r24, r16
    1224:	91 1f       	adc	r25, r17
    1226:	9b 8b       	std	Y+19, r25	; 0x13
    1228:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;	/* Seek succeeded */
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	0b c0       	rjmp	.+22     	; 0x1244 <dir_sdi+0x17c>


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
    122e:	82 e0       	ldi	r24, 0x02	; 2
    1230:	09 c0       	rjmp	.+18     	; 0x1244 <dir_sdi+0x17c>
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	07 c0       	rjmp	.+14     	; 0x1244 <dir_sdi+0x17c>
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
		dj->clust = clst;
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
			return FR_INT_ERR;
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	05 c0       	rjmp	.+10     	; 0x1244 <dir_sdi+0x17c>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	03 c0       	rjmp	.+6      	; 0x1244 <dir_sdi+0x17c>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
    123e:	82 e0       	ldi	r24, 0x02	; 2
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <dir_sdi+0x17c>
    1242:	82 e0       	ldi	r24, 0x02	; 2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	08 95       	ret

00001252 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIRS *dj				/* Directory object pointing the entry to be removed */
)
{
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dj, dj->index);
    1258:	6c 81       	ldd	r22, Y+4	; 0x04
    125a:	7d 81       	ldd	r23, Y+5	; 0x05
    125c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <dir_sdi>
	if (res == FR_OK) {
    1260:	88 23       	and	r24, r24
    1262:	91 f4       	brne	.+36     	; 0x1288 <dir_remove+0x36>
		res = move_window(dj->fs, dj->sect);
    1264:	4e 85       	ldd	r20, Y+14	; 0x0e
    1266:	5f 85       	ldd	r21, Y+15	; 0x0f
    1268:	68 89       	ldd	r22, Y+16	; 0x10
    126a:	79 89       	ldd	r23, Y+17	; 0x11
    126c:	88 81       	ld	r24, Y
    126e:	99 81       	ldd	r25, Y+1	; 0x01
    1270:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
		if (res == FR_OK) {
    1274:	88 23       	and	r24, r24
    1276:	41 f4       	brne	.+16     	; 0x1288 <dir_remove+0x36>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    1278:	ea 89       	ldd	r30, Y+18	; 0x12
    127a:	fb 89       	ldd	r31, Y+19	; 0x13
    127c:	95 ee       	ldi	r25, 0xE5	; 229
    127e:	90 83       	st	Z, r25
			dj->fs->wflag = 1;
    1280:	e8 81       	ld	r30, Y
    1282:	f9 81       	ldd	r31, Y+1	; 0x01
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	94 83       	std	Z+4, r25	; 0x04
		}
	}
#endif

	return res;
}
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	08 95       	ret

0000128e <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    128e:	8f 92       	push	r8
    1290:	9f 92       	push	r9
    1292:	af 92       	push	r10
    1294:	bf 92       	push	r11
    1296:	cf 92       	push	r12
    1298:	df 92       	push	r13
    129a:	ef 92       	push	r14
    129c:	ff 92       	push	r15
    129e:	0f 93       	push	r16
    12a0:	1f 93       	push	r17
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	ec 01       	movw	r28, r24
    12a8:	6a 01       	movw	r12, r20
    12aa:	7b 01       	movw	r14, r22
    12ac:	48 01       	movw	r8, r16
    12ae:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    12b0:	42 30       	cpi	r20, 0x02	; 2
    12b2:	51 05       	cpc	r21, r1
    12b4:	61 05       	cpc	r22, r1
    12b6:	71 05       	cpc	r23, r1
    12b8:	08 f4       	brcc	.+2      	; 0x12bc <put_fat+0x2e>
    12ba:	ca c0       	rjmp	.+404    	; 0x1450 <put_fat+0x1c2>
    12bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12be:	9b 8d       	ldd	r25, Y+27	; 0x1b
    12c0:	ac 8d       	ldd	r26, Y+28	; 0x1c
    12c2:	bd 8d       	ldd	r27, Y+29	; 0x1d
    12c4:	48 17       	cp	r20, r24
    12c6:	59 07       	cpc	r21, r25
    12c8:	6a 07       	cpc	r22, r26
    12ca:	7b 07       	cpc	r23, r27
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <put_fat+0x42>
    12ce:	c2 c0       	rjmp	.+388    	; 0x1454 <put_fat+0x1c6>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    12d0:	88 81       	ld	r24, Y
    12d2:	82 30       	cpi	r24, 0x02	; 2
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <put_fat+0x4a>
    12d6:	6a c0       	rjmp	.+212    	; 0x13ac <put_fat+0x11e>
    12d8:	83 30       	cpi	r24, 0x03	; 3
    12da:	09 f4       	brne	.+2      	; 0x12de <put_fat+0x50>
    12dc:	82 c0       	rjmp	.+260    	; 0x13e2 <put_fat+0x154>
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <put_fat+0x56>
    12e2:	b2 c0       	rjmp	.+356    	; 0x1448 <put_fat+0x1ba>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    12e4:	9a 01       	movw	r18, r20
    12e6:	36 95       	lsr	r19
    12e8:	27 95       	ror	r18
    12ea:	89 01       	movw	r16, r18
    12ec:	04 0f       	add	r16, r20
    12ee:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    12f0:	a8 01       	movw	r20, r16
    12f2:	45 2f       	mov	r20, r21
    12f4:	55 27       	eor	r21, r21
    12f6:	46 95       	lsr	r20
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	8a a1       	lds	r24, 0x4a
    12fe:	9b a1       	lds	r25, 0x4b
    1300:	ac a1       	lds	r26, 0x4c
    1302:	bd a1       	lds	r27, 0x4d
    1304:	48 0f       	add	r20, r24
    1306:	59 1f       	adc	r21, r25
    1308:	6a 1f       	adc	r22, r26
    130a:	7b 1f       	adc	r23, r27
    130c:	ce 01       	movw	r24, r28
    130e:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
			if (res != FR_OK) break;
    1312:	88 23       	and	r24, r24
    1314:	09 f0       	breq	.+2      	; 0x1318 <put_fat+0x8a>
    1316:	99 c0       	rjmp	.+306    	; 0x144a <put_fat+0x1bc>
			p = &fs->win[bc % SS(fs)];
    1318:	c8 01       	movw	r24, r16
    131a:	91 70       	andi	r25, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    131c:	e1 e0       	ldi	r30, 0x01	; 1
    131e:	ce 22       	and	r12, r30
    1320:	dd 24       	eor	r13, r13
    1322:	c1 14       	cp	r12, r1
    1324:	d1 04       	cpc	r13, r1
    1326:	51 f0       	breq	.+20     	; 0x133c <put_fat+0xae>
    1328:	fe 01       	movw	r30, r28
    132a:	e8 0f       	add	r30, r24
    132c:	f9 1f       	adc	r31, r25
    132e:	22 a9       	sts	0x42, r18
    1330:	2f 70       	andi	r18, 0x0F	; 15
    1332:	38 2d       	mov	r19, r8
    1334:	32 95       	swap	r19
    1336:	30 7f       	andi	r19, 0xF0	; 240
    1338:	23 2b       	or	r18, r19
    133a:	01 c0       	rjmp	.+2      	; 0x133e <put_fat+0xb0>
    133c:	28 2d       	mov	r18, r8
    133e:	fe 01       	movw	r30, r28
    1340:	e8 0f       	add	r30, r24
    1342:	f9 1f       	adc	r31, r25
    1344:	22 ab       	sts	0x52, r18
			bc++;
    1346:	0f 5f       	subi	r16, 0xFF	; 255
    1348:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    134e:	a8 01       	movw	r20, r16
    1350:	45 2f       	mov	r20, r21
    1352:	55 27       	eor	r21, r21
    1354:	46 95       	lsr	r20
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	8a a1       	lds	r24, 0x4a
    135c:	9b a1       	lds	r25, 0x4b
    135e:	ac a1       	lds	r26, 0x4c
    1360:	bd a1       	lds	r27, 0x4d
    1362:	48 0f       	add	r20, r24
    1364:	59 1f       	adc	r21, r25
    1366:	6a 1f       	adc	r22, r26
    1368:	7b 1f       	adc	r23, r27
    136a:	ce 01       	movw	r24, r28
    136c:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
			if (res != FR_OK) break;
    1370:	88 23       	and	r24, r24
    1372:	09 f0       	breq	.+2      	; 0x1376 <put_fat+0xe8>
    1374:	6a c0       	rjmp	.+212    	; 0x144a <put_fat+0x1bc>
			p = &fs->win[bc % SS(fs)];
    1376:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1378:	c1 14       	cp	r12, r1
    137a:	d1 04       	cpc	r13, r1
    137c:	49 f0       	breq	.+18     	; 0x1390 <put_fat+0x102>
    137e:	68 94       	set
    1380:	13 f8       	bld	r1, 3
    1382:	b6 94       	lsr	r11
    1384:	a7 94       	ror	r10
    1386:	97 94       	ror	r9
    1388:	87 94       	ror	r8
    138a:	16 94       	lsr	r1
    138c:	d1 f7       	brne	.-12     	; 0x1382 <put_fat+0xf4>
    138e:	09 c0       	rjmp	.+18     	; 0x13a2 <put_fat+0x114>
    1390:	fe 01       	movw	r30, r28
    1392:	e0 0f       	add	r30, r16
    1394:	f1 1f       	adc	r31, r17
    1396:	22 a9       	sts	0x42, r18
    1398:	20 7f       	andi	r18, 0xF0	; 240
    139a:	99 2d       	mov	r25, r9
    139c:	9f 70       	andi	r25, 0x0F	; 15
    139e:	82 2e       	mov	r8, r18
    13a0:	89 2a       	or	r8, r25
    13a2:	0c 0f       	add	r16, r28
    13a4:	1d 1f       	adc	r17, r29
    13a6:	f8 01       	movw	r30, r16
    13a8:	82 aa       	sts	0x92, r24
			break;
    13aa:	4f c0       	rjmp	.+158    	; 0x144a <put_fat+0x1bc>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    13ac:	45 2f       	mov	r20, r21
    13ae:	56 2f       	mov	r21, r22
    13b0:	67 2f       	mov	r22, r23
    13b2:	77 27       	eor	r23, r23
    13b4:	8a a1       	lds	r24, 0x4a
    13b6:	9b a1       	lds	r25, 0x4b
    13b8:	ac a1       	lds	r26, 0x4c
    13ba:	bd a1       	lds	r27, 0x4d
    13bc:	48 0f       	add	r20, r24
    13be:	59 1f       	adc	r21, r25
    13c0:	6a 1f       	adc	r22, r26
    13c2:	7b 1f       	adc	r23, r27
    13c4:	ce 01       	movw	r24, r28
    13c6:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
			if (res != FR_OK) break;
    13ca:	88 23       	and	r24, r24
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <put_fat+0x142>
    13ce:	3d c0       	rjmp	.+122    	; 0x144a <put_fat+0x1bc>
			p = &fs->win[clst * 2 % SS(fs)];
    13d0:	f6 01       	movw	r30, r12
    13d2:	ee 0f       	add	r30, r30
    13d4:	ff 1f       	adc	r31, r31
    13d6:	f1 70       	andi	r31, 0x01	; 1
			ST_WORD(p, (WORD)val);
    13d8:	ec 0f       	add	r30, r28
    13da:	fd 1f       	adc	r31, r29
    13dc:	82 aa       	sts	0x92, r24
    13de:	93 aa       	sts	0x93, r25
			break;
    13e0:	34 c0       	rjmp	.+104    	; 0x144a <put_fat+0x1bc>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    13e2:	68 94       	set
    13e4:	16 f8       	bld	r1, 6
    13e6:	76 95       	lsr	r23
    13e8:	67 95       	ror	r22
    13ea:	57 95       	ror	r21
    13ec:	47 95       	ror	r20
    13ee:	16 94       	lsr	r1
    13f0:	d1 f7       	brne	.-12     	; 0x13e6 <put_fat+0x158>
    13f2:	8a a1       	lds	r24, 0x4a
    13f4:	9b a1       	lds	r25, 0x4b
    13f6:	ac a1       	lds	r26, 0x4c
    13f8:	bd a1       	lds	r27, 0x4d
    13fa:	48 0f       	add	r20, r24
    13fc:	59 1f       	adc	r21, r25
    13fe:	6a 1f       	adc	r22, r26
    1400:	7b 1f       	adc	r23, r27
    1402:	ce 01       	movw	r24, r28
    1404:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
			if (res != FR_OK) break;
    1408:	88 23       	and	r24, r24
    140a:	f9 f4       	brne	.+62     	; 0x144a <put_fat+0x1bc>
			p = &fs->win[clst * 4 % SS(fs)];
    140c:	96 01       	movw	r18, r12
    140e:	22 0f       	add	r18, r18
    1410:	33 1f       	adc	r19, r19
    1412:	22 0f       	add	r18, r18
    1414:	33 1f       	adc	r19, r19
    1416:	31 70       	andi	r19, 0x01	; 1
			val |= LD_DWORD(p) & 0xF0000000;
    1418:	fe 01       	movw	r30, r28
    141a:	e2 0f       	add	r30, r18
    141c:	f3 1f       	adc	r31, r19
    141e:	45 a9       	sts	0x45, r20
    1420:	50 e0       	ldi	r21, 0x00	; 0
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	74 2f       	mov	r23, r20
    1428:	66 27       	eor	r22, r22
    142a:	55 27       	eor	r21, r21
    142c:	44 27       	eor	r20, r20
    142e:	40 70       	andi	r20, 0x00	; 0
    1430:	50 70       	andi	r21, 0x00	; 0
    1432:	60 70       	andi	r22, 0x00	; 0
    1434:	70 7f       	andi	r23, 0xF0	; 240
    1436:	48 29       	or	r20, r8
    1438:	59 29       	or	r21, r9
    143a:	6a 29       	or	r22, r10
    143c:	7b 29       	or	r23, r11
			ST_DWORD(p, val);
    143e:	42 ab       	sts	0x52, r20
    1440:	53 ab       	sts	0x53, r21
    1442:	64 ab       	sts	0x54, r22
    1444:	75 ab       	sts	0x55, r23
			break;
    1446:	01 c0       	rjmp	.+2      	; 0x144a <put_fat+0x1bc>

		default :
			res = FR_INT_ERR;
    1448:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	9c 83       	std	Y+4, r25	; 0x04
    144e:	03 c0       	rjmp	.+6      	; 0x1456 <put_fat+0x1c8>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1450:	82 e0       	ldi	r24, 0x02	; 2
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <put_fat+0x1c8>
    1454:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
	}

	return res;
}
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	df 90       	pop	r13
    1464:	cf 90       	pop	r12
    1466:	bf 90       	pop	r11
    1468:	af 90       	pop	r10
    146a:	9f 90       	pop	r9
    146c:	8f 90       	pop	r8
    146e:	08 95       	ret

00001470 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1470:	2f 92       	push	r2
    1472:	3f 92       	push	r3
    1474:	4f 92       	push	r4
    1476:	5f 92       	push	r5
    1478:	6f 92       	push	r6
    147a:	7f 92       	push	r7
    147c:	8f 92       	push	r8
    147e:	9f 92       	push	r9
    1480:	af 92       	push	r10
    1482:	bf 92       	push	r11
    1484:	cf 92       	push	r12
    1486:	df 92       	push	r13
    1488:	ef 92       	push	r14
    148a:	ff 92       	push	r15
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	00 d0       	rcall	.+0      	; 0x1496 <create_chain+0x26>
    1496:	00 d0       	rcall	.+0      	; 0x1498 <create_chain+0x28>
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	1c 01       	movw	r2, r24
    149e:	49 83       	std	Y+1, r20	; 0x01
    14a0:	5a 83       	std	Y+2, r21	; 0x02
    14a2:	6b 83       	std	Y+3, r22	; 0x03
    14a4:	7c 83       	std	Y+4, r23	; 0x04
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    14a6:	41 15       	cp	r20, r1
    14a8:	51 05       	cpc	r21, r1
    14aa:	61 05       	cpc	r22, r1
    14ac:	71 05       	cpc	r23, r1
    14ae:	c1 f4       	brne	.+48     	; 0x14e0 <create_chain+0x70>
		scl = fs->last_clust;			/* Get suggested start point */
    14b0:	dc 01       	movw	r26, r24
    14b2:	1a 96       	adiw	r26, 0x0a	; 10
    14b4:	8d 90       	ld	r8, X+
    14b6:	9d 90       	ld	r9, X+
    14b8:	ad 90       	ld	r10, X+
    14ba:	bc 90       	ld	r11, X
    14bc:	1d 97       	sbiw	r26, 0x0d	; 13
		if (!scl || scl >= fs->n_fatent) scl = 1;
    14be:	81 14       	cp	r8, r1
    14c0:	91 04       	cpc	r9, r1
    14c2:	a1 04       	cpc	r10, r1
    14c4:	b1 04       	cpc	r11, r1
    14c6:	51 f1       	breq	.+84     	; 0x151c <create_chain+0xac>
    14c8:	5a 96       	adiw	r26, 0x1a	; 26
    14ca:	8d 91       	ld	r24, X+
    14cc:	9d 91       	ld	r25, X+
    14ce:	0d 90       	ld	r0, X+
    14d0:	bc 91       	ld	r27, X
    14d2:	a0 2d       	mov	r26, r0
    14d4:	88 16       	cp	r8, r24
    14d6:	99 06       	cpc	r9, r25
    14d8:	aa 06       	cpc	r10, r26
    14da:	bb 06       	cpc	r11, r27
    14dc:	20 f5       	brcc	.+72     	; 0x1526 <create_chain+0xb6>
    14de:	27 c0       	rjmp	.+78     	; 0x152e <create_chain+0xbe>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    14e0:	49 81       	ldd	r20, Y+1	; 0x01
    14e2:	5a 81       	ldd	r21, Y+2	; 0x02
    14e4:	6b 81       	ldd	r22, Y+3	; 0x03
    14e6:	7c 81       	ldd	r23, Y+4	; 0x04
    14e8:	0e 94 58 07 	call	0xeb0	; 0xeb0 <get_fat>
    14ec:	8b 01       	movw	r16, r22
    14ee:	9c 01       	movw	r18, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    14f0:	62 30       	cpi	r22, 0x02	; 2
    14f2:	71 05       	cpc	r23, r1
    14f4:	81 05       	cpc	r24, r1
    14f6:	91 05       	cpc	r25, r1
    14f8:	08 f4       	brcc	.+2      	; 0x14fc <create_chain+0x8c>
    14fa:	ad c0       	rjmp	.+346    	; 0x1656 <create_chain+0x1e6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    14fc:	f1 01       	movw	r30, r2
    14fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1500:	93 8d       	ldd	r25, Z+27	; 0x1b
    1502:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1504:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1506:	08 17       	cp	r16, r24
    1508:	19 07       	cpc	r17, r25
    150a:	2a 07       	cpc	r18, r26
    150c:	3b 07       	cpc	r19, r27
    150e:	08 f4       	brcc	.+2      	; 0x1512 <create_chain+0xa2>
    1510:	b6 c0       	rjmp	.+364    	; 0x167e <create_chain+0x20e>
		scl = clst;
    1512:	89 80       	ldd	r8, Y+1	; 0x01
    1514:	9a 80       	ldd	r9, Y+2	; 0x02
    1516:	ab 80       	ldd	r10, Y+3	; 0x03
    1518:	bc 80       	ldd	r11, Y+4	; 0x04
    151a:	09 c0       	rjmp	.+18     	; 0x152e <create_chain+0xbe>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    151c:	88 24       	eor	r8, r8
    151e:	99 24       	eor	r9, r9
    1520:	54 01       	movw	r10, r8
    1522:	83 94       	inc	r8
    1524:	04 c0       	rjmp	.+8      	; 0x152e <create_chain+0xbe>
    1526:	88 24       	eor	r8, r8
    1528:	99 24       	eor	r9, r9
    152a:	54 01       	movw	r10, r8
    152c:	83 94       	inc	r8
		if (cs < 2) return 1;			/* It is an invalid cluster */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
    152e:	75 01       	movw	r14, r10
    1530:	64 01       	movw	r12, r8
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    1532:	44 24       	eor	r4, r4
    1534:	55 24       	eor	r5, r5
    1536:	32 01       	movw	r6, r4
    1538:	68 94       	set
    153a:	41 f8       	bld	r4, 1
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    153c:	08 94       	sec
    153e:	c1 1c       	adc	r12, r1
    1540:	d1 1c       	adc	r13, r1
    1542:	e1 1c       	adc	r14, r1
    1544:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1546:	f1 01       	movw	r30, r2
    1548:	82 8d       	ldd	r24, Z+26	; 0x1a
    154a:	93 8d       	ldd	r25, Z+27	; 0x1b
    154c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    154e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1550:	c8 16       	cp	r12, r24
    1552:	d9 06       	cpc	r13, r25
    1554:	ea 06       	cpc	r14, r26
    1556:	fb 06       	cpc	r15, r27
    1558:	48 f0       	brcs	.+18     	; 0x156c <create_chain+0xfc>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    155a:	f2 e0       	ldi	r31, 0x02	; 2
    155c:	8f 16       	cp	r8, r31
    155e:	91 04       	cpc	r9, r1
    1560:	a1 04       	cpc	r10, r1
    1562:	b1 04       	cpc	r11, r1
    1564:	08 f4       	brcc	.+2      	; 0x1568 <create_chain+0xf8>
    1566:	7c c0       	rjmp	.+248    	; 0x1660 <create_chain+0x1f0>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    1568:	73 01       	movw	r14, r6
    156a:	62 01       	movw	r12, r4
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    156c:	c1 01       	movw	r24, r2
    156e:	b7 01       	movw	r22, r14
    1570:	a6 01       	movw	r20, r12
    1572:	0e 94 58 07 	call	0xeb0	; 0xeb0 <get_fat>
    1576:	8b 01       	movw	r16, r22
    1578:	9c 01       	movw	r18, r24
		if (cs == 0) break;				/* Found a free cluster */
    157a:	61 15       	cp	r22, r1
    157c:	71 05       	cpc	r23, r1
    157e:	81 05       	cpc	r24, r1
    1580:	91 05       	cpc	r25, r1
    1582:	a9 f0       	breq	.+42     	; 0x15ae <create_chain+0x13e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1584:	0f 3f       	cpi	r16, 0xFF	; 255
    1586:	8f ef       	ldi	r24, 0xFF	; 255
    1588:	18 07       	cpc	r17, r24
    158a:	8f ef       	ldi	r24, 0xFF	; 255
    158c:	28 07       	cpc	r18, r24
    158e:	8f ef       	ldi	r24, 0xFF	; 255
    1590:	38 07       	cpc	r19, r24
    1592:	09 f4       	brne	.+2      	; 0x1596 <create_chain+0x126>
    1594:	74 c0       	rjmp	.+232    	; 0x167e <create_chain+0x20e>
    1596:	01 30       	cpi	r16, 0x01	; 1
    1598:	11 05       	cpc	r17, r1
    159a:	21 05       	cpc	r18, r1
    159c:	31 05       	cpc	r19, r1
    159e:	09 f4       	brne	.+2      	; 0x15a2 <create_chain+0x132>
    15a0:	6e c0       	rjmp	.+220    	; 0x167e <create_chain+0x20e>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    15a2:	c8 14       	cp	r12, r8
    15a4:	d9 04       	cpc	r13, r9
    15a6:	ea 04       	cpc	r14, r10
    15a8:	fb 04       	cpc	r15, r11
    15aa:	41 f6       	brne	.-112    	; 0x153c <create_chain+0xcc>
    15ac:	5d c0       	rjmp	.+186    	; 0x1668 <create_chain+0x1f8>
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
    15ae:	8c 2c       	mov	r8, r12
    15b0:	4d 2c       	mov	r4, r13
    15b2:	be 2c       	mov	r11, r14
    15b4:	af 2c       	mov	r10, r15
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    15b6:	c1 01       	movw	r24, r2
    15b8:	4c 2d       	mov	r20, r12
    15ba:	5d 2d       	mov	r21, r13
    15bc:	6e 2d       	mov	r22, r14
    15be:	7f 2d       	mov	r23, r15
    15c0:	0f ef       	ldi	r16, 0xFF	; 255
    15c2:	1f ef       	ldi	r17, 0xFF	; 255
    15c4:	2f ef       	ldi	r18, 0xFF	; 255
    15c6:	3f e0       	ldi	r19, 0x0F	; 15
    15c8:	0e 94 47 09 	call	0x128e	; 0x128e <put_fat>
	if (res == FR_OK && clst != 0) {
    15cc:	88 23       	and	r24, r24
    15ce:	e9 f5       	brne	.+122    	; 0x164a <create_chain+0x1da>
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	9a 81       	ldd	r25, Y+2	; 0x02
    15d4:	ab 81       	ldd	r26, Y+3	; 0x03
    15d6:	bc 81       	ldd	r27, Y+4	; 0x04
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	a1 05       	cpc	r26, r1
    15dc:	b1 05       	cpc	r27, r1
    15de:	69 f0       	breq	.+26     	; 0x15fa <create_chain+0x18a>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    15e0:	c1 01       	movw	r24, r2
    15e2:	49 81       	ldd	r20, Y+1	; 0x01
    15e4:	5a 81       	ldd	r21, Y+2	; 0x02
    15e6:	6b 81       	ldd	r22, Y+3	; 0x03
    15e8:	7c 81       	ldd	r23, Y+4	; 0x04
    15ea:	0c 2d       	mov	r16, r12
    15ec:	1d 2d       	mov	r17, r13
    15ee:	2e 2d       	mov	r18, r14
    15f0:	3f 2d       	mov	r19, r15
    15f2:	0e 94 47 09 	call	0x128e	; 0x128e <put_fat>
	}
	if (res == FR_OK) {
    15f6:	88 23       	and	r24, r24
    15f8:	41 f5       	brne	.+80     	; 0x164a <create_chain+0x1da>
		fs->last_clust = ncl;			/* Update FSINFO */
    15fa:	d1 01       	movw	r26, r2
    15fc:	1a 96       	adiw	r26, 0x0a	; 10
    15fe:	8c 92       	st	X, r8
    1600:	1a 97       	sbiw	r26, 0x0a	; 10
    1602:	1b 96       	adiw	r26, 0x0b	; 11
    1604:	4c 92       	st	X, r4
    1606:	1b 97       	sbiw	r26, 0x0b	; 11
    1608:	1c 96       	adiw	r26, 0x0c	; 12
    160a:	bc 92       	st	X, r11
    160c:	1c 97       	sbiw	r26, 0x0c	; 12
    160e:	1d 96       	adiw	r26, 0x0d	; 13
    1610:	ac 92       	st	X, r10
    1612:	1d 97       	sbiw	r26, 0x0d	; 13
		if (fs->free_clust != 0xFFFFFFFF) {
    1614:	1e 96       	adiw	r26, 0x0e	; 14
    1616:	8d 91       	ld	r24, X+
    1618:	9d 91       	ld	r25, X+
    161a:	0d 90       	ld	r0, X+
    161c:	bc 91       	ld	r27, X
    161e:	a0 2d       	mov	r26, r0
    1620:	8f 3f       	cpi	r24, 0xFF	; 255
    1622:	ef ef       	ldi	r30, 0xFF	; 255
    1624:	9e 07       	cpc	r25, r30
    1626:	ef ef       	ldi	r30, 0xFF	; 255
    1628:	ae 07       	cpc	r26, r30
    162a:	ef ef       	ldi	r30, 0xFF	; 255
    162c:	be 07       	cpc	r27, r30
    162e:	01 f1       	breq	.+64     	; 0x1670 <create_chain+0x200>
			fs->free_clust--;
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	a1 09       	sbc	r26, r1
    1634:	b1 09       	sbc	r27, r1
    1636:	f1 01       	movw	r30, r2
    1638:	86 87       	std	Z+14, r24	; 0x0e
    163a:	97 87       	std	Z+15, r25	; 0x0f
    163c:	a0 8b       	std	Z+16, r26	; 0x10
    163e:	b1 8b       	std	Z+17, r27	; 0x11
			fs->fsi_flag = 1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	85 83       	std	Z+5, r24	; 0x05
    1644:	97 01       	movw	r18, r14
    1646:	86 01       	movw	r16, r12
    1648:	1a c0       	rjmp	.+52     	; 0x167e <create_chain+0x20e>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	a1 f4       	brne	.+40     	; 0x1676 <create_chain+0x206>
    164e:	0f ef       	ldi	r16, 0xFF	; 255
    1650:	1f ef       	ldi	r17, 0xFF	; 255
    1652:	98 01       	movw	r18, r16
    1654:	14 c0       	rjmp	.+40     	; 0x167e <create_chain+0x20e>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1656:	01 e0       	ldi	r16, 0x01	; 1
    1658:	10 e0       	ldi	r17, 0x00	; 0
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	0f c0       	rjmp	.+30     	; 0x167e <create_chain+0x20e>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1660:	00 e0       	ldi	r16, 0x00	; 0
    1662:	10 e0       	ldi	r17, 0x00	; 0
    1664:	98 01       	movw	r18, r16
    1666:	0b c0       	rjmp	.+22     	; 0x167e <create_chain+0x20e>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1668:	00 e0       	ldi	r16, 0x00	; 0
    166a:	10 e0       	ldi	r17, 0x00	; 0
    166c:	98 01       	movw	r18, r16
    166e:	07 c0       	rjmp	.+14     	; 0x167e <create_chain+0x20e>
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
    1670:	97 01       	movw	r18, r14
    1672:	86 01       	movw	r16, r12
    1674:	04 c0       	rjmp	.+8      	; 0x167e <create_chain+0x20e>
			fs->free_clust--;
			fs->fsi_flag = 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1676:	01 e0       	ldi	r16, 0x01	; 1
    1678:	10 e0       	ldi	r17, 0x00	; 0
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
    167e:	60 2f       	mov	r22, r16
    1680:	71 2f       	mov	r23, r17
    1682:	82 2f       	mov	r24, r18
    1684:	93 2f       	mov	r25, r19
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	df 90       	pop	r13
    169c:	cf 90       	pop	r12
    169e:	bf 90       	pop	r11
    16a0:	af 90       	pop	r10
    16a2:	9f 90       	pop	r9
    16a4:	8f 90       	pop	r8
    16a6:	7f 90       	pop	r7
    16a8:	6f 90       	pop	r6
    16aa:	5f 90       	pop	r5
    16ac:	4f 90       	pop	r4
    16ae:	3f 90       	pop	r3
    16b0:	2f 90       	pop	r2
    16b2:	08 95       	ret

000016b4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIRS *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    16b4:	8f 92       	push	r8
    16b6:	9f 92       	push	r9
    16b8:	af 92       	push	r10
    16ba:	bf 92       	push	r11
    16bc:	cf 92       	push	r12
    16be:	df 92       	push	r13
    16c0:	ef 92       	push	r14
    16c2:	ff 92       	push	r15
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	8c 01       	movw	r16, r24
    16ce:	eb 01       	movw	r28, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    16d0:	dc 01       	movw	r26, r24
    16d2:	14 96       	adiw	r26, 0x04	; 4
    16d4:	ed 90       	ld	r14, X+
    16d6:	fc 90       	ld	r15, X
    16d8:	15 97       	sbiw	r26, 0x05	; 5
    16da:	08 94       	sec
    16dc:	e1 1c       	adc	r14, r1
    16de:	f1 1c       	adc	r15, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    16e0:	e1 14       	cp	r14, r1
    16e2:	f1 04       	cpc	r15, r1
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <dir_next+0x34>
    16e6:	09 c1       	rjmp	.+530    	; 0x18fa <dir_next+0x246>
    16e8:	1e 96       	adiw	r26, 0x0e	; 14
    16ea:	8d 91       	ld	r24, X+
    16ec:	9d 91       	ld	r25, X+
    16ee:	0d 90       	ld	r0, X+
    16f0:	bc 91       	ld	r27, X
    16f2:	a0 2d       	mov	r26, r0
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	a1 05       	cpc	r26, r1
    16f8:	b1 05       	cpc	r27, r1
    16fa:	09 f4       	brne	.+2      	; 0x16fe <dir_next+0x4a>
    16fc:	00 c1       	rjmp	.+512    	; 0x18fe <dir_next+0x24a>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    16fe:	0f 2e       	mov	r0, r31
    1700:	ff e0       	ldi	r31, 0x0F	; 15
    1702:	cf 2e       	mov	r12, r31
    1704:	dd 24       	eor	r13, r13
    1706:	f0 2d       	mov	r31, r0
    1708:	ce 20       	and	r12, r14
    170a:	df 20       	and	r13, r15
    170c:	c1 14       	cp	r12, r1
    170e:	d1 04       	cpc	r13, r1
    1710:	09 f0       	breq	.+2      	; 0x1714 <dir_next+0x60>
    1712:	d8 c0       	rjmp	.+432    	; 0x18c4 <dir_next+0x210>
		dj->sect++;					/* Next sector */
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	a1 1d       	adc	r26, r1
    1718:	b1 1d       	adc	r27, r1
    171a:	f8 01       	movw	r30, r16
    171c:	86 87       	std	Z+14, r24	; 0x0e
    171e:	97 87       	std	Z+15, r25	; 0x0f
    1720:	a0 8b       	std	Z+16, r26	; 0x10
    1722:	b1 8b       	std	Z+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1724:	42 85       	ldd	r20, Z+10	; 0x0a
    1726:	53 85       	ldd	r21, Z+11	; 0x0b
    1728:	64 85       	ldd	r22, Z+12	; 0x0c
    172a:	75 85       	ldd	r23, Z+13	; 0x0d
    172c:	41 15       	cp	r20, r1
    172e:	51 05       	cpc	r21, r1
    1730:	61 05       	cpc	r22, r1
    1732:	71 05       	cpc	r23, r1
    1734:	51 f4       	brne	.+20     	; 0x174a <dir_next+0x96>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1736:	01 90       	ld	r0, Z+
    1738:	f0 81       	ld	r31, Z
    173a:	e0 2d       	mov	r30, r0
    173c:	80 85       	ldd	r24, Z+8	; 0x08
    173e:	91 85       	ldd	r25, Z+9	; 0x09
    1740:	e8 16       	cp	r14, r24
    1742:	f9 06       	cpc	r15, r25
    1744:	08 f0       	brcs	.+2      	; 0x1748 <dir_next+0x94>
    1746:	dd c0       	rjmp	.+442    	; 0x1902 <dir_next+0x24e>
    1748:	bd c0       	rjmp	.+378    	; 0x18c4 <dir_next+0x210>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    174a:	01 90       	ld	r0, Z+
    174c:	f0 81       	ld	r31, Z
    174e:	e0 2d       	mov	r30, r0
    1750:	82 81       	ldd	r24, Z+2	; 0x02
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	97 01       	movw	r18, r14
    1758:	32 95       	swap	r19
    175a:	22 95       	swap	r18
    175c:	2f 70       	andi	r18, 0x0F	; 15
    175e:	23 27       	eor	r18, r19
    1760:	3f 70       	andi	r19, 0x0F	; 15
    1762:	23 27       	eor	r18, r19
    1764:	82 23       	and	r24, r18
    1766:	93 23       	and	r25, r19
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	09 f0       	breq	.+2      	; 0x176e <dir_next+0xba>
    176c:	ab c0       	rjmp	.+342    	; 0x18c4 <dir_next+0x210>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    176e:	cf 01       	movw	r24, r30
    1770:	0e 94 58 07 	call	0xeb0	; 0xeb0 <get_fat>
    1774:	4b 01       	movw	r8, r22
    1776:	5c 01       	movw	r10, r24
				if (clst <= 1) return FR_INT_ERR;
    1778:	62 30       	cpi	r22, 0x02	; 2
    177a:	71 05       	cpc	r23, r1
    177c:	81 05       	cpc	r24, r1
    177e:	91 05       	cpc	r25, r1
    1780:	08 f4       	brcc	.+2      	; 0x1784 <dir_next+0xd0>
    1782:	c1 c0       	rjmp	.+386    	; 0x1906 <dir_next+0x252>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1784:	6f 3f       	cpi	r22, 0xFF	; 255
    1786:	ef ef       	ldi	r30, 0xFF	; 255
    1788:	7e 07       	cpc	r23, r30
    178a:	ef ef       	ldi	r30, 0xFF	; 255
    178c:	8e 07       	cpc	r24, r30
    178e:	ef ef       	ldi	r30, 0xFF	; 255
    1790:	9e 07       	cpc	r25, r30
    1792:	09 f4       	brne	.+2      	; 0x1796 <dir_next+0xe2>
    1794:	ba c0       	rjmp	.+372    	; 0x190a <dir_next+0x256>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    1796:	d8 01       	movw	r26, r16
    1798:	ed 91       	ld	r30, X+
    179a:	fc 91       	ld	r31, X
    179c:	82 8d       	ldd	r24, Z+26	; 0x1a
    179e:	93 8d       	ldd	r25, Z+27	; 0x1b
    17a0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    17a2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    17a4:	88 16       	cp	r8, r24
    17a6:	99 06       	cpc	r9, r25
    17a8:	aa 06       	cpc	r10, r26
    17aa:	bb 06       	cpc	r11, r27
    17ac:	08 f4       	brcc	.+2      	; 0x17b0 <dir_next+0xfc>
    17ae:	78 c0       	rjmp	.+240    	; 0x18a0 <dir_next+0x1ec>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    17b0:	20 97       	sbiw	r28, 0x00	; 0
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <dir_next+0x102>
    17b4:	ac c0       	rjmp	.+344    	; 0x190e <dir_next+0x25a>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    17b6:	d8 01       	movw	r26, r16
    17b8:	1a 96       	adiw	r26, 0x0a	; 10
    17ba:	4d 91       	ld	r20, X+
    17bc:	5d 91       	ld	r21, X+
    17be:	6d 91       	ld	r22, X+
    17c0:	7c 91       	ld	r23, X
    17c2:	1d 97       	sbiw	r26, 0x0d	; 13
    17c4:	cf 01       	movw	r24, r30
    17c6:	0e 94 38 0a 	call	0x1470	; 0x1470 <create_chain>
    17ca:	4b 01       	movw	r8, r22
    17cc:	5c 01       	movw	r10, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    17ce:	61 15       	cp	r22, r1
    17d0:	71 05       	cpc	r23, r1
    17d2:	81 05       	cpc	r24, r1
    17d4:	91 05       	cpc	r25, r1
    17d6:	09 f4       	brne	.+2      	; 0x17da <dir_next+0x126>
    17d8:	9c c0       	rjmp	.+312    	; 0x1912 <dir_next+0x25e>
					if (clst == 1) return FR_INT_ERR;
    17da:	61 30       	cpi	r22, 0x01	; 1
    17dc:	71 05       	cpc	r23, r1
    17de:	81 05       	cpc	r24, r1
    17e0:	91 05       	cpc	r25, r1
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <dir_next+0x132>
    17e4:	98 c0       	rjmp	.+304    	; 0x1916 <dir_next+0x262>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    17e6:	6f 3f       	cpi	r22, 0xFF	; 255
    17e8:	ef ef       	ldi	r30, 0xFF	; 255
    17ea:	7e 07       	cpc	r23, r30
    17ec:	ef ef       	ldi	r30, 0xFF	; 255
    17ee:	8e 07       	cpc	r24, r30
    17f0:	ef ef       	ldi	r30, 0xFF	; 255
    17f2:	9e 07       	cpc	r25, r30
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <dir_next+0x144>
    17f6:	91 c0       	rjmp	.+290    	; 0x191a <dir_next+0x266>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    17f8:	d8 01       	movw	r26, r16
    17fa:	8d 91       	ld	r24, X+
    17fc:	9c 91       	ld	r25, X
    17fe:	40 e0       	ldi	r20, 0x00	; 0
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	ba 01       	movw	r22, r20
    1804:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
    1808:	88 23       	and	r24, r24
    180a:	09 f0       	breq	.+2      	; 0x180e <dir_next+0x15a>
    180c:	88 c0       	rjmp	.+272    	; 0x191e <dir_next+0x26a>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    180e:	f8 01       	movw	r30, r16
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	c2 96       	adiw	r24, 0x32	; 50
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	52 e0       	ldi	r21, 0x02	; 2
    181e:	0e 94 75 00 	call	0xea	; 0xea <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1822:	d8 01       	movw	r26, r16
    1824:	cd 91       	ld	r28, X+
    1826:	dc 91       	ld	r29, X
    1828:	ce 01       	movw	r24, r28
    182a:	b5 01       	movw	r22, r10
    182c:	a4 01       	movw	r20, r8
    182e:	0e 94 22 07 	call	0xe44	; 0xe44 <clust2sect>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	8e a7       	lds	r24, 0x7e
    1838:	9f a7       	lds	r25, 0x7f
    183a:	a8 ab       	sts	0x58, r26
    183c:	b9 ab       	sts	0x59, r27
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    183e:	c0 e0       	ldi	r28, 0x00	; 0
						dj->fs->wflag = 1;
    1840:	d1 e0       	ldi	r29, 0x01	; 1
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1842:	1b c0       	rjmp	.+54     	; 0x187a <dir_next+0x1c6>
						dj->fs->wflag = 1;
    1844:	d4 83       	std	Z+4, r29	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1846:	f8 01       	movw	r30, r16
    1848:	80 81       	ld	r24, Z
    184a:	91 81       	ldd	r25, Z+1	; 0x01
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	ba 01       	movw	r22, r20
    1852:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
    1856:	88 23       	and	r24, r24
    1858:	09 f0       	breq	.+2      	; 0x185c <dir_next+0x1a8>
    185a:	63 c0       	rjmp	.+198    	; 0x1922 <dir_next+0x26e>
						dj->fs->winsect++;
    185c:	d8 01       	movw	r26, r16
    185e:	ed 91       	ld	r30, X+
    1860:	fc 91       	ld	r31, X
    1862:	86 a5       	lds	r24, 0x66
    1864:	97 a5       	lds	r25, 0x67
    1866:	a0 a9       	sts	0x40, r26
    1868:	b1 a9       	sts	0x41, r27
    186a:	01 96       	adiw	r24, 0x01	; 1
    186c:	a1 1d       	adc	r26, r1
    186e:	b1 1d       	adc	r27, r1
    1870:	86 a7       	lds	r24, 0x76
    1872:	97 a7       	lds	r25, 0x77
    1874:	a0 ab       	sts	0x50, r26
    1876:	b1 ab       	sts	0x51, r27
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1878:	cf 5f       	subi	r28, 0xFF	; 255
    187a:	d8 01       	movw	r26, r16
    187c:	ed 91       	ld	r30, X+
    187e:	fc 91       	ld	r31, X
    1880:	11 97       	sbiw	r26, 0x01	; 1
    1882:	82 81       	ldd	r24, Z+2	; 0x02
    1884:	c8 17       	cp	r28, r24
    1886:	f0 f2       	brcs	.-68     	; 0x1844 <dir_next+0x190>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    1888:	86 a5       	lds	r24, 0x66
    188a:	97 a5       	lds	r25, 0x67
    188c:	a0 a9       	sts	0x40, r26
    188e:	b1 a9       	sts	0x41, r27
    1890:	8c 1b       	sub	r24, r28
    1892:	91 09       	sbc	r25, r1
    1894:	a1 09       	sbc	r26, r1
    1896:	b1 09       	sbc	r27, r1
    1898:	86 a7       	lds	r24, 0x76
    189a:	97 a7       	lds	r25, 0x77
    189c:	a0 ab       	sts	0x50, r26
    189e:	b1 ab       	sts	0x51, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    18a0:	f8 01       	movw	r30, r16
    18a2:	82 86       	std	Z+10, r8	; 0x0a
    18a4:	93 86       	std	Z+11, r9	; 0x0b
    18a6:	a4 86       	std	Z+12, r10	; 0x0c
    18a8:	b5 86       	std	Z+13, r11	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    18aa:	80 81       	ld	r24, Z
    18ac:	91 81       	ldd	r25, Z+1	; 0x01
    18ae:	b5 01       	movw	r22, r10
    18b0:	a4 01       	movw	r20, r8
    18b2:	0e 94 22 07 	call	0xe44	; 0xe44 <clust2sect>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	f8 01       	movw	r30, r16
    18bc:	86 87       	std	Z+14, r24	; 0x0e
    18be:	97 87       	std	Z+15, r25	; 0x0f
    18c0:	a0 8b       	std	Z+16, r26	; 0x10
    18c2:	b1 8b       	std	Z+17, r27	; 0x11
			}
		}
	}

	dj->index = i;
    18c4:	d8 01       	movw	r26, r16
    18c6:	15 96       	adiw	r26, 0x05	; 5
    18c8:	fc 92       	st	X, r15
    18ca:	ee 92       	st	-X, r14
    18cc:	14 97       	sbiw	r26, 0x04	; 4
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    18ce:	8d 91       	ld	r24, X+
    18d0:	9c 91       	ld	r25, X
    18d2:	11 97       	sbiw	r26, 0x01	; 1
    18d4:	c2 96       	adiw	r24, 0x32	; 50
    18d6:	cc 0c       	add	r12, r12
    18d8:	dd 1c       	adc	r13, r13
    18da:	cc 0c       	add	r12, r12
    18dc:	dd 1c       	adc	r13, r13
    18de:	cc 0c       	add	r12, r12
    18e0:	dd 1c       	adc	r13, r13
    18e2:	cc 0c       	add	r12, r12
    18e4:	dd 1c       	adc	r13, r13
    18e6:	cc 0c       	add	r12, r12
    18e8:	dd 1c       	adc	r13, r13
    18ea:	8c 0d       	add	r24, r12
    18ec:	9d 1d       	adc	r25, r13
    18ee:	53 96       	adiw	r26, 0x13	; 19
    18f0:	9c 93       	st	X, r25
    18f2:	8e 93       	st	-X, r24
    18f4:	52 97       	sbiw	r26, 0x12	; 18

	return FR_OK;
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	15 c0       	rjmp	.+42     	; 0x1924 <dir_next+0x270>
	WORD i;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
    18fa:	84 e0       	ldi	r24, 0x04	; 4
    18fc:	13 c0       	rjmp	.+38     	; 0x1924 <dir_next+0x270>
    18fe:	84 e0       	ldi	r24, 0x04	; 4
    1900:	11 c0       	rjmp	.+34     	; 0x1924 <dir_next+0x270>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
    1902:	84 e0       	ldi	r24, 0x04	; 4
    1904:	0f c0       	rjmp	.+30     	; 0x1924 <dir_next+0x270>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	0d c0       	rjmp	.+26     	; 0x1924 <dir_next+0x270>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	0b c0       	rjmp	.+22     	; 0x1924 <dir_next+0x270>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    190e:	84 e0       	ldi	r24, 0x04	; 4
    1910:	09 c0       	rjmp	.+18     	; 0x1924 <dir_next+0x270>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1912:	87 e0       	ldi	r24, 0x07	; 7
    1914:	07 c0       	rjmp	.+14     	; 0x1924 <dir_next+0x270>
					if (clst == 1) return FR_INT_ERR;
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	05 c0       	rjmp	.+10     	; 0x1924 <dir_next+0x270>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <dir_next+0x270>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	01 c0       	rjmp	.+2      	; 0x1924 <dir_next+0x270>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1922:	81 e0       	ldi	r24, 0x01	; 1

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	ff 90       	pop	r15
    192e:	ef 90       	pop	r14
    1930:	df 90       	pop	r13
    1932:	cf 90       	pop	r12
    1934:	bf 90       	pop	r11
    1936:	af 90       	pop	r10
    1938:	9f 90       	pop	r9
    193a:	8f 90       	pop	r8
    193c:	08 95       	ret

0000193e <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIRS *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    193e:	2f 92       	push	r2
    1940:	3f 92       	push	r3
    1942:	4f 92       	push	r4
    1944:	5f 92       	push	r5
    1946:	6f 92       	push	r6
    1948:	7f 92       	push	r7
    194a:	8f 92       	push	r8
    194c:	9f 92       	push	r9
    194e:	af 92       	push	r10
    1950:	bf 92       	push	r11
    1952:	cf 92       	push	r12
    1954:	df 92       	push	r13
    1956:	ef 92       	push	r14
    1958:	ff 92       	push	r15
    195a:	0f 93       	push	r16
    195c:	1f 93       	push	r17
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	28 97       	sbiw	r28, 0x08	; 8
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	8c 01       	movw	r16, r24
    1974:	5b 01       	movw	r10, r22
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    1976:	db 01       	movw	r26, r22
    1978:	8c 91       	ld	r24, X
    197a:	8f 32       	cpi	r24, 0x2F	; 47
    197c:	11 f0       	breq	.+4      	; 0x1982 <follow_path+0x44>
    197e:	8c 35       	cpi	r24, 0x5C	; 92
    1980:	49 f4       	brne	.+18     	; 0x1994 <follow_path+0x56>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    1982:	08 94       	sec
    1984:	a1 1c       	adc	r10, r1
    1986:	b1 1c       	adc	r11, r1
    1988:	f8 01       	movw	r30, r16
    198a:	16 82       	std	Z+6, r1	; 0x06
    198c:	17 82       	std	Z+7, r1	; 0x07
    198e:	10 86       	std	Z+8, r1	; 0x08
    1990:	11 86       	std	Z+9, r1	; 0x09
    1992:	0c c0       	rjmp	.+24     	; 0x19ac <follow_path+0x6e>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    1994:	d8 01       	movw	r26, r16
    1996:	ed 91       	ld	r30, X+
    1998:	fc 91       	ld	r31, X
    199a:	86 89       	ldd	r24, Z+22	; 0x16
    199c:	97 89       	ldd	r25, Z+23	; 0x17
    199e:	a0 8d       	ldd	r26, Z+24	; 0x18
    19a0:	b1 8d       	ldd	r27, Z+25	; 0x19
    19a2:	f8 01       	movw	r30, r16
    19a4:	86 83       	std	Z+6, r24	; 0x06
    19a6:	97 83       	std	Z+7, r25	; 0x07
    19a8:	a0 87       	std	Z+8, r26	; 0x08
    19aa:	b1 87       	std	Z+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    19ac:	d5 01       	movw	r26, r10
    19ae:	8c 91       	ld	r24, X
    19b0:	80 32       	cpi	r24, 0x20	; 32
    19b2:	50 f4       	brcc	.+20     	; 0x19c8 <follow_path+0x8a>
		res = dir_sdi(dj, 0);
    19b4:	c8 01       	movw	r24, r16
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	0e 94 64 08 	call	0x10c8	; 0x10c8 <dir_sdi>
    19be:	48 2f       	mov	r20, r24
		dj->dir = 0;
    19c0:	f8 01       	movw	r30, r16
    19c2:	13 8a       	std	Z+19, r1	; 0x13
    19c4:	12 8a       	std	Z+18, r1	; 0x12
    19c6:	7c c1       	rjmp	.+760    	; 0x1cc0 <follow_path+0x382>
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
    19c8:	0f 2e       	mov	r0, r31
    19ca:	fb e0       	ldi	r31, 0x0B	; 11
    19cc:	6f 2e       	mov	r6, r31
    19ce:	77 24       	eor	r7, r7
    19d0:	f0 2d       	mov	r31, r0
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    19d2:	ee 24       	eor	r14, r14
    19d4:	ff 24       	eor	r15, r15
    19d6:	44 24       	eor	r4, r4
    19d8:	55 24       	eor	r5, r5
    19da:	68 94       	set
    19dc:	43 f8       	bld	r4, 3
    19de:	88 24       	eor	r8, r8
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    19e0:	4b 82       	std	Y+3, r4	; 0x03
    19e2:	5c 82       	std	Y+4, r5	; 0x04
    19e4:	6d 82       	std	Y+5, r6	; 0x05
    19e6:	7e 82       	std	Y+6, r7	; 0x06
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
		res = dir_sdi(dj, 0);
		dj->dir = 0;
    19e8:	f5 01       	movw	r30, r10
    19ea:	9f 01       	movw	r18, r30
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    19ec:	81 91       	ld	r24, Z+
    19ee:	8f 32       	cpi	r24, 0x2F	; 47
    19f0:	e1 f3       	breq	.-8      	; 0x19ea <follow_path+0xac>
    19f2:	8c 35       	cpi	r24, 0x5C	; 92
    19f4:	d1 f3       	breq	.-12     	; 0x19ea <follow_path+0xac>
    19f6:	38 87       	std	Y+8, r19	; 0x08
    19f8:	2f 83       	std	Y+7, r18	; 0x07
	sfn = dj->fn;
    19fa:	d8 01       	movw	r26, r16
    19fc:	54 96       	adiw	r26, 0x14	; 20
    19fe:	cd 90       	ld	r12, X+
    1a00:	dc 90       	ld	r13, X
    1a02:	55 97       	sbiw	r26, 0x15	; 21
	mem_set(sfn, ' ', 11);
    1a04:	c6 01       	movw	r24, r12
    1a06:	60 e2       	ldi	r22, 0x20	; 32
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	a3 01       	movw	r20, r6
    1a0c:	0e 94 75 00 	call	0xea	; 0xea <mem_set>
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    1a10:	ef 81       	ldd	r30, Y+7	; 0x07
    1a12:	f8 85       	ldd	r31, Y+8	; 0x08
    1a14:	80 81       	ld	r24, Z
    1a16:	8e 32       	cpi	r24, 0x2E	; 46
    1a18:	59 f5       	brne	.+86     	; 0x1a70 <follow_path+0x132>
		for (;;) {
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
    1a1a:	ee e2       	ldi	r30, 0x2E	; 46
    1a1c:	d6 01       	movw	r26, r12
    1a1e:	ec 93       	st	X, r30
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    1a20:	af 81       	ldd	r26, Y+7	; 0x07
    1a22:	b8 85       	ldd	r27, Y+8	; 0x08
    1a24:	11 96       	adiw	r26, 0x01	; 1
    1a26:	2c 91       	ld	r18, X
    1a28:	11 97       	sbiw	r26, 0x01	; 1
			if (c != '.' || si >= 3) break;
    1a2a:	2e 32       	cpi	r18, 0x2E	; 46
    1a2c:	51 f4       	brne	.+20     	; 0x1a42 <follow_path+0x104>
			sfn[i++] = c;
    1a2e:	f6 01       	movw	r30, r12
    1a30:	21 83       	std	Z+1, r18	; 0x01
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    1a32:	12 96       	adiw	r26, 0x02	; 2
    1a34:	2c 91       	ld	r18, X
    1a36:	12 97       	sbiw	r26, 0x02	; 2
			if (c != '.' || si >= 3) break;
    1a38:	2e 32       	cpi	r18, 0x2E	; 46
    1a3a:	51 f0       	breq	.+20     	; 0x1a50 <follow_path+0x112>
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    1a3c:	83 e0       	ldi	r24, 0x03	; 3
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <follow_path+0x108>
    1a42:	82 e0       	ldi	r24, 0x02	; 2
    1a44:	90 e0       	ldi	r25, 0x00	; 0
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    1a46:	2f 32       	cpi	r18, 0x2F	; 47
    1a48:	49 f0       	breq	.+18     	; 0x1a5c <follow_path+0x11e>
    1a4a:	2c 35       	cpi	r18, 0x5C	; 92
    1a4c:	39 f0       	breq	.+14     	; 0x1a5c <follow_path+0x11e>
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <follow_path+0x116>
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    1a50:	83 e0       	ldi	r24, 0x03	; 3
    1a52:	90 e0       	ldi	r25, 0x00	; 0
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    1a54:	21 32       	cpi	r18, 0x21	; 33
    1a56:	08 f0       	brcs	.+2      	; 0x1a5a <follow_path+0x11c>
    1a58:	22 c1       	rjmp	.+580    	; 0x1c9e <follow_path+0x360>
    1a5a:	4c c1       	rjmp	.+664    	; 0x1cf4 <follow_path+0x3b6>
		*path = &p[si];									/* Return pointer to the next segment */
    1a5c:	af 80       	ldd	r10, Y+7	; 0x07
    1a5e:	b8 84       	ldd	r11, Y+8	; 0x08
    1a60:	a8 0e       	add	r10, r24
    1a62:	b9 1e       	adc	r11, r25
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    1a64:	80 e2       	ldi	r24, 0x20	; 32
    1a66:	d6 01       	movw	r26, r12
    1a68:	1b 96       	adiw	r26, 0x0b	; 11
    1a6a:	8c 93       	st	X, r24
    1a6c:	1b 97       	sbiw	r26, 0x0b	; 11
    1a6e:	4f c1       	rjmp	.+670    	; 0x1d0e <follow_path+0x3d0>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    1a70:	b7 01       	movw	r22, r14
    1a72:	a7 01       	movw	r20, r14
    1a74:	d2 01       	movw	r26, r4
    1a76:	98 2c       	mov	r9, r8
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    1a78:	ef 81       	ldd	r30, Y+7	; 0x07
    1a7a:	f8 85       	ldd	r31, Y+8	; 0x08
    1a7c:	e4 0f       	add	r30, r20
    1a7e:	f5 1f       	adc	r31, r21
    1a80:	20 81       	ld	r18, Z
    1a82:	5a 01       	movw	r10, r20
    1a84:	08 94       	sec
    1a86:	a1 1c       	adc	r10, r1
    1a88:	b1 1c       	adc	r11, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    1a8a:	21 32       	cpi	r18, 0x21	; 33
    1a8c:	08 f4       	brcc	.+2      	; 0x1a90 <follow_path+0x152>
    1a8e:	69 c0       	rjmp	.+210    	; 0x1b62 <follow_path+0x224>
    1a90:	2f 32       	cpi	r18, 0x2F	; 47
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <follow_path+0x158>
    1a94:	35 c1       	rjmp	.+618    	; 0x1d00 <follow_path+0x3c2>
    1a96:	2c 35       	cpi	r18, 0x5C	; 92
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <follow_path+0x15e>
    1a9a:	32 c1       	rjmp	.+612    	; 0x1d00 <follow_path+0x3c2>
		if (c == '.' || i >= ni) {
    1a9c:	2e 32       	cpi	r18, 0x2E	; 46
    1a9e:	19 f0       	breq	.+6      	; 0x1aa6 <follow_path+0x168>
    1aa0:	6a 17       	cp	r22, r26
    1aa2:	7b 07       	cpc	r23, r27
    1aa4:	78 f0       	brcs	.+30     	; 0x1ac4 <follow_path+0x186>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1aa6:	a8 30       	cpi	r26, 0x08	; 8
    1aa8:	b1 05       	cpc	r27, r1
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <follow_path+0x170>
    1aac:	fa c0       	rjmp	.+500    	; 0x1ca2 <follow_path+0x364>
    1aae:	2e 32       	cpi	r18, 0x2E	; 46
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <follow_path+0x176>
    1ab2:	f9 c0       	rjmp	.+498    	; 0x1ca6 <follow_path+0x368>
			i = 8; ni = 11;
			b <<= 2; continue;
    1ab4:	99 0c       	add	r9, r9
    1ab6:	99 0c       	add	r9, r9
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    1ab8:	a5 01       	movw	r20, r10
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    1aba:	6b 81       	ldd	r22, Y+3	; 0x03
    1abc:	7c 81       	ldd	r23, Y+4	; 0x04
    1abe:	ad 81       	ldd	r26, Y+5	; 0x05
    1ac0:	be 81       	ldd	r27, Y+6	; 0x06
    1ac2:	da cf       	rjmp	.-76     	; 0x1a78 <follow_path+0x13a>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char? */
    1ac4:	22 23       	and	r18, r18
    1ac6:	14 f4       	brge	.+4      	; 0x1acc <follow_path+0x18e>
			b |= 3;						/* Eliminate NT flag */
    1ac8:	f3 e0       	ldi	r31, 0x03	; 3
    1aca:	9f 2a       	or	r9, r31
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    1acc:	82 2f       	mov	r24, r18
    1ace:	81 58       	subi	r24, 0x81	; 129
    1ad0:	8f 31       	cpi	r24, 0x1F	; 31
    1ad2:	18 f0       	brcs	.+6      	; 0x1ada <follow_path+0x19c>
    1ad4:	8f 55       	subi	r24, 0x5F	; 95
    1ad6:	8d 31       	cpi	r24, 0x1D	; 29
    1ad8:	e8 f4       	brcc	.+58     	; 0x1b14 <follow_path+0x1d6>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    1ada:	ef 81       	ldd	r30, Y+7	; 0x07
    1adc:	f8 85       	ldd	r31, Y+8	; 0x08
    1ade:	ea 0d       	add	r30, r10
    1ae0:	fb 1d       	adc	r31, r11
    1ae2:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    1ae4:	83 2f       	mov	r24, r19
    1ae6:	80 54       	subi	r24, 0x40	; 64
    1ae8:	8f 33       	cpi	r24, 0x3F	; 63
    1aea:	20 f0       	brcs	.+8      	; 0x1af4 <follow_path+0x1b6>
    1aec:	80 54       	subi	r24, 0x40	; 64
    1aee:	8d 37       	cpi	r24, 0x7D	; 125
    1af0:	08 f0       	brcs	.+2      	; 0x1af4 <follow_path+0x1b6>
    1af2:	db c0       	rjmp	.+438    	; 0x1caa <follow_path+0x36c>
    1af4:	cd 01       	movw	r24, r26
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	68 17       	cp	r22, r24
    1afa:	79 07       	cpc	r23, r25
    1afc:	08 f0       	brcs	.+2      	; 0x1b00 <follow_path+0x1c2>
    1afe:	d7 c0       	rjmp	.+430    	; 0x1cae <follow_path+0x370>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    1b00:	4e 5f       	subi	r20, 0xFE	; 254
    1b02:	5f 4f       	sbci	r21, 0xFF	; 255
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    1b04:	f6 01       	movw	r30, r12
    1b06:	e6 0f       	add	r30, r22
    1b08:	f7 1f       	adc	r31, r23
    1b0a:	20 83       	st	Z, r18
			sfn[i++] = d;
    1b0c:	31 83       	std	Z+1, r19	; 0x01
    1b0e:	6e 5f       	subi	r22, 0xFE	; 254
    1b10:	7f 4f       	sbci	r23, 0xFF	; 255
    1b12:	b2 cf       	rjmp	.-156    	; 0x1a78 <follow_path+0x13a>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    1b14:	42 2f       	mov	r20, r18
    1b16:	50 e0       	ldi	r21, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    1b18:	42 32       	cpi	r20, 0x22	; 34
    1b1a:	51 05       	cpc	r21, r1
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <follow_path+0x1e2>
    1b1e:	c9 c0       	rjmp	.+402    	; 0x1cb2 <follow_path+0x374>
    1b20:	e1 e0       	ldi	r30, 0x01	; 1
    1b22:	f1 e0       	ldi	r31, 0x01	; 1
    1b24:	81 91       	ld	r24, Z+
    1b26:	88 23       	and	r24, r24
    1b28:	31 f0       	breq	.+12     	; 0x1b36 <follow_path+0x1f8>
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	48 17       	cp	r20, r24
    1b2e:	59 07       	cpc	r21, r25
    1b30:	c9 f7       	brne	.-14     	; 0x1b24 <follow_path+0x1e6>
    1b32:	46 e0       	ldi	r20, 0x06	; 6
    1b34:	c5 c0       	rjmp	.+394    	; 0x1cc0 <follow_path+0x382>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    1b36:	82 2f       	mov	r24, r18
    1b38:	81 54       	subi	r24, 0x41	; 65
    1b3a:	8a 31       	cpi	r24, 0x1A	; 26
    1b3c:	18 f4       	brcc	.+6      	; 0x1b44 <follow_path+0x206>
				b |= 2;
    1b3e:	f2 e0       	ldi	r31, 0x02	; 2
    1b40:	9f 2a       	or	r9, r31
    1b42:	07 c0       	rjmp	.+14     	; 0x1b52 <follow_path+0x214>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    1b44:	82 2f       	mov	r24, r18
    1b46:	81 56       	subi	r24, 0x61	; 97
    1b48:	8a 31       	cpi	r24, 0x1A	; 26
    1b4a:	18 f4       	brcc	.+6      	; 0x1b52 <follow_path+0x214>
					b |= 1; c -= 0x20;
    1b4c:	31 e0       	ldi	r19, 0x01	; 1
    1b4e:	93 2a       	or	r9, r19
    1b50:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    1b52:	f6 01       	movw	r30, r12
    1b54:	e6 0f       	add	r30, r22
    1b56:	f7 1f       	adc	r31, r23
    1b58:	20 83       	st	Z, r18
    1b5a:	6f 5f       	subi	r22, 0xFF	; 255
    1b5c:	7f 4f       	sbci	r23, 0xFF	; 255
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    1b5e:	a5 01       	movw	r20, r10
    1b60:	8b cf       	rjmp	.-234    	; 0x1a78 <follow_path+0x13a>
    1b62:	8f 81       	ldd	r24, Y+7	; 0x07
    1b64:	98 85       	ldd	r25, Y+8	; 0x08
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    1b66:	a8 0e       	add	r10, r24
    1b68:	b9 1e       	adc	r11, r25
    1b6a:	99 2d       	mov	r25, r9
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1b6c:	44 e0       	ldi	r20, 0x04	; 4

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    1b6e:	61 15       	cp	r22, r1
    1b70:	71 05       	cpc	r23, r1
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <follow_path+0x238>
    1b74:	a0 c0       	rjmp	.+320    	; 0x1cb6 <follow_path+0x378>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    1b76:	f6 01       	movw	r30, r12
    1b78:	80 81       	ld	r24, Z
    1b7a:	85 3e       	cpi	r24, 0xE5	; 229
    1b7c:	11 f4       	brne	.+4      	; 0x1b82 <follow_path+0x244>
    1b7e:	25 e0       	ldi	r18, 0x05	; 5
    1b80:	20 83       	st	Z, r18

	if (ni == 8) b <<= 2;
    1b82:	a8 30       	cpi	r26, 0x08	; 8
    1b84:	b1 05       	cpc	r27, r1
    1b86:	19 f4       	brne	.+6      	; 0x1b8e <follow_path+0x250>
    1b88:	99 2e       	mov	r9, r25
    1b8a:	99 0c       	add	r9, r9
    1b8c:	99 0c       	add	r9, r9
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    1b8e:	89 2d       	mov	r24, r9
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	9c 01       	movw	r18, r24
    1b94:	23 70       	andi	r18, 0x03	; 3
    1b96:	30 70       	andi	r19, 0x00	; 0
    1b98:	21 30       	cpi	r18, 0x01	; 1
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	09 f4       	brne	.+2      	; 0x1ba0 <follow_path+0x262>
    1b9e:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    1ba0:	8c 70       	andi	r24, 0x0C	; 12
    1ba2:	90 70       	andi	r25, 0x00	; 0
    1ba4:	84 30       	cpi	r24, 0x04	; 4
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <follow_path+0x26e>
    1baa:	48 60       	ori	r20, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    1bac:	d6 01       	movw	r26, r12
    1bae:	1b 96       	adiw	r26, 0x0b	; 11
    1bb0:	4c 93       	st	X, r20
    1bb2:	1b 97       	sbiw	r26, 0x0b	; 11
    1bb4:	ac c0       	rjmp	.+344    	; 0x1d0e <follow_path+0x3d0>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	46 85       	ldd	r20, Z+14	; 0x0e
    1bba:	57 85       	ldd	r21, Z+15	; 0x0f
    1bbc:	60 89       	ldd	r22, Z+16	; 0x10
    1bbe:	71 89       	ldd	r23, Z+17	; 0x11
    1bc0:	80 81       	ld	r24, Z
    1bc2:	91 81       	ldd	r25, Z+1	; 0x01
    1bc4:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
    1bc8:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    1bca:	88 23       	and	r24, r24
    1bcc:	31 f5       	brne	.+76     	; 0x1c1a <follow_path+0x2dc>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    1bce:	d8 01       	movw	r26, r16
    1bd0:	52 96       	adiw	r26, 0x12	; 18
    1bd2:	2d 91       	ld	r18, X+
    1bd4:	3c 91       	ld	r19, X
    1bd6:	53 97       	sbiw	r26, 0x13	; 19
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1bd8:	f9 01       	movw	r30, r18
    1bda:	80 81       	ld	r24, Z
    1bdc:	88 23       	and	r24, r24
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <follow_path+0x2a4>
    1be0:	a6 c0       	rjmp	.+332    	; 0x1d2e <follow_path+0x3f0>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1be2:	83 85       	ldd	r24, Z+11	; 0x0b
    1be4:	83 fd       	sbrc	r24, 3
    1be6:	12 c0       	rjmp	.+36     	; 0x1c0c <follow_path+0x2ce>
    1be8:	54 96       	adiw	r26, 0x14	; 20
    1bea:	6d 91       	ld	r22, X+
    1bec:	7c 91       	ld	r23, X
    1bee:	55 97       	sbiw	r26, 0x15	; 21
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    1bf0:	c9 01       	movw	r24, r18
    1bf2:	0b 96       	adiw	r24, 0x0b	; 11
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    1bf4:	db 01       	movw	r26, r22
    1bf6:	69 01       	movw	r12, r18
    1bf8:	9c 01       	movw	r18, r24
    1bfa:	04 c0       	rjmp	.+8      	; 0x1c04 <follow_path+0x2c6>
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1bfc:	e2 17       	cp	r30, r18
    1bfe:	f3 07       	cpc	r31, r19
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <follow_path+0x2c6>
    1c02:	8e c0       	rjmp	.+284    	; 0x1d20 <follow_path+0x3e2>
    1c04:	91 91       	ld	r25, Z+
    1c06:	8d 91       	ld	r24, X+
    1c08:	98 17       	cp	r25, r24
    1c0a:	c1 f3       	breq	.-16     	; 0x1bfc <follow_path+0x2be>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    1c0c:	c8 01       	movw	r24, r16
    1c0e:	b7 01       	movw	r22, r14
    1c10:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <dir_next>
    1c14:	48 2f       	mov	r20, r24
	} while (res == FR_OK);
    1c16:	88 23       	and	r24, r24
    1c18:	71 f2       	breq	.-100    	; 0x1bb6 <follow_path+0x278>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    1c1a:	d8 01       	movw	r26, r16
    1c1c:	54 96       	adiw	r26, 0x14	; 20
    1c1e:	ed 91       	ld	r30, X+
    1c20:	fc 91       	ld	r31, X
    1c22:	55 97       	sbiw	r26, 0x15	; 21
    1c24:	83 85       	ldd	r24, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    1c26:	44 30       	cpi	r20, 0x04	; 4
    1c28:	09 f0       	breq	.+2      	; 0x1c2c <follow_path+0x2ee>
    1c2a:	4a c0       	rjmp	.+148    	; 0x1cc0 <follow_path+0x382>
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
    1c2c:	85 ff       	sbrs	r24, 5
    1c2e:	0b c0       	rjmp	.+22     	; 0x1c46 <follow_path+0x308>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
    1c30:	f8 01       	movw	r30, r16
    1c32:	16 82       	std	Z+6, r1	; 0x06
    1c34:	17 82       	std	Z+7, r1	; 0x07
    1c36:	10 86       	std	Z+8, r1	; 0x08
    1c38:	11 86       	std	Z+9, r1	; 0x09
    1c3a:	13 8a       	std	Z+19, r1	; 0x13
    1c3c:	12 8a       	std	Z+18, r1	; 0x12
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
    1c3e:	82 ff       	sbrs	r24, 2
    1c40:	d3 ce       	rjmp	.-602    	; 0x19e8 <follow_path+0xaa>
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	3d c0       	rjmp	.+122    	; 0x1cc0 <follow_path+0x382>
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    1c46:	82 ff       	sbrs	r24, 2
    1c48:	38 c0       	rjmp	.+112    	; 0x1cba <follow_path+0x37c>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
    1c4a:	44 e0       	ldi	r20, 0x04	; 4
    1c4c:	39 c0       	rjmp	.+114    	; 0x1cc0 <follow_path+0x382>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    1c4e:	d6 01       	movw	r26, r12
    1c50:	1b 96       	adiw	r26, 0x0b	; 11
    1c52:	8c 91       	ld	r24, X
    1c54:	1b 97       	sbiw	r26, 0x0b	; 11
    1c56:	84 ff       	sbrs	r24, 4
    1c58:	32 c0       	rjmp	.+100    	; 0x1cbe <follow_path+0x380>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
    1c5a:	55 96       	adiw	r26, 0x15	; 21
    1c5c:	bc 91       	ld	r27, X
    1c5e:	ba 83       	std	Y+2, r27	; 0x02
    1c60:	19 82       	std	Y+1, r1	; 0x01
    1c62:	f6 01       	movw	r30, r12
    1c64:	84 89       	ldd	r24, Z+20	; 0x14
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	29 81       	ldd	r18, Y+1	; 0x01
    1c6a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c6c:	82 2b       	or	r24, r18
    1c6e:	93 2b       	or	r25, r19
    1c70:	a0 e0       	ldi	r26, 0x00	; 0
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	bc 01       	movw	r22, r24
    1c76:	55 27       	eor	r21, r21
    1c78:	44 27       	eor	r20, r20
    1c7a:	33 8c       	ldd	r3, Z+27	; 0x1b
    1c7c:	22 24       	eor	r2, r2
    1c7e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	82 29       	or	r24, r2
    1c84:	93 29       	or	r25, r3
    1c86:	a0 e0       	ldi	r26, 0x00	; 0
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	84 2b       	or	r24, r20
    1c8c:	95 2b       	or	r25, r21
    1c8e:	a6 2b       	or	r26, r22
    1c90:	b7 2b       	or	r27, r23
    1c92:	f8 01       	movw	r30, r16
    1c94:	86 83       	std	Z+6, r24	; 0x06
    1c96:	97 83       	std	Z+7, r25	; 0x07
    1c98:	a0 87       	std	Z+8, r26	; 0x08
    1c9a:	b1 87       	std	Z+9, r27	; 0x09
    1c9c:	a5 ce       	rjmp	.-694    	; 0x19e8 <follow_path+0xaa>
		for (;;) {
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    1c9e:	46 e0       	ldi	r20, 0x06	; 6
    1ca0:	0f c0       	rjmp	.+30     	; 0x1cc0 <follow_path+0x382>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1ca2:	46 e0       	ldi	r20, 0x06	; 6
    1ca4:	0d c0       	rjmp	.+26     	; 0x1cc0 <follow_path+0x382>
    1ca6:	46 e0       	ldi	r20, 0x06	; 6
    1ca8:	0b c0       	rjmp	.+22     	; 0x1cc0 <follow_path+0x382>
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    1caa:	46 e0       	ldi	r20, 0x06	; 6
    1cac:	09 c0       	rjmp	.+18     	; 0x1cc0 <follow_path+0x382>
    1cae:	46 e0       	ldi	r20, 0x06	; 6
    1cb0:	07 c0       	rjmp	.+14     	; 0x1cc0 <follow_path+0x382>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    1cb2:	46 e0       	ldi	r20, 0x06	; 6
    1cb4:	05 c0       	rjmp	.+10     	; 0x1cc0 <follow_path+0x382>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    1cb6:	46 e0       	ldi	r20, 0x06	; 6
    1cb8:	03 c0       	rjmp	.+6      	; 0x1cc0 <follow_path+0x382>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    1cba:	45 e0       	ldi	r20, 0x05	; 5
    1cbc:	01 c0       	rjmp	.+2      	; 0x1cc0 <follow_path+0x382>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    1cbe:	45 e0       	ldi	r20, 0x05	; 5
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
    1cc0:	84 2f       	mov	r24, r20
    1cc2:	28 96       	adiw	r28, 0x08	; 8
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	1f 91       	pop	r17
    1cd4:	0f 91       	pop	r16
    1cd6:	ff 90       	pop	r15
    1cd8:	ef 90       	pop	r14
    1cda:	df 90       	pop	r13
    1cdc:	cf 90       	pop	r12
    1cde:	bf 90       	pop	r11
    1ce0:	af 90       	pop	r10
    1ce2:	9f 90       	pop	r9
    1ce4:	8f 90       	pop	r8
    1ce6:	7f 90       	pop	r7
    1ce8:	6f 90       	pop	r6
    1cea:	5f 90       	pop	r5
    1cec:	4f 90       	pop	r4
    1cee:	3f 90       	pop	r3
    1cf0:	2f 90       	pop	r2
    1cf2:	08 95       	ret
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
		*path = &p[si];									/* Return pointer to the next segment */
    1cf4:	af 80       	ldd	r10, Y+7	; 0x07
    1cf6:	b8 84       	ldd	r11, Y+8	; 0x08
    1cf8:	a8 0e       	add	r10, r24
    1cfa:	b9 1e       	adc	r11, r25
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    1cfc:	84 e2       	ldi	r24, 0x24	; 36
    1cfe:	b3 ce       	rjmp	.-666    	; 0x1a66 <follow_path+0x128>
    1d00:	2f 81       	ldd	r18, Y+7	; 0x07
    1d02:	38 85       	ldd	r19, Y+8	; 0x08
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    1d04:	a2 0e       	add	r10, r18
    1d06:	b3 1e       	adc	r11, r19
    1d08:	99 2d       	mov	r25, r9
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1d0a:	48 2d       	mov	r20, r8
    1d0c:	30 cf       	rjmp	.-416    	; 0x1b6e <follow_path+0x230>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    1d0e:	c8 01       	movw	r24, r16
    1d10:	b7 01       	movw	r22, r14
    1d12:	0e 94 64 08 	call	0x10c8	; 0x10c8 <dir_sdi>
    1d16:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    1d18:	88 23       	and	r24, r24
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <follow_path+0x3e0>
    1d1c:	4c cf       	rjmp	.-360    	; 0x1bb6 <follow_path+0x278>
    1d1e:	7d cf       	rjmp	.-262    	; 0x1c1a <follow_path+0x2dc>
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    1d20:	db 01       	movw	r26, r22
    1d22:	1b 96       	adiw	r26, 0x0b	; 11
    1d24:	8c 91       	ld	r24, X
    1d26:	1b 97       	sbiw	r26, 0x0b	; 11
    1d28:	82 ff       	sbrs	r24, 2
    1d2a:	91 cf       	rjmp	.-222    	; 0x1c4e <follow_path+0x310>
    1d2c:	c9 cf       	rjmp	.-110    	; 0x1cc0 <follow_path+0x382>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    1d2e:	d8 01       	movw	r26, r16
    1d30:	54 96       	adiw	r26, 0x14	; 20
    1d32:	ed 91       	ld	r30, X+
    1d34:	fc 91       	ld	r31, X
    1d36:	55 97       	sbiw	r26, 0x15	; 21
    1d38:	83 85       	ldd	r24, Z+11	; 0x0b
    1d3a:	78 cf       	rjmp	.-272    	; 0x1c2c <follow_path+0x2ee>

00001d3c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIRS *dj				/* Target directory with object name to be created */
)
{
    1d3c:	ef 92       	push	r14
    1d3e:	ff 92       	push	r15
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	cf 93       	push	r28
    1d46:	8c 01       	movw	r16, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <dir_sdi>
    1d50:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
    1d52:	88 23       	and	r24, r24
    1d54:	d9 f5       	brne	.+118    	; 0x1dcc <dir_register+0x90>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    1d56:	d8 01       	movw	r26, r16
    1d58:	1e 96       	adiw	r26, 0x0e	; 14
    1d5a:	4d 91       	ld	r20, X+
    1d5c:	5d 91       	ld	r21, X+
    1d5e:	6d 91       	ld	r22, X+
    1d60:	7c 91       	ld	r23, X
    1d62:	51 97       	sbiw	r26, 0x11	; 17
    1d64:	8d 91       	ld	r24, X+
    1d66:	9c 91       	ld	r25, X
    1d68:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
    1d6c:	c8 2f       	mov	r28, r24
			if (res != FR_OK) break;
    1d6e:	88 23       	and	r24, r24
    1d70:	69 f5       	brne	.+90     	; 0x1dcc <dir_register+0x90>
			c = *dj->dir;
    1d72:	d8 01       	movw	r26, r16
    1d74:	52 96       	adiw	r26, 0x12	; 18
    1d76:	ed 91       	ld	r30, X+
    1d78:	fc 91       	ld	r31, X
    1d7a:	53 97       	sbiw	r26, 0x13	; 19
    1d7c:	80 81       	ld	r24, Z
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    1d7e:	85 3e       	cpi	r24, 0xE5	; 229
    1d80:	61 f1       	breq	.+88     	; 0x1dda <dir_register+0x9e>
    1d82:	88 23       	and	r24, r24
    1d84:	51 f1       	breq	.+84     	; 0x1dda <dir_register+0x9e>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    1d86:	c8 01       	movw	r24, r16
    1d88:	61 e0       	ldi	r22, 0x01	; 1
    1d8a:	70 e0       	ldi	r23, 0x00	; 0
    1d8c:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <dir_next>
    1d90:	c8 2f       	mov	r28, r24
		} while (res == FR_OK);
    1d92:	88 23       	and	r24, r24
    1d94:	01 f3       	breq	.-64     	; 0x1d56 <dir_register+0x1a>
    1d96:	1a c0       	rjmp	.+52     	; 0x1dcc <dir_register+0x90>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    1d98:	f8 01       	movw	r30, r16
    1d9a:	e2 88       	ldd	r14, Z+18	; 0x12
    1d9c:	f3 88       	ldd	r15, Z+19	; 0x13
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    1d9e:	c7 01       	movw	r24, r14
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	70 e0       	ldi	r23, 0x00	; 0
    1da4:	40 e2       	ldi	r20, 0x20	; 32
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	0e 94 75 00 	call	0xea	; 0xea <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    1dac:	d8 01       	movw	r26, r16
    1dae:	54 96       	adiw	r26, 0x14	; 20
    1db0:	6d 91       	ld	r22, X+
    1db2:	7c 91       	ld	r23, X
    1db4:	55 97       	sbiw	r26, 0x15	; 21
    1db6:	c7 01       	movw	r24, r14
    1db8:	4b e0       	ldi	r20, 0x0B	; 11
    1dba:	50 e0       	ldi	r21, 0x00	; 0
    1dbc:	0e 94 68 00 	call	0xd0	; 0xd0 <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    1dc0:	d8 01       	movw	r26, r16
    1dc2:	ed 91       	ld	r30, X+
    1dc4:	fc 91       	ld	r31, X
    1dc6:	11 97       	sbiw	r26, 0x01	; 1
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    1dcc:	8c 2f       	mov	r24, r28
    1dce:	cf 91       	pop	r28
    1dd0:	1f 91       	pop	r17
    1dd2:	0f 91       	pop	r16
    1dd4:	ff 90       	pop	r15
    1dd6:	ef 90       	pop	r14
    1dd8:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    1dda:	f8 01       	movw	r30, r16
    1ddc:	46 85       	ldd	r20, Z+14	; 0x0e
    1dde:	57 85       	ldd	r21, Z+15	; 0x0f
    1de0:	60 89       	ldd	r22, Z+16	; 0x10
    1de2:	71 89       	ldd	r23, Z+17	; 0x11
    1de4:	80 81       	ld	r24, Z
    1de6:	91 81       	ldd	r25, Z+1	; 0x01
    1de8:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
    1dec:	c8 2f       	mov	r28, r24
		if (res == FR_OK) {
    1dee:	88 23       	and	r24, r24
    1df0:	69 f7       	brne	.-38     	; 0x1dcc <dir_register+0x90>
    1df2:	d2 cf       	rjmp	.-92     	; 0x1d98 <dir_register+0x5c>

00001df4 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIRS *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	ec 01       	movw	r28, r24
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
    1dfa:	84 e0       	ldi	r24, 0x04	; 4
	while (dj->sect) {
    1dfc:	17 c0       	rjmp	.+46     	; 0x1e2c <dir_read+0x38>
		res = move_window(dj->fs, dj->sect);
    1dfe:	88 81       	ld	r24, Y
    1e00:	99 81       	ldd	r25, Y+1	; 0x01
    1e02:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
		if (res != FR_OK) break;
    1e06:	88 23       	and	r24, r24
    1e08:	e1 f4       	brne	.+56     	; 0x1e42 <dir_read+0x4e>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    1e0a:	ea 89       	ldd	r30, Y+18	; 0x12
    1e0c:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    1e0e:	90 81       	ld	r25, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1e10:	99 23       	and	r25, r25
    1e12:	f1 f0       	breq	.+60     	; 0x1e50 <dir_read+0x5c>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    1e14:	95 3e       	cpi	r25, 0xE5	; 229
    1e16:	19 f0       	breq	.+6      	; 0x1e1e <dir_read+0x2a>
    1e18:	93 85       	ldd	r25, Z+11	; 0x0b
    1e1a:	93 ff       	sbrs	r25, 3
    1e1c:	16 c0       	rjmp	.+44     	; 0x1e4a <dir_read+0x56>
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    1e1e:	ce 01       	movw	r24, r28
    1e20:	60 e0       	ldi	r22, 0x00	; 0
    1e22:	70 e0       	ldi	r23, 0x00	; 0
    1e24:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <dir_next>
		if (res != FR_OK) break;
    1e28:	88 23       	and	r24, r24
    1e2a:	59 f4       	brne	.+22     	; 0x1e42 <dir_read+0x4e>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    1e2c:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e2e:	5f 85       	ldd	r21, Y+15	; 0x0f
    1e30:	68 89       	ldd	r22, Y+16	; 0x10
    1e32:	79 89       	ldd	r23, Y+17	; 0x11
    1e34:	41 15       	cp	r20, r1
    1e36:	51 05       	cpc	r21, r1
    1e38:	61 05       	cpc	r22, r1
    1e3a:	71 05       	cpc	r23, r1
    1e3c:	01 f7       	brne	.-64     	; 0x1dfe <dir_read+0xa>
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    1e3e:	88 23       	and	r24, r24
    1e40:	21 f0       	breq	.+8      	; 0x1e4a <dir_read+0x56>
    1e42:	1e 86       	std	Y+14, r1	; 0x0e
    1e44:	1f 86       	std	Y+15, r1	; 0x0f
    1e46:	18 8a       	std	Y+16, r1	; 0x10
    1e48:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	08 95       	ret
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1e50:	84 e0       	ldi	r24, 0x04	; 4
    1e52:	f7 cf       	rjmp	.-18     	; 0x1e42 <dir_read+0x4e>

00001e54 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    1e54:	7f 92       	push	r7
    1e56:	8f 92       	push	r8
    1e58:	9f 92       	push	r9
    1e5a:	af 92       	push	r10
    1e5c:	bf 92       	push	r11
    1e5e:	cf 92       	push	r12
    1e60:	df 92       	push	r13
    1e62:	ef 92       	push	r14
    1e64:	ff 92       	push	r15
    1e66:	0f 93       	push	r16
    1e68:	1f 93       	push	r17
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	ec 01       	movw	r28, r24
    1e70:	4a 01       	movw	r8, r20
    1e72:	5b 01       	movw	r10, r22
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1e74:	42 30       	cpi	r20, 0x02	; 2
    1e76:	51 05       	cpc	r21, r1
    1e78:	61 05       	cpc	r22, r1
    1e7a:	71 05       	cpc	r23, r1
    1e7c:	08 f4       	brcc	.+2      	; 0x1e80 <remove_chain+0x2c>
    1e7e:	55 c0       	rjmp	.+170    	; 0x1f2a <remove_chain+0xd6>
    1e80:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e82:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e84:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1e86:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1e88:	48 17       	cp	r20, r24
    1e8a:	59 07       	cpc	r21, r25
    1e8c:	6a 07       	cpc	r22, r26
    1e8e:	7b 07       	cpc	r23, r27
    1e90:	08 f0       	brcs	.+2      	; 0x1e94 <remove_chain+0x40>
    1e92:	4d c0       	rjmp	.+154    	; 0x1f2e <remove_chain+0xda>
    1e94:	03 c0       	rjmp	.+6      	; 0x1e9c <remove_chain+0x48>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    1e96:	46 01       	movw	r8, r12
    1e98:	57 01       	movw	r10, r14
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <remove_chain+0x4c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
				fs->fsi_flag = 1;
    1e9c:	77 24       	eor	r7, r7
    1e9e:	73 94       	inc	r7
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	b5 01       	movw	r22, r10
    1ea4:	a4 01       	movw	r20, r8
    1ea6:	0e 94 58 07 	call	0xeb0	; 0xeb0 <get_fat>
    1eaa:	6b 01       	movw	r12, r22
    1eac:	7c 01       	movw	r14, r24
			if (nxt == 0) break;				/* Empty cluster? */
    1eae:	61 15       	cp	r22, r1
    1eb0:	71 05       	cpc	r23, r1
    1eb2:	81 05       	cpc	r24, r1
    1eb4:	91 05       	cpc	r25, r1
    1eb6:	e9 f1       	breq	.+122    	; 0x1f32 <remove_chain+0xde>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1eb8:	91 e0       	ldi	r25, 0x01	; 1
    1eba:	c9 16       	cp	r12, r25
    1ebc:	d1 04       	cpc	r13, r1
    1ebe:	e1 04       	cpc	r14, r1
    1ec0:	f1 04       	cpc	r15, r1
    1ec2:	c9 f1       	breq	.+114    	; 0x1f36 <remove_chain+0xe2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1ec4:	8f ef       	ldi	r24, 0xFF	; 255
    1ec6:	c8 16       	cp	r12, r24
    1ec8:	8f ef       	ldi	r24, 0xFF	; 255
    1eca:	d8 06       	cpc	r13, r24
    1ecc:	8f ef       	ldi	r24, 0xFF	; 255
    1ece:	e8 06       	cpc	r14, r24
    1ed0:	8f ef       	ldi	r24, 0xFF	; 255
    1ed2:	f8 06       	cpc	r15, r24
    1ed4:	91 f1       	breq	.+100    	; 0x1f3a <remove_chain+0xe6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	b5 01       	movw	r22, r10
    1eda:	a4 01       	movw	r20, r8
    1edc:	00 e0       	ldi	r16, 0x00	; 0
    1ede:	10 e0       	ldi	r17, 0x00	; 0
    1ee0:	98 01       	movw	r18, r16
    1ee2:	0e 94 47 09 	call	0x128e	; 0x128e <put_fat>
			if (res != FR_OK) break;
    1ee6:	88 23       	and	r24, r24
    1ee8:	49 f5       	brne	.+82     	; 0x1f3c <remove_chain+0xe8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    1eea:	4e 85       	ldd	r20, Y+14	; 0x0e
    1eec:	5f 85       	ldd	r21, Y+15	; 0x0f
    1eee:	68 89       	ldd	r22, Y+16	; 0x10
    1ef0:	79 89       	ldd	r23, Y+17	; 0x11
    1ef2:	4f 3f       	cpi	r20, 0xFF	; 255
    1ef4:	9f ef       	ldi	r25, 0xFF	; 255
    1ef6:	59 07       	cpc	r21, r25
    1ef8:	9f ef       	ldi	r25, 0xFF	; 255
    1efa:	69 07       	cpc	r22, r25
    1efc:	9f ef       	ldi	r25, 0xFF	; 255
    1efe:	79 07       	cpc	r23, r25
    1f00:	49 f0       	breq	.+18     	; 0x1f14 <remove_chain+0xc0>
				fs->free_clust++;
    1f02:	4f 5f       	subi	r20, 0xFF	; 255
    1f04:	5f 4f       	sbci	r21, 0xFF	; 255
    1f06:	6f 4f       	sbci	r22, 0xFF	; 255
    1f08:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0a:	4e 87       	std	Y+14, r20	; 0x0e
    1f0c:	5f 87       	std	Y+15, r21	; 0x0f
    1f0e:	68 8b       	std	Y+16, r22	; 0x10
    1f10:	79 8b       	std	Y+17, r23	; 0x11
				fs->fsi_flag = 1;
    1f12:	7d 82       	std	Y+5, r7	; 0x05
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    1f14:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1f16:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1f18:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1f1a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1f1c:	c4 16       	cp	r12, r20
    1f1e:	d5 06       	cpc	r13, r21
    1f20:	e6 06       	cpc	r14, r22
    1f22:	f7 06       	cpc	r15, r23
    1f24:	08 f4       	brcc	.+2      	; 0x1f28 <remove_chain+0xd4>
    1f26:	b7 cf       	rjmp	.-146    	; 0x1e96 <remove_chain+0x42>
    1f28:	09 c0       	rjmp	.+18     	; 0x1f3c <remove_chain+0xe8>
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	07 c0       	rjmp	.+14     	; 0x1f3c <remove_chain+0xe8>
    1f2e:	82 e0       	ldi	r24, 0x02	; 2
    1f30:	05 c0       	rjmp	.+10     	; 0x1f3c <remove_chain+0xe8>

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	03 c0       	rjmp	.+6      	; 0x1f3c <remove_chain+0xe8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1f36:	82 e0       	ldi	r24, 0x02	; 2
    1f38:	01 c0       	rjmp	.+2      	; 0x1f3c <remove_chain+0xe8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	ff 90       	pop	r15
    1f46:	ef 90       	pop	r14
    1f48:	df 90       	pop	r13
    1f4a:	cf 90       	pop	r12
    1f4c:	bf 90       	pop	r11
    1f4e:	af 90       	pop	r10
    1f50:	9f 90       	pop	r9
    1f52:	8f 90       	pop	r8
    1f54:	7f 90       	pop	r7
    1f56:	08 95       	ret

00001f58 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
    1f58:	88 23       	and	r24, r24
    1f5a:	91 f4       	brne	.+36     	; 0x1f80 <f_mount+0x28>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    1f5c:	e0 91 1c 01 	lds	r30, 0x011C
    1f60:	f0 91 1d 01 	lds	r31, 0x011D

	if (rfs) {
    1f64:	30 97       	sbiw	r30, 0x00	; 0
    1f66:	09 f0       	breq	.+2      	; 0x1f6a <f_mount+0x12>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    1f68:	10 82       	st	Z, r1
	}

	if (fs) {
    1f6a:	61 15       	cp	r22, r1
    1f6c:	71 05       	cpc	r23, r1
    1f6e:	11 f0       	breq	.+4      	; 0x1f74 <f_mount+0x1c>
		fs->fs_type = 0;			/* Clear new fs object */
    1f70:	fb 01       	movw	r30, r22
    1f72:	10 82       	st	Z, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    1f74:	70 93 1d 01 	sts	0x011D, r23
    1f78:	60 93 1c 01 	sts	0x011C, r22

	return FR_OK;
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	08 95       	ret
{
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    1f80:	8b e0       	ldi	r24, 0x0B	; 11
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */

	return FR_OK;
}
    1f82:	08 95       	ret

00001f84 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1f84:	4f 92       	push	r4
    1f86:	5f 92       	push	r5
    1f88:	6f 92       	push	r6
    1f8a:	7f 92       	push	r7
    1f8c:	8f 92       	push	r8
    1f8e:	9f 92       	push	r9
    1f90:	af 92       	push	r10
    1f92:	bf 92       	push	r11
    1f94:	cf 92       	push	r12
    1f96:	df 92       	push	r13
    1f98:	ef 92       	push	r14
    1f9a:	ff 92       	push	r15
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	a4 97       	sbiw	r28, 0x24	; 36
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	6c 01       	movw	r12, r24
    1fb4:	7c a3       	lds	r23, 0x5c
    1fb6:	6b a3       	lds	r22, 0x5b
	DIRS dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    1fb8:	dc 01       	movw	r26, r24
    1fba:	1d 92       	st	X+, r1
    1fbc:	1c 92       	st	X, r1

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    1fbe:	14 2f       	mov	r17, r20
    1fc0:	1f 71       	andi	r17, 0x1F	; 31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    1fc2:	4e 71       	andi	r20, 0x1E	; 30
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	83 96       	adiw	r24, 0x23	; 35
    1fc8:	be 01       	movw	r22, r28
    1fca:	6f 5f       	subi	r22, 0xFF	; 255
    1fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fce:	0e 94 ca 01 	call	0x394	; 0x394 <chk_mounted>
    1fd2:	28 2f       	mov	r18, r24
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    1fd4:	ce 01       	movw	r24, r28
    1fd6:	47 96       	adiw	r24, 0x17	; 23
    1fd8:	9e 8b       	std	Y+22, r25	; 0x16
    1fda:	8d 8b       	std	Y+21, r24	; 0x15
	if (res == FR_OK)
    1fdc:	22 23       	and	r18, r18
    1fde:	09 f0       	breq	.+2      	; 0x1fe2 <f_open+0x5e>
    1fe0:	40 c1       	rjmp	.+640    	; 0x2262 <f_open+0x2de>
		res = follow_path(&dj, path);	/* Follow the file path */
    1fe2:	6b a1       	lds	r22, 0x4b
    1fe4:	7c a1       	lds	r23, 0x4c
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	01 96       	adiw	r24, 0x01	; 1
    1fea:	0e 94 9f 0c 	call	0x193e	; 0x193e <follow_path>
    1fee:	28 2f       	mov	r18, r24
	dir = dj.dir;
    1ff0:	eb 88       	ldd	r14, Y+19	; 0x13
    1ff2:	fc 88       	ldd	r15, Y+20	; 0x14

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    1ff4:	88 23       	and	r24, r24
    1ff6:	21 f4       	brne	.+8      	; 0x2000 <f_open+0x7c>
		if (!dir)	/* Current dir itself */
    1ff8:	e1 14       	cp	r14, r1
    1ffa:	f1 04       	cpc	r15, r1
    1ffc:	09 f4       	brne	.+2      	; 0x2000 <f_open+0x7c>
			res = FR_INVALID_NAME;
    1ffe:	26 e0       	ldi	r18, 0x06	; 6
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2000:	41 2f       	mov	r20, r17
    2002:	50 e0       	ldi	r21, 0x00	; 0
    2004:	ca 01       	movw	r24, r20
    2006:	8c 71       	andi	r24, 0x1C	; 28
    2008:	90 70       	andi	r25, 0x00	; 0
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	09 f4       	brne	.+2      	; 0x2010 <f_open+0x8c>
    200e:	82 c0       	rjmp	.+260    	; 0x2114 <f_open+0x190>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    2010:	22 23       	and	r18, r18
    2012:	79 f0       	breq	.+30     	; 0x2032 <f_open+0xae>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    2014:	24 30       	cpi	r18, 0x04	; 4
    2016:	09 f0       	breq	.+2      	; 0x201a <f_open+0x96>
    2018:	0d c1       	rjmp	.+538    	; 0x2234 <f_open+0x2b0>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    201a:	ce 01       	movw	r24, r28
    201c:	01 96       	adiw	r24, 0x01	; 1
    201e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <dir_register>
    2022:	28 2f       	mov	r18, r24
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
    2024:	eb 88       	ldd	r14, Y+19	; 0x13
    2026:	fc 88       	ldd	r15, Y+20	; 0x14
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    2028:	88 23       	and	r24, r24
    202a:	09 f0       	breq	.+2      	; 0x202e <f_open+0xaa>
    202c:	03 c1       	rjmp	.+518    	; 0x2234 <f_open+0x2b0>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    202e:	18 60       	ori	r17, 0x08	; 8
    2030:	07 c0       	rjmp	.+14     	; 0x2040 <f_open+0xbc>
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIRS) */
    2032:	f7 01       	movw	r30, r14
    2034:	83 85       	ldd	r24, Z+11	; 0x0b
    2036:	81 71       	andi	r24, 0x11	; 17
    2038:	09 f0       	breq	.+2      	; 0x203c <f_open+0xb8>
    203a:	16 c1       	rjmp	.+556    	; 0x2268 <f_open+0x2e4>
				res = FR_DENIED;
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    203c:	12 fd       	sbrc	r17, 2
    203e:	16 c1       	rjmp	.+556    	; 0x226c <f_open+0x2e8>
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    2040:	13 ff       	sbrs	r17, 3
    2042:	1a c1       	rjmp	.+564    	; 0x2278 <f_open+0x2f4>
			dw = get_fattime();					/* Created time */
    2044:	0e 94 1d 07 	call	0xe3a	; 0xe3a <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, dw);
    2048:	d7 01       	movw	r26, r14
    204a:	1e 96       	adiw	r26, 0x0e	; 14
    204c:	6c 93       	st	X, r22
    204e:	1e 97       	sbiw	r26, 0x0e	; 14
    2050:	1f 96       	adiw	r26, 0x0f	; 15
    2052:	7c 93       	st	X, r23
    2054:	1f 97       	sbiw	r26, 0x0f	; 15
    2056:	50 96       	adiw	r26, 0x10	; 16
    2058:	8c 93       	st	X, r24
    205a:	50 97       	sbiw	r26, 0x10	; 16
    205c:	51 96       	adiw	r26, 0x11	; 17
    205e:	9c 93       	st	X, r25
    2060:	51 97       	sbiw	r26, 0x11	; 17
			dir[DIR_Attr] = 0;					/* Reset attribute */
    2062:	1b 96       	adiw	r26, 0x0b	; 11
    2064:	1c 92       	st	X, r1
    2066:	1b 97       	sbiw	r26, 0x0b	; 11
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    2068:	5c 96       	adiw	r26, 0x1c	; 28
    206a:	1c 92       	st	X, r1
    206c:	5c 97       	sbiw	r26, 0x1c	; 28
    206e:	5d 96       	adiw	r26, 0x1d	; 29
    2070:	1c 92       	st	X, r1
    2072:	5d 97       	sbiw	r26, 0x1d	; 29
    2074:	5e 96       	adiw	r26, 0x1e	; 30
    2076:	1c 92       	st	X, r1
    2078:	5e 97       	sbiw	r26, 0x1e	; 30
    207a:	5f 96       	adiw	r26, 0x1f	; 31
    207c:	1c 92       	st	X, r1
    207e:	5f 97       	sbiw	r26, 0x1f	; 31
			cl = LD_CLUST(dir);					/* Get start cluster */
    2080:	55 96       	adiw	r26, 0x15	; 21
    2082:	3c 91       	ld	r19, X
    2084:	55 97       	sbiw	r26, 0x15	; 21
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	54 96       	adiw	r26, 0x14	; 20
    208a:	8c 91       	ld	r24, X
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	82 2b       	or	r24, r18
    2090:	93 2b       	or	r25, r19
    2092:	a0 e0       	ldi	r26, 0x00	; 0
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	5c 01       	movw	r10, r24
    2098:	99 24       	eor	r9, r9
    209a:	88 24       	eor	r8, r8
    209c:	f7 01       	movw	r30, r14
    209e:	33 8d       	ldd	r19, Z+27	; 0x1b
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	82 2b       	or	r24, r18
    20a8:	93 2b       	or	r25, r19
    20aa:	a0 e0       	ldi	r26, 0x00	; 0
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	88 2a       	or	r8, r24
    20b0:	99 2a       	or	r9, r25
    20b2:	aa 2a       	or	r10, r26
    20b4:	bb 2a       	or	r11, r27
			ST_CLUST(dir, 0);					/* cluster = 0 */
    20b6:	12 8e       	std	Z+26, r1	; 0x1a
    20b8:	13 8e       	std	Z+27, r1	; 0x1b
    20ba:	14 8a       	std	Z+20, r1	; 0x14
    20bc:	15 8a       	std	Z+21, r1	; 0x15
			dj.fs->wflag = 1;
    20be:	e9 81       	ldd	r30, Y+1	; 0x01
    20c0:	fa 81       	ldd	r31, Y+2	; 0x02
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	84 83       	std	Z+4, r24	; 0x04
			if (cl) {							/* Remove the cluster chain if exist */
    20c6:	81 14       	cp	r8, r1
    20c8:	91 04       	cpc	r9, r1
    20ca:	a1 04       	cpc	r10, r1
    20cc:	b1 04       	cpc	r11, r1
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <f_open+0x14e>
    20d0:	d3 c0       	rjmp	.+422    	; 0x2278 <f_open+0x2f4>
				dw = dj.fs->winsect;
    20d2:	46 a4       	lds	r20, 0xa6
    20d4:	57 a4       	lds	r21, 0xa7
    20d6:	60 a8       	sts	0x00, r22
    20d8:	71 a8       	sts	0x81, r23
				res = remove_chain(dj.fs, cl);
    20da:	cf 01       	movw	r24, r30
    20dc:	b5 01       	movw	r22, r10
    20de:	a4 01       	movw	r20, r8
    20e0:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <remove_chain>
    20e4:	28 2f       	mov	r18, r24
				if (res == FR_OK) {
    20e6:	88 23       	and	r24, r24
    20e8:	09 f0       	breq	.+2      	; 0x20ec <f_open+0x168>
    20ea:	a4 c0       	rjmp	.+328    	; 0x2234 <f_open+0x2b0>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    20ec:	e9 81       	ldd	r30, Y+1	; 0x01
    20ee:	fa 81       	ldd	r31, Y+2	; 0x02
    20f0:	d5 01       	movw	r26, r10
    20f2:	c4 01       	movw	r24, r8
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	a1 09       	sbc	r26, r1
    20f8:	b1 09       	sbc	r27, r1
    20fa:	82 87       	std	Z+10, r24	; 0x0a
    20fc:	93 87       	std	Z+11, r25	; 0x0b
    20fe:	a4 87       	std	Z+12, r26	; 0x0c
    2100:	b5 87       	std	Z+13, r27	; 0x0d
					res = move_window(dj.fs, dw);
    2102:	cf 01       	movw	r24, r30
    2104:	b3 01       	movw	r22, r6
    2106:	a2 01       	movw	r20, r4
    2108:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
    210c:	28 2f       	mov	r18, r24
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
    210e:	88 23       	and	r24, r24
    2110:	81 f0       	breq	.+32     	; 0x2132 <f_open+0x1ae>
    2112:	90 c0       	rjmp	.+288    	; 0x2234 <f_open+0x2b0>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    2114:	22 23       	and	r18, r18
    2116:	09 f0       	breq	.+2      	; 0x211a <f_open+0x196>
    2118:	8d c0       	rjmp	.+282    	; 0x2234 <f_open+0x2b0>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    211a:	d7 01       	movw	r26, r14
    211c:	1b 96       	adiw	r26, 0x0b	; 11
    211e:	8c 91       	ld	r24, X
    2120:	1b 97       	sbiw	r26, 0x0b	; 11
    2122:	84 fd       	sbrc	r24, 4
    2124:	a5 c0       	rjmp	.+330    	; 0x2270 <f_open+0x2ec>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2126:	11 ff       	sbrs	r17, 1
    2128:	a7 c0       	rjmp	.+334    	; 0x2278 <f_open+0x2f4>
    212a:	80 fd       	sbrc	r24, 0
    212c:	a3 c0       	rjmp	.+326    	; 0x2274 <f_open+0x2f0>
    212e:	a4 c0       	rjmp	.+328    	; 0x2278 <f_open+0x2f4>
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    2130:	20 e0       	ldi	r18, 0x00	; 0
			mode |= FA__WRITTEN;
    2132:	10 62       	ori	r17, 0x20	; 32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    2134:	e9 81       	ldd	r30, Y+1	; 0x01
    2136:	fa 81       	ldd	r31, Y+2	; 0x02
    2138:	46 a5       	lds	r20, 0x66
    213a:	57 a5       	lds	r21, 0x67
    213c:	60 a9       	sts	0x40, r22
    213e:	71 a9       	sts	0x41, r23
    2140:	d6 01       	movw	r26, r12
    2142:	5a 96       	adiw	r26, 0x1a	; 26
    2144:	4d 93       	st	X+, r20
    2146:	5d 93       	st	X+, r21
    2148:	6d 93       	st	X+, r22
    214a:	7c 93       	st	X, r23
    214c:	5d 97       	sbiw	r26, 0x1d	; 29
		fp->dir_ptr = dir;
    214e:	5f 96       	adiw	r26, 0x1f	; 31
    2150:	fc 92       	st	X, r15
    2152:	ee 92       	st	-X, r14
    2154:	5e 97       	sbiw	r26, 0x1e	; 30
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    2156:	14 96       	adiw	r26, 0x04	; 4
    2158:	1c 93       	st	X, r17
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    215a:	d7 01       	movw	r26, r14
    215c:	55 96       	adiw	r26, 0x15	; 21
    215e:	5c 91       	ld	r21, X
    2160:	55 97       	sbiw	r26, 0x15	; 21
    2162:	40 e0       	ldi	r20, 0x00	; 0
    2164:	54 96       	adiw	r26, 0x14	; 20
    2166:	8c 91       	ld	r24, X
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	84 2b       	or	r24, r20
    216c:	95 2b       	or	r25, r21
    216e:	a0 e0       	ldi	r26, 0x00	; 0
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	5c 01       	movw	r10, r24
    2174:	99 24       	eor	r9, r9
    2176:	88 24       	eor	r8, r8
    2178:	d7 01       	movw	r26, r14
    217a:	5b 96       	adiw	r26, 0x1b	; 27
    217c:	5c 91       	ld	r21, X
    217e:	5b 97       	sbiw	r26, 0x1b	; 27
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	5a 96       	adiw	r26, 0x1a	; 26
    2184:	8c 91       	ld	r24, X
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	84 2b       	or	r24, r20
    218a:	95 2b       	or	r25, r21
    218c:	a0 e0       	ldi	r26, 0x00	; 0
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	88 2a       	or	r8, r24
    2192:	99 2a       	or	r9, r25
    2194:	aa 2a       	or	r10, r26
    2196:	bb 2a       	or	r11, r27
    2198:	d6 01       	movw	r26, r12
    219a:	1e 96       	adiw	r26, 0x0e	; 14
    219c:	8d 92       	st	X+, r8
    219e:	9d 92       	st	X+, r9
    21a0:	ad 92       	st	X+, r10
    21a2:	bc 92       	st	X, r11
    21a4:	51 97       	sbiw	r26, 0x11	; 17
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    21a6:	d7 01       	movw	r26, r14
    21a8:	5f 96       	adiw	r26, 0x1f	; 31
    21aa:	8c 91       	ld	r24, X
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	a0 e0       	ldi	r26, 0x00	; 0
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	b8 2e       	mov	r11, r24
    21b4:	aa 24       	eor	r10, r10
    21b6:	99 24       	eor	r9, r9
    21b8:	88 24       	eor	r8, r8
    21ba:	d7 01       	movw	r26, r14
    21bc:	5e 96       	adiw	r26, 0x1e	; 30
    21be:	4c 91       	ld	r20, X
    21c0:	5e 97       	sbiw	r26, 0x1e	; 30
    21c2:	50 e0       	ldi	r21, 0x00	; 0
    21c4:	60 e0       	ldi	r22, 0x00	; 0
    21c6:	70 e0       	ldi	r23, 0x00	; 0
    21c8:	ba 01       	movw	r22, r20
    21ca:	55 27       	eor	r21, r21
    21cc:	44 27       	eor	r20, r20
    21ce:	48 29       	or	r20, r8
    21d0:	59 29       	or	r21, r9
    21d2:	6a 29       	or	r22, r10
    21d4:	7b 29       	or	r23, r11
    21d6:	5c 96       	adiw	r26, 0x1c	; 28
    21d8:	8c 91       	ld	r24, X
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	a0 e0       	ldi	r26, 0x00	; 0
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	48 2b       	or	r20, r24
    21e2:	59 2b       	or	r21, r25
    21e4:	6a 2b       	or	r22, r26
    21e6:	7b 2b       	or	r23, r27
    21e8:	d7 01       	movw	r26, r14
    21ea:	5d 96       	adiw	r26, 0x1d	; 29
    21ec:	9c 91       	ld	r25, X
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	a0 e0       	ldi	r26, 0x00	; 0
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	48 2b       	or	r20, r24
    21f6:	59 2b       	or	r21, r25
    21f8:	6a 2b       	or	r22, r26
    21fa:	7b 2b       	or	r23, r27
    21fc:	d6 01       	movw	r26, r12
    21fe:	1a 96       	adiw	r26, 0x0a	; 10
    2200:	4d 93       	st	X+, r20
    2202:	5d 93       	st	X+, r21
    2204:	6d 93       	st	X+, r22
    2206:	7c 93       	st	X, r23
    2208:	1d 97       	sbiw	r26, 0x0d	; 13
		fp->fptr = 0;						/* File pointer */
    220a:	16 96       	adiw	r26, 0x06	; 6
    220c:	1d 92       	st	X+, r1
    220e:	1d 92       	st	X+, r1
    2210:	1d 92       	st	X+, r1
    2212:	1c 92       	st	X, r1
    2214:	19 97       	sbiw	r26, 0x09	; 9
		fp->dsect = 0;
    2216:	56 96       	adiw	r26, 0x16	; 22
    2218:	1d 92       	st	X+, r1
    221a:	1d 92       	st	X+, r1
    221c:	1d 92       	st	X+, r1
    221e:	1c 92       	st	X, r1
    2220:	59 97       	sbiw	r26, 0x19	; 25
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    2222:	11 96       	adiw	r26, 0x01	; 1
    2224:	fc 93       	st	X, r31
    2226:	ee 93       	st	-X, r30
    2228:	86 81       	ldd	r24, Z+6	; 0x06
    222a:	97 81       	ldd	r25, Z+7	; 0x07
    222c:	13 96       	adiw	r26, 0x03	; 3
    222e:	9c 93       	st	X, r25
    2230:	8e 93       	st	-X, r24
    2232:	12 97       	sbiw	r26, 0x02	; 2
	}

	LEAVE_FF(dj.fs, res);
}
    2234:	82 2f       	mov	r24, r18
    2236:	a4 96       	adiw	r28, 0x24	; 36
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	df 91       	pop	r29
    2244:	cf 91       	pop	r28
    2246:	1f 91       	pop	r17
    2248:	ff 90       	pop	r15
    224a:	ef 90       	pop	r14
    224c:	df 90       	pop	r13
    224e:	cf 90       	pop	r12
    2250:	bf 90       	pop	r11
    2252:	af 90       	pop	r10
    2254:	9f 90       	pop	r9
    2256:	8f 90       	pop	r8
    2258:	7f 90       	pop	r7
    225a:	6f 90       	pop	r6
    225c:	5f 90       	pop	r5
    225e:	4f 90       	pop	r4
    2260:	08 95       	ret
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
	if (res == FR_OK)
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    2262:	eb 88       	ldd	r14, Y+19	; 0x13
    2264:	fc 88       	ldd	r15, Y+20	; 0x14
    2266:	cc ce       	rjmp	.-616    	; 0x2000 <f_open+0x7c>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIRS) */
				res = FR_DENIED;
    2268:	27 e0       	ldi	r18, 0x07	; 7
    226a:	e4 cf       	rjmp	.-56     	; 0x2234 <f_open+0x2b0>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
    226c:	28 e0       	ldi	r18, 0x08	; 8
    226e:	e2 cf       	rjmp	.-60     	; 0x2234 <f_open+0x2b0>
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
				res = FR_NO_FILE;
    2270:	24 e0       	ldi	r18, 0x04	; 4
    2272:	e0 cf       	rjmp	.-64     	; 0x2234 <f_open+0x2b0>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
    2274:	27 e0       	ldi	r18, 0x07	; 7
    2276:	de cf       	rjmp	.-68     	; 0x2234 <f_open+0x2b0>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    2278:	13 fd       	sbrc	r17, 3
    227a:	5a cf       	rjmp	.-332    	; 0x2130 <f_open+0x1ac>
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	5a cf       	rjmp	.-332    	; 0x2134 <f_open+0x1b0>

00002280 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    2280:	2f 92       	push	r2
    2282:	3f 92       	push	r3
    2284:	4f 92       	push	r4
    2286:	5f 92       	push	r5
    2288:	6f 92       	push	r6
    228a:	7f 92       	push	r7
    228c:	8f 92       	push	r8
    228e:	9f 92       	push	r9
    2290:	bf 92       	push	r11
    2292:	cf 92       	push	r12
    2294:	df 92       	push	r13
    2296:	ef 92       	push	r14
    2298:	ff 92       	push	r15
    229a:	0f 93       	push	r16
    229c:	1f 93       	push	r17
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
    22a2:	00 d0       	rcall	.+0      	; 0x22a4 <f_read+0x24>
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <f_read+0x26>
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	9c 83       	std	Y+4, r25	; 0x04
    22ac:	8b 83       	std	Y+3, r24	; 0x03
    22ae:	c6 2e       	mov	r12, r22
    22b0:	17 2f       	mov	r17, r23
    22b2:	4a 01       	movw	r8, r20
    22b4:	19 01       	movw	r2, r18
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    22b6:	d9 01       	movw	r26, r18
    22b8:	1d 92       	st	X+, r1
    22ba:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);				/* Check validity */
    22bc:	fc 01       	movw	r30, r24
    22be:	62 81       	ldd	r22, Z+2	; 0x02
    22c0:	73 81       	ldd	r23, Z+3	; 0x03
    22c2:	80 81       	ld	r24, Z
    22c4:	91 81       	ldd	r25, Z+1	; 0x01
    22c6:	0e 94 11 01 	call	0x222	; 0x222 <validate>
    22ca:	b8 2e       	mov	r11, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    22cc:	88 23       	and	r24, r24
    22ce:	09 f0       	breq	.+2      	; 0x22d2 <f_read+0x52>
    22d0:	7c c1       	rjmp	.+760    	; 0x25ca <f_read+0x34a>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    22d2:	ab 81       	ldd	r26, Y+3	; 0x03
    22d4:	bc 81       	ldd	r27, Y+4	; 0x04
    22d6:	14 96       	adiw	r26, 0x04	; 4
    22d8:	8c 91       	ld	r24, X
    22da:	14 97       	sbiw	r26, 0x04	; 4
    22dc:	88 23       	and	r24, r24
    22de:	0c f4       	brge	.+2      	; 0x22e2 <f_read+0x62>
    22e0:	6c c1       	rjmp	.+728    	; 0x25ba <f_read+0x33a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    22e2:	80 ff       	sbrs	r24, 0
    22e4:	6e c1       	rjmp	.+732    	; 0x25c2 <f_read+0x342>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    22e6:	1a 96       	adiw	r26, 0x0a	; 10
    22e8:	8d 91       	ld	r24, X+
    22ea:	9d 91       	ld	r25, X+
    22ec:	0d 90       	ld	r0, X+
    22ee:	bc 91       	ld	r27, X
    22f0:	a0 2d       	mov	r26, r0
    22f2:	eb 81       	ldd	r30, Y+3	; 0x03
    22f4:	fc 81       	ldd	r31, Y+4	; 0x04
    22f6:	46 81       	ldd	r20, Z+6	; 0x06
    22f8:	57 81       	ldd	r21, Z+7	; 0x07
    22fa:	60 85       	ldd	r22, Z+8	; 0x08
    22fc:	71 85       	ldd	r23, Z+9	; 0x09
    22fe:	84 1b       	sub	r24, r20
    2300:	95 0b       	sbc	r25, r21
    2302:	a6 0b       	sbc	r26, r22
    2304:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    2306:	a4 01       	movw	r20, r8
    2308:	60 e0       	ldi	r22, 0x00	; 0
    230a:	70 e0       	ldi	r23, 0x00	; 0
    230c:	84 17       	cp	r24, r20
    230e:	95 07       	cpc	r25, r21
    2310:	a6 07       	cpc	r26, r22
    2312:	b7 07       	cpc	r27, r23
    2314:	08 f4       	brcc	.+2      	; 0x2318 <f_read+0x98>
    2316:	4c 01       	movw	r8, r24

	for ( ;  btr;								/* Repeat until all data read */
    2318:	81 14       	cp	r8, r1
    231a:	91 04       	cpc	r9, r1
    231c:	09 f4       	brne	.+2      	; 0x2320 <f_read+0xa0>
    231e:	55 c1       	rjmp	.+682    	; 0x25ca <f_read+0x34a>
    2320:	c9 82       	std	Y+1, r12	; 0x01
    2322:	1a 83       	std	Y+2, r17	; 0x02
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    2324:	ab 81       	ldd	r26, Y+3	; 0x03
    2326:	bc 81       	ldd	r27, Y+4	; 0x04
    2328:	16 96       	adiw	r26, 0x06	; 6
    232a:	4d 91       	ld	r20, X+
    232c:	5d 91       	ld	r21, X+
    232e:	6d 91       	ld	r22, X+
    2330:	7c 91       	ld	r23, X
    2332:	19 97       	sbiw	r26, 0x09	; 9
    2334:	db 01       	movw	r26, r22
    2336:	ca 01       	movw	r24, r20
    2338:	91 70       	andi	r25, 0x01	; 1
    233a:	a0 70       	andi	r26, 0x00	; 0
    233c:	b0 70       	andi	r27, 0x00	; 0
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	a1 05       	cpc	r26, r1
    2342:	b1 05       	cpc	r27, r1
    2344:	09 f0       	breq	.+2      	; 0x2348 <f_read+0xc8>
    2346:	db c0       	rjmp	.+438    	; 0x24fe <f_read+0x27e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2348:	ab 81       	ldd	r26, Y+3	; 0x03
    234a:	bc 81       	ldd	r27, Y+4	; 0x04
    234c:	ed 91       	ld	r30, X+
    234e:	fc 91       	ld	r31, X
    2350:	db 01       	movw	r26, r22
    2352:	ca 01       	movw	r24, r20
    2354:	07 2e       	mov	r0, r23
    2356:	79 e0       	ldi	r23, 0x09	; 9
    2358:	b6 95       	lsr	r27
    235a:	a7 95       	ror	r26
    235c:	97 95       	ror	r25
    235e:	87 95       	ror	r24
    2360:	7a 95       	dec	r23
    2362:	d1 f7       	brne	.-12     	; 0x2358 <f_read+0xd8>
    2364:	70 2d       	mov	r23, r0
    2366:	12 81       	ldd	r17, Z+2	; 0x02
    2368:	11 50       	subi	r17, 0x01	; 1
    236a:	18 23       	and	r17, r24
			if (!csect) {						/* On the cluster boundary? */
    236c:	09 f0       	breq	.+2      	; 0x2370 <f_read+0xf0>
    236e:	41 c0       	rjmp	.+130    	; 0x23f2 <f_read+0x172>
				if (fp->fptr == 0) {			/* On the top of the file? */
    2370:	41 15       	cp	r20, r1
    2372:	51 05       	cpc	r21, r1
    2374:	61 05       	cpc	r22, r1
    2376:	71 05       	cpc	r23, r1
    2378:	39 f4       	brne	.+14     	; 0x2388 <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
    237a:	eb 81       	ldd	r30, Y+3	; 0x03
    237c:	fc 81       	ldd	r31, Y+4	; 0x04
    237e:	86 85       	ldd	r24, Z+14	; 0x0e
    2380:	97 85       	ldd	r25, Z+15	; 0x0f
    2382:	a0 89       	ldd	r26, Z+16	; 0x10
    2384:	b1 89       	ldd	r27, Z+17	; 0x11
    2386:	0d c0       	rjmp	.+26     	; 0x23a2 <f_read+0x122>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    2388:	ab 81       	ldd	r26, Y+3	; 0x03
    238a:	bc 81       	ldd	r27, Y+4	; 0x04
    238c:	52 96       	adiw	r26, 0x12	; 18
    238e:	4d 91       	ld	r20, X+
    2390:	5d 91       	ld	r21, X+
    2392:	6d 91       	ld	r22, X+
    2394:	7c 91       	ld	r23, X
    2396:	55 97       	sbiw	r26, 0x15	; 21
    2398:	cf 01       	movw	r24, r30
    239a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <get_fat>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    23a2:	82 30       	cpi	r24, 0x02	; 2
    23a4:	91 05       	cpc	r25, r1
    23a6:	a1 05       	cpc	r26, r1
    23a8:	b1 05       	cpc	r27, r1
    23aa:	48 f4       	brcc	.+18     	; 0x23be <f_read+0x13e>
    23ac:	eb 81       	ldd	r30, Y+3	; 0x03
    23ae:	fc 81       	ldd	r31, Y+4	; 0x04
    23b0:	84 81       	ldd	r24, Z+4	; 0x04
    23b2:	80 68       	ori	r24, 0x80	; 128
    23b4:	84 83       	std	Z+4, r24	; 0x04
    23b6:	bb 24       	eor	r11, r11
    23b8:	68 94       	set
    23ba:	b1 f8       	bld	r11, 1
    23bc:	06 c1       	rjmp	.+524    	; 0x25ca <f_read+0x34a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    23be:	8f 3f       	cpi	r24, 0xFF	; 255
    23c0:	ff ef       	ldi	r31, 0xFF	; 255
    23c2:	9f 07       	cpc	r25, r31
    23c4:	ff ef       	ldi	r31, 0xFF	; 255
    23c6:	af 07       	cpc	r26, r31
    23c8:	ff ef       	ldi	r31, 0xFF	; 255
    23ca:	bf 07       	cpc	r27, r31
    23cc:	61 f4       	brne	.+24     	; 0x23e6 <f_read+0x166>
    23ce:	ab 81       	ldd	r26, Y+3	; 0x03
    23d0:	bc 81       	ldd	r27, Y+4	; 0x04
    23d2:	14 96       	adiw	r26, 0x04	; 4
    23d4:	8c 91       	ld	r24, X
    23d6:	14 97       	sbiw	r26, 0x04	; 4
    23d8:	80 68       	ori	r24, 0x80	; 128
    23da:	14 96       	adiw	r26, 0x04	; 4
    23dc:	8c 93       	st	X, r24
    23de:	14 97       	sbiw	r26, 0x04	; 4
    23e0:	bb 24       	eor	r11, r11
    23e2:	b3 94       	inc	r11
    23e4:	f2 c0       	rjmp	.+484    	; 0x25ca <f_read+0x34a>
				fp->clust = clst;				/* Update current cluster */
    23e6:	eb 81       	ldd	r30, Y+3	; 0x03
    23e8:	fc 81       	ldd	r31, Y+4	; 0x04
    23ea:	82 8b       	std	Z+18, r24	; 0x12
    23ec:	93 8b       	std	Z+19, r25	; 0x13
    23ee:	a4 8b       	std	Z+20, r26	; 0x14
    23f0:	b5 8b       	std	Z+21, r27	; 0x15
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    23f2:	ab 81       	ldd	r26, Y+3	; 0x03
    23f4:	bc 81       	ldd	r27, Y+4	; 0x04
    23f6:	6d 90       	ld	r6, X+
    23f8:	7c 90       	ld	r7, X
    23fa:	11 97       	sbiw	r26, 0x01	; 1
    23fc:	52 96       	adiw	r26, 0x12	; 18
    23fe:	4d 91       	ld	r20, X+
    2400:	5d 91       	ld	r21, X+
    2402:	6d 91       	ld	r22, X+
    2404:	7c 91       	ld	r23, X
    2406:	55 97       	sbiw	r26, 0x15	; 21
    2408:	c3 01       	movw	r24, r6
    240a:	0e 94 22 07 	call	0xe44	; 0xe44 <clust2sect>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	a1 05       	cpc	r26, r1
    2416:	b1 05       	cpc	r27, r1
    2418:	49 f4       	brne	.+18     	; 0x242c <f_read+0x1ac>
    241a:	eb 81       	ldd	r30, Y+3	; 0x03
    241c:	fc 81       	ldd	r31, Y+4	; 0x04
    241e:	84 81       	ldd	r24, Z+4	; 0x04
    2420:	80 68       	ori	r24, 0x80	; 128
    2422:	84 83       	std	Z+4, r24	; 0x04
    2424:	bb 24       	eor	r11, r11
    2426:	68 94       	set
    2428:	b1 f8       	bld	r11, 1
    242a:	cf c0       	rjmp	.+414    	; 0x25ca <f_read+0x34a>
			sect += csect;
    242c:	6c 01       	movw	r12, r24
    242e:	7d 01       	movw	r14, r26
    2430:	c1 0e       	add	r12, r17
    2432:	d1 1c       	adc	r13, r1
    2434:	e1 1c       	adc	r14, r1
    2436:	f1 1c       	adc	r15, r1
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    2438:	24 01       	movw	r4, r8
    243a:	45 2c       	mov	r4, r5
    243c:	55 24       	eor	r5, r5
    243e:	46 94       	lsr	r4
			if (cc) {							/* Read maximum contiguous sectors directly */
    2440:	41 14       	cp	r4, r1
    2442:	51 04       	cpc	r5, r1
    2444:	09 f4       	brne	.+2      	; 0x2448 <f_read+0x1c8>
    2446:	53 c0       	rjmp	.+166    	; 0x24ee <f_read+0x26e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2448:	d3 01       	movw	r26, r6
    244a:	12 96       	adiw	r26, 0x02	; 2
    244c:	4c 91       	ld	r20, X
    244e:	12 97       	sbiw	r26, 0x02	; 2
    2450:	c2 01       	movw	r24, r4
    2452:	81 0f       	add	r24, r17
    2454:	91 1d       	adc	r25, r1
    2456:	24 2f       	mov	r18, r20
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	28 17       	cp	r18, r24
    245c:	39 07       	cpc	r19, r25
    245e:	20 f4       	brcc	.+8      	; 0x2468 <f_read+0x1e8>
					cc = fp->fs->csize - csect;
    2460:	c9 01       	movw	r24, r18
    2462:	2c 01       	movw	r4, r24
    2464:	41 1a       	sub	r4, r17
    2466:	51 08       	sbc	r5, r1
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    2468:	f3 01       	movw	r30, r6
    246a:	81 81       	ldd	r24, Z+1	; 0x01
    246c:	69 81       	ldd	r22, Y+1	; 0x01
    246e:	7a 81       	ldd	r23, Y+2	; 0x02
    2470:	a7 01       	movw	r20, r14
    2472:	96 01       	movw	r18, r12
    2474:	04 2d       	mov	r16, r4
    2476:	10 e0       	ldi	r17, 0x00	; 0
    2478:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <disk_read>
    247c:	88 23       	and	r24, r24
    247e:	61 f0       	breq	.+24     	; 0x2498 <f_read+0x218>
					ABORT(fp->fs, FR_DISK_ERR);
    2480:	ab 81       	ldd	r26, Y+3	; 0x03
    2482:	bc 81       	ldd	r27, Y+4	; 0x04
    2484:	14 96       	adiw	r26, 0x04	; 4
    2486:	8c 91       	ld	r24, X
    2488:	14 97       	sbiw	r26, 0x04	; 4
    248a:	80 68       	ori	r24, 0x80	; 128
    248c:	14 96       	adiw	r26, 0x04	; 4
    248e:	8c 93       	st	X, r24
    2490:	14 97       	sbiw	r26, 0x04	; 4
    2492:	bb 24       	eor	r11, r11
    2494:	b3 94       	inc	r11
    2496:	99 c0       	rjmp	.+306    	; 0x25ca <f_read+0x34a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    2498:	ab 81       	ldd	r26, Y+3	; 0x03
    249a:	bc 81       	ldd	r27, Y+4	; 0x04
    249c:	ed 91       	ld	r30, X+
    249e:	fc 91       	ld	r31, X
    24a0:	11 97       	sbiw	r26, 0x01	; 1
    24a2:	84 81       	ldd	r24, Z+4	; 0x04
    24a4:	88 23       	and	r24, r24
    24a6:	f1 f0       	breq	.+60     	; 0x24e4 <f_read+0x264>
    24a8:	86 a5       	lds	r24, 0x66
    24aa:	97 a5       	lds	r25, 0x67
    24ac:	a0 a9       	sts	0x40, r26
    24ae:	b1 a9       	sts	0x41, r27
    24b0:	8c 19       	sub	r24, r12
    24b2:	9d 09       	sbc	r25, r13
    24b4:	ae 09       	sbc	r26, r14
    24b6:	bf 09       	sbc	r27, r15
    24b8:	a2 01       	movw	r20, r4
    24ba:	60 e0       	ldi	r22, 0x00	; 0
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	84 17       	cp	r24, r20
    24c0:	95 07       	cpc	r25, r21
    24c2:	a6 07       	cpc	r26, r22
    24c4:	b7 07       	cpc	r27, r23
    24c6:	70 f4       	brcc	.+28     	; 0x24e4 <f_read+0x264>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    24c8:	98 2f       	mov	r25, r24
    24ca:	88 27       	eor	r24, r24
    24cc:	99 0f       	add	r25, r25
    24ce:	bf 01       	movw	r22, r30
    24d0:	6e 5c       	subi	r22, 0xCE	; 206
    24d2:	7f 4f       	sbci	r23, 0xFF	; 255
    24d4:	e9 81       	ldd	r30, Y+1	; 0x01
    24d6:	fa 81       	ldd	r31, Y+2	; 0x02
    24d8:	8e 0f       	add	r24, r30
    24da:	9f 1f       	adc	r25, r31
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	52 e0       	ldi	r21, 0x02	; 2
    24e0:	0e 94 68 00 	call	0xd0	; 0xd0 <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    24e4:	62 01       	movw	r12, r4
    24e6:	dc 2c       	mov	r13, r12
    24e8:	cc 24       	eor	r12, r12
    24ea:	dd 0c       	add	r13, r13
				continue;
    24ec:	41 c0       	rjmp	.+130    	; 0x2570 <f_read+0x2f0>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    24ee:	ab 81       	ldd	r26, Y+3	; 0x03
    24f0:	bc 81       	ldd	r27, Y+4	; 0x04
    24f2:	56 96       	adiw	r26, 0x16	; 22
    24f4:	cd 92       	st	X+, r12
    24f6:	dd 92       	st	X+, r13
    24f8:	ed 92       	st	X+, r14
    24fa:	fc 92       	st	X, r15
    24fc:	59 97       	sbiw	r26, 0x19	; 25
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    24fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2500:	fc 81       	ldd	r31, Y+4	; 0x04
    2502:	c6 80       	ldd	r12, Z+6	; 0x06
    2504:	d7 80       	ldd	r13, Z+7	; 0x07
    2506:	e0 84       	ldd	r14, Z+8	; 0x08
    2508:	f1 84       	ldd	r15, Z+9	; 0x09
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    250a:	46 89       	ldd	r20, Z+22	; 0x16
    250c:	57 89       	ldd	r21, Z+23	; 0x17
    250e:	60 8d       	ldd	r22, Z+24	; 0x18
    2510:	71 8d       	ldd	r23, Z+25	; 0x19
    2512:	80 81       	ld	r24, Z
    2514:	91 81       	ldd	r25, Z+1	; 0x01
    2516:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
    251a:	88 23       	and	r24, r24
    251c:	61 f0       	breq	.+24     	; 0x2536 <f_read+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
    251e:	ab 81       	ldd	r26, Y+3	; 0x03
    2520:	bc 81       	ldd	r27, Y+4	; 0x04
    2522:	14 96       	adiw	r26, 0x04	; 4
    2524:	8c 91       	ld	r24, X
    2526:	14 97       	sbiw	r26, 0x04	; 4
    2528:	80 68       	ori	r24, 0x80	; 128
    252a:	14 96       	adiw	r26, 0x04	; 4
    252c:	8c 93       	st	X, r24
    252e:	14 97       	sbiw	r26, 0x04	; 4
    2530:	bb 24       	eor	r11, r11
    2532:	b3 94       	inc	r11
    2534:	4a c0       	rjmp	.+148    	; 0x25ca <f_read+0x34a>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    2536:	c6 01       	movw	r24, r12
    2538:	91 70       	andi	r25, 0x01	; 1
    253a:	e0 e0       	ldi	r30, 0x00	; 0
    253c:	f2 e0       	ldi	r31, 0x02	; 2
    253e:	e8 1b       	sub	r30, r24
    2540:	f9 0b       	sbc	r31, r25
    2542:	64 01       	movw	r12, r8
    2544:	e8 15       	cp	r30, r8
    2546:	f9 05       	cpc	r31, r9
    2548:	08 f4       	brcc	.+2      	; 0x254c <f_read+0x2cc>
    254a:	6f 01       	movw	r12, r30
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    254c:	ab 81       	ldd	r26, Y+3	; 0x03
    254e:	bc 81       	ldd	r27, Y+4	; 0x04
    2550:	16 96       	adiw	r26, 0x06	; 6
    2552:	6d 91       	ld	r22, X+
    2554:	7c 91       	ld	r23, X
    2556:	17 97       	sbiw	r26, 0x07	; 7
    2558:	71 70       	andi	r23, 0x01	; 1
    255a:	cb 01       	movw	r24, r22
    255c:	c2 96       	adiw	r24, 0x32	; 50
    255e:	6d 91       	ld	r22, X+
    2560:	7c 91       	ld	r23, X
    2562:	68 0f       	add	r22, r24
    2564:	79 1f       	adc	r23, r25
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	9a 81       	ldd	r25, Y+2	; 0x02
    256a:	a6 01       	movw	r20, r12
    256c:	0e 94 68 00 	call	0xd0	; 0xd0 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    2570:	e9 81       	ldd	r30, Y+1	; 0x01
    2572:	fa 81       	ldd	r31, Y+2	; 0x02
    2574:	ec 0d       	add	r30, r12
    2576:	fd 1d       	adc	r31, r13
    2578:	fa 83       	std	Y+2, r31	; 0x02
    257a:	e9 83       	std	Y+1, r30	; 0x01
    257c:	a6 01       	movw	r20, r12
    257e:	60 e0       	ldi	r22, 0x00	; 0
    2580:	70 e0       	ldi	r23, 0x00	; 0
    2582:	eb 81       	ldd	r30, Y+3	; 0x03
    2584:	fc 81       	ldd	r31, Y+4	; 0x04
    2586:	86 81       	ldd	r24, Z+6	; 0x06
    2588:	97 81       	ldd	r25, Z+7	; 0x07
    258a:	a0 85       	ldd	r26, Z+8	; 0x08
    258c:	b1 85       	ldd	r27, Z+9	; 0x09
    258e:	84 0f       	add	r24, r20
    2590:	95 1f       	adc	r25, r21
    2592:	a6 1f       	adc	r26, r22
    2594:	b7 1f       	adc	r27, r23
    2596:	86 83       	std	Z+6, r24	; 0x06
    2598:	97 83       	std	Z+7, r25	; 0x07
    259a:	a0 87       	std	Z+8, r26	; 0x08
    259c:	b1 87       	std	Z+9, r27	; 0x09
    259e:	d1 01       	movw	r26, r2
    25a0:	8d 91       	ld	r24, X+
    25a2:	9c 91       	ld	r25, X
    25a4:	11 97       	sbiw	r26, 0x01	; 1
    25a6:	8c 0d       	add	r24, r12
    25a8:	9d 1d       	adc	r25, r13
    25aa:	11 96       	adiw	r26, 0x01	; 1
    25ac:	9c 93       	st	X, r25
    25ae:	8e 93       	st	-X, r24
    25b0:	8c 18       	sub	r8, r12
    25b2:	9d 08       	sbc	r9, r13
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    25b4:	09 f0       	breq	.+2      	; 0x25b8 <f_read+0x338>
    25b6:	b6 ce       	rjmp	.-660    	; 0x2324 <f_read+0xa4>
    25b8:	08 c0       	rjmp	.+16     	; 0x25ca <f_read+0x34a>
	*br = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);				/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)					/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    25ba:	bb 24       	eor	r11, r11
    25bc:	68 94       	set
    25be:	b1 f8       	bld	r11, 1
    25c0:	04 c0       	rjmp	.+8      	; 0x25ca <f_read+0x34a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    25c2:	0f 2e       	mov	r0, r31
    25c4:	f7 e0       	ldi	r31, 0x07	; 7
    25c6:	bf 2e       	mov	r11, r31
    25c8:	f0 2d       	mov	r31, r0
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    25ca:	8b 2d       	mov	r24, r11
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	df 91       	pop	r29
    25d6:	cf 91       	pop	r28
    25d8:	1f 91       	pop	r17
    25da:	0f 91       	pop	r16
    25dc:	ff 90       	pop	r15
    25de:	ef 90       	pop	r14
    25e0:	df 90       	pop	r13
    25e2:	cf 90       	pop	r12
    25e4:	bf 90       	pop	r11
    25e6:	9f 90       	pop	r9
    25e8:	8f 90       	pop	r8
    25ea:	7f 90       	pop	r7
    25ec:	6f 90       	pop	r6
    25ee:	5f 90       	pop	r5
    25f0:	4f 90       	pop	r4
    25f2:	3f 90       	pop	r3
    25f4:	2f 90       	pop	r2
    25f6:	08 95       	ret

000025f8 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    25f8:	2f 92       	push	r2
    25fa:	3f 92       	push	r3
    25fc:	4f 92       	push	r4
    25fe:	5f 92       	push	r5
    2600:	6f 92       	push	r6
    2602:	7f 92       	push	r7
    2604:	8f 92       	push	r8
    2606:	9f 92       	push	r9
    2608:	af 92       	push	r10
    260a:	bf 92       	push	r11
    260c:	cf 92       	push	r12
    260e:	df 92       	push	r13
    2610:	ef 92       	push	r14
    2612:	ff 92       	push	r15
    2614:	0f 93       	push	r16
    2616:	1f 93       	push	r17
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	00 d0       	rcall	.+0      	; 0x261e <f_write+0x26>
    261e:	00 d0       	rcall	.+0      	; 0x2620 <f_write+0x28>
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
    2624:	9c 83       	std	Y+4, r25	; 0x04
    2626:	8b 83       	std	Y+3, r24	; 0x03
    2628:	c6 2e       	mov	r12, r22
    262a:	17 2f       	mov	r17, r23
    262c:	4a 01       	movw	r8, r20
    262e:	19 01       	movw	r2, r18
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    2630:	d9 01       	movw	r26, r18
    2632:	1d 92       	st	X+, r1
    2634:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);			/* Check validity */
    2636:	fc 01       	movw	r30, r24
    2638:	62 81       	ldd	r22, Z+2	; 0x02
    263a:	73 81       	ldd	r23, Z+3	; 0x03
    263c:	80 81       	ld	r24, Z
    263e:	91 81       	ldd	r25, Z+1	; 0x01
    2640:	0e 94 11 01 	call	0x222	; 0x222 <validate>
    2644:	b8 2e       	mov	r11, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2646:	88 23       	and	r24, r24
    2648:	09 f0       	breq	.+2      	; 0x264c <f_write+0x54>
    264a:	fd c1       	rjmp	.+1018   	; 0x2a46 <f_write+0x44e>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    264c:	ab 81       	ldd	r26, Y+3	; 0x03
    264e:	bc 81       	ldd	r27, Y+4	; 0x04
    2650:	14 96       	adiw	r26, 0x04	; 4
    2652:	8c 91       	ld	r24, X
    2654:	14 97       	sbiw	r26, 0x04	; 4
    2656:	88 23       	and	r24, r24
    2658:	0c f4       	brge	.+2      	; 0x265c <f_write+0x64>
    265a:	ed c1       	rjmp	.+986    	; 0x2a36 <f_write+0x43e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    265c:	81 ff       	sbrs	r24, 1
    265e:	ef c1       	rjmp	.+990    	; 0x2a3e <f_write+0x446>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    2660:	1a 96       	adiw	r26, 0x0a	; 10
    2662:	4d 91       	ld	r20, X+
    2664:	5d 91       	ld	r21, X+
    2666:	6d 91       	ld	r22, X+
    2668:	7c 91       	ld	r23, X
    266a:	1d 97       	sbiw	r26, 0x0d	; 13
    266c:	c4 01       	movw	r24, r8
    266e:	a0 e0       	ldi	r26, 0x00	; 0
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	84 0f       	add	r24, r20
    2674:	95 1f       	adc	r25, r21
    2676:	a6 1f       	adc	r26, r22
    2678:	b7 1f       	adc	r27, r23
    267a:	84 17       	cp	r24, r20
    267c:	95 07       	cpc	r25, r21
    267e:	a6 07       	cpc	r26, r22
    2680:	b7 07       	cpc	r27, r23
    2682:	08 f4       	brcc	.+2      	; 0x2686 <f_write+0x8e>
    2684:	bb c1       	rjmp	.+886    	; 0x29fc <f_write+0x404>

	for ( ;  btw;							/* Repeat until all data written */
    2686:	81 14       	cp	r8, r1
    2688:	91 04       	cpc	r9, r1
    268a:	09 f4       	brne	.+2      	; 0x268e <f_write+0x96>
    268c:	b7 c1       	rjmp	.+878    	; 0x29fc <f_write+0x404>
    268e:	c9 82       	std	Y+1, r12	; 0x01
    2690:	1a 83       	std	Y+2, r17	; 0x02
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    2692:	aa 24       	eor	r10, r10
    2694:	a3 94       	inc	r10
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    2696:	eb 81       	ldd	r30, Y+3	; 0x03
    2698:	fc 81       	ldd	r31, Y+4	; 0x04
    269a:	46 81       	ldd	r20, Z+6	; 0x06
    269c:	57 81       	ldd	r21, Z+7	; 0x07
    269e:	60 85       	ldd	r22, Z+8	; 0x08
    26a0:	71 85       	ldd	r23, Z+9	; 0x09
    26a2:	db 01       	movw	r26, r22
    26a4:	ca 01       	movw	r24, r20
    26a6:	91 70       	andi	r25, 0x01	; 1
    26a8:	a0 70       	andi	r26, 0x00	; 0
    26aa:	b0 70       	andi	r27, 0x00	; 0
    26ac:	00 97       	sbiw	r24, 0x00	; 0
    26ae:	a1 05       	cpc	r26, r1
    26b0:	b1 05       	cpc	r27, r1
    26b2:	09 f0       	breq	.+2      	; 0x26b6 <f_write+0xbe>
    26b4:	40 c1       	rjmp	.+640    	; 0x2936 <f_write+0x33e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    26b6:	20 81       	ld	r18, Z
    26b8:	31 81       	ldd	r19, Z+1	; 0x01
    26ba:	db 01       	movw	r26, r22
    26bc:	ca 01       	movw	r24, r20
    26be:	07 2e       	mov	r0, r23
    26c0:	79 e0       	ldi	r23, 0x09	; 9
    26c2:	b6 95       	lsr	r27
    26c4:	a7 95       	ror	r26
    26c6:	97 95       	ror	r25
    26c8:	87 95       	ror	r24
    26ca:	7a 95       	dec	r23
    26cc:	d1 f7       	brne	.-12     	; 0x26c2 <f_write+0xca>
    26ce:	70 2d       	mov	r23, r0
    26d0:	f9 01       	movw	r30, r18
    26d2:	12 81       	ldd	r17, Z+2	; 0x02
    26d4:	11 50       	subi	r17, 0x01	; 1
    26d6:	18 23       	and	r17, r24
			if (!csect) {					/* On the cluster boundary? */
    26d8:	09 f0       	breq	.+2      	; 0x26dc <f_write+0xe4>
    26da:	58 c0       	rjmp	.+176    	; 0x278c <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
    26dc:	41 15       	cp	r20, r1
    26de:	51 05       	cpc	r21, r1
    26e0:	61 05       	cpc	r22, r1
    26e2:	71 05       	cpc	r23, r1
    26e4:	c9 f4       	brne	.+50     	; 0x2718 <f_write+0x120>
					clst = fp->sclust;		/* Follow from the origin */
    26e6:	eb 81       	ldd	r30, Y+3	; 0x03
    26e8:	fc 81       	ldd	r31, Y+4	; 0x04
    26ea:	86 85       	ldd	r24, Z+14	; 0x0e
    26ec:	97 85       	ldd	r25, Z+15	; 0x0f
    26ee:	a0 89       	ldd	r26, Z+16	; 0x10
    26f0:	b1 89       	ldd	r27, Z+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	a1 05       	cpc	r26, r1
    26f6:	b1 05       	cpc	r27, r1
    26f8:	09 f5       	brne	.+66     	; 0x273c <f_write+0x144>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    26fa:	c9 01       	movw	r24, r18
    26fc:	40 e0       	ldi	r20, 0x00	; 0
    26fe:	50 e0       	ldi	r21, 0x00	; 0
    2700:	ba 01       	movw	r22, r20
    2702:	0e 94 38 0a 	call	0x1470	; 0x1470 <create_chain>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	eb 81       	ldd	r30, Y+3	; 0x03
    270c:	fc 81       	ldd	r31, Y+4	; 0x04
    270e:	86 87       	std	Z+14, r24	; 0x0e
    2710:	97 87       	std	Z+15, r25	; 0x0f
    2712:	a0 8b       	std	Z+16, r26	; 0x10
    2714:	b1 8b       	std	Z+17, r27	; 0x11
    2716:	0d c0       	rjmp	.+26     	; 0x2732 <f_write+0x13a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    2718:	ab 81       	ldd	r26, Y+3	; 0x03
    271a:	bc 81       	ldd	r27, Y+4	; 0x04
    271c:	52 96       	adiw	r26, 0x12	; 18
    271e:	4d 91       	ld	r20, X+
    2720:	5d 91       	ld	r21, X+
    2722:	6d 91       	ld	r22, X+
    2724:	7c 91       	ld	r23, X
    2726:	55 97       	sbiw	r26, 0x15	; 21
    2728:	c9 01       	movw	r24, r18
    272a:	0e 94 38 0a 	call	0x1470	; 0x1470 <create_chain>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    2732:	00 97       	sbiw	r24, 0x00	; 0
    2734:	a1 05       	cpc	r26, r1
    2736:	b1 05       	cpc	r27, r1
    2738:	09 f4       	brne	.+2      	; 0x273c <f_write+0x144>
    273a:	60 c1       	rjmp	.+704    	; 0x29fc <f_write+0x404>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    273c:	81 30       	cpi	r24, 0x01	; 1
    273e:	91 05       	cpc	r25, r1
    2740:	a1 05       	cpc	r26, r1
    2742:	b1 05       	cpc	r27, r1
    2744:	49 f4       	brne	.+18     	; 0x2758 <f_write+0x160>
    2746:	eb 81       	ldd	r30, Y+3	; 0x03
    2748:	fc 81       	ldd	r31, Y+4	; 0x04
    274a:	84 81       	ldd	r24, Z+4	; 0x04
    274c:	80 68       	ori	r24, 0x80	; 128
    274e:	84 83       	std	Z+4, r24	; 0x04
    2750:	bb 24       	eor	r11, r11
    2752:	68 94       	set
    2754:	b1 f8       	bld	r11, 1
    2756:	77 c1       	rjmp	.+750    	; 0x2a46 <f_write+0x44e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2758:	8f 3f       	cpi	r24, 0xFF	; 255
    275a:	ff ef       	ldi	r31, 0xFF	; 255
    275c:	9f 07       	cpc	r25, r31
    275e:	ff ef       	ldi	r31, 0xFF	; 255
    2760:	af 07       	cpc	r26, r31
    2762:	ff ef       	ldi	r31, 0xFF	; 255
    2764:	bf 07       	cpc	r27, r31
    2766:	61 f4       	brne	.+24     	; 0x2780 <f_write+0x188>
    2768:	ab 81       	ldd	r26, Y+3	; 0x03
    276a:	bc 81       	ldd	r27, Y+4	; 0x04
    276c:	14 96       	adiw	r26, 0x04	; 4
    276e:	8c 91       	ld	r24, X
    2770:	14 97       	sbiw	r26, 0x04	; 4
    2772:	80 68       	ori	r24, 0x80	; 128
    2774:	14 96       	adiw	r26, 0x04	; 4
    2776:	8c 93       	st	X, r24
    2778:	14 97       	sbiw	r26, 0x04	; 4
    277a:	bb 24       	eor	r11, r11
    277c:	b3 94       	inc	r11
    277e:	63 c1       	rjmp	.+710    	; 0x2a46 <f_write+0x44e>
				fp->clust = clst;			/* Update current cluster */
    2780:	eb 81       	ldd	r30, Y+3	; 0x03
    2782:	fc 81       	ldd	r31, Y+4	; 0x04
    2784:	82 8b       	std	Z+18, r24	; 0x12
    2786:	93 8b       	std	Z+19, r25	; 0x13
    2788:	a4 8b       	std	Z+20, r26	; 0x14
    278a:	b5 8b       	std	Z+21, r27	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    278c:	ab 81       	ldd	r26, Y+3	; 0x03
    278e:	bc 81       	ldd	r27, Y+4	; 0x04
    2790:	2d 91       	ld	r18, X+
    2792:	3c 91       	ld	r19, X
    2794:	f9 01       	movw	r30, r18
    2796:	86 a5       	lds	r24, 0x66
    2798:	97 a5       	lds	r25, 0x67
    279a:	a0 a9       	sts	0x40, r26
    279c:	b1 a9       	sts	0x41, r27
    279e:	eb 81       	ldd	r30, Y+3	; 0x03
    27a0:	fc 81       	ldd	r31, Y+4	; 0x04
    27a2:	46 89       	ldd	r20, Z+22	; 0x16
    27a4:	57 89       	ldd	r21, Z+23	; 0x17
    27a6:	60 8d       	ldd	r22, Z+24	; 0x18
    27a8:	71 8d       	ldd	r23, Z+25	; 0x19
    27aa:	84 17       	cp	r24, r20
    27ac:	95 07       	cpc	r25, r21
    27ae:	a6 07       	cpc	r26, r22
    27b0:	b7 07       	cpc	r27, r23
    27b2:	a1 f4       	brne	.+40     	; 0x27dc <f_write+0x1e4>
    27b4:	c9 01       	movw	r24, r18
    27b6:	40 e0       	ldi	r20, 0x00	; 0
    27b8:	50 e0       	ldi	r21, 0x00	; 0
    27ba:	ba 01       	movw	r22, r20
    27bc:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
    27c0:	88 23       	and	r24, r24
    27c2:	61 f0       	breq	.+24     	; 0x27dc <f_write+0x1e4>
				ABORT(fp->fs, FR_DISK_ERR);
    27c4:	ab 81       	ldd	r26, Y+3	; 0x03
    27c6:	bc 81       	ldd	r27, Y+4	; 0x04
    27c8:	14 96       	adiw	r26, 0x04	; 4
    27ca:	8c 91       	ld	r24, X
    27cc:	14 97       	sbiw	r26, 0x04	; 4
    27ce:	80 68       	ori	r24, 0x80	; 128
    27d0:	14 96       	adiw	r26, 0x04	; 4
    27d2:	8c 93       	st	X, r24
    27d4:	14 97       	sbiw	r26, 0x04	; 4
    27d6:	bb 24       	eor	r11, r11
    27d8:	b3 94       	inc	r11
    27da:	35 c1       	rjmp	.+618    	; 0x2a46 <f_write+0x44e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    27dc:	eb 81       	ldd	r30, Y+3	; 0x03
    27de:	fc 81       	ldd	r31, Y+4	; 0x04
    27e0:	40 80       	ld	r4, Z
    27e2:	51 80       	ldd	r5, Z+1	; 0x01
    27e4:	42 89       	ldd	r20, Z+18	; 0x12
    27e6:	53 89       	ldd	r21, Z+19	; 0x13
    27e8:	64 89       	ldd	r22, Z+20	; 0x14
    27ea:	75 89       	ldd	r23, Z+21	; 0x15
    27ec:	c2 01       	movw	r24, r4
    27ee:	0e 94 22 07 	call	0xe44	; 0xe44 <clust2sect>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	a1 05       	cpc	r26, r1
    27fa:	b1 05       	cpc	r27, r1
    27fc:	69 f4       	brne	.+26     	; 0x2818 <f_write+0x220>
    27fe:	ab 81       	ldd	r26, Y+3	; 0x03
    2800:	bc 81       	ldd	r27, Y+4	; 0x04
    2802:	14 96       	adiw	r26, 0x04	; 4
    2804:	8c 91       	ld	r24, X
    2806:	14 97       	sbiw	r26, 0x04	; 4
    2808:	80 68       	ori	r24, 0x80	; 128
    280a:	14 96       	adiw	r26, 0x04	; 4
    280c:	8c 93       	st	X, r24
    280e:	14 97       	sbiw	r26, 0x04	; 4
    2810:	bb 24       	eor	r11, r11
    2812:	68 94       	set
    2814:	b1 f8       	bld	r11, 1
    2816:	17 c1       	rjmp	.+558    	; 0x2a46 <f_write+0x44e>
			sect += csect;
    2818:	6c 01       	movw	r12, r24
    281a:	7d 01       	movw	r14, r26
    281c:	c1 0e       	add	r12, r17
    281e:	d1 1c       	adc	r13, r1
    2820:	e1 1c       	adc	r14, r1
    2822:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    2824:	34 01       	movw	r6, r8
    2826:	67 2c       	mov	r6, r7
    2828:	77 24       	eor	r7, r7
    282a:	66 94       	lsr	r6
			if (cc) {						/* Write maximum contiguous sectors directly */
    282c:	61 14       	cp	r6, r1
    282e:	71 04       	cpc	r7, r1
    2830:	09 f4       	brne	.+2      	; 0x2834 <f_write+0x23c>
    2832:	50 c0       	rjmp	.+160    	; 0x28d4 <f_write+0x2dc>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2834:	f2 01       	movw	r30, r4
    2836:	42 81       	ldd	r20, Z+2	; 0x02
    2838:	c3 01       	movw	r24, r6
    283a:	81 0f       	add	r24, r17
    283c:	91 1d       	adc	r25, r1
    283e:	24 2f       	mov	r18, r20
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	28 17       	cp	r18, r24
    2844:	39 07       	cpc	r19, r25
    2846:	20 f4       	brcc	.+8      	; 0x2850 <f_write+0x258>
					cc = fp->fs->csize - csect;
    2848:	c9 01       	movw	r24, r18
    284a:	3c 01       	movw	r6, r24
    284c:	61 1a       	sub	r6, r17
    284e:	71 08       	sbc	r7, r1
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    2850:	d2 01       	movw	r26, r4
    2852:	11 96       	adiw	r26, 0x01	; 1
    2854:	8c 91       	ld	r24, X
    2856:	69 81       	ldd	r22, Y+1	; 0x01
    2858:	7a 81       	ldd	r23, Y+2	; 0x02
    285a:	a7 01       	movw	r20, r14
    285c:	96 01       	movw	r18, r12
    285e:	06 2d       	mov	r16, r6
    2860:	10 e0       	ldi	r17, 0x00	; 0
    2862:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <disk_write>
    2866:	88 23       	and	r24, r24
    2868:	41 f0       	breq	.+16     	; 0x287a <f_write+0x282>
					ABORT(fp->fs, FR_DISK_ERR);
    286a:	eb 81       	ldd	r30, Y+3	; 0x03
    286c:	fc 81       	ldd	r31, Y+4	; 0x04
    286e:	84 81       	ldd	r24, Z+4	; 0x04
    2870:	80 68       	ori	r24, 0x80	; 128
    2872:	84 83       	std	Z+4, r24	; 0x04
    2874:	bb 24       	eor	r11, r11
    2876:	b3 94       	inc	r11
    2878:	e6 c0       	rjmp	.+460    	; 0x2a46 <f_write+0x44e>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    287a:	ab 81       	ldd	r26, Y+3	; 0x03
    287c:	bc 81       	ldd	r27, Y+4	; 0x04
    287e:	ed 91       	ld	r30, X+
    2880:	fc 91       	ld	r31, X
    2882:	86 a5       	lds	r24, 0x66
    2884:	97 a5       	lds	r25, 0x67
    2886:	a0 a9       	sts	0x40, r26
    2888:	b1 a9       	sts	0x41, r27
    288a:	8c 19       	sub	r24, r12
    288c:	9d 09       	sbc	r25, r13
    288e:	ae 09       	sbc	r26, r14
    2890:	bf 09       	sbc	r27, r15
    2892:	a3 01       	movw	r20, r6
    2894:	60 e0       	ldi	r22, 0x00	; 0
    2896:	70 e0       	ldi	r23, 0x00	; 0
    2898:	84 17       	cp	r24, r20
    289a:	95 07       	cpc	r25, r21
    289c:	a6 07       	cpc	r26, r22
    289e:	b7 07       	cpc	r27, r23
    28a0:	a0 f4       	brcc	.+40     	; 0x28ca <f_write+0x2d2>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    28a2:	bc 01       	movw	r22, r24
    28a4:	76 2f       	mov	r23, r22
    28a6:	66 27       	eor	r22, r22
    28a8:	77 0f       	add	r23, r23
    28aa:	29 81       	ldd	r18, Y+1	; 0x01
    28ac:	3a 81       	ldd	r19, Y+2	; 0x02
    28ae:	62 0f       	add	r22, r18
    28b0:	73 1f       	adc	r23, r19
    28b2:	cf 01       	movw	r24, r30
    28b4:	c2 96       	adiw	r24, 0x32	; 50
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	52 e0       	ldi	r21, 0x02	; 2
    28ba:	0e 94 68 00 	call	0xd0	; 0xd0 <mem_cpy>
					fp->fs->wflag = 0;
    28be:	ab 81       	ldd	r26, Y+3	; 0x03
    28c0:	bc 81       	ldd	r27, Y+4	; 0x04
    28c2:	ed 91       	ld	r30, X+
    28c4:	fc 91       	ld	r31, X
    28c6:	11 97       	sbiw	r26, 0x01	; 1
    28c8:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    28ca:	63 01       	movw	r12, r6
    28cc:	dc 2c       	mov	r13, r12
    28ce:	cc 24       	eor	r12, r12
    28d0:	dd 0c       	add	r13, r13
				continue;
    28d2:	70 c0       	rjmp	.+224    	; 0x29b4 <f_write+0x3bc>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    28d4:	eb 81       	ldd	r30, Y+3	; 0x03
    28d6:	fc 81       	ldd	r31, Y+4	; 0x04
    28d8:	86 81       	ldd	r24, Z+6	; 0x06
    28da:	97 81       	ldd	r25, Z+7	; 0x07
    28dc:	a0 85       	ldd	r26, Z+8	; 0x08
    28de:	b1 85       	ldd	r27, Z+9	; 0x09
    28e0:	42 85       	ldd	r20, Z+10	; 0x0a
    28e2:	53 85       	ldd	r21, Z+11	; 0x0b
    28e4:	64 85       	ldd	r22, Z+12	; 0x0c
    28e6:	75 85       	ldd	r23, Z+13	; 0x0d
    28e8:	84 17       	cp	r24, r20
    28ea:	95 07       	cpc	r25, r21
    28ec:	a6 07       	cpc	r26, r22
    28ee:	b7 07       	cpc	r27, r23
    28f0:	e0 f0       	brcs	.+56     	; 0x292a <f_write+0x332>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    28f2:	c2 01       	movw	r24, r4
    28f4:	40 e0       	ldi	r20, 0x00	; 0
    28f6:	50 e0       	ldi	r21, 0x00	; 0
    28f8:	ba 01       	movw	r22, r20
    28fa:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
    28fe:	88 23       	and	r24, r24
    2900:	61 f0       	breq	.+24     	; 0x291a <f_write+0x322>
    2902:	ab 81       	ldd	r26, Y+3	; 0x03
    2904:	bc 81       	ldd	r27, Y+4	; 0x04
    2906:	14 96       	adiw	r26, 0x04	; 4
    2908:	8c 91       	ld	r24, X
    290a:	14 97       	sbiw	r26, 0x04	; 4
    290c:	80 68       	ori	r24, 0x80	; 128
    290e:	14 96       	adiw	r26, 0x04	; 4
    2910:	8c 93       	st	X, r24
    2912:	14 97       	sbiw	r26, 0x04	; 4
    2914:	bb 24       	eor	r11, r11
    2916:	b3 94       	inc	r11
    2918:	96 c0       	rjmp	.+300    	; 0x2a46 <f_write+0x44e>
				fp->fs->winsect = sect;
    291a:	ab 81       	ldd	r26, Y+3	; 0x03
    291c:	bc 81       	ldd	r27, Y+4	; 0x04
    291e:	ed 91       	ld	r30, X+
    2920:	fc 91       	ld	r31, X
    2922:	c6 a6       	lds	r28, 0xb6
    2924:	d7 a6       	lds	r29, 0xb7
    2926:	e0 aa       	sts	0x90, r30
    2928:	f1 aa       	sts	0x91, r31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    292a:	eb 81       	ldd	r30, Y+3	; 0x03
    292c:	fc 81       	ldd	r31, Y+4	; 0x04
    292e:	c6 8a       	std	Z+22, r12	; 0x16
    2930:	d7 8a       	std	Z+23, r13	; 0x17
    2932:	e0 8e       	std	Z+24, r14	; 0x18
    2934:	f1 8e       	std	Z+25, r15	; 0x19
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    2936:	ab 81       	ldd	r26, Y+3	; 0x03
    2938:	bc 81       	ldd	r27, Y+4	; 0x04
    293a:	16 96       	adiw	r26, 0x06	; 6
    293c:	cd 90       	ld	r12, X+
    293e:	dd 90       	ld	r13, X+
    2940:	ed 90       	ld	r14, X+
    2942:	fc 90       	ld	r15, X
    2944:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    2946:	56 96       	adiw	r26, 0x16	; 22
    2948:	4d 91       	ld	r20, X+
    294a:	5d 91       	ld	r21, X+
    294c:	6d 91       	ld	r22, X+
    294e:	7c 91       	ld	r23, X
    2950:	59 97       	sbiw	r26, 0x19	; 25
    2952:	8d 91       	ld	r24, X+
    2954:	9c 91       	ld	r25, X
    2956:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
    295a:	88 23       	and	r24, r24
    295c:	41 f0       	breq	.+16     	; 0x296e <f_write+0x376>
			ABORT(fp->fs, FR_DISK_ERR);
    295e:	eb 81       	ldd	r30, Y+3	; 0x03
    2960:	fc 81       	ldd	r31, Y+4	; 0x04
    2962:	84 81       	ldd	r24, Z+4	; 0x04
    2964:	80 68       	ori	r24, 0x80	; 128
    2966:	84 83       	std	Z+4, r24	; 0x04
    2968:	bb 24       	eor	r11, r11
    296a:	b3 94       	inc	r11
    296c:	6c c0       	rjmp	.+216    	; 0x2a46 <f_write+0x44e>
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    296e:	c6 01       	movw	r24, r12
    2970:	91 70       	andi	r25, 0x01	; 1
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	32 e0       	ldi	r19, 0x02	; 2
    2976:	28 1b       	sub	r18, r24
    2978:	39 0b       	sbc	r19, r25
    297a:	64 01       	movw	r12, r8
    297c:	28 15       	cp	r18, r8
    297e:	39 05       	cpc	r19, r9
    2980:	08 f4       	brcc	.+2      	; 0x2984 <f_write+0x38c>
    2982:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    2984:	ab 81       	ldd	r26, Y+3	; 0x03
    2986:	bc 81       	ldd	r27, Y+4	; 0x04
    2988:	16 96       	adiw	r26, 0x06	; 6
    298a:	8d 91       	ld	r24, X+
    298c:	9c 91       	ld	r25, X
    298e:	17 97       	sbiw	r26, 0x07	; 7
    2990:	91 70       	andi	r25, 0x01	; 1
    2992:	9c 01       	movw	r18, r24
    2994:	2e 5c       	subi	r18, 0xCE	; 206
    2996:	3f 4f       	sbci	r19, 0xFF	; 255
    2998:	8d 91       	ld	r24, X+
    299a:	9c 91       	ld	r25, X
    299c:	82 0f       	add	r24, r18
    299e:	93 1f       	adc	r25, r19
    29a0:	69 81       	ldd	r22, Y+1	; 0x01
    29a2:	7a 81       	ldd	r23, Y+2	; 0x02
    29a4:	a6 01       	movw	r20, r12
    29a6:	0e 94 68 00 	call	0xd0	; 0xd0 <mem_cpy>
		fp->fs->wflag = 1;
    29aa:	ab 81       	ldd	r26, Y+3	; 0x03
    29ac:	bc 81       	ldd	r27, Y+4	; 0x04
    29ae:	ed 91       	ld	r30, X+
    29b0:	fc 91       	ld	r31, X
    29b2:	a4 82       	std	Z+4, r10	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    29b4:	e9 81       	ldd	r30, Y+1	; 0x01
    29b6:	fa 81       	ldd	r31, Y+2	; 0x02
    29b8:	ec 0d       	add	r30, r12
    29ba:	fd 1d       	adc	r31, r13
    29bc:	fa 83       	std	Y+2, r31	; 0x02
    29be:	e9 83       	std	Y+1, r30	; 0x01
    29c0:	a6 01       	movw	r20, r12
    29c2:	60 e0       	ldi	r22, 0x00	; 0
    29c4:	70 e0       	ldi	r23, 0x00	; 0
    29c6:	eb 81       	ldd	r30, Y+3	; 0x03
    29c8:	fc 81       	ldd	r31, Y+4	; 0x04
    29ca:	86 81       	ldd	r24, Z+6	; 0x06
    29cc:	97 81       	ldd	r25, Z+7	; 0x07
    29ce:	a0 85       	ldd	r26, Z+8	; 0x08
    29d0:	b1 85       	ldd	r27, Z+9	; 0x09
    29d2:	84 0f       	add	r24, r20
    29d4:	95 1f       	adc	r25, r21
    29d6:	a6 1f       	adc	r26, r22
    29d8:	b7 1f       	adc	r27, r23
    29da:	86 83       	std	Z+6, r24	; 0x06
    29dc:	97 83       	std	Z+7, r25	; 0x07
    29de:	a0 87       	std	Z+8, r26	; 0x08
    29e0:	b1 87       	std	Z+9, r27	; 0x09
    29e2:	d1 01       	movw	r26, r2
    29e4:	8d 91       	ld	r24, X+
    29e6:	9c 91       	ld	r25, X
    29e8:	11 97       	sbiw	r26, 0x01	; 1
    29ea:	8c 0d       	add	r24, r12
    29ec:	9d 1d       	adc	r25, r13
    29ee:	11 96       	adiw	r26, 0x01	; 1
    29f0:	9c 93       	st	X, r25
    29f2:	8e 93       	st	-X, r24
    29f4:	8c 18       	sub	r8, r12
    29f6:	9d 08       	sbc	r9, r13
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    29f8:	09 f0       	breq	.+2      	; 0x29fc <f_write+0x404>
    29fa:	4d ce       	rjmp	.-870    	; 0x2696 <f_write+0x9e>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    29fc:	eb 81       	ldd	r30, Y+3	; 0x03
    29fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2a00:	86 81       	ldd	r24, Z+6	; 0x06
    2a02:	97 81       	ldd	r25, Z+7	; 0x07
    2a04:	a0 85       	ldd	r26, Z+8	; 0x08
    2a06:	b1 85       	ldd	r27, Z+9	; 0x09
    2a08:	42 85       	ldd	r20, Z+10	; 0x0a
    2a0a:	53 85       	ldd	r21, Z+11	; 0x0b
    2a0c:	64 85       	ldd	r22, Z+12	; 0x0c
    2a0e:	75 85       	ldd	r23, Z+13	; 0x0d
    2a10:	48 17       	cp	r20, r24
    2a12:	59 07       	cpc	r21, r25
    2a14:	6a 07       	cpc	r22, r26
    2a16:	7b 07       	cpc	r23, r27
    2a18:	20 f4       	brcc	.+8      	; 0x2a22 <f_write+0x42a>
    2a1a:	82 87       	std	Z+10, r24	; 0x0a
    2a1c:	93 87       	std	Z+11, r25	; 0x0b
    2a1e:	a4 87       	std	Z+12, r26	; 0x0c
    2a20:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    2a22:	ab 81       	ldd	r26, Y+3	; 0x03
    2a24:	bc 81       	ldd	r27, Y+4	; 0x04
    2a26:	14 96       	adiw	r26, 0x04	; 4
    2a28:	8c 91       	ld	r24, X
    2a2a:	14 97       	sbiw	r26, 0x04	; 4
    2a2c:	80 62       	ori	r24, 0x20	; 32
    2a2e:	14 96       	adiw	r26, 0x04	; 4
    2a30:	8c 93       	st	X, r24
    2a32:	14 97       	sbiw	r26, 0x04	; 4

	LEAVE_FF(fp->fs, FR_OK);
    2a34:	08 c0       	rjmp	.+16     	; 0x2a46 <f_write+0x44e>
	*bw = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);			/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2a36:	bb 24       	eor	r11, r11
    2a38:	68 94       	set
    2a3a:	b1 f8       	bld	r11, 1
    2a3c:	04 c0       	rjmp	.+8      	; 0x2a46 <f_write+0x44e>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    2a3e:	0f 2e       	mov	r0, r31
    2a40:	f7 e0       	ldi	r31, 0x07	; 7
    2a42:	bf 2e       	mov	r11, r31
    2a44:	f0 2d       	mov	r31, r0

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    2a46:	8b 2d       	mov	r24, r11
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	df 91       	pop	r29
    2a52:	cf 91       	pop	r28
    2a54:	1f 91       	pop	r17
    2a56:	0f 91       	pop	r16
    2a58:	ff 90       	pop	r15
    2a5a:	ef 90       	pop	r14
    2a5c:	df 90       	pop	r13
    2a5e:	cf 90       	pop	r12
    2a60:	bf 90       	pop	r11
    2a62:	af 90       	pop	r10
    2a64:	9f 90       	pop	r9
    2a66:	8f 90       	pop	r8
    2a68:	7f 90       	pop	r7
    2a6a:	6f 90       	pop	r6
    2a6c:	5f 90       	pop	r5
    2a6e:	4f 90       	pop	r4
    2a70:	3f 90       	pop	r3
    2a72:	2f 90       	pop	r2
    2a74:	08 95       	ret

00002a76 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    2a76:	0f 93       	push	r16
    2a78:	1f 93       	push	r17
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
    2a7e:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    2a80:	6a 81       	ldd	r22, Y+2	; 0x02
    2a82:	7b 81       	ldd	r23, Y+3	; 0x03
    2a84:	88 81       	ld	r24, Y
    2a86:	99 81       	ldd	r25, Y+1	; 0x01
    2a88:	0e 94 11 01 	call	0x222	; 0x222 <validate>
	if (res == FR_OK) {
    2a8c:	88 23       	and	r24, r24
    2a8e:	a9 f5       	brne	.+106    	; 0x2afa <f_sync+0x84>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    2a90:	9c 81       	ldd	r25, Y+4	; 0x04
    2a92:	95 ff       	sbrs	r25, 5
    2a94:	32 c0       	rjmp	.+100    	; 0x2afa <f_sync+0x84>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    2a96:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2a98:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2a9a:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2a9c:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2a9e:	88 81       	ld	r24, Y
    2aa0:	99 81       	ldd	r25, Y+1	; 0x01
    2aa2:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
			if (res == FR_OK) {
    2aa6:	88 23       	and	r24, r24
    2aa8:	41 f5       	brne	.+80     	; 0x2afa <f_sync+0x84>
				dir = fp->dir_ptr;
    2aaa:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2aac:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    2aae:	f8 01       	movw	r30, r16
    2ab0:	83 85       	ldd	r24, Z+11	; 0x0b
    2ab2:	80 62       	ori	r24, 0x20	; 32
    2ab4:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    2ab6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ab8:	84 8f       	std	Z+28, r24	; 0x1c
    2aba:	8b 85       	ldd	r24, Y+11	; 0x0b
    2abc:	85 8f       	std	Z+29, r24	; 0x1d
    2abe:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ac0:	86 8f       	std	Z+30, r24	; 0x1e
    2ac2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac4:	87 8f       	std	Z+31, r24	; 0x1f
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    2ac6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ac8:	82 8f       	std	Z+26, r24	; 0x1a
    2aca:	8f 85       	ldd	r24, Y+15	; 0x0f
    2acc:	83 8f       	std	Z+27, r24	; 0x1b
    2ace:	88 89       	ldd	r24, Y+16	; 0x10
    2ad0:	84 8b       	std	Z+20, r24	; 0x14
    2ad2:	89 89       	ldd	r24, Y+17	; 0x11
    2ad4:	85 8b       	std	Z+21, r24	; 0x15
				tim = get_fattime();						/* Update updated time */
    2ad6:	0e 94 1d 07 	call	0xe3a	; 0xe3a <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    2ada:	f8 01       	movw	r30, r16
    2adc:	66 8b       	std	Z+22, r22	; 0x16
    2ade:	77 8b       	std	Z+23, r23	; 0x17
    2ae0:	80 8f       	std	Z+24, r24	; 0x18
    2ae2:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    2ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae6:	8f 7d       	andi	r24, 0xDF	; 223
    2ae8:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    2aea:	e8 81       	ld	r30, Y
    2aec:	f9 81       	ldd	r31, Y+1	; 0x01
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    2af2:	88 81       	ld	r24, Y
    2af4:	99 81       	ldd	r25, Y+1	; 0x01
    2af6:	0e 94 90 06 	call	0xd20	; 0xd20 <sync>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    2afa:	df 91       	pop	r29
    2afc:	cf 91       	pop	r28
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	08 95       	ret

00002b04 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2b04:	cf 93       	push	r28
    2b06:	df 93       	push	r29
    2b08:	ec 01       	movw	r28, r24
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    2b0a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <f_sync>
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    2b0e:	88 23       	and	r24, r24
    2b10:	11 f4       	brne	.+4      	; 0x2b16 <f_close+0x12>
    2b12:	19 82       	std	Y+1, r1	; 0x01
    2b14:	18 82       	st	Y, r1
	return res;
#endif
}
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	08 95       	ret

00002b1c <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
    2b1c:	88 23       	and	r24, r24
    2b1e:	19 f4       	brne	.+6      	; 0x2b26 <f_chdrive+0xa>

	CurrVol = drv;
    2b20:	10 92 1e 01 	sts	0x011E, r1

	return FR_OK;
    2b24:	08 95       	ret

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
    2b26:	8b e0       	ldi	r24, 0x0B	; 11

	CurrVol = drv;

	return FR_OK;
}
    2b28:	08 95       	ret

00002b2a <f_chdir>:


FRESULT f_chdir (
	const TCHAR *path	/* Pointer to the directory path */
)
{
    2b2a:	cf 92       	push	r12
    2b2c:	df 92       	push	r13
    2b2e:	ef 92       	push	r14
    2b30:	ff 92       	push	r15
    2b32:	cf 93       	push	r28
    2b34:	df 93       	push	r29
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
    2b3a:	a4 97       	sbiw	r28, 0x24	; 36
    2b3c:	0f b6       	in	r0, 0x3f	; 63
    2b3e:	f8 94       	cli
    2b40:	de bf       	out	0x3e, r29	; 62
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	cd bf       	out	0x3d, r28	; 61
    2b46:	9c a3       	lds	r25, 0x5c
    2b48:	8b a3       	lds	r24, 0x5b
	FRESULT res;
	DIRS dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    2b4a:	ce 01       	movw	r24, r28
    2b4c:	83 96       	adiw	r24, 0x23	; 35
    2b4e:	be 01       	movw	r22, r28
    2b50:	6f 5f       	subi	r22, 0xFF	; 255
    2b52:	7f 4f       	sbci	r23, 0xFF	; 255
    2b54:	40 e0       	ldi	r20, 0x00	; 0
    2b56:	0e 94 ca 01 	call	0x394	; 0x394 <chk_mounted>
	if (res == FR_OK) {
    2b5a:	88 23       	and	r24, r24
    2b5c:	09 f0       	breq	.+2      	; 0x2b60 <f_chdir+0x36>
    2b5e:	43 c0       	rjmp	.+134    	; 0x2be6 <f_chdir+0xbc>
		INIT_BUF(dj);
    2b60:	ce 01       	movw	r24, r28
    2b62:	47 96       	adiw	r24, 0x17	; 23
    2b64:	9e 8b       	std	Y+22, r25	; 0x16
    2b66:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the path */
    2b68:	6b a1       	lds	r22, 0x4b
    2b6a:	7c a1       	lds	r23, 0x4c
    2b6c:	ce 01       	movw	r24, r28
    2b6e:	01 96       	adiw	r24, 0x01	; 1
    2b70:	0e 94 9f 0c 	call	0x193e	; 0x193e <follow_path>
		FREE_BUF();
		if (res == FR_OK) {					/* Follow completed */
    2b74:	88 23       	and	r24, r24
    2b76:	a1 f5       	brne	.+104    	; 0x2be0 <f_chdir+0xb6>
			if (!dj.dir) {
    2b78:	eb 89       	ldd	r30, Y+19	; 0x13
    2b7a:	fc 89       	ldd	r31, Y+20	; 0x14
    2b7c:	30 97       	sbiw	r30, 0x00	; 0
    2b7e:	59 f4       	brne	.+22     	; 0x2b96 <f_chdir+0x6c>
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
    2b80:	e9 81       	ldd	r30, Y+1	; 0x01
    2b82:	fa 81       	ldd	r31, Y+2	; 0x02
    2b84:	4f 81       	ldd	r20, Y+7	; 0x07
    2b86:	58 85       	ldd	r21, Y+8	; 0x08
    2b88:	69 85       	ldd	r22, Y+9	; 0x09
    2b8a:	7a 85       	ldd	r23, Y+10	; 0x0a
    2b8c:	46 8b       	std	Z+22, r20	; 0x16
    2b8e:	57 8b       	std	Z+23, r21	; 0x17
    2b90:	60 8f       	std	Z+24, r22	; 0x18
    2b92:	71 8f       	std	Z+25, r23	; 0x19
    2b94:	28 c0       	rjmp	.+80     	; 0x2be6 <f_chdir+0xbc>
			} else {
				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
    2b96:	93 85       	ldd	r25, Z+11	; 0x0b
    2b98:	94 ff       	sbrs	r25, 4
    2b9a:	32 c0       	rjmp	.+100    	; 0x2c00 <f_chdir+0xd6>
					dj.fs->cdir = LD_CLUST(dj.dir);
    2b9c:	a9 81       	ldd	r26, Y+1	; 0x01
    2b9e:	ba 81       	ldd	r27, Y+2	; 0x02
    2ba0:	55 89       	ldd	r21, Z+21	; 0x15
    2ba2:	40 e0       	ldi	r20, 0x00	; 0
    2ba4:	24 89       	ldd	r18, Z+20	; 0x14
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	24 2b       	or	r18, r20
    2baa:	35 2b       	or	r19, r21
    2bac:	69 01       	movw	r12, r18
    2bae:	ee 24       	eor	r14, r14
    2bb0:	ff 24       	eor	r15, r15
    2bb2:	76 01       	movw	r14, r12
    2bb4:	dd 24       	eor	r13, r13
    2bb6:	cc 24       	eor	r12, r12
    2bb8:	33 8d       	ldd	r19, Z+27	; 0x1b
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	42 8d       	ldd	r20, Z+26	; 0x1a
    2bbe:	50 e0       	ldi	r21, 0x00	; 0
    2bc0:	24 2b       	or	r18, r20
    2bc2:	35 2b       	or	r19, r21
    2bc4:	a9 01       	movw	r20, r18
    2bc6:	60 e0       	ldi	r22, 0x00	; 0
    2bc8:	70 e0       	ldi	r23, 0x00	; 0
    2bca:	c4 2a       	or	r12, r20
    2bcc:	d5 2a       	or	r13, r21
    2bce:	e6 2a       	or	r14, r22
    2bd0:	f7 2a       	or	r15, r23
    2bd2:	56 96       	adiw	r26, 0x16	; 22
    2bd4:	cd 92       	st	X+, r12
    2bd6:	dd 92       	st	X+, r13
    2bd8:	ed 92       	st	X+, r14
    2bda:	fc 92       	st	X, r15
    2bdc:	59 97       	sbiw	r26, 0x19	; 25
    2bde:	03 c0       	rjmp	.+6      	; 0x2be6 <f_chdir+0xbc>
				else
					res = FR_NO_PATH;		/* Reached but a file */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2be0:	84 30       	cpi	r24, 0x04	; 4
    2be2:	09 f4       	brne	.+2      	; 0x2be6 <f_chdir+0xbc>
    2be4:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj.fs, res);
}
    2be6:	a4 96       	adiw	r28, 0x24	; 36
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	f8 94       	cli
    2bec:	de bf       	out	0x3e, r29	; 62
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	cd bf       	out	0x3d, r28	; 61
    2bf2:	df 91       	pop	r29
    2bf4:	cf 91       	pop	r28
    2bf6:	ff 90       	pop	r15
    2bf8:	ef 90       	pop	r14
    2bfa:	df 90       	pop	r13
    2bfc:	cf 90       	pop	r12
    2bfe:	08 95       	ret
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
			} else {
				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
					dj.fs->cdir = LD_CLUST(dj.dir);
				else
					res = FR_NO_PATH;		/* Reached but a file */
    2c00:	85 e0       	ldi	r24, 0x05	; 5
    2c02:	f1 cf       	rjmp	.-30     	; 0x2be6 <f_chdir+0xbc>

00002c04 <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR *path,	/* Pointer to the directory path */
	UINT sz_path	/* Size of path */
)
{
    2c04:	2f 92       	push	r2
    2c06:	3f 92       	push	r3
    2c08:	4f 92       	push	r4
    2c0a:	5f 92       	push	r5
    2c0c:	6f 92       	push	r6
    2c0e:	7f 92       	push	r7
    2c10:	8f 92       	push	r8
    2c12:	9f 92       	push	r9
    2c14:	af 92       	push	r10
    2c16:	bf 92       	push	r11
    2c18:	cf 92       	push	r12
    2c1a:	df 92       	push	r13
    2c1c:	ef 92       	push	r14
    2c1e:	ff 92       	push	r15
    2c20:	0f 93       	push	r16
    2c22:	1f 93       	push	r17
    2c24:	cf 93       	push	r28
    2c26:	df 93       	push	r29
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	ec 97       	sbiw	r28, 0x3c	; 60
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	9a af       	sts	0x7a, r25
    2c3a:	89 af       	sts	0x79, r24
    2c3c:	7c af       	sts	0x7c, r23
    2c3e:	6b af       	sts	0x7b, r22
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMEBUF;


	*path = 0;
    2c40:	dc 01       	movw	r26, r24
    2c42:	1c 92       	st	X, r1
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
    2c44:	ce 01       	movw	r24, r28
    2c46:	c9 96       	adiw	r24, 0x39	; 57
    2c48:	be 01       	movw	r22, r28
    2c4a:	6f 5f       	subi	r22, 0xFF	; 255
    2c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c4e:	40 e0       	ldi	r20, 0x00	; 0
    2c50:	0e 94 ca 01 	call	0x394	; 0x394 <chk_mounted>
    2c54:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    2c56:	88 23       	and	r24, r24
    2c58:	09 f0       	breq	.+2      	; 0x2c5c <f_getcwd+0x58>
    2c5a:	e8 c0       	rjmp	.+464    	; 0x2e2c <f_getcwd+0x228>
		INIT_BUF(dj);
    2c5c:	ce 01       	movw	r24, r28
    2c5e:	8d 96       	adiw	r24, 0x2d	; 45
    2c60:	9e 8b       	std	Y+22, r25	; 0x16
    2c62:	8d 8b       	std	Y+21, r24	; 0x15
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
    2c64:	e9 81       	ldd	r30, Y+1	; 0x01
    2c66:	fa 81       	ldd	r31, Y+2	; 0x02
    2c68:	86 88       	ldd	r8, Z+22	; 0x16
    2c6a:	97 88       	ldd	r9, Z+23	; 0x17
    2c6c:	a0 8c       	ldd	r10, Z+24	; 0x18
    2c6e:	b1 8c       	ldd	r11, Z+25	; 0x19
    2c70:	8f 82       	std	Y+7, r8	; 0x07
    2c72:	98 86       	std	Y+8, r9	; 0x08
    2c74:	a9 86       	std	Y+9, r10	; 0x09
    2c76:	ba 86       	std	Y+10, r11	; 0x0a
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    2c78:	81 14       	cp	r8, r1
    2c7a:	91 04       	cpc	r9, r1
    2c7c:	a1 04       	cpc	r10, r1
    2c7e:	b1 04       	cpc	r11, r1
    2c80:	09 f4       	brne	.+2      	; 0x2c84 <f_getcwd+0x80>
    2c82:	fe c0       	rjmp	.+508    	; 0x2e80 <f_getcwd+0x27c>

	*path = 0;
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
    2c84:	eb ac       	sts	0xab, r30
    2c86:	fc ac       	sts	0xac, r31
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
    2c88:	0f e2       	ldi	r16, 0x2F	; 47
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
			res = dir_sdi(&dj, 1);			/* Get parent dir */
    2c8a:	ce 01       	movw	r24, r28
    2c8c:	01 96       	adiw	r24, 0x01	; 1
    2c8e:	61 e0       	ldi	r22, 0x01	; 1
    2c90:	70 e0       	ldi	r23, 0x00	; 0
    2c92:	0e 94 64 08 	call	0x10c8	; 0x10c8 <dir_sdi>
    2c96:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    2c98:	88 23       	and	r24, r24
    2c9a:	09 f0       	breq	.+2      	; 0x2c9e <f_getcwd+0x9a>
    2c9c:	b0 c0       	rjmp	.+352    	; 0x2dfe <f_getcwd+0x1fa>
			res = dir_read(&dj);
    2c9e:	ce 01       	movw	r24, r28
    2ca0:	01 96       	adiw	r24, 0x01	; 1
    2ca2:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <dir_read>
    2ca6:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    2ca8:	88 23       	and	r24, r24
    2caa:	09 f0       	breq	.+2      	; 0x2cae <f_getcwd+0xaa>
    2cac:	a8 c0       	rjmp	.+336    	; 0x2dfe <f_getcwd+0x1fa>
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
    2cae:	eb 89       	ldd	r30, Y+19	; 0x13
    2cb0:	fc 89       	ldd	r31, Y+20	; 0x14
    2cb2:	35 88       	ldd	r3, Z+21	; 0x15
    2cb4:	22 24       	eor	r2, r2
    2cb6:	84 89       	ldd	r24, Z+20	; 0x14
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	82 29       	or	r24, r2
    2cbc:	93 29       	or	r25, r3
    2cbe:	a0 e0       	ldi	r26, 0x00	; 0
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	bc 01       	movw	r22, r24
    2cc4:	55 27       	eor	r21, r21
    2cc6:	44 27       	eor	r20, r20
    2cc8:	53 8c       	ldd	r5, Z+27	; 0x1b
    2cca:	44 24       	eor	r4, r4
    2ccc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	84 29       	or	r24, r4
    2cd2:	95 29       	or	r25, r5
    2cd4:	a0 e0       	ldi	r26, 0x00	; 0
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	84 2b       	or	r24, r20
    2cda:	95 2b       	or	r25, r21
    2cdc:	a6 2b       	or	r26, r22
    2cde:	b7 2b       	or	r27, r23
    2ce0:	8f 83       	std	Y+7, r24	; 0x07
    2ce2:	98 87       	std	Y+8, r25	; 0x08
    2ce4:	a9 87       	std	Y+9, r26	; 0x09
    2ce6:	ba 87       	std	Y+10, r27	; 0x0a
			res = dir_sdi(&dj, 0);
    2ce8:	ce 01       	movw	r24, r28
    2cea:	01 96       	adiw	r24, 0x01	; 1
    2cec:	60 e0       	ldi	r22, 0x00	; 0
    2cee:	70 e0       	ldi	r23, 0x00	; 0
    2cf0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <dir_sdi>
    2cf4:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    2cf6:	88 23       	and	r24, r24
    2cf8:	09 f0       	breq	.+2      	; 0x2cfc <f_getcwd+0xf8>
    2cfa:	81 c0       	rjmp	.+258    	; 0x2dfe <f_getcwd+0x1fa>
			do {							/* Find the entry links to the child dir */
				res = dir_read(&dj);
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	01 96       	adiw	r24, 0x01	; 1
    2d00:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <dir_read>
    2d04:	18 2f       	mov	r17, r24
				if (res != FR_OK) break;
    2d06:	88 23       	and	r24, r24
    2d08:	39 f5       	brne	.+78     	; 0x2d58 <f_getcwd+0x154>
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
    2d0a:	eb 89       	ldd	r30, Y+19	; 0x13
    2d0c:	fc 89       	ldd	r31, Y+20	; 0x14
    2d0e:	75 88       	ldd	r7, Z+21	; 0x15
    2d10:	66 24       	eor	r6, r6
    2d12:	84 89       	ldd	r24, Z+20	; 0x14
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	86 29       	or	r24, r6
    2d18:	97 29       	or	r25, r7
    2d1a:	a0 e0       	ldi	r26, 0x00	; 0
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	bc 01       	movw	r22, r24
    2d20:	55 27       	eor	r21, r21
    2d22:	44 27       	eor	r20, r20
    2d24:	d3 8c       	ldd	r13, Z+27	; 0x1b
    2d26:	cc 24       	eor	r12, r12
    2d28:	82 8d       	ldd	r24, Z+26	; 0x1a
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	8c 29       	or	r24, r12
    2d2e:	9d 29       	or	r25, r13
    2d30:	a0 e0       	ldi	r26, 0x00	; 0
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	84 2b       	or	r24, r20
    2d36:	95 2b       	or	r25, r21
    2d38:	a6 2b       	or	r26, r22
    2d3a:	b7 2b       	or	r27, r23
    2d3c:	88 15       	cp	r24, r8
    2d3e:	99 05       	cpc	r25, r9
    2d40:	aa 05       	cpc	r26, r10
    2d42:	bb 05       	cpc	r27, r11
    2d44:	79 f0       	breq	.+30     	; 0x2d64 <f_getcwd+0x160>
				res = dir_next(&dj, 0);	
    2d46:	ce 01       	movw	r24, r28
    2d48:	01 96       	adiw	r24, 0x01	; 1
    2d4a:	60 e0       	ldi	r22, 0x00	; 0
    2d4c:	70 e0       	ldi	r23, 0x00	; 0
    2d4e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <dir_next>
    2d52:	18 2f       	mov	r17, r24
			} while (res == FR_OK);
    2d54:	88 23       	and	r24, r24
    2d56:	91 f2       	breq	.-92     	; 0x2cfc <f_getcwd+0xf8>
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    2d58:	14 30       	cpi	r17, 0x04	; 4
    2d5a:	09 f4       	brne	.+2      	; 0x2d5e <f_getcwd+0x15a>
    2d5c:	4d c0       	rjmp	.+154    	; 0x2df8 <f_getcwd+0x1f4>
			if (res != FR_OK) break;
    2d5e:	11 23       	and	r17, r17
    2d60:	09 f0       	breq	.+2      	; 0x2d64 <f_getcwd+0x160>
    2d62:	4d c0       	rjmp	.+154    	; 0x2dfe <f_getcwd+0x1fa>
#if _USE_LFN
			fno.lfname = path;
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
    2d64:	ce 01       	movw	r24, r28
    2d66:	01 96       	adiw	r24, 0x01	; 1
    2d68:	be 01       	movw	r22, r28
    2d6a:	69 5e       	subi	r22, 0xE9	; 233
    2d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d6e:	0e 94 7f 00 	call	0xfe	; 0xfe <get_fileinfo>
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
    2d72:	88 a1       	lds	r24, 0x48
    2d74:	88 23       	and	r24, r24
    2d76:	51 f0       	breq	.+20     	; 0x2d8c <f_getcwd+0x188>
	LEAVE_FF(dj.fs, res);
}


#if _FS_RPATH >= 2
FRESULT f_getcwd (
    2d78:	fe 01       	movw	r30, r28
    2d7a:	b1 96       	adiw	r30, 0x21	; 33
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	2f 5f       	subi	r18, 0xFF	; 255
    2d82:	3f 4f       	sbci	r19, 0xFF	; 255
    2d84:	81 91       	ld	r24, Z+
    2d86:	88 23       	and	r24, r24
    2d88:	d9 f7       	brne	.-10     	; 0x2d80 <f_getcwd+0x17c>
    2d8a:	02 c0       	rjmp	.+4      	; 0x2d90 <f_getcwd+0x18c>
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
			if (i < n + 3) {
    2d90:	c9 01       	movw	r24, r18
    2d92:	03 96       	adiw	r24, 0x03	; 3
    2d94:	e8 16       	cp	r14, r24
    2d96:	f9 06       	cpc	r15, r25
    2d98:	88 f1       	brcs	.+98     	; 0x2dfc <f_getcwd+0x1f8>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
    2d9a:	21 15       	cp	r18, r1
    2d9c:	31 05       	cpc	r19, r1
    2d9e:	c1 f0       	breq	.+48     	; 0x2dd0 <f_getcwd+0x1cc>
	LEAVE_FF(dj.fs, res);
}


#if _FS_RPATH >= 2
FRESULT f_getcwd (
    2da0:	c9 01       	movw	r24, r18
    2da2:	09 96       	adiw	r24, 0x09	; 9
    2da4:	e7 e1       	ldi	r30, 0x17	; 23
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	ec 0f       	add	r30, r28
    2daa:	fd 1f       	adc	r31, r29
    2dac:	e8 0f       	add	r30, r24
    2dae:	f9 1f       	adc	r31, r25
    2db0:	a7 01       	movw	r20, r14
    2db2:	42 1b       	sub	r20, r18
    2db4:	53 0b       	sbc	r21, r19
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
    2db6:	08 94       	sec
    2db8:	e1 08       	sbc	r14, r1
    2dba:	f1 08       	sbc	r15, r1
    2dbc:	22 91       	ld	r18, -Z
    2dbe:	89 ad       	sts	0x69, r24
    2dc0:	9a ad       	sts	0x6a, r25
    2dc2:	8e 0d       	add	r24, r14
    2dc4:	9f 1d       	adc	r25, r15
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	2c 93       	st	X, r18
    2dca:	e4 16       	cp	r14, r20
    2dcc:	f5 06       	cpc	r15, r21
    2dce:	99 f7       	brne	.-26     	; 0x2db6 <f_getcwd+0x1b2>
			path[--i] = '/';
    2dd0:	08 94       	sec
    2dd2:	e1 08       	sbc	r14, r1
    2dd4:	f1 08       	sbc	r15, r1
    2dd6:	89 ad       	sts	0x69, r24
    2dd8:	9a ad       	sts	0x6a, r25
    2dda:	8e 0d       	add	r24, r14
    2ddc:	9f 1d       	adc	r25, r15
    2dde:	fc 01       	movw	r30, r24
    2de0:	00 83       	st	Z, r16
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
    2de2:	8f 80       	ldd	r8, Y+7	; 0x07
    2de4:	98 84       	ldd	r9, Y+8	; 0x08
    2de6:	a9 84       	ldd	r10, Y+9	; 0x09
    2de8:	ba 84       	ldd	r11, Y+10	; 0x0a
    2dea:	81 14       	cp	r8, r1
    2dec:	91 04       	cpc	r9, r1
    2dee:	a1 04       	cpc	r10, r1
    2df0:	b1 04       	cpc	r11, r1
    2df2:	09 f0       	breq	.+2      	; 0x2df6 <f_getcwd+0x1f2>
    2df4:	4a cf       	rjmp	.-364    	; 0x2c8a <f_getcwd+0x86>
    2df6:	34 c0       	rjmp	.+104    	; 0x2e60 <f_getcwd+0x25c>
				res = dir_read(&dj);
				if (res != FR_OK) break;
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    2df8:	12 e0       	ldi	r17, 0x02	; 2
    2dfa:	01 c0       	rjmp	.+2      	; 0x2dfe <f_getcwd+0x1fa>
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
    2dfc:	11 e1       	ldi	r17, 0x11	; 17
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    2dfe:	e9 ad       	sts	0x69, r30
    2e00:	fa ad       	sts	0x6a, r31
    2e02:	13 c0       	rjmp	.+38     	; 0x2e2a <f_getcwd+0x226>
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
			if (i == sz_path) {				/* Root-dir */
				*tp++ = '/';
    2e04:	8f e2       	ldi	r24, 0x2F	; 47
    2e06:	82 83       	std	Z+2, r24	; 0x02
    2e08:	33 96       	adiw	r30, 0x03	; 3
    2e0a:	0f c0       	rjmp	.+30     	; 0x2e2a <f_getcwd+0x226>
			} else {						/* Sub-dir */
				do		/* Add stacked path str */
					*tp++ = path[i++];
    2e0c:	e9 ad       	sts	0x69, r30
    2e0e:	fa ad       	sts	0x6a, r31
    2e10:	ee 0d       	add	r30, r14
    2e12:	ff 1d       	adc	r31, r15
    2e14:	80 81       	ld	r24, Z
    2e16:	8d 93       	st	X+, r24
    2e18:	fd 01       	movw	r30, r26
    2e1a:	08 94       	sec
    2e1c:	e1 1c       	adc	r14, r1
    2e1e:	f1 1c       	adc	r15, r1
				while (i < sz_path);
    2e20:	8b ad       	sts	0x6b, r24
    2e22:	9c ad       	sts	0x6c, r25
    2e24:	e8 16       	cp	r14, r24
    2e26:	f9 06       	cpc	r15, r25
    2e28:	88 f3       	brcs	.-30     	; 0x2e0c <f_getcwd+0x208>
			}
		}
		*tp = 0;
    2e2a:	10 82       	st	Z, r1
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    2e2c:	81 2f       	mov	r24, r17
    2e2e:	ec 96       	adiw	r28, 0x3c	; 60
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	df 91       	pop	r29
    2e3c:	cf 91       	pop	r28
    2e3e:	1f 91       	pop	r17
    2e40:	0f 91       	pop	r16
    2e42:	ff 90       	pop	r15
    2e44:	ef 90       	pop	r14
    2e46:	df 90       	pop	r13
    2e48:	cf 90       	pop	r12
    2e4a:	bf 90       	pop	r11
    2e4c:	af 90       	pop	r10
    2e4e:	9f 90       	pop	r9
    2e50:	8f 90       	pop	r8
    2e52:	7f 90       	pop	r7
    2e54:	6f 90       	pop	r6
    2e56:	5f 90       	pop	r5
    2e58:	4f 90       	pop	r4
    2e5a:	3f 90       	pop	r3
    2e5c:	2f 90       	pop	r2
    2e5e:	08 95       	ret
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    2e60:	e9 ad       	sts	0x69, r30
    2e62:	fa ad       	sts	0x6a, r31
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
    2e64:	80 91 1e 01 	lds	r24, 0x011E
    2e68:	80 5d       	subi	r24, 0xD0	; 208
    2e6a:	80 83       	st	Z, r24
			*tp++ = ':';
    2e6c:	8a e3       	ldi	r24, 0x3A	; 58
    2e6e:	81 83       	std	Z+1, r24	; 0x01
			if (i == sz_path) {				/* Root-dir */
    2e70:	ab ad       	sts	0x6b, r26
    2e72:	bc ad       	sts	0x6c, r27
    2e74:	ea 16       	cp	r14, r26
    2e76:	fb 06       	cpc	r15, r27
    2e78:	29 f2       	breq	.-118    	; 0x2e04 <f_getcwd+0x200>
			path[--i] = '/';
		}
		tp = path;
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
    2e7a:	df 01       	movw	r26, r30
    2e7c:	12 96       	adiw	r26, 0x02	; 2
    2e7e:	c6 cf       	rjmp	.-116    	; 0x2e0c <f_getcwd+0x208>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
    2e80:	e9 ad       	sts	0x69, r30
    2e82:	fa ad       	sts	0x6a, r31
		if (res == FR_OK) {
			*tp++ = '0' + CurrVol;			/* Put drive number */
    2e84:	80 91 1e 01 	lds	r24, 0x011E
    2e88:	80 5d       	subi	r24, 0xD0	; 208
    2e8a:	80 83       	st	Z, r24
			*tp++ = ':';
    2e8c:	8a e3       	ldi	r24, 0x3A	; 58
    2e8e:	81 83       	std	Z+1, r24	; 0x01
    2e90:	b9 cf       	rjmp	.-142    	; 0x2e04 <f_getcwd+0x200>

00002e92 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    2e92:	2f 92       	push	r2
    2e94:	3f 92       	push	r3
    2e96:	4f 92       	push	r4
    2e98:	5f 92       	push	r5
    2e9a:	6f 92       	push	r6
    2e9c:	7f 92       	push	r7
    2e9e:	8f 92       	push	r8
    2ea0:	9f 92       	push	r9
    2ea2:	af 92       	push	r10
    2ea4:	bf 92       	push	r11
    2ea6:	cf 92       	push	r12
    2ea8:	df 92       	push	r13
    2eaa:	ef 92       	push	r14
    2eac:	ff 92       	push	r15
    2eae:	1f 93       	push	r17
    2eb0:	cf 93       	push	r28
    2eb2:	df 93       	push	r29
    2eb4:	00 d0       	rcall	.+0      	; 0x2eb6 <f_lseek+0x24>
    2eb6:	00 d0       	rcall	.+0      	; 0x2eb8 <f_lseek+0x26>
    2eb8:	00 d0       	rcall	.+0      	; 0x2eba <f_lseek+0x28>
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
    2ebe:	9e 83       	std	Y+6, r25	; 0x06
    2ec0:	8d 83       	std	Y+5, r24	; 0x05
    2ec2:	6a 01       	movw	r12, r20
    2ec4:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	12 96       	adiw	r26, 0x02	; 2
    2eca:	6d 91       	ld	r22, X+
    2ecc:	7c 91       	ld	r23, X
    2ece:	13 97       	sbiw	r26, 0x03	; 3
    2ed0:	8d 91       	ld	r24, X+
    2ed2:	9c 91       	ld	r25, X
    2ed4:	0e 94 11 01 	call	0x222	; 0x222 <validate>
    2ed8:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2eda:	88 23       	and	r24, r24
    2edc:	09 f0       	breq	.+2      	; 0x2ee0 <f_lseek+0x4e>
    2ede:	a5 c1       	rjmp	.+842    	; 0x322a <f_lseek+0x398>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    2ee0:	ed 81       	ldd	r30, Y+5	; 0x05
    2ee2:	fe 81       	ldd	r31, Y+6	; 0x06
    2ee4:	24 81       	ldd	r18, Z+4	; 0x04
    2ee6:	22 23       	and	r18, r18
    2ee8:	0c f4       	brge	.+2      	; 0x2eec <f_lseek+0x5a>
    2eea:	9e c1       	rjmp	.+828    	; 0x3228 <f_lseek+0x396>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    2eec:	82 85       	ldd	r24, Z+10	; 0x0a
    2eee:	93 85       	ldd	r25, Z+11	; 0x0b
    2ef0:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ef2:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ef4:	8c 15       	cp	r24, r12
    2ef6:	9d 05       	cpc	r25, r13
    2ef8:	ae 05       	cpc	r26, r14
    2efa:	bf 05       	cpc	r27, r15
    2efc:	20 f4       	brcc	.+8      	; 0x2f06 <f_lseek+0x74>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    2efe:	21 fd       	sbrc	r18, 1
    2f00:	02 c0       	rjmp	.+4      	; 0x2f06 <f_lseek+0x74>
#endif
			) ofs = fp->fsize;
    2f02:	6c 01       	movw	r12, r24
    2f04:	7d 01       	movw	r14, r26

		ifptr = fp->fptr;
    2f06:	ad 81       	ldd	r26, Y+5	; 0x05
    2f08:	be 81       	ldd	r27, Y+6	; 0x06
    2f0a:	16 96       	adiw	r26, 0x06	; 6
    2f0c:	4d 91       	ld	r20, X+
    2f0e:	5d 91       	ld	r21, X+
    2f10:	6d 91       	ld	r22, X+
    2f12:	7c 91       	ld	r23, X
    2f14:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    2f16:	fd 01       	movw	r30, r26
    2f18:	16 82       	std	Z+6, r1	; 0x06
    2f1a:	17 82       	std	Z+7, r1	; 0x07
    2f1c:	10 86       	std	Z+8, r1	; 0x08
    2f1e:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    2f20:	c1 14       	cp	r12, r1
    2f22:	d1 04       	cpc	r13, r1
    2f24:	e1 04       	cpc	r14, r1
    2f26:	f1 04       	cpc	r15, r1
    2f28:	09 f4       	brne	.+2      	; 0x2f2c <f_lseek+0x9a>
    2f2a:	7f c1       	rjmp	.+766    	; 0x322a <f_lseek+0x398>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    2f2c:	20 80       	ld	r2, Z
    2f2e:	31 80       	ldd	r3, Z+1	; 0x01
    2f30:	d1 01       	movw	r26, r2
    2f32:	12 96       	adiw	r26, 0x02	; 2
    2f34:	8c 91       	ld	r24, X
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	a0 e0       	ldi	r26, 0x00	; 0
    2f3a:	b0 e0       	ldi	r27, 0x00	; 0
    2f3c:	4c 01       	movw	r8, r24
    2f3e:	5d 01       	movw	r10, r26
    2f40:	07 2e       	mov	r0, r23
    2f42:	79 e0       	ldi	r23, 0x09	; 9
    2f44:	88 0c       	add	r8, r8
    2f46:	99 1c       	adc	r9, r9
    2f48:	aa 1c       	adc	r10, r10
    2f4a:	bb 1c       	adc	r11, r11
    2f4c:	7a 95       	dec	r23
    2f4e:	d1 f7       	brne	.-12     	; 0x2f44 <f_lseek+0xb2>
    2f50:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    2f52:	41 15       	cp	r20, r1
    2f54:	51 05       	cpc	r21, r1
    2f56:	61 05       	cpc	r22, r1
    2f58:	71 05       	cpc	r23, r1
    2f5a:	f1 f1       	breq	.+124    	; 0x2fd8 <f_lseek+0x146>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2f5c:	2a 01       	movw	r4, r20
    2f5e:	3b 01       	movw	r6, r22
    2f60:	08 94       	sec
    2f62:	41 08       	sbc	r4, r1
    2f64:	51 08       	sbc	r5, r1
    2f66:	61 08       	sbc	r6, r1
    2f68:	71 08       	sbc	r7, r1
    2f6a:	c7 01       	movw	r24, r14
    2f6c:	b6 01       	movw	r22, r12
    2f6e:	61 50       	subi	r22, 0x01	; 1
    2f70:	70 40       	sbci	r23, 0x00	; 0
    2f72:	80 40       	sbci	r24, 0x00	; 0
    2f74:	90 40       	sbci	r25, 0x00	; 0
    2f76:	a5 01       	movw	r20, r10
    2f78:	94 01       	movw	r18, r8
    2f7a:	0e 94 1f 24 	call	0x483e	; 0x483e <__udivmodsi4>
    2f7e:	29 83       	std	Y+1, r18	; 0x01
    2f80:	3a 83       	std	Y+2, r19	; 0x02
    2f82:	4b 83       	std	Y+3, r20	; 0x03
    2f84:	5c 83       	std	Y+4, r21	; 0x04
    2f86:	c3 01       	movw	r24, r6
    2f88:	b2 01       	movw	r22, r4
    2f8a:	a5 01       	movw	r20, r10
    2f8c:	94 01       	movw	r18, r8
    2f8e:	0e 94 1f 24 	call	0x483e	; 0x483e <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	9a 81       	ldd	r25, Y+2	; 0x02
    2f96:	ab 81       	ldd	r26, Y+3	; 0x03
    2f98:	bc 81       	ldd	r27, Y+4	; 0x04
    2f9a:	82 17       	cp	r24, r18
    2f9c:	93 07       	cpc	r25, r19
    2f9e:	a4 07       	cpc	r26, r20
    2fa0:	b5 07       	cpc	r27, r21
    2fa2:	d0 f0       	brcs	.+52     	; 0x2fd8 <f_lseek+0x146>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    2fa4:	88 27       	eor	r24, r24
    2fa6:	99 27       	eor	r25, r25
    2fa8:	dc 01       	movw	r26, r24
    2faa:	88 19       	sub	r24, r8
    2fac:	99 09       	sbc	r25, r9
    2fae:	aa 09       	sbc	r26, r10
    2fb0:	bb 09       	sbc	r27, r11
    2fb2:	84 21       	and	r24, r4
    2fb4:	95 21       	and	r25, r5
    2fb6:	a6 21       	and	r26, r6
    2fb8:	b7 21       	and	r27, r7
    2fba:	ed 81       	ldd	r30, Y+5	; 0x05
    2fbc:	fe 81       	ldd	r31, Y+6	; 0x06
    2fbe:	86 83       	std	Z+6, r24	; 0x06
    2fc0:	97 83       	std	Z+7, r25	; 0x07
    2fc2:	a0 87       	std	Z+8, r26	; 0x08
    2fc4:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    2fc6:	c8 1a       	sub	r12, r24
    2fc8:	d9 0a       	sbc	r13, r25
    2fca:	ea 0a       	sbc	r14, r26
    2fcc:	fb 0a       	sbc	r15, r27
				clst = fp->clust;
    2fce:	42 89       	ldd	r20, Z+18	; 0x12
    2fd0:	53 89       	ldd	r21, Z+19	; 0x13
    2fd2:	64 89       	ldd	r22, Z+20	; 0x14
    2fd4:	75 89       	ldd	r23, Z+21	; 0x15
    2fd6:	42 c0       	rjmp	.+132    	; 0x305c <f_lseek+0x1ca>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    2fd8:	ad 81       	ldd	r26, Y+5	; 0x05
    2fda:	be 81       	ldd	r27, Y+6	; 0x06
    2fdc:	1e 96       	adiw	r26, 0x0e	; 14
    2fde:	4d 91       	ld	r20, X+
    2fe0:	5d 91       	ld	r21, X+
    2fe2:	6d 91       	ld	r22, X+
    2fe4:	7c 91       	ld	r23, X
    2fe6:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    2fe8:	41 15       	cp	r20, r1
    2fea:	51 05       	cpc	r21, r1
    2fec:	61 05       	cpc	r22, r1
    2fee:	71 05       	cpc	r23, r1
    2ff0:	69 f5       	brne	.+90     	; 0x304c <f_lseek+0x1ba>
					clst = create_chain(fp->fs, 0);
    2ff2:	c1 01       	movw	r24, r2
    2ff4:	40 e0       	ldi	r20, 0x00	; 0
    2ff6:	50 e0       	ldi	r21, 0x00	; 0
    2ff8:	ba 01       	movw	r22, r20
    2ffa:	0e 94 38 0a 	call	0x1470	; 0x1470 <create_chain>
    2ffe:	ab 01       	movw	r20, r22
    3000:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3002:	41 30       	cpi	r20, 0x01	; 1
    3004:	51 05       	cpc	r21, r1
    3006:	61 05       	cpc	r22, r1
    3008:	71 05       	cpc	r23, r1
    300a:	39 f4       	brne	.+14     	; 0x301a <f_lseek+0x188>
    300c:	ed 81       	ldd	r30, Y+5	; 0x05
    300e:	fe 81       	ldd	r31, Y+6	; 0x06
    3010:	84 81       	ldd	r24, Z+4	; 0x04
    3012:	80 68       	ori	r24, 0x80	; 128
    3014:	84 83       	std	Z+4, r24	; 0x04
    3016:	12 e0       	ldi	r17, 0x02	; 2
    3018:	08 c1       	rjmp	.+528    	; 0x322a <f_lseek+0x398>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    301a:	4f 3f       	cpi	r20, 0xFF	; 255
    301c:	ff ef       	ldi	r31, 0xFF	; 255
    301e:	5f 07       	cpc	r21, r31
    3020:	ff ef       	ldi	r31, 0xFF	; 255
    3022:	6f 07       	cpc	r22, r31
    3024:	ff ef       	ldi	r31, 0xFF	; 255
    3026:	7f 07       	cpc	r23, r31
    3028:	59 f4       	brne	.+22     	; 0x3040 <f_lseek+0x1ae>
    302a:	ad 81       	ldd	r26, Y+5	; 0x05
    302c:	be 81       	ldd	r27, Y+6	; 0x06
    302e:	14 96       	adiw	r26, 0x04	; 4
    3030:	8c 91       	ld	r24, X
    3032:	14 97       	sbiw	r26, 0x04	; 4
    3034:	80 68       	ori	r24, 0x80	; 128
    3036:	14 96       	adiw	r26, 0x04	; 4
    3038:	8c 93       	st	X, r24
    303a:	14 97       	sbiw	r26, 0x04	; 4
    303c:	11 e0       	ldi	r17, 0x01	; 1
    303e:	f5 c0       	rjmp	.+490    	; 0x322a <f_lseek+0x398>
					fp->sclust = clst;
    3040:	ed 81       	ldd	r30, Y+5	; 0x05
    3042:	fe 81       	ldd	r31, Y+6	; 0x06
    3044:	46 87       	std	Z+14, r20	; 0x0e
    3046:	57 87       	std	Z+15, r21	; 0x0f
    3048:	60 8b       	std	Z+16, r22	; 0x10
    304a:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->clust = clst;
    304c:	ad 81       	ldd	r26, Y+5	; 0x05
    304e:	be 81       	ldd	r27, Y+6	; 0x06
    3050:	52 96       	adiw	r26, 0x12	; 18
    3052:	4d 93       	st	X+, r20
    3054:	5d 93       	st	X+, r21
    3056:	6d 93       	st	X+, r22
    3058:	7c 93       	st	X, r23
    305a:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    305c:	41 15       	cp	r20, r1
    305e:	51 05       	cpc	r21, r1
    3060:	61 05       	cpc	r22, r1
    3062:	71 05       	cpc	r23, r1
    3064:	09 f4       	brne	.+2      	; 0x3068 <f_lseek+0x1d6>
    3066:	a8 c0       	rjmp	.+336    	; 0x31b8 <f_lseek+0x326>
				while (ofs > bcs) {						/* Cluster following loop */
    3068:	8c 14       	cp	r8, r12
    306a:	9d 04       	cpc	r9, r13
    306c:	ae 04       	cpc	r10, r14
    306e:	bf 04       	cpc	r11, r15
    3070:	08 f0       	brcs	.+2      	; 0x3074 <f_lseek+0x1e2>
    3072:	68 c0       	rjmp	.+208    	; 0x3144 <f_lseek+0x2b2>
    3074:	4d 80       	ldd	r4, Y+5	; 0x05
    3076:	5e 80       	ldd	r5, Y+6	; 0x06
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    3078:	f2 01       	movw	r30, r4
    307a:	84 81       	ldd	r24, Z+4	; 0x04
    307c:	81 ff       	sbrs	r24, 1
    307e:	0c c0       	rjmp	.+24     	; 0x3098 <f_lseek+0x206>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    3080:	80 81       	ld	r24, Z
    3082:	91 81       	ldd	r25, Z+1	; 0x01
    3084:	0e 94 38 0a 	call	0x1470	; 0x1470 <create_chain>
    3088:	ab 01       	movw	r20, r22
    308a:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    308c:	41 15       	cp	r20, r1
    308e:	51 05       	cpc	r21, r1
    3090:	61 05       	cpc	r22, r1
    3092:	71 05       	cpc	r23, r1
    3094:	39 f4       	brne	.+14     	; 0x30a4 <f_lseek+0x212>
    3096:	52 c0       	rjmp	.+164    	; 0x313c <f_lseek+0x2aa>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3098:	80 81       	ld	r24, Z
    309a:	91 81       	ldd	r25, Z+1	; 0x01
    309c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <get_fat>
    30a0:	ab 01       	movw	r20, r22
    30a2:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    30a4:	4f 3f       	cpi	r20, 0xFF	; 255
    30a6:	bf ef       	ldi	r27, 0xFF	; 255
    30a8:	5b 07       	cpc	r21, r27
    30aa:	bf ef       	ldi	r27, 0xFF	; 255
    30ac:	6b 07       	cpc	r22, r27
    30ae:	bf ef       	ldi	r27, 0xFF	; 255
    30b0:	7b 07       	cpc	r23, r27
    30b2:	41 f4       	brne	.+16     	; 0x30c4 <f_lseek+0x232>
    30b4:	5e 82       	std	Y+6, r5	; 0x06
    30b6:	4d 82       	std	Y+5, r4	; 0x05
    30b8:	f2 01       	movw	r30, r4
    30ba:	84 81       	ldd	r24, Z+4	; 0x04
    30bc:	80 68       	ori	r24, 0x80	; 128
    30be:	84 83       	std	Z+4, r24	; 0x04
    30c0:	11 e0       	ldi	r17, 0x01	; 1
    30c2:	b3 c0       	rjmp	.+358    	; 0x322a <f_lseek+0x398>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    30c4:	42 30       	cpi	r20, 0x02	; 2
    30c6:	51 05       	cpc	r21, r1
    30c8:	61 05       	cpc	r22, r1
    30ca:	71 05       	cpc	r23, r1
    30cc:	60 f0       	brcs	.+24     	; 0x30e6 <f_lseek+0x254>
    30ce:	d2 01       	movw	r26, r4
    30d0:	ed 91       	ld	r30, X+
    30d2:	fc 91       	ld	r31, X
    30d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    30d6:	93 8d       	ldd	r25, Z+27	; 0x1b
    30d8:	a4 8d       	ldd	r26, Z+28	; 0x1c
    30da:	b5 8d       	ldd	r27, Z+29	; 0x1d
    30dc:	48 17       	cp	r20, r24
    30de:	59 07       	cpc	r21, r25
    30e0:	6a 07       	cpc	r22, r26
    30e2:	7b 07       	cpc	r23, r27
    30e4:	40 f0       	brcs	.+16     	; 0x30f6 <f_lseek+0x264>
    30e6:	5e 82       	std	Y+6, r5	; 0x06
    30e8:	4d 82       	std	Y+5, r4	; 0x05
    30ea:	f2 01       	movw	r30, r4
    30ec:	84 81       	ldd	r24, Z+4	; 0x04
    30ee:	80 68       	ori	r24, 0x80	; 128
    30f0:	84 83       	std	Z+4, r24	; 0x04
    30f2:	12 e0       	ldi	r17, 0x02	; 2
    30f4:	9a c0       	rjmp	.+308    	; 0x322a <f_lseek+0x398>
					fp->clust = clst;
    30f6:	d2 01       	movw	r26, r4
    30f8:	52 96       	adiw	r26, 0x12	; 18
    30fa:	4d 93       	st	X+, r20
    30fc:	5d 93       	st	X+, r21
    30fe:	6d 93       	st	X+, r22
    3100:	7c 93       	st	X, r23
    3102:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    3104:	16 96       	adiw	r26, 0x06	; 6
    3106:	8d 91       	ld	r24, X+
    3108:	9d 91       	ld	r25, X+
    310a:	0d 90       	ld	r0, X+
    310c:	bc 91       	ld	r27, X
    310e:	a0 2d       	mov	r26, r0
    3110:	88 0d       	add	r24, r8
    3112:	99 1d       	adc	r25, r9
    3114:	aa 1d       	adc	r26, r10
    3116:	bb 1d       	adc	r27, r11
    3118:	f2 01       	movw	r30, r4
    311a:	86 83       	std	Z+6, r24	; 0x06
    311c:	97 83       	std	Z+7, r25	; 0x07
    311e:	a0 87       	std	Z+8, r26	; 0x08
    3120:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    3122:	c8 18       	sub	r12, r8
    3124:	d9 08       	sbc	r13, r9
    3126:	ea 08       	sbc	r14, r10
    3128:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    312a:	8c 14       	cp	r8, r12
    312c:	9d 04       	cpc	r9, r13
    312e:	ae 04       	cpc	r10, r14
    3130:	bf 04       	cpc	r11, r15
    3132:	08 f4       	brcc	.+2      	; 0x3136 <f_lseek+0x2a4>
    3134:	a1 cf       	rjmp	.-190    	; 0x3078 <f_lseek+0x1e6>
    3136:	5e 82       	std	Y+6, r5	; 0x06
    3138:	4d 82       	std	Y+5, r4	; 0x05
    313a:	04 c0       	rjmp	.+8      	; 0x3144 <f_lseek+0x2b2>
    313c:	5e 82       	std	Y+6, r5	; 0x06
    313e:	4d 82       	std	Y+5, r4	; 0x05
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    3140:	75 01       	movw	r14, r10
    3142:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    3144:	ed 81       	ldd	r30, Y+5	; 0x05
    3146:	fe 81       	ldd	r31, Y+6	; 0x06
    3148:	86 81       	ldd	r24, Z+6	; 0x06
    314a:	97 81       	ldd	r25, Z+7	; 0x07
    314c:	a0 85       	ldd	r26, Z+8	; 0x08
    314e:	b1 85       	ldd	r27, Z+9	; 0x09
    3150:	8c 0d       	add	r24, r12
    3152:	9d 1d       	adc	r25, r13
    3154:	ae 1d       	adc	r26, r14
    3156:	bf 1d       	adc	r27, r15
    3158:	86 83       	std	Z+6, r24	; 0x06
    315a:	97 83       	std	Z+7, r25	; 0x07
    315c:	a0 87       	std	Z+8, r26	; 0x08
    315e:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    3160:	d7 01       	movw	r26, r14
    3162:	c6 01       	movw	r24, r12
    3164:	91 70       	andi	r25, 0x01	; 1
    3166:	a0 70       	andi	r26, 0x00	; 0
    3168:	b0 70       	andi	r27, 0x00	; 0
    316a:	00 97       	sbiw	r24, 0x00	; 0
    316c:	a1 05       	cpc	r26, r1
    316e:	b1 05       	cpc	r27, r1
    3170:	39 f1       	breq	.+78     	; 0x31c0 <f_lseek+0x32e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    3172:	80 81       	ld	r24, Z
    3174:	91 81       	ldd	r25, Z+1	; 0x01
    3176:	0e 94 22 07 	call	0xe44	; 0xe44 <clust2sect>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    317e:	00 97       	sbiw	r24, 0x00	; 0
    3180:	a1 05       	cpc	r26, r1
    3182:	b1 05       	cpc	r27, r1
    3184:	59 f4       	brne	.+22     	; 0x319c <f_lseek+0x30a>
    3186:	ad 81       	ldd	r26, Y+5	; 0x05
    3188:	be 81       	ldd	r27, Y+6	; 0x06
    318a:	14 96       	adiw	r26, 0x04	; 4
    318c:	8c 91       	ld	r24, X
    318e:	14 97       	sbiw	r26, 0x04	; 4
    3190:	80 68       	ori	r24, 0x80	; 128
    3192:	14 96       	adiw	r26, 0x04	; 4
    3194:	8c 93       	st	X, r24
    3196:	14 97       	sbiw	r26, 0x04	; 4
    3198:	12 e0       	ldi	r17, 0x02	; 2
    319a:	47 c0       	rjmp	.+142    	; 0x322a <f_lseek+0x398>
					nsect += ofs / SS(fp->fs);
    319c:	0b 2e       	mov	r0, r27
    319e:	b9 e0       	ldi	r27, 0x09	; 9
    31a0:	f6 94       	lsr	r15
    31a2:	e7 94       	ror	r14
    31a4:	d7 94       	ror	r13
    31a6:	c7 94       	ror	r12
    31a8:	ba 95       	dec	r27
    31aa:	d1 f7       	brne	.-12     	; 0x31a0 <f_lseek+0x30e>
    31ac:	b0 2d       	mov	r27, r0
    31ae:	c8 0e       	add	r12, r24
    31b0:	d9 1e       	adc	r13, r25
    31b2:	ea 1e       	adc	r14, r26
    31b4:	fb 1e       	adc	r15, r27
    31b6:	07 c0       	rjmp	.+14     	; 0x31c6 <f_lseek+0x334>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    31b8:	cc 24       	eor	r12, r12
    31ba:	dd 24       	eor	r13, r13
    31bc:	76 01       	movw	r14, r12
    31be:	03 c0       	rjmp	.+6      	; 0x31c6 <f_lseek+0x334>
    31c0:	cc 24       	eor	r12, r12
    31c2:	dd 24       	eor	r13, r13
    31c4:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    31c6:	ed 81       	ldd	r30, Y+5	; 0x05
    31c8:	fe 81       	ldd	r31, Y+6	; 0x06
    31ca:	86 81       	ldd	r24, Z+6	; 0x06
    31cc:	97 81       	ldd	r25, Z+7	; 0x07
    31ce:	a0 85       	ldd	r26, Z+8	; 0x08
    31d0:	b1 85       	ldd	r27, Z+9	; 0x09
    31d2:	91 70       	andi	r25, 0x01	; 1
    31d4:	a0 70       	andi	r26, 0x00	; 0
    31d6:	b0 70       	andi	r27, 0x00	; 0
    31d8:	00 97       	sbiw	r24, 0x00	; 0
    31da:	a1 05       	cpc	r26, r1
    31dc:	b1 05       	cpc	r27, r1
    31de:	69 f0       	breq	.+26     	; 0x31fa <f_lseek+0x368>
    31e0:	86 89       	ldd	r24, Z+22	; 0x16
    31e2:	97 89       	ldd	r25, Z+23	; 0x17
    31e4:	a0 8d       	ldd	r26, Z+24	; 0x18
    31e6:	b1 8d       	ldd	r27, Z+25	; 0x19
    31e8:	8c 15       	cp	r24, r12
    31ea:	9d 05       	cpc	r25, r13
    31ec:	ae 05       	cpc	r26, r14
    31ee:	bf 05       	cpc	r27, r15
    31f0:	21 f0       	breq	.+8      	; 0x31fa <f_lseek+0x368>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    31f2:	c6 8a       	std	Z+22, r12	; 0x16
    31f4:	d7 8a       	std	Z+23, r13	; 0x17
    31f6:	e0 8e       	std	Z+24, r14	; 0x18
    31f8:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    31fa:	ed 81       	ldd	r30, Y+5	; 0x05
    31fc:	fe 81       	ldd	r31, Y+6	; 0x06
    31fe:	86 81       	ldd	r24, Z+6	; 0x06
    3200:	97 81       	ldd	r25, Z+7	; 0x07
    3202:	a0 85       	ldd	r26, Z+8	; 0x08
    3204:	b1 85       	ldd	r27, Z+9	; 0x09
    3206:	42 85       	ldd	r20, Z+10	; 0x0a
    3208:	53 85       	ldd	r21, Z+11	; 0x0b
    320a:	64 85       	ldd	r22, Z+12	; 0x0c
    320c:	75 85       	ldd	r23, Z+13	; 0x0d
    320e:	48 17       	cp	r20, r24
    3210:	59 07       	cpc	r21, r25
    3212:	6a 07       	cpc	r22, r26
    3214:	7b 07       	cpc	r23, r27
    3216:	48 f4       	brcc	.+18     	; 0x322a <f_lseek+0x398>
			fp->fsize = fp->fptr;
    3218:	82 87       	std	Z+10, r24	; 0x0a
    321a:	93 87       	std	Z+11, r25	; 0x0b
    321c:	a4 87       	std	Z+12, r26	; 0x0c
    321e:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    3220:	84 81       	ldd	r24, Z+4	; 0x04
    3222:	80 62       	ori	r24, 0x20	; 32
    3224:	84 83       	std	Z+4, r24	; 0x04
    3226:	01 c0       	rjmp	.+2      	; 0x322a <f_lseek+0x398>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    3228:	12 e0       	ldi	r17, 0x02	; 2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    322a:	81 2f       	mov	r24, r17
    322c:	26 96       	adiw	r28, 0x06	; 6
    322e:	0f b6       	in	r0, 0x3f	; 63
    3230:	f8 94       	cli
    3232:	de bf       	out	0x3e, r29	; 62
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	cd bf       	out	0x3d, r28	; 61
    3238:	df 91       	pop	r29
    323a:	cf 91       	pop	r28
    323c:	1f 91       	pop	r17
    323e:	ff 90       	pop	r15
    3240:	ef 90       	pop	r14
    3242:	df 90       	pop	r13
    3244:	cf 90       	pop	r12
    3246:	bf 90       	pop	r11
    3248:	af 90       	pop	r10
    324a:	9f 90       	pop	r9
    324c:	8f 90       	pop	r8
    324e:	7f 90       	pop	r7
    3250:	6f 90       	pop	r6
    3252:	5f 90       	pop	r5
    3254:	4f 90       	pop	r4
    3256:	3f 90       	pop	r3
    3258:	2f 90       	pop	r2
    325a:	08 95       	ret

0000325c <f_opendir>:

FRESULT f_opendir (
	DIRS *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    325c:	0f 93       	push	r16
    325e:	1f 93       	push	r17
    3260:	cf 93       	push	r28
    3262:	df 93       	push	r29
    3264:	cd b7       	in	r28, 0x3d	; 61
    3266:	de b7       	in	r29, 0x3e	; 62
    3268:	2e 97       	sbiw	r28, 0x0e	; 14
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	f8 94       	cli
    326e:	de bf       	out	0x3e, r29	; 62
    3270:	0f be       	out	0x3f, r0	; 63
    3272:	cd bf       	out	0x3d, r28	; 61
    3274:	8c 01       	movw	r16, r24
    3276:	7e 87       	std	Y+14, r23	; 0x0e
    3278:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
    327a:	ce 01       	movw	r24, r28
    327c:	0d 96       	adiw	r24, 0x0d	; 13
    327e:	b8 01       	movw	r22, r16
    3280:	40 e0       	ldi	r20, 0x00	; 0
    3282:	0e 94 ca 01 	call	0x394	; 0x394 <chk_mounted>
	if (res == FR_OK) {
    3286:	88 23       	and	r24, r24
    3288:	09 f0       	breq	.+2      	; 0x328c <f_opendir+0x30>
    328a:	4a c0       	rjmp	.+148    	; 0x3320 <f_opendir+0xc4>
		INIT_BUF(*dj);
    328c:	ce 01       	movw	r24, r28
    328e:	01 96       	adiw	r24, 0x01	; 1
    3290:	d8 01       	movw	r26, r16
    3292:	55 96       	adiw	r26, 0x15	; 21
    3294:	9c 93       	st	X, r25
    3296:	8e 93       	st	-X, r24
    3298:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    329a:	6d 85       	ldd	r22, Y+13	; 0x0d
    329c:	7e 85       	ldd	r23, Y+14	; 0x0e
    329e:	c8 01       	movw	r24, r16
    32a0:	0e 94 9f 0c 	call	0x193e	; 0x193e <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    32a4:	88 23       	and	r24, r24
    32a6:	b1 f5       	brne	.+108    	; 0x3314 <f_opendir+0xb8>
			if (dj->dir) {						/* It is not the root dir */
    32a8:	d8 01       	movw	r26, r16
    32aa:	52 96       	adiw	r26, 0x12	; 18
    32ac:	ed 91       	ld	r30, X+
    32ae:	fc 91       	ld	r31, X
    32b0:	53 97       	sbiw	r26, 0x13	; 19
    32b2:	30 97       	sbiw	r30, 0x00	; 0
    32b4:	01 f1       	breq	.+64     	; 0x32f6 <f_opendir+0x9a>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    32b6:	83 85       	ldd	r24, Z+11	; 0x0b
    32b8:	84 ff       	sbrs	r24, 4
    32ba:	2f c0       	rjmp	.+94     	; 0x331a <f_opendir+0xbe>
					dj->sclust = LD_CLUST(dj->dir);
    32bc:	35 89       	ldd	r19, Z+21	; 0x15
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	84 89       	ldd	r24, Z+20	; 0x14
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	82 2b       	or	r24, r18
    32c6:	93 2b       	or	r25, r19
    32c8:	ac 01       	movw	r20, r24
    32ca:	60 e0       	ldi	r22, 0x00	; 0
    32cc:	70 e0       	ldi	r23, 0x00	; 0
    32ce:	ba 01       	movw	r22, r20
    32d0:	55 27       	eor	r21, r21
    32d2:	44 27       	eor	r20, r20
    32d4:	93 8d       	ldd	r25, Z+27	; 0x1b
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	22 8d       	ldd	r18, Z+26	; 0x1a
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	82 2b       	or	r24, r18
    32de:	93 2b       	or	r25, r19
    32e0:	a0 e0       	ldi	r26, 0x00	; 0
    32e2:	b0 e0       	ldi	r27, 0x00	; 0
    32e4:	48 2b       	or	r20, r24
    32e6:	59 2b       	or	r21, r25
    32e8:	6a 2b       	or	r22, r26
    32ea:	7b 2b       	or	r23, r27
    32ec:	f8 01       	movw	r30, r16
    32ee:	46 83       	std	Z+6, r20	; 0x06
    32f0:	57 83       	std	Z+7, r21	; 0x07
    32f2:	60 87       	std	Z+8, r22	; 0x08
    32f4:	71 87       	std	Z+9, r23	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    32f6:	d8 01       	movw	r26, r16
    32f8:	ed 91       	ld	r30, X+
    32fa:	fc 91       	ld	r31, X
    32fc:	11 97       	sbiw	r26, 0x01	; 1
    32fe:	86 81       	ldd	r24, Z+6	; 0x06
    3300:	97 81       	ldd	r25, Z+7	; 0x07
    3302:	13 96       	adiw	r26, 0x03	; 3
    3304:	9c 93       	st	X, r25
    3306:	8e 93       	st	-X, r24
    3308:	12 97       	sbiw	r26, 0x02	; 2
				res = dir_sdi(dj, 0);			/* Rewind dir */
    330a:	c8 01       	movw	r24, r16
    330c:	60 e0       	ldi	r22, 0x00	; 0
    330e:	70 e0       	ldi	r23, 0x00	; 0
    3310:	0e 94 64 08 	call	0x10c8	; 0x10c8 <dir_sdi>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3314:	84 30       	cpi	r24, 0x04	; 4
    3316:	19 f0       	breq	.+6      	; 0x331e <f_opendir+0xc2>
    3318:	03 c0       	rjmp	.+6      	; 0x3320 <f_opendir+0xc4>
		if (res == FR_OK) {						/* Follow completed */
			if (dj->dir) {						/* It is not the root dir */
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = LD_CLUST(dj->dir);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    331a:	85 e0       	ldi	r24, 0x05	; 5
    331c:	01 c0       	rjmp	.+2      	; 0x3320 <f_opendir+0xc4>
			if (res == FR_OK) {
				dj->id = dj->fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    331e:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj->fs, res);
}
    3320:	2e 96       	adiw	r28, 0x0e	; 14
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	cd bf       	out	0x3d, r28	; 61
    332c:	df 91       	pop	r29
    332e:	cf 91       	pop	r28
    3330:	1f 91       	pop	r17
    3332:	0f 91       	pop	r16
    3334:	08 95       	ret

00003336 <f_readdir>:

FRESULT f_readdir (
	DIRS *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3336:	cf 92       	push	r12
    3338:	df 92       	push	r13
    333a:	ef 92       	push	r14
    333c:	ff 92       	push	r15
    333e:	1f 93       	push	r17
    3340:	cf 93       	push	r28
    3342:	df 93       	push	r29
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
    3348:	2c 97       	sbiw	r28, 0x0c	; 12
    334a:	0f b6       	in	r0, 0x3f	; 63
    334c:	f8 94       	cli
    334e:	de bf       	out	0x3e, r29	; 62
    3350:	0f be       	out	0x3f, r0	; 63
    3352:	cd bf       	out	0x3d, r28	; 61
    3354:	7c 01       	movw	r14, r24
    3356:	6b 01       	movw	r12, r22
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    3358:	fc 01       	movw	r30, r24
    335a:	62 81       	ldd	r22, Z+2	; 0x02
    335c:	73 81       	ldd	r23, Z+3	; 0x03
    335e:	80 81       	ld	r24, Z
    3360:	91 81       	ldd	r25, Z+1	; 0x01
    3362:	0e 94 11 01 	call	0x222	; 0x222 <validate>
    3366:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3368:	88 23       	and	r24, r24
    336a:	81 f5       	brne	.+96     	; 0x33cc <f_readdir+0x96>
		if (!fno) {
    336c:	c1 14       	cp	r12, r1
    336e:	d1 04       	cpc	r13, r1
    3370:	39 f4       	brne	.+14     	; 0x3380 <f_readdir+0x4a>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
    3372:	c7 01       	movw	r24, r14
    3374:	60 e0       	ldi	r22, 0x00	; 0
    3376:	70 e0       	ldi	r23, 0x00	; 0
    3378:	0e 94 64 08 	call	0x10c8	; 0x10c8 <dir_sdi>
    337c:	18 2f       	mov	r17, r24
    337e:	26 c0       	rjmp	.+76     	; 0x33cc <f_readdir+0x96>
		} else {
			INIT_BUF(*dj);
    3380:	ce 01       	movw	r24, r28
    3382:	01 96       	adiw	r24, 0x01	; 1
    3384:	f7 01       	movw	r30, r14
    3386:	95 8b       	std	Z+21, r25	; 0x15
    3388:	84 8b       	std	Z+20, r24	; 0x14
			res = dir_read(dj);				/* Read an directory item */
    338a:	c7 01       	movw	r24, r14
    338c:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
    3390:	84 30       	cpi	r24, 0x04	; 4
    3392:	31 f4       	brne	.+12     	; 0x33a0 <f_readdir+0x6a>
				dj->sect = 0;
    3394:	f7 01       	movw	r30, r14
    3396:	16 86       	std	Z+14, r1	; 0x0e
    3398:	17 86       	std	Z+15, r1	; 0x0f
    339a:	10 8a       	std	Z+16, r1	; 0x10
    339c:	11 8a       	std	Z+17, r1	; 0x11
    339e:	02 c0       	rjmp	.+4      	; 0x33a4 <f_readdir+0x6e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    33a0:	88 23       	and	r24, r24
    33a2:	89 f4       	brne	.+34     	; 0x33c6 <f_readdir+0x90>
				get_fileinfo(dj, fno);		/* Get the object information */
    33a4:	c7 01       	movw	r24, r14
    33a6:	b6 01       	movw	r22, r12
    33a8:	0e 94 7f 00 	call	0xfe	; 0xfe <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
    33ac:	c7 01       	movw	r24, r14
    33ae:	60 e0       	ldi	r22, 0x00	; 0
    33b0:	70 e0       	ldi	r23, 0x00	; 0
    33b2:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <dir_next>
				if (res == FR_NO_FILE) {
    33b6:	84 30       	cpi	r24, 0x04	; 4
    33b8:	41 f4       	brne	.+16     	; 0x33ca <f_readdir+0x94>
					dj->sect = 0;
    33ba:	f7 01       	movw	r30, r14
    33bc:	16 86       	std	Z+14, r1	; 0x0e
    33be:	17 86       	std	Z+15, r1	; 0x0f
    33c0:	10 8a       	std	Z+16, r1	; 0x10
    33c2:	11 8a       	std	Z+17, r1	; 0x11
    33c4:	03 c0       	rjmp	.+6      	; 0x33cc <f_readdir+0x96>
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
			res = dir_read(dj);				/* Read an directory item */
    33c6:	18 2f       	mov	r17, r24
    33c8:	01 c0       	rjmp	.+2      	; 0x33cc <f_readdir+0x96>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
    33ca:	18 2f       	mov	r17, r24
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
    33cc:	81 2f       	mov	r24, r17
    33ce:	2c 96       	adiw	r28, 0x0c	; 12
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	de bf       	out	0x3e, r29	; 62
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	cd bf       	out	0x3d, r28	; 61
    33da:	df 91       	pop	r29
    33dc:	cf 91       	pop	r28
    33de:	1f 91       	pop	r17
    33e0:	ff 90       	pop	r15
    33e2:	ef 90       	pop	r14
    33e4:	df 90       	pop	r13
    33e6:	cf 90       	pop	r12
    33e8:	08 95       	ret

000033ea <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    33ea:	ef 92       	push	r14
    33ec:	ff 92       	push	r15
    33ee:	1f 93       	push	r17
    33f0:	cf 93       	push	r28
    33f2:	df 93       	push	r29
    33f4:	cd b7       	in	r28, 0x3d	; 61
    33f6:	de b7       	in	r29, 0x3e	; 62
    33f8:	a4 97       	sbiw	r28, 0x24	; 36
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	de bf       	out	0x3e, r29	; 62
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	cd bf       	out	0x3d, r28	; 61
    3404:	9c a3       	lds	r25, 0x5c
    3406:	8b a3       	lds	r24, 0x5b
    3408:	7b 01       	movw	r14, r22
	FRESULT res;
	DIRS dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    340a:	ce 01       	movw	r24, r28
    340c:	83 96       	adiw	r24, 0x23	; 35
    340e:	be 01       	movw	r22, r28
    3410:	6f 5f       	subi	r22, 0xFF	; 255
    3412:	7f 4f       	sbci	r23, 0xFF	; 255
    3414:	40 e0       	ldi	r20, 0x00	; 0
    3416:	0e 94 ca 01 	call	0x394	; 0x394 <chk_mounted>
    341a:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    341c:	88 23       	and	r24, r24
    341e:	c1 f4       	brne	.+48     	; 0x3450 <f_stat+0x66>
		INIT_BUF(dj);
    3420:	ce 01       	movw	r24, r28
    3422:	47 96       	adiw	r24, 0x17	; 23
    3424:	9e 8b       	std	Y+22, r25	; 0x16
    3426:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    3428:	6b a1       	lds	r22, 0x4b
    342a:	7c a1       	lds	r23, 0x4c
    342c:	ce 01       	movw	r24, r28
    342e:	01 96       	adiw	r24, 0x01	; 1
    3430:	0e 94 9f 0c 	call	0x193e	; 0x193e <follow_path>
    3434:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follow completed */
    3436:	88 23       	and	r24, r24
    3438:	59 f4       	brne	.+22     	; 0x3450 <f_stat+0x66>
			if (dj.dir)		/* Found an object */
    343a:	8b 89       	ldd	r24, Y+19	; 0x13
    343c:	9c 89       	ldd	r25, Y+20	; 0x14
    343e:	00 97       	sbiw	r24, 0x00	; 0
    3440:	31 f0       	breq	.+12     	; 0x344e <f_stat+0x64>
				get_fileinfo(&dj, fno);
    3442:	ce 01       	movw	r24, r28
    3444:	01 96       	adiw	r24, 0x01	; 1
    3446:	b7 01       	movw	r22, r14
    3448:	0e 94 7f 00 	call	0xfe	; 0xfe <get_fileinfo>
    344c:	01 c0       	rjmp	.+2      	; 0x3450 <f_stat+0x66>
			else			/* It is root dir */
				res = FR_INVALID_NAME;
    344e:	16 e0       	ldi	r17, 0x06	; 6
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    3450:	81 2f       	mov	r24, r17
    3452:	a4 96       	adiw	r28, 0x24	; 36
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	de bf       	out	0x3e, r29	; 62
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	cd bf       	out	0x3d, r28	; 61
    345e:	df 91       	pop	r29
    3460:	cf 91       	pop	r28
    3462:	1f 91       	pop	r17
    3464:	ff 90       	pop	r15
    3466:	ef 90       	pop	r14
    3468:	08 95       	ret

0000346a <f_getfree>:
FRESULT f_getfree (
	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    346a:	2f 92       	push	r2
    346c:	3f 92       	push	r3
    346e:	4f 92       	push	r4
    3470:	5f 92       	push	r5
    3472:	6f 92       	push	r6
    3474:	7f 92       	push	r7
    3476:	8f 92       	push	r8
    3478:	9f 92       	push	r9
    347a:	af 92       	push	r10
    347c:	bf 92       	push	r11
    347e:	cf 92       	push	r12
    3480:	df 92       	push	r13
    3482:	ef 92       	push	r14
    3484:	ff 92       	push	r15
    3486:	0f 93       	push	r16
    3488:	1f 93       	push	r17
    348a:	cf 93       	push	r28
    348c:	df 93       	push	r29
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
    3492:	2a 97       	sbiw	r28, 0x0a	; 10
    3494:	0f b6       	in	r0, 0x3f	; 63
    3496:	f8 94       	cli
    3498:	de bf       	out	0x3e, r29	; 62
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	cd bf       	out	0x3d, r28	; 61
    349e:	9a 83       	std	Y+2, r25	; 0x02
    34a0:	89 83       	std	Y+1, r24	; 0x01
    34a2:	7c 83       	std	Y+4, r23	; 0x04
    34a4:	6b 83       	std	Y+3, r22	; 0x03
    34a6:	3a 01       	movw	r6, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    34a8:	ce 01       	movw	r24, r28
    34aa:	01 96       	adiw	r24, 0x01	; 1
    34ac:	ba 01       	movw	r22, r20
    34ae:	40 e0       	ldi	r20, 0x00	; 0
    34b0:	0e 94 ca 01 	call	0x394	; 0x394 <chk_mounted>
    34b4:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    34b6:	88 23       	and	r24, r24
    34b8:	09 f0       	breq	.+2      	; 0x34bc <f_getfree+0x52>
    34ba:	fb c0       	rjmp	.+502    	; 0x36b2 <f_getfree+0x248>
		/* If free_clust is valid, return it without full cluster scan */
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
    34bc:	d3 01       	movw	r26, r6
    34be:	ed 91       	ld	r30, X+
    34c0:	fc 91       	ld	r31, X
    34c2:	86 85       	ldd	r24, Z+14	; 0x0e
    34c4:	97 85       	ldd	r25, Z+15	; 0x0f
    34c6:	a0 89       	ldd	r26, Z+16	; 0x10
    34c8:	b1 89       	ldd	r27, Z+17	; 0x11
    34ca:	c2 8c       	ldd	r12, Z+26	; 0x1a
    34cc:	d3 8c       	ldd	r13, Z+27	; 0x1b
    34ce:	e4 8c       	ldd	r14, Z+28	; 0x1c
    34d0:	f5 8c       	ldd	r15, Z+29	; 0x1d
    34d2:	b7 01       	movw	r22, r14
    34d4:	a6 01       	movw	r20, r12
    34d6:	42 50       	subi	r20, 0x02	; 2
    34d8:	50 40       	sbci	r21, 0x00	; 0
    34da:	60 40       	sbci	r22, 0x00	; 0
    34dc:	70 40       	sbci	r23, 0x00	; 0
    34de:	48 17       	cp	r20, r24
    34e0:	59 07       	cpc	r21, r25
    34e2:	6a 07       	cpc	r22, r26
    34e4:	7b 07       	cpc	r23, r27
    34e6:	38 f0       	brcs	.+14     	; 0x34f6 <f_getfree+0x8c>
			*nclst = (*fatfs)->free_clust;
    34e8:	eb 81       	ldd	r30, Y+3	; 0x03
    34ea:	fc 81       	ldd	r31, Y+4	; 0x04
    34ec:	80 83       	st	Z, r24
    34ee:	91 83       	std	Z+1, r25	; 0x01
    34f0:	a2 83       	std	Z+2, r26	; 0x02
    34f2:	b3 83       	std	Z+3, r27	; 0x03
    34f4:	de c0       	rjmp	.+444    	; 0x36b2 <f_getfree+0x248>
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
    34f6:	00 81       	ld	r16, Z
			n = 0;
			if (fat == FS_FAT12) {
    34f8:	01 30       	cpi	r16, 0x01	; 1
    34fa:	09 f0       	breq	.+2      	; 0x34fe <f_getfree+0x94>
    34fc:	3f c0       	rjmp	.+126    	; 0x357c <f_getfree+0x112>
    34fe:	cc 24       	eor	r12, r12
    3500:	dd 24       	eor	r13, r13
    3502:	76 01       	movw	r14, r12
    3504:	68 94       	set
    3506:	c1 f8       	bld	r12, 1
    3508:	88 24       	eor	r8, r8
    350a:	99 24       	eor	r9, r9
    350c:	54 01       	movw	r10, r8
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
    350e:	d3 01       	movw	r26, r6
    3510:	8d 91       	ld	r24, X+
    3512:	9c 91       	ld	r25, X
    3514:	b7 01       	movw	r22, r14
    3516:	a6 01       	movw	r20, r12
    3518:	0e 94 58 07 	call	0xeb0	; 0xeb0 <get_fat>
    351c:	dc 01       	movw	r26, r24
    351e:	cb 01       	movw	r24, r22
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    3520:	8f 3f       	cpi	r24, 0xFF	; 255
    3522:	ef ef       	ldi	r30, 0xFF	; 255
    3524:	9e 07       	cpc	r25, r30
    3526:	ef ef       	ldi	r30, 0xFF	; 255
    3528:	ae 07       	cpc	r26, r30
    352a:	ef ef       	ldi	r30, 0xFF	; 255
    352c:	be 07       	cpc	r27, r30
    352e:	09 f4       	brne	.+2      	; 0x3532 <f_getfree+0xc8>
    3530:	a4 c0       	rjmp	.+328    	; 0x367a <f_getfree+0x210>
					if (stat == 1) { res = FR_INT_ERR; break; }
    3532:	81 30       	cpi	r24, 0x01	; 1
    3534:	91 05       	cpc	r25, r1
    3536:	a1 05       	cpc	r26, r1
    3538:	b1 05       	cpc	r27, r1
    353a:	09 f4       	brne	.+2      	; 0x353e <f_getfree+0xd4>
    353c:	a0 c0       	rjmp	.+320    	; 0x367e <f_getfree+0x214>
					if (stat == 0) n++;
    353e:	00 97       	sbiw	r24, 0x00	; 0
    3540:	a1 05       	cpc	r26, r1
    3542:	b1 05       	cpc	r27, r1
    3544:	29 f4       	brne	.+10     	; 0x3550 <f_getfree+0xe6>
    3546:	08 94       	sec
    3548:	81 1c       	adc	r8, r1
    354a:	91 1c       	adc	r9, r1
    354c:	a1 1c       	adc	r10, r1
    354e:	b1 1c       	adc	r11, r1
				} while (++clst < (*fatfs)->n_fatent);
    3550:	08 94       	sec
    3552:	c1 1c       	adc	r12, r1
    3554:	d1 1c       	adc	r13, r1
    3556:	e1 1c       	adc	r14, r1
    3558:	f1 1c       	adc	r15, r1
    355a:	d3 01       	movw	r26, r6
    355c:	ed 91       	ld	r30, X+
    355e:	fc 91       	ld	r31, X
    3560:	82 8d       	ldd	r24, Z+26	; 0x1a
    3562:	93 8d       	ldd	r25, Z+27	; 0x1b
    3564:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3566:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3568:	c8 16       	cp	r12, r24
    356a:	d9 06       	cpc	r13, r25
    356c:	ea 06       	cpc	r14, r26
    356e:	fb 06       	cpc	r15, r27
    3570:	70 f2       	brcs	.-100    	; 0x350e <f_getfree+0xa4>
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			(*fatfs)->free_clust = n;
    3572:	86 86       	std	Z+14, r8	; 0x0e
    3574:	97 86       	std	Z+15, r9	; 0x0f
    3576:	a0 8a       	std	Z+16, r10	; 0x10
    3578:	b1 8a       	std	Z+17, r11	; 0x11
    357a:	95 c0       	rjmp	.+298    	; 0x36a6 <f_getfree+0x23c>
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) n++;
				} while (++clst < (*fatfs)->n_fatent);
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
    357c:	22 a0       	lds	r18, 0x82
    357e:	33 a0       	lds	r19, 0x83
    3580:	44 a0       	lds	r20, 0x84
    3582:	55 a0       	lds	r21, 0x85
				i = 0; p = 0;
    3584:	e0 e0       	ldi	r30, 0x00	; 0
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
			*nclst = (*fatfs)->free_clust;
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
			n = 0;
    358c:	88 24       	eor	r8, r8
    358e:	99 24       	eor	r9, r9
    3590:	54 01       	movw	r10, r8
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
						if (res != FR_OK) break;
						p = (*fatfs)->win;
						i = SS(*fatfs);
    3592:	7e 82       	std	Y+6, r7	; 0x06
    3594:	6d 82       	std	Y+5, r6	; 0x05
    3596:	32 01       	movw	r6, r4
    3598:	21 01       	movw	r4, r2
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
    359a:	21 15       	cp	r18, r1
    359c:	31 05       	cpc	r19, r1
    359e:	c1 f4       	brne	.+48     	; 0x35d0 <f_getfree+0x166>
						res = move_window(*fatfs, sect++);
    35a0:	ed 81       	ldd	r30, Y+5	; 0x05
    35a2:	fe 81       	ldd	r31, Y+6	; 0x06
    35a4:	80 81       	ld	r24, Z
    35a6:	91 81       	ldd	r25, Z+1	; 0x01
    35a8:	b3 01       	movw	r22, r6
    35aa:	a2 01       	movw	r20, r4
    35ac:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
						if (res != FR_OK) break;
    35b0:	88 23       	and	r24, r24
    35b2:	09 f0       	breq	.+2      	; 0x35b6 <f_getfree+0x14c>
    35b4:	66 c0       	rjmp	.+204    	; 0x3682 <f_getfree+0x218>
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
    35b6:	08 94       	sec
    35b8:	41 1c       	adc	r4, r1
    35ba:	51 1c       	adc	r5, r1
    35bc:	61 1c       	adc	r6, r1
    35be:	71 1c       	adc	r7, r1
						if (res != FR_OK) break;
						p = (*fatfs)->win;
    35c0:	ad 81       	ldd	r26, Y+5	; 0x05
    35c2:	be 81       	ldd	r27, Y+6	; 0x06
    35c4:	ed 91       	ld	r30, X+
    35c6:	fc 91       	ld	r31, X
    35c8:	11 97       	sbiw	r26, 0x01	; 1
    35ca:	f2 96       	adiw	r30, 0x32	; 50
						i = SS(*fatfs);
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	32 e0       	ldi	r19, 0x02	; 2
					}
					if (fat == FS_FAT16) {
    35d0:	02 30       	cpi	r16, 0x02	; 2
    35d2:	a1 f4       	brne	.+40     	; 0x35fc <f_getfree+0x192>
						if (LD_WORD(p) == 0) n++;
    35d4:	b1 81       	ldd	r27, Z+1	; 0x01
    35d6:	b8 87       	std	Y+8, r27	; 0x08
    35d8:	1f 82       	std	Y+7, r1	; 0x07
    35da:	80 81       	ld	r24, Z
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	4f 81       	ldd	r20, Y+7	; 0x07
    35e0:	58 85       	ldd	r21, Y+8	; 0x08
    35e2:	84 2b       	or	r24, r20
    35e4:	95 2b       	or	r25, r21
    35e6:	00 97       	sbiw	r24, 0x00	; 0
    35e8:	29 f4       	brne	.+10     	; 0x35f4 <f_getfree+0x18a>
    35ea:	08 94       	sec
    35ec:	81 1c       	adc	r8, r1
    35ee:	91 1c       	adc	r9, r1
    35f0:	a1 1c       	adc	r10, r1
    35f2:	b1 1c       	adc	r11, r1
						p += 2; i -= 2;
    35f4:	32 96       	adiw	r30, 0x02	; 2
    35f6:	22 50       	subi	r18, 0x02	; 2
    35f8:	30 40       	sbci	r19, 0x00	; 0
    35fa:	31 c0       	rjmp	.+98     	; 0x365e <f_getfree+0x1f4>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    35fc:	83 81       	ldd	r24, Z+3	; 0x03
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	a0 e0       	ldi	r26, 0x00	; 0
    3602:	b0 e0       	ldi	r27, 0x00	; 0
    3604:	78 2f       	mov	r23, r24
    3606:	66 27       	eor	r22, r22
    3608:	55 27       	eor	r21, r21
    360a:	44 27       	eor	r20, r20
    360c:	82 81       	ldd	r24, Z+2	; 0x02
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	a0 e0       	ldi	r26, 0x00	; 0
    3612:	b0 e0       	ldi	r27, 0x00	; 0
    3614:	dc 01       	movw	r26, r24
    3616:	99 27       	eor	r25, r25
    3618:	88 27       	eor	r24, r24
    361a:	48 2b       	or	r20, r24
    361c:	59 2b       	or	r21, r25
    361e:	6a 2b       	or	r22, r26
    3620:	7b 2b       	or	r23, r27
    3622:	80 81       	ld	r24, Z
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	a0 e0       	ldi	r26, 0x00	; 0
    3628:	b0 e0       	ldi	r27, 0x00	; 0
    362a:	84 2b       	or	r24, r20
    362c:	95 2b       	or	r25, r21
    362e:	a6 2b       	or	r26, r22
    3630:	b7 2b       	or	r27, r23
    3632:	31 80       	ldd	r3, Z+1	; 0x01
    3634:	22 24       	eor	r2, r2
    3636:	a1 01       	movw	r20, r2
    3638:	60 e0       	ldi	r22, 0x00	; 0
    363a:	70 e0       	ldi	r23, 0x00	; 0
    363c:	84 2b       	or	r24, r20
    363e:	95 2b       	or	r25, r21
    3640:	a6 2b       	or	r26, r22
    3642:	b7 2b       	or	r27, r23
    3644:	bf 70       	andi	r27, 0x0F	; 15
    3646:	00 97       	sbiw	r24, 0x00	; 0
    3648:	a1 05       	cpc	r26, r1
    364a:	b1 05       	cpc	r27, r1
    364c:	29 f4       	brne	.+10     	; 0x3658 <f_getfree+0x1ee>
    364e:	08 94       	sec
    3650:	81 1c       	adc	r8, r1
    3652:	91 1c       	adc	r9, r1
    3654:	a1 1c       	adc	r10, r1
    3656:	b1 1c       	adc	r11, r1
						p += 4; i -= 4;
    3658:	34 96       	adiw	r30, 0x04	; 4
    365a:	24 50       	subi	r18, 0x04	; 4
    365c:	30 40       	sbci	r19, 0x00	; 0
					}
				} while (--clst);
    365e:	08 94       	sec
    3660:	c1 08       	sbc	r12, r1
    3662:	d1 08       	sbc	r13, r1
    3664:	e1 08       	sbc	r14, r1
    3666:	f1 08       	sbc	r15, r1
    3668:	c1 14       	cp	r12, r1
    366a:	d1 04       	cpc	r13, r1
    366c:	e1 04       	cpc	r14, r1
    366e:	f1 04       	cpc	r15, r1
    3670:	09 f0       	breq	.+2      	; 0x3674 <f_getfree+0x20a>
    3672:	93 cf       	rjmp	.-218    	; 0x359a <f_getfree+0x130>
    3674:	6d 80       	ldd	r6, Y+5	; 0x05
    3676:	7e 80       	ldd	r7, Y+6	; 0x06
    3678:	07 c0       	rjmp	.+14     	; 0x3688 <f_getfree+0x21e>
			n = 0;
			if (fat == FS_FAT12) {
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    367a:	11 e0       	ldi	r17, 0x01	; 1
    367c:	05 c0       	rjmp	.+10     	; 0x3688 <f_getfree+0x21e>
					if (stat == 1) { res = FR_INT_ERR; break; }
    367e:	12 e0       	ldi	r17, 0x02	; 2
    3680:	03 c0       	rjmp	.+6      	; 0x3688 <f_getfree+0x21e>
    3682:	6d 80       	ldd	r6, Y+5	; 0x05
    3684:	7e 80       	ldd	r7, Y+6	; 0x06
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
    3686:	18 2f       	mov	r17, r24
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			(*fatfs)->free_clust = n;
    3688:	d3 01       	movw	r26, r6
    368a:	ed 91       	ld	r30, X+
    368c:	fc 91       	ld	r31, X
    368e:	11 97       	sbiw	r26, 0x01	; 1
    3690:	86 86       	std	Z+14, r8	; 0x0e
    3692:	97 86       	std	Z+15, r9	; 0x0f
    3694:	a0 8a       	std	Z+16, r10	; 0x10
    3696:	b1 8a       	std	Z+17, r11	; 0x11
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    3698:	03 30       	cpi	r16, 0x03	; 3
    369a:	29 f4       	brne	.+10     	; 0x36a6 <f_getfree+0x23c>
    369c:	ed 91       	ld	r30, X+
    369e:	fc 91       	ld	r31, X
    36a0:	11 97       	sbiw	r26, 0x01	; 1
    36a2:	81 e0       	ldi	r24, 0x01	; 1
    36a4:	85 83       	std	Z+5, r24	; 0x05
			*nclst = n;
    36a6:	eb 81       	ldd	r30, Y+3	; 0x03
    36a8:	fc 81       	ldd	r31, Y+4	; 0x04
    36aa:	80 82       	st	Z, r8
    36ac:	91 82       	std	Z+1, r9	; 0x01
    36ae:	a2 82       	std	Z+2, r10	; 0x02
    36b0:	b3 82       	std	Z+3, r11	; 0x03
		}
	}
	LEAVE_FF(*fatfs, res);
}
    36b2:	81 2f       	mov	r24, r17
    36b4:	2a 96       	adiw	r28, 0x0a	; 10
    36b6:	0f b6       	in	r0, 0x3f	; 63
    36b8:	f8 94       	cli
    36ba:	de bf       	out	0x3e, r29	; 62
    36bc:	0f be       	out	0x3f, r0	; 63
    36be:	cd bf       	out	0x3d, r28	; 61
    36c0:	df 91       	pop	r29
    36c2:	cf 91       	pop	r28
    36c4:	1f 91       	pop	r17
    36c6:	0f 91       	pop	r16
    36c8:	ff 90       	pop	r15
    36ca:	ef 90       	pop	r14
    36cc:	df 90       	pop	r13
    36ce:	cf 90       	pop	r12
    36d0:	bf 90       	pop	r11
    36d2:	af 90       	pop	r10
    36d4:	9f 90       	pop	r9
    36d6:	8f 90       	pop	r8
    36d8:	7f 90       	pop	r7
    36da:	6f 90       	pop	r6
    36dc:	5f 90       	pop	r5
    36de:	4f 90       	pop	r4
    36e0:	3f 90       	pop	r3
    36e2:	2f 90       	pop	r2
    36e4:	08 95       	ret

000036e6 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    36e6:	cf 92       	push	r12
    36e8:	df 92       	push	r13
    36ea:	ef 92       	push	r14
    36ec:	ff 92       	push	r15
    36ee:	0f 93       	push	r16
    36f0:	1f 93       	push	r17
    36f2:	cf 93       	push	r28
    36f4:	df 93       	push	r29
    36f6:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    36f8:	6a 81       	ldd	r22, Y+2	; 0x02
    36fa:	7b 81       	ldd	r23, Y+3	; 0x03
    36fc:	88 81       	ld	r24, Y
    36fe:	99 81       	ldd	r25, Y+1	; 0x01
    3700:	0e 94 11 01 	call	0x222	; 0x222 <validate>
	if (res == FR_OK) {
    3704:	88 23       	and	r24, r24
    3706:	09 f0       	breq	.+2      	; 0x370a <f_truncate+0x24>
    3708:	63 c0       	rjmp	.+198    	; 0x37d0 <f_truncate+0xea>
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
    370a:	9c 81       	ldd	r25, Y+4	; 0x04
    370c:	99 23       	and	r25, r25
    370e:	24 f0       	brlt	.+8      	; 0x3718 <f_truncate+0x32>
			res = FR_INT_ERR;
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
    3710:	91 fd       	sbrc	r25, 1
    3712:	67 c0       	rjmp	.+206    	; 0x37e2 <f_truncate+0xfc>
				res = FR_DENIED;
    3714:	87 e0       	ldi	r24, 0x07	; 7
    3716:	5c c0       	rjmp	.+184    	; 0x37d0 <f_truncate+0xea>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
			res = FR_INT_ERR;
    3718:	82 e0       	ldi	r24, 0x02	; 2
    371a:	5a c0       	rjmp	.+180    	; 0x37d0 <f_truncate+0xea>
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    371c:	4a 87       	std	Y+10, r20	; 0x0a
    371e:	5b 87       	std	Y+11, r21	; 0x0b
    3720:	6c 87       	std	Y+12, r22	; 0x0c
    3722:	7d 87       	std	Y+13, r23	; 0x0d
			fp->flag |= FA__WRITTEN;
    3724:	8c 81       	ldd	r24, Y+4	; 0x04
    3726:	80 62       	ori	r24, 0x20	; 32
    3728:	8c 83       	std	Y+4, r24	; 0x04
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    372a:	41 15       	cp	r20, r1
    372c:	51 05       	cpc	r21, r1
    372e:	61 05       	cpc	r22, r1
    3730:	71 05       	cpc	r23, r1
    3732:	69 f4       	brne	.+26     	; 0x374e <f_truncate+0x68>
				res = remove_chain(fp->fs, fp->sclust);
    3734:	4e 85       	ldd	r20, Y+14	; 0x0e
    3736:	5f 85       	ldd	r21, Y+15	; 0x0f
    3738:	68 89       	ldd	r22, Y+16	; 0x10
    373a:	79 89       	ldd	r23, Y+17	; 0x11
    373c:	88 81       	ld	r24, Y
    373e:	99 81       	ldd	r25, Y+1	; 0x01
    3740:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <remove_chain>
				fp->sclust = 0;
    3744:	1e 86       	std	Y+14, r1	; 0x0e
    3746:	1f 86       	std	Y+15, r1	; 0x0f
    3748:	18 8a       	std	Y+16, r1	; 0x10
    374a:	19 8a       	std	Y+17, r1	; 0x11
    374c:	3c c0       	rjmp	.+120    	; 0x37c6 <f_truncate+0xe0>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
    374e:	4a 89       	ldd	r20, Y+18	; 0x12
    3750:	5b 89       	ldd	r21, Y+19	; 0x13
    3752:	6c 89       	ldd	r22, Y+20	; 0x14
    3754:	7d 89       	ldd	r23, Y+21	; 0x15
    3756:	88 81       	ld	r24, Y
    3758:	99 81       	ldd	r25, Y+1	; 0x01
    375a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <get_fat>
    375e:	6b 01       	movw	r12, r22
    3760:	7c 01       	movw	r14, r24
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	c8 16       	cp	r12, r24
    3766:	d1 04       	cpc	r13, r1
    3768:	e1 04       	cpc	r14, r1
    376a:	f1 04       	cpc	r15, r1
    376c:	09 f4       	brne	.+2      	; 0x3770 <f_truncate+0x8a>
    376e:	48 c0       	rjmp	.+144    	; 0x3800 <f_truncate+0x11a>
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
				res = remove_chain(fp->fs, fp->sclust);
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
				res = FR_OK;
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	9f ef       	ldi	r25, 0xFF	; 255
    3774:	c9 16       	cp	r12, r25
    3776:	9f ef       	ldi	r25, 0xFF	; 255
    3778:	d9 06       	cpc	r13, r25
    377a:	9f ef       	ldi	r25, 0xFF	; 255
    377c:	e9 06       	cpc	r14, r25
    377e:	9f ef       	ldi	r25, 0xFF	; 255
    3780:	f9 06       	cpc	r15, r25
    3782:	09 f0       	breq	.+2      	; 0x3786 <f_truncate+0xa0>
    3784:	80 e0       	ldi	r24, 0x00	; 0
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
    3786:	88 23       	and	r24, r24
    3788:	01 f5       	brne	.+64     	; 0x37ca <f_truncate+0xe4>
    378a:	e8 81       	ld	r30, Y
    378c:	f9 81       	ldd	r31, Y+1	; 0x01
    378e:	42 8d       	ldd	r20, Z+26	; 0x1a
    3790:	53 8d       	ldd	r21, Z+27	; 0x1b
    3792:	64 8d       	ldd	r22, Z+28	; 0x1c
    3794:	75 8d       	ldd	r23, Z+29	; 0x1d
    3796:	c4 16       	cp	r12, r20
    3798:	d5 06       	cpc	r13, r21
    379a:	e6 06       	cpc	r14, r22
    379c:	f7 06       	cpc	r15, r23
    379e:	c0 f4       	brcc	.+48     	; 0x37d0 <f_truncate+0xea>
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
    37a0:	4a 89       	ldd	r20, Y+18	; 0x12
    37a2:	5b 89       	ldd	r21, Y+19	; 0x13
    37a4:	6c 89       	ldd	r22, Y+20	; 0x14
    37a6:	7d 89       	ldd	r23, Y+21	; 0x15
    37a8:	cf 01       	movw	r24, r30
    37aa:	0f ef       	ldi	r16, 0xFF	; 255
    37ac:	1f ef       	ldi	r17, 0xFF	; 255
    37ae:	2f ef       	ldi	r18, 0xFF	; 255
    37b0:	3f e0       	ldi	r19, 0x0F	; 15
    37b2:	0e 94 47 09 	call	0x128e	; 0x128e <put_fat>
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    37b6:	88 23       	and	r24, r24
    37b8:	41 f4       	brne	.+16     	; 0x37ca <f_truncate+0xe4>
    37ba:	88 81       	ld	r24, Y
    37bc:	99 81       	ldd	r25, Y+1	; 0x01
    37be:	b7 01       	movw	r22, r14
    37c0:	a6 01       	movw	r20, r12
    37c2:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <remove_chain>
				}
			}
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
    37c6:	88 23       	and	r24, r24
    37c8:	19 f0       	breq	.+6      	; 0x37d0 <f_truncate+0xea>
    37ca:	9c 81       	ldd	r25, Y+4	; 0x04
    37cc:	90 68       	ori	r25, 0x80	; 128
    37ce:	9c 83       	std	Y+4, r25	; 0x04
	}

	LEAVE_FF(fp->fs, res);
}
    37d0:	df 91       	pop	r29
    37d2:	cf 91       	pop	r28
    37d4:	1f 91       	pop	r17
    37d6:	0f 91       	pop	r16
    37d8:	ff 90       	pop	r15
    37da:	ef 90       	pop	r14
    37dc:	df 90       	pop	r13
    37de:	cf 90       	pop	r12
    37e0:	08 95       	ret
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
    37e2:	4e 81       	ldd	r20, Y+6	; 0x06
    37e4:	5f 81       	ldd	r21, Y+7	; 0x07
    37e6:	68 85       	ldd	r22, Y+8	; 0x08
    37e8:	79 85       	ldd	r23, Y+9	; 0x09
    37ea:	0a 85       	ldd	r16, Y+10	; 0x0a
    37ec:	1b 85       	ldd	r17, Y+11	; 0x0b
    37ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    37f0:	3d 85       	ldd	r19, Y+13	; 0x0d
    37f2:	40 17       	cp	r20, r16
    37f4:	51 07       	cpc	r21, r17
    37f6:	62 07       	cpc	r22, r18
    37f8:	73 07       	cpc	r23, r19
    37fa:	08 f4       	brcc	.+2      	; 0x37fe <f_truncate+0x118>
    37fc:	8f cf       	rjmp	.-226    	; 0x371c <f_truncate+0x36>
    37fe:	e8 cf       	rjmp	.-48     	; 0x37d0 <f_truncate+0xea>
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
    3800:	82 e0       	ldi	r24, 0x02	; 2
    3802:	e3 cf       	rjmp	.-58     	; 0x37ca <f_truncate+0xe4>

00003804 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    3804:	cf 92       	push	r12
    3806:	df 92       	push	r13
    3808:	ef 92       	push	r14
    380a:	ff 92       	push	r15
    380c:	cf 93       	push	r28
    380e:	df 93       	push	r29
    3810:	cd b7       	in	r28, 0x3d	; 61
    3812:	de b7       	in	r29, 0x3e	; 62
    3814:	ea 97       	sbiw	r28, 0x3a	; 58
    3816:	0f b6       	in	r0, 0x3f	; 63
    3818:	f8 94       	cli
    381a:	de bf       	out	0x3e, r29	; 62
    381c:	0f be       	out	0x3f, r0	; 63
    381e:	cd bf       	out	0x3d, r28	; 61
    3820:	9a af       	sts	0x7a, r25
    3822:	89 af       	sts	0x79, r24
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    3824:	ce 01       	movw	r24, r28
    3826:	c9 96       	adiw	r24, 0x39	; 57
    3828:	be 01       	movw	r22, r28
    382a:	6f 5f       	subi	r22, 0xFF	; 255
    382c:	7f 4f       	sbci	r23, 0xFF	; 255
    382e:	41 e0       	ldi	r20, 0x01	; 1
    3830:	0e 94 ca 01 	call	0x394	; 0x394 <chk_mounted>
	if (res == FR_OK) {
    3834:	88 23       	and	r24, r24
    3836:	09 f0       	breq	.+2      	; 0x383a <f_unlink+0x36>
    3838:	60 c0       	rjmp	.+192    	; 0x38fa <f_unlink+0xf6>
		INIT_BUF(dj);
    383a:	ce 01       	movw	r24, r28
    383c:	8d 96       	adiw	r24, 0x2d	; 45
    383e:	9e 8b       	std	Y+22, r25	; 0x16
    3840:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the file path */
    3842:	69 ad       	sts	0x69, r22
    3844:	7a ad       	sts	0x6a, r23
    3846:	ce 01       	movw	r24, r28
    3848:	01 96       	adiw	r24, 0x01	; 1
    384a:	0e 94 9f 0c 	call	0x193e	; 0x193e <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    384e:	88 23       	and	r24, r24
    3850:	09 f0       	breq	.+2      	; 0x3854 <f_unlink+0x50>
    3852:	53 c0       	rjmp	.+166    	; 0x38fa <f_unlink+0xf6>
    3854:	ed 89       	ldd	r30, Y+21	; 0x15
    3856:	fe 89       	ldd	r31, Y+22	; 0x16
    3858:	83 85       	ldd	r24, Z+11	; 0x0b
    385a:	85 ff       	sbrs	r24, 5
    385c:	5b c0       	rjmp	.+182    	; 0x3914 <f_unlink+0x110>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
    385e:	86 e0       	ldi	r24, 0x06	; 6
    3860:	4c c0       	rjmp	.+152    	; 0x38fa <f_unlink+0xf6>
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    3862:	83 85       	ldd	r24, Z+11	; 0x0b
    3864:	80 ff       	sbrs	r24, 0
    3866:	65 c0       	rjmp	.+202    	; 0x3932 <f_unlink+0x12e>
					res = FR_DENIED;		/* Cannot remove R/O object */
    3868:	87 e0       	ldi	r24, 0x07	; 7
    386a:	47 c0       	rjmp	.+142    	; 0x38fa <f_unlink+0xf6>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    386c:	86 e0       	ldi	r24, 0x06	; 6
    386e:	45 c0       	rjmp	.+138    	; 0x38fa <f_unlink+0xf6>
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
				if (dclst < 2) {
    3870:	82 e0       	ldi	r24, 0x02	; 2
    3872:	c8 16       	cp	r12, r24
    3874:	d1 04       	cpc	r13, r1
    3876:	e1 04       	cpc	r14, r1
    3878:	f1 04       	cpc	r15, r1
    387a:	08 f4       	brcc	.+2      	; 0x387e <f_unlink+0x7a>
    387c:	51 c0       	rjmp	.+162    	; 0x3920 <f_unlink+0x11c>
					res = FR_INT_ERR;
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIRS));	/* Check if the sub-dir is empty or not */
    387e:	ce 01       	movw	r24, r28
    3880:	47 96       	adiw	r24, 0x17	; 23
    3882:	be 01       	movw	r22, r28
    3884:	6f 5f       	subi	r22, 0xFF	; 255
    3886:	7f 4f       	sbci	r23, 0xFF	; 255
    3888:	46 e1       	ldi	r20, 0x16	; 22
    388a:	50 e0       	ldi	r21, 0x00	; 0
    388c:	0e 94 68 00 	call	0xd0	; 0xd0 <mem_cpy>
					sdj.sclust = dclst;
    3890:	cd 8e       	std	Y+29, r12	; 0x1d
    3892:	de 8e       	std	Y+30, r13	; 0x1e
    3894:	ef 8e       	std	Y+31, r14	; 0x1f
    3896:	f8 a2       	lds	r31, 0x98
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    3898:	ce 01       	movw	r24, r28
    389a:	47 96       	adiw	r24, 0x17	; 23
    389c:	62 e0       	ldi	r22, 0x02	; 2
    389e:	70 e0       	ldi	r23, 0x00	; 0
    38a0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <dir_sdi>
					if (res == FR_OK) {
    38a4:	88 23       	and	r24, r24
    38a6:	49 f5       	brne	.+82     	; 0x38fa <f_unlink+0xf6>
						res = dir_read(&sdj);
    38a8:	ce 01       	movw	r24, r28
    38aa:	47 96       	adiw	r24, 0x17	; 23
    38ac:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <dir_read>
						if (res == FR_OK			/* Not empty dir */
    38b0:	88 23       	and	r24, r24
    38b2:	71 f0       	breq	.+28     	; 0x38d0 <f_unlink+0xcc>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
    38b4:	ef 89       	ldd	r30, Y+23	; 0x17
    38b6:	f8 8d       	ldd	r31, Y+24	; 0x18
    38b8:	46 89       	ldd	r20, Z+22	; 0x16
    38ba:	57 89       	ldd	r21, Z+23	; 0x17
    38bc:	60 8d       	ldd	r22, Z+24	; 0x18
    38be:	71 8d       	ldd	r23, Z+25	; 0x19
    38c0:	4c 15       	cp	r20, r12
    38c2:	5d 05       	cpc	r21, r13
    38c4:	6e 05       	cpc	r22, r14
    38c6:	7f 05       	cpc	r23, r15
    38c8:	29 f0       	breq	.+10     	; 0x38d4 <f_unlink+0xd0>
#endif
						) res = FR_DENIED;
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    38ca:	84 30       	cpi	r24, 0x04	; 4
    38cc:	59 f1       	breq	.+86     	; 0x3924 <f_unlink+0x120>
    38ce:	15 c0       	rjmp	.+42     	; 0x38fa <f_unlink+0xf6>
					mem_cpy(&sdj, &dj, sizeof(DIRS));	/* Check if the sub-dir is empty or not */
					sdj.sclust = dclst;
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
					if (res == FR_OK) {
						res = dir_read(&sdj);
						if (res == FR_OK			/* Not empty dir */
    38d0:	87 e0       	ldi	r24, 0x07	; 7
    38d2:	13 c0       	rjmp	.+38     	; 0x38fa <f_unlink+0xf6>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
    38d4:	87 e0       	ldi	r24, 0x07	; 7
    38d6:	11 c0       	rjmp	.+34     	; 0x38fa <f_unlink+0xf6>
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
    38d8:	c1 14       	cp	r12, r1
    38da:	d1 04       	cpc	r13, r1
    38dc:	e1 04       	cpc	r14, r1
    38de:	f1 04       	cpc	r15, r1
    38e0:	41 f0       	breq	.+16     	; 0x38f2 <f_unlink+0xee>
						res = remove_chain(dj.fs, dclst);
    38e2:	89 81       	ldd	r24, Y+1	; 0x01
    38e4:	9a 81       	ldd	r25, Y+2	; 0x02
    38e6:	b7 01       	movw	r22, r14
    38e8:	a6 01       	movw	r20, r12
    38ea:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <remove_chain>
					if (res == FR_OK) res = sync(dj.fs);
    38ee:	88 23       	and	r24, r24
    38f0:	21 f4       	brne	.+8      	; 0x38fa <f_unlink+0xf6>
    38f2:	89 81       	ldd	r24, Y+1	; 0x01
    38f4:	9a 81       	ldd	r25, Y+2	; 0x02
    38f6:	0e 94 90 06 	call	0xd20	; 0xd20 <sync>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
    38fa:	ea 96       	adiw	r28, 0x3a	; 58
    38fc:	0f b6       	in	r0, 0x3f	; 63
    38fe:	f8 94       	cli
    3900:	de bf       	out	0x3e, r29	; 62
    3902:	0f be       	out	0x3f, r0	; 63
    3904:	cd bf       	out	0x3d, r28	; 61
    3906:	df 91       	pop	r29
    3908:	cf 91       	pop	r28
    390a:	ff 90       	pop	r15
    390c:	ef 90       	pop	r14
    390e:	df 90       	pop	r13
    3910:	cf 90       	pop	r12
    3912:	08 95       	ret
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
    3914:	eb 89       	ldd	r30, Y+19	; 0x13
    3916:	fc 89       	ldd	r31, Y+20	; 0x14
			if (!dir) {
    3918:	30 97       	sbiw	r30, 0x00	; 0
    391a:	09 f0       	breq	.+2      	; 0x391e <f_unlink+0x11a>
    391c:	a2 cf       	rjmp	.-188    	; 0x3862 <f_unlink+0x5e>
    391e:	a6 cf       	rjmp	.-180    	; 0x386c <f_unlink+0x68>
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
				if (dclst < 2) {
					res = FR_INT_ERR;
    3920:	82 e0       	ldi	r24, 0x02	; 2
    3922:	eb cf       	rjmp	.-42     	; 0x38fa <f_unlink+0xf6>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
    3924:	ce 01       	movw	r24, r28
    3926:	01 96       	adiw	r24, 0x01	; 1
    3928:	0e 94 29 09 	call	0x1252	; 0x1252 <dir_remove>
				if (res == FR_OK) {
    392c:	88 23       	and	r24, r24
    392e:	a1 f2       	breq	.-88     	; 0x38d8 <f_unlink+0xd4>
    3930:	e4 cf       	rjmp	.-56     	; 0x38fa <f_unlink+0xf6>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
    3932:	95 89       	ldd	r25, Z+21	; 0x15
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	44 89       	ldd	r20, Z+20	; 0x14
    3938:	50 e0       	ldi	r21, 0x00	; 0
    393a:	84 2b       	or	r24, r20
    393c:	95 2b       	or	r25, r21
    393e:	ac 01       	movw	r20, r24
    3940:	60 e0       	ldi	r22, 0x00	; 0
    3942:	70 e0       	ldi	r23, 0x00	; 0
    3944:	ba 01       	movw	r22, r20
    3946:	55 27       	eor	r21, r21
    3948:	44 27       	eor	r20, r20
    394a:	93 8d       	ldd	r25, Z+27	; 0x1b
    394c:	80 e0       	ldi	r24, 0x00	; 0
    394e:	c2 8c       	ldd	r12, Z+26	; 0x1a
    3950:	dd 24       	eor	r13, r13
    3952:	8c 29       	or	r24, r12
    3954:	9d 29       	or	r25, r13
    3956:	6c 01       	movw	r12, r24
    3958:	ee 24       	eor	r14, r14
    395a:	ff 24       	eor	r15, r15
    395c:	c4 2a       	or	r12, r20
    395e:	d5 2a       	or	r13, r21
    3960:	e6 2a       	or	r14, r22
    3962:	f7 2a       	or	r15, r23
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    3964:	83 85       	ldd	r24, Z+11	; 0x0b
    3966:	84 fd       	sbrc	r24, 4
    3968:	83 cf       	rjmp	.-250    	; 0x3870 <f_unlink+0x6c>
    396a:	dc cf       	rjmp	.-72     	; 0x3924 <f_unlink+0x120>

0000396c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
    396c:	2f 92       	push	r2
    396e:	3f 92       	push	r3
    3970:	4f 92       	push	r4
    3972:	5f 92       	push	r5
    3974:	6f 92       	push	r6
    3976:	7f 92       	push	r7
    3978:	8f 92       	push	r8
    397a:	9f 92       	push	r9
    397c:	af 92       	push	r10
    397e:	bf 92       	push	r11
    3980:	cf 92       	push	r12
    3982:	df 92       	push	r13
    3984:	ef 92       	push	r14
    3986:	ff 92       	push	r15
    3988:	0f 93       	push	r16
    398a:	1f 93       	push	r17
    398c:	cf 93       	push	r28
    398e:	df 93       	push	r29
    3990:	cd b7       	in	r28, 0x3d	; 61
    3992:	de b7       	in	r29, 0x3e	; 62
    3994:	a9 97       	sbiw	r28, 0x29	; 41
    3996:	0f b6       	in	r0, 0x3f	; 63
    3998:	f8 94       	cli
    399a:	de bf       	out	0x3e, r29	; 62
    399c:	0f be       	out	0x3f, r0	; 63
    399e:	cd bf       	out	0x3d, r28	; 61
    39a0:	9c a3       	lds	r25, 0x5c
    39a2:	8b a3       	lds	r24, 0x5b
	FRESULT res;
	DIRS dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
    39a4:	0e 94 1d 07 	call	0xe3a	; 0xe3a <get_fattime>
    39a8:	6b 01       	movw	r12, r22
    39aa:	7c 01       	movw	r14, r24
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    39ac:	ce 01       	movw	r24, r28
    39ae:	83 96       	adiw	r24, 0x23	; 35
    39b0:	be 01       	movw	r22, r28
    39b2:	6f 5f       	subi	r22, 0xFF	; 255
    39b4:	7f 4f       	sbci	r23, 0xFF	; 255
    39b6:	41 e0       	ldi	r20, 0x01	; 1
    39b8:	0e 94 ca 01 	call	0x394	; 0x394 <chk_mounted>
    39bc:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    39be:	88 23       	and	r24, r24
    39c0:	09 f0       	breq	.+2      	; 0x39c4 <f_mkdir+0x58>
    39c2:	0f c1       	rjmp	.+542    	; 0x3be2 <f_mkdir+0x276>
		INIT_BUF(dj);
    39c4:	ce 01       	movw	r24, r28
    39c6:	47 96       	adiw	r24, 0x17	; 23
    39c8:	9e 8b       	std	Y+22, r25	; 0x16
    39ca:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);			/* Follow the file path */
    39cc:	6b a1       	lds	r22, 0x4b
    39ce:	7c a1       	lds	r23, 0x4c
    39d0:	ce 01       	movw	r24, r28
    39d2:	01 96       	adiw	r24, 0x01	; 1
    39d4:	0e 94 9f 0c 	call	0x193e	; 0x193e <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    39d8:	88 23       	and	r24, r24
    39da:	49 f0       	breq	.+18     	; 0x39ee <f_mkdir+0x82>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
    39dc:	84 30       	cpi	r24, 0x04	; 4
    39de:	41 f4       	brne	.+16     	; 0x39f0 <f_mkdir+0x84>
    39e0:	ed 89       	ldd	r30, Y+21	; 0x15
    39e2:	fe 89       	ldd	r31, Y+22	; 0x16
    39e4:	83 85       	ldd	r24, Z+11	; 0x0b
    39e6:	85 ff       	sbrs	r24, 5
    39e8:	16 c1       	rjmp	.+556    	; 0x3c16 <f_mkdir+0x2aa>
			res = FR_INVALID_NAME;
    39ea:	86 e0       	ldi	r24, 0x06	; 6
    39ec:	01 c0       	rjmp	.+2      	; 0x39f0 <f_mkdir+0x84>

	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    39ee:	88 e0       	ldi	r24, 0x08	; 8
				ST_DWORD(dir+DIR_WrtTime, tim);
				ST_CLUST(dir, dcl);
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
    39f0:	18 2f       	mov	r17, r24
    39f2:	f7 c0       	rjmp	.+494    	; 0x3be2 <f_mkdir+0x276>
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
    39f4:	81 e0       	ldi	r24, 0x01	; 1
    39f6:	48 16       	cp	r4, r24
    39f8:	51 04       	cpc	r5, r1
    39fa:	61 04       	cpc	r6, r1
    39fc:	71 04       	cpc	r7, r1
    39fe:	09 f4       	brne	.+2      	; 0x3a02 <f_mkdir+0x96>
    3a00:	1a c1       	rjmp	.+564    	; 0x3c36 <f_mkdir+0x2ca>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    3a02:	ef ef       	ldi	r30, 0xFF	; 255
    3a04:	4e 16       	cp	r4, r30
    3a06:	ef ef       	ldi	r30, 0xFF	; 255
    3a08:	5e 06       	cpc	r5, r30
    3a0a:	ef ef       	ldi	r30, 0xFF	; 255
    3a0c:	6e 06       	cpc	r6, r30
    3a0e:	ef ef       	ldi	r30, 0xFF	; 255
    3a10:	7e 06       	cpc	r7, r30
    3a12:	09 f4       	brne	.+2      	; 0x3a16 <f_mkdir+0xaa>
    3a14:	12 c1       	rjmp	.+548    	; 0x3c3a <f_mkdir+0x2ce>
    3a16:	01 c0       	rjmp	.+2      	; 0x3a1a <f_mkdir+0xae>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    3a18:	17 e0       	ldi	r17, 0x07	; 7
			if (dcl == 1) res = FR_INT_ERR;
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK)					/* Flush FAT */
    3a1a:	11 23       	and	r17, r17
    3a1c:	09 f0       	breq	.+2      	; 0x3a20 <f_mkdir+0xb4>
    3a1e:	c1 c0       	rjmp	.+386    	; 0x3ba2 <f_mkdir+0x236>
				res = move_window(dj.fs, 0);
    3a20:	89 81       	ldd	r24, Y+1	; 0x01
    3a22:	9a 81       	ldd	r25, Y+2	; 0x02
    3a24:	40 e0       	ldi	r20, 0x00	; 0
    3a26:	50 e0       	ldi	r21, 0x00	; 0
    3a28:	ba 01       	movw	r22, r20
    3a2a:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
    3a2e:	18 2f       	mov	r17, r24
			if (res == FR_OK) {					/* Initialize the new directory table */
    3a30:	88 23       	and	r24, r24
    3a32:	09 f0       	breq	.+2      	; 0x3a36 <f_mkdir+0xca>
    3a34:	b6 c0       	rjmp	.+364    	; 0x3ba2 <f_mkdir+0x236>
				dsc = clust2sect(dj.fs, dcl);
    3a36:	09 81       	ldd	r16, Y+1	; 0x01
    3a38:	1a 81       	ldd	r17, Y+2	; 0x02
    3a3a:	c8 01       	movw	r24, r16
    3a3c:	b3 01       	movw	r22, r6
    3a3e:	a2 01       	movw	r20, r4
    3a40:	0e 94 22 07 	call	0xe44	; 0xe44 <clust2sect>
    3a44:	4b 01       	movw	r8, r22
    3a46:	5c 01       	movw	r10, r24
				dir = dj.fs->win;
    3a48:	0f 2e       	mov	r0, r31
    3a4a:	f2 e3       	ldi	r31, 0x32	; 50
    3a4c:	2f 2e       	mov	r2, r31
    3a4e:	33 24       	eor	r3, r3
    3a50:	f0 2d       	mov	r31, r0
    3a52:	20 0e       	add	r2, r16
    3a54:	31 1e       	adc	r3, r17
				mem_set(dir, 0, SS(dj.fs));
    3a56:	c1 01       	movw	r24, r2
    3a58:	60 e0       	ldi	r22, 0x00	; 0
    3a5a:	70 e0       	ldi	r23, 0x00	; 0
    3a5c:	40 e0       	ldi	r20, 0x00	; 0
    3a5e:	52 e0       	ldi	r21, 0x02	; 2
    3a60:	0e 94 75 00 	call	0xea	; 0xea <mem_set>
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
    3a64:	c1 01       	movw	r24, r2
    3a66:	60 e2       	ldi	r22, 0x20	; 32
    3a68:	70 e0       	ldi	r23, 0x00	; 0
    3a6a:	4b e0       	ldi	r20, 0x0B	; 11
    3a6c:	50 e0       	ldi	r21, 0x00	; 0
    3a6e:	0e 94 75 00 	call	0xea	; 0xea <mem_set>
				dir[DIR_Name] = '.';
    3a72:	8e e2       	ldi	r24, 0x2E	; 46
    3a74:	f8 01       	movw	r30, r16
    3a76:	82 ab       	sts	0x52, r24
				dir[DIR_Attr] = AM_DIR;
    3a78:	80 e1       	ldi	r24, 0x10	; 16
    3a7a:	85 af       	sts	0x75, r24
				ST_DWORD(dir+DIR_WrtTime, tim);
    3a7c:	cd a2       	lds	r28, 0x9d
    3a7e:	e8 5b       	subi	r30, 0xB8	; 184
    3a80:	ff 4f       	sbci	r31, 0xFF	; 255
    3a82:	c0 82       	st	Z, r12
    3a84:	8d 2d       	mov	r24, r13
    3a86:	99 27       	eor	r25, r25
    3a88:	8e a3       	lds	r24, 0x5e
    3a8a:	f8 01       	movw	r30, r16
    3a8c:	e7 5b       	subi	r30, 0xB7	; 183
    3a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a90:	80 83       	st	Z, r24
    3a92:	c7 01       	movw	r24, r14
    3a94:	aa 27       	eor	r26, r26
    3a96:	bb 27       	eor	r27, r27
    3a98:	8f a3       	lds	r24, 0x5f
    3a9a:	f8 01       	movw	r30, r16
    3a9c:	e6 5b       	subi	r30, 0xB6	; 182
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	80 83       	st	Z, r24
    3aa2:	cf 2c       	mov	r12, r15
    3aa4:	dd 24       	eor	r13, r13
    3aa6:	ee 24       	eor	r14, r14
    3aa8:	ff 24       	eor	r15, r15
    3aaa:	c8 a6       	lds	r28, 0xb8
    3aac:	f8 01       	movw	r30, r16
    3aae:	e5 5b       	subi	r30, 0xB5	; 181
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	c0 82       	st	Z, r12
				ST_CLUST(dir, dcl);
    3ab4:	49 a6       	lds	r20, 0xb9
    3ab6:	f8 01       	movw	r30, r16
    3ab8:	e4 5b       	subi	r30, 0xB4	; 180
    3aba:	ff 4f       	sbci	r31, 0xFF	; 255
    3abc:	40 82       	st	Z, r4
    3abe:	85 2d       	mov	r24, r5
    3ac0:	99 27       	eor	r25, r25
    3ac2:	d8 2e       	mov	r13, r24
    3ac4:	f8 01       	movw	r30, r16
    3ac6:	e3 5b       	subi	r30, 0xB3	; 179
    3ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aca:	80 83       	st	Z, r24
    3acc:	c3 01       	movw	r24, r6
    3ace:	aa 27       	eor	r26, r26
    3ad0:	bb 27       	eor	r27, r27
    3ad2:	e8 2e       	mov	r14, r24
    3ad4:	f8 01       	movw	r30, r16
    3ad6:	ea 5b       	subi	r30, 0xBA	; 186
    3ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ada:	80 83       	st	Z, r24
    3adc:	89 2f       	mov	r24, r25
    3ade:	99 27       	eor	r25, r25
    3ae0:	f8 2e       	mov	r15, r24
    3ae2:	f8 01       	movw	r30, r16
    3ae4:	e9 5b       	subi	r30, 0xB9	; 185
    3ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae8:	80 83       	st	Z, r24
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
    3aea:	c8 01       	movw	r24, r16
    3aec:	8e 5a       	subi	r24, 0xAE	; 174
    3aee:	9f 4f       	sbci	r25, 0xFF	; 255
    3af0:	b1 01       	movw	r22, r2
    3af2:	40 e2       	ldi	r20, 0x20	; 32
    3af4:	50 e0       	ldi	r21, 0x00	; 0
    3af6:	0e 94 68 00 	call	0xd0	; 0xd0 <mem_cpy>
				dir[33] = '.'; pcl = dj.sclust;
    3afa:	f8 01       	movw	r30, r16
    3afc:	ed 5a       	subi	r30, 0xAD	; 173
    3afe:	ff 4f       	sbci	r31, 0xFF	; 255
    3b00:	8e e2       	ldi	r24, 0x2E	; 46
    3b02:	80 83       	st	Z, r24
    3b04:	4f 81       	ldd	r20, Y+7	; 0x07
    3b06:	58 85       	ldd	r21, Y+8	; 0x08
    3b08:	69 85       	ldd	r22, Y+9	; 0x09
    3b0a:	7a 85       	ldd	r23, Y+10	; 0x0a
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
    3b0c:	29 81       	ldd	r18, Y+1	; 0x01
    3b0e:	3a 81       	ldd	r19, Y+2	; 0x02
    3b10:	f9 01       	movw	r30, r18
    3b12:	80 81       	ld	r24, Z
    3b14:	83 30       	cpi	r24, 0x03	; 3
    3b16:	61 f4       	brne	.+24     	; 0x3b30 <f_mkdir+0x1c4>
    3b18:	86 a1       	lds	r24, 0x46
    3b1a:	97 a1       	lds	r25, 0x47
    3b1c:	a0 a5       	lds	r26, 0x60
    3b1e:	b1 a5       	lds	r27, 0x61
    3b20:	84 17       	cp	r24, r20
    3b22:	95 07       	cpc	r25, r21
    3b24:	a6 07       	cpc	r26, r22
    3b26:	b7 07       	cpc	r27, r23
    3b28:	19 f4       	brne	.+6      	; 0x3b30 <f_mkdir+0x1c4>
					pcl = 0;
    3b2a:	40 e0       	ldi	r20, 0x00	; 0
    3b2c:	50 e0       	ldi	r21, 0x00	; 0
    3b2e:	ba 01       	movw	r22, r20
				ST_CLUST(dir+SZ_DIR, pcl);
    3b30:	f8 01       	movw	r30, r16
    3b32:	e4 59       	subi	r30, 0x94	; 148
    3b34:	ff 4f       	sbci	r31, 0xFF	; 255
    3b36:	40 83       	st	Z, r20
    3b38:	f8 01       	movw	r30, r16
    3b3a:	e3 59       	subi	r30, 0x93	; 147
    3b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3e:	50 83       	st	Z, r21
    3b40:	ab 01       	movw	r20, r22
    3b42:	66 27       	eor	r22, r22
    3b44:	77 27       	eor	r23, r23
    3b46:	f8 01       	movw	r30, r16
    3b48:	ea 59       	subi	r30, 0x9A	; 154
    3b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4c:	40 83       	st	Z, r20
    3b4e:	f8 01       	movw	r30, r16
    3b50:	e9 59       	subi	r30, 0x99	; 153
    3b52:	ff 4f       	sbci	r31, 0xFF	; 255
    3b54:	50 83       	st	Z, r21
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    3b56:	f9 01       	movw	r30, r18
    3b58:	02 81       	ldd	r16, Z+2	; 0x02
    3b5a:	00 23       	and	r16, r16
    3b5c:	09 f4       	brne	.+2      	; 0x3b60 <f_mkdir+0x1f4>
    3b5e:	6f c0       	rjmp	.+222    	; 0x3c3e <f_mkdir+0x2d2>
					dj.fs->winsect = dsc++;
					dj.fs->wflag = 1;
    3b60:	cc 24       	eor	r12, r12
    3b62:	c3 94       	inc	r12
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
    3b64:	89 81       	ldd	r24, Y+1	; 0x01
    3b66:	9a 81       	ldd	r25, Y+2	; 0x02
    3b68:	fc 01       	movw	r30, r24
    3b6a:	86 a6       	lds	r24, 0xb6
    3b6c:	97 a6       	lds	r25, 0xb7
    3b6e:	a0 aa       	sts	0x90, r26
    3b70:	b1 aa       	sts	0x91, r27
    3b72:	08 94       	sec
    3b74:	81 1c       	adc	r8, r1
    3b76:	91 1c       	adc	r9, r1
    3b78:	a1 1c       	adc	r10, r1
    3b7a:	b1 1c       	adc	r11, r1
					dj.fs->wflag = 1;
    3b7c:	c4 82       	std	Z+4, r12	; 0x04
					res = move_window(dj.fs, 0);
    3b7e:	40 e0       	ldi	r20, 0x00	; 0
    3b80:	50 e0       	ldi	r21, 0x00	; 0
    3b82:	ba 01       	movw	r22, r20
    3b84:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
    3b88:	18 2f       	mov	r17, r24
					if (res != FR_OK) break;
    3b8a:	88 23       	and	r24, r24
    3b8c:	51 f4       	brne	.+20     	; 0x3ba2 <f_mkdir+0x236>
					mem_set(dir, 0, SS(dj.fs));
    3b8e:	c1 01       	movw	r24, r2
    3b90:	60 e0       	ldi	r22, 0x00	; 0
    3b92:	70 e0       	ldi	r23, 0x00	; 0
    3b94:	40 e0       	ldi	r20, 0x00	; 0
    3b96:	52 e0       	ldi	r21, 0x02	; 2
    3b98:	0e 94 75 00 	call	0xea	; 0xea <mem_set>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    3b9c:	01 50       	subi	r16, 0x01	; 1
    3b9e:	11 f7       	brne	.-60     	; 0x3b64 <f_mkdir+0x1f8>
    3ba0:	4e c0       	rjmp	.+156    	; 0x3c3e <f_mkdir+0x2d2>
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
			if (res != FR_OK) {
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
    3ba2:	89 81       	ldd	r24, Y+1	; 0x01
    3ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba6:	b3 01       	movw	r22, r6
    3ba8:	a2 01       	movw	r20, r4
    3baa:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <remove_chain>
    3bae:	19 c0       	rjmp	.+50     	; 0x3be2 <f_mkdir+0x276>
			} else {
				dir = dj.dir;
    3bb0:	eb 89       	ldd	r30, Y+19	; 0x13
    3bb2:	fc 89       	ldd	r31, Y+20	; 0x14
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
    3bb4:	80 e1       	ldi	r24, 0x10	; 16
    3bb6:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
    3bb8:	8d a1       	lds	r24, 0x4d
    3bba:	86 8b       	std	Z+22, r24	; 0x16
    3bbc:	8e a1       	lds	r24, 0x4e
    3bbe:	87 8b       	std	Z+23, r24	; 0x17
    3bc0:	8f a1       	lds	r24, 0x4f
    3bc2:	80 8f       	std	Z+24, r24	; 0x18
    3bc4:	88 a5       	lds	r24, 0x68
    3bc6:	81 8f       	std	Z+25, r24	; 0x19
				ST_CLUST(dir, dcl);					/* Table start cluster */
    3bc8:	89 a5       	lds	r24, 0x69
    3bca:	82 8f       	std	Z+26, r24	; 0x1a
    3bcc:	d3 8e       	std	Z+27, r13	; 0x1b
    3bce:	e4 8a       	std	Z+20, r14	; 0x14
    3bd0:	f5 8a       	std	Z+21, r15	; 0x15
				dj.fs->wflag = 1;
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
    3bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd6:	21 e0       	ldi	r18, 0x01	; 1
    3bd8:	fc 01       	movw	r30, r24
    3bda:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    3bdc:	0e 94 90 06 	call	0xd20	; 0xd20 <sync>
    3be0:	18 2f       	mov	r17, r24
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    3be2:	81 2f       	mov	r24, r17
    3be4:	a9 96       	adiw	r28, 0x29	; 41
    3be6:	0f b6       	in	r0, 0x3f	; 63
    3be8:	f8 94       	cli
    3bea:	de bf       	out	0x3e, r29	; 62
    3bec:	0f be       	out	0x3f, r0	; 63
    3bee:	cd bf       	out	0x3d, r28	; 61
    3bf0:	df 91       	pop	r29
    3bf2:	cf 91       	pop	r28
    3bf4:	1f 91       	pop	r17
    3bf6:	0f 91       	pop	r16
    3bf8:	ff 90       	pop	r15
    3bfa:	ef 90       	pop	r14
    3bfc:	df 90       	pop	r13
    3bfe:	cf 90       	pop	r12
    3c00:	bf 90       	pop	r11
    3c02:	af 90       	pop	r10
    3c04:	9f 90       	pop	r9
    3c06:	8f 90       	pop	r8
    3c08:	7f 90       	pop	r7
    3c0a:	6f 90       	pop	r6
    3c0c:	5f 90       	pop	r5
    3c0e:	4f 90       	pop	r4
    3c10:	3f 90       	pop	r3
    3c12:	2f 90       	pop	r2
    3c14:	08 95       	ret
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
    3c16:	89 81       	ldd	r24, Y+1	; 0x01
    3c18:	9a 81       	ldd	r25, Y+2	; 0x02
    3c1a:	40 e0       	ldi	r20, 0x00	; 0
    3c1c:	50 e0       	ldi	r21, 0x00	; 0
    3c1e:	ba 01       	movw	r22, r20
    3c20:	0e 94 38 0a 	call	0x1470	; 0x1470 <create_chain>
    3c24:	2b 01       	movw	r4, r22
    3c26:	3c 01       	movw	r6, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    3c28:	61 15       	cp	r22, r1
    3c2a:	71 05       	cpc	r23, r1
    3c2c:	81 05       	cpc	r24, r1
    3c2e:	91 05       	cpc	r25, r1
    3c30:	09 f4       	brne	.+2      	; 0x3c34 <f_mkdir+0x2c8>
    3c32:	f2 ce       	rjmp	.-540    	; 0x3a18 <f_mkdir+0xac>
    3c34:	df ce       	rjmp	.-578    	; 0x39f4 <f_mkdir+0x88>
			if (dcl == 1) res = FR_INT_ERR;
    3c36:	12 e0       	ldi	r17, 0x02	; 2
    3c38:	b4 cf       	rjmp	.-152    	; 0x3ba2 <f_mkdir+0x236>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    3c3a:	11 e0       	ldi	r17, 0x01	; 1
    3c3c:	b2 cf       	rjmp	.-156    	; 0x3ba2 <f_mkdir+0x236>
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
    3c3e:	ce 01       	movw	r24, r28
    3c40:	01 96       	adiw	r24, 0x01	; 1
    3c42:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <dir_register>
    3c46:	18 2f       	mov	r17, r24
			if (res != FR_OK) {
    3c48:	88 23       	and	r24, r24
    3c4a:	09 f4       	brne	.+2      	; 0x3c4e <f_mkdir+0x2e2>
    3c4c:	b1 cf       	rjmp	.-158    	; 0x3bb0 <f_mkdir+0x244>
    3c4e:	a9 cf       	rjmp	.-174    	; 0x3ba2 <f_mkdir+0x236>

00003c50 <f_chmod>:
FRESULT f_chmod (
	const TCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    3c50:	0f 93       	push	r16
    3c52:	1f 93       	push	r17
    3c54:	cf 93       	push	r28
    3c56:	df 93       	push	r29
    3c58:	cd b7       	in	r28, 0x3d	; 61
    3c5a:	de b7       	in	r29, 0x3e	; 62
    3c5c:	a4 97       	sbiw	r28, 0x24	; 36
    3c5e:	0f b6       	in	r0, 0x3f	; 63
    3c60:	f8 94       	cli
    3c62:	de bf       	out	0x3e, r29	; 62
    3c64:	0f be       	out	0x3f, r0	; 63
    3c66:	cd bf       	out	0x3d, r28	; 61
    3c68:	9c a3       	lds	r25, 0x5c
    3c6a:	8b a3       	lds	r24, 0x5b
    3c6c:	06 2f       	mov	r16, r22
    3c6e:	14 2f       	mov	r17, r20
	DIRS dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    3c70:	ce 01       	movw	r24, r28
    3c72:	83 96       	adiw	r24, 0x23	; 35
    3c74:	be 01       	movw	r22, r28
    3c76:	6f 5f       	subi	r22, 0xFF	; 255
    3c78:	7f 4f       	sbci	r23, 0xFF	; 255
    3c7a:	41 e0       	ldi	r20, 0x01	; 1
    3c7c:	0e 94 ca 01 	call	0x394	; 0x394 <chk_mounted>
	if (res == FR_OK) {
    3c80:	88 23       	and	r24, r24
    3c82:	29 f5       	brne	.+74     	; 0x3cce <f_chmod+0x7e>
		INIT_BUF(dj);
    3c84:	ce 01       	movw	r24, r28
    3c86:	47 96       	adiw	r24, 0x17	; 23
    3c88:	9e 8b       	std	Y+22, r25	; 0x16
    3c8a:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the file path */
    3c8c:	6b a1       	lds	r22, 0x4b
    3c8e:	7c a1       	lds	r23, 0x4c
    3c90:	ce 01       	movw	r24, r28
    3c92:	01 96       	adiw	r24, 0x01	; 1
    3c94:	0e 94 9f 0c 	call	0x193e	; 0x193e <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    3c98:	88 23       	and	r24, r24
    3c9a:	c9 f4       	brne	.+50     	; 0x3cce <f_chmod+0x7e>
    3c9c:	ed 89       	ldd	r30, Y+21	; 0x15
    3c9e:	fe 89       	ldd	r31, Y+22	; 0x16
    3ca0:	83 85       	ldd	r24, Z+11	; 0x0b
    3ca2:	85 ff       	sbrs	r24, 5
    3ca4:	1f c0       	rjmp	.+62     	; 0x3ce4 <f_chmod+0x94>
			res = FR_INVALID_NAME;
    3ca6:	86 e0       	ldi	r24, 0x06	; 6
    3ca8:	12 c0       	rjmp	.+36     	; 0x3cce <f_chmod+0x7e>
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    3caa:	17 72       	andi	r17, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    3cac:	91 2f       	mov	r25, r17
    3cae:	90 95       	com	r25
    3cb0:	83 85       	ldd	r24, Z+11	; 0x0b
    3cb2:	89 23       	and	r24, r25
    3cb4:	01 23       	and	r16, r17
    3cb6:	18 2f       	mov	r17, r24
    3cb8:	10 2b       	or	r17, r16
    3cba:	13 87       	std	Z+11, r17	; 0x0b
				dj.fs->wflag = 1;
    3cbc:	89 81       	ldd	r24, Y+1	; 0x01
    3cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc0:	21 e0       	ldi	r18, 0x01	; 1
    3cc2:	fc 01       	movw	r30, r24
    3cc4:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    3cc6:	0e 94 90 06 	call	0xd20	; 0xd20 <sync>
    3cca:	01 c0       	rjmp	.+2      	; 0x3cce <f_chmod+0x7e>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
    3ccc:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3cce:	a4 96       	adiw	r28, 0x24	; 36
    3cd0:	0f b6       	in	r0, 0x3f	; 63
    3cd2:	f8 94       	cli
    3cd4:	de bf       	out	0x3e, r29	; 62
    3cd6:	0f be       	out	0x3f, r0	; 63
    3cd8:	cd bf       	out	0x3d, r28	; 61
    3cda:	df 91       	pop	r29
    3cdc:	cf 91       	pop	r28
    3cde:	1f 91       	pop	r17
    3ce0:	0f 91       	pop	r16
    3ce2:	08 95       	ret
		res = follow_path(&dj, path);		/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    3ce4:	eb 89       	ldd	r30, Y+19	; 0x13
    3ce6:	fc 89       	ldd	r31, Y+20	; 0x14
			if (!dir) {						/* Is it a root directory? */
    3ce8:	30 97       	sbiw	r30, 0x00	; 0
    3cea:	f9 f6       	brne	.-66     	; 0x3caa <f_chmod+0x5a>
    3cec:	ef cf       	rjmp	.-34     	; 0x3ccc <f_chmod+0x7c>

00003cee <f_utime>:

FRESULT f_utime (
	const TCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the time stamp to be set */
)
{
    3cee:	0f 93       	push	r16
    3cf0:	1f 93       	push	r17
    3cf2:	cf 93       	push	r28
    3cf4:	df 93       	push	r29
    3cf6:	cd b7       	in	r28, 0x3d	; 61
    3cf8:	de b7       	in	r29, 0x3e	; 62
    3cfa:	a4 97       	sbiw	r28, 0x24	; 36
    3cfc:	0f b6       	in	r0, 0x3f	; 63
    3cfe:	f8 94       	cli
    3d00:	de bf       	out	0x3e, r29	; 62
    3d02:	0f be       	out	0x3f, r0	; 63
    3d04:	cd bf       	out	0x3d, r28	; 61
    3d06:	9c a3       	lds	r25, 0x5c
    3d08:	8b a3       	lds	r24, 0x5b
    3d0a:	8b 01       	movw	r16, r22
	DIRS dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    3d0c:	ce 01       	movw	r24, r28
    3d0e:	83 96       	adiw	r24, 0x23	; 35
    3d10:	be 01       	movw	r22, r28
    3d12:	6f 5f       	subi	r22, 0xFF	; 255
    3d14:	7f 4f       	sbci	r23, 0xFF	; 255
    3d16:	41 e0       	ldi	r20, 0x01	; 1
    3d18:	0e 94 ca 01 	call	0x394	; 0x394 <chk_mounted>
	if (res == FR_OK) {
    3d1c:	88 23       	and	r24, r24
    3d1e:	61 f5       	brne	.+88     	; 0x3d78 <f_utime+0x8a>
		INIT_BUF(dj);
    3d20:	ce 01       	movw	r24, r28
    3d22:	47 96       	adiw	r24, 0x17	; 23
    3d24:	9e 8b       	std	Y+22, r25	; 0x16
    3d26:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    3d28:	6b a1       	lds	r22, 0x4b
    3d2a:	7c a1       	lds	r23, 0x4c
    3d2c:	ce 01       	movw	r24, r28
    3d2e:	01 96       	adiw	r24, 0x01	; 1
    3d30:	0e 94 9f 0c 	call	0x193e	; 0x193e <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    3d34:	88 23       	and	r24, r24
    3d36:	01 f5       	brne	.+64     	; 0x3d78 <f_utime+0x8a>
    3d38:	ed 89       	ldd	r30, Y+21	; 0x15
    3d3a:	fe 89       	ldd	r31, Y+22	; 0x16
    3d3c:	83 85       	ldd	r24, Z+11	; 0x0b
    3d3e:	85 ff       	sbrs	r24, 5
    3d40:	26 c0       	rjmp	.+76     	; 0x3d8e <f_utime+0xa0>
			res = FR_INVALID_NAME;
    3d42:	86 e0       	ldi	r24, 0x06	; 6
    3d44:	19 c0       	rjmp	.+50     	; 0x3d78 <f_utime+0x8a>
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    3d46:	d8 01       	movw	r26, r16
    3d48:	16 96       	adiw	r26, 0x06	; 6
    3d4a:	8c 91       	ld	r24, X
    3d4c:	16 97       	sbiw	r26, 0x06	; 6
    3d4e:	86 8b       	std	Z+22, r24	; 0x16
    3d50:	17 96       	adiw	r26, 0x07	; 7
    3d52:	8c 91       	ld	r24, X
    3d54:	17 97       	sbiw	r26, 0x07	; 7
    3d56:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    3d58:	14 96       	adiw	r26, 0x04	; 4
    3d5a:	8c 91       	ld	r24, X
    3d5c:	14 97       	sbiw	r26, 0x04	; 4
    3d5e:	80 8f       	std	Z+24, r24	; 0x18
    3d60:	15 96       	adiw	r26, 0x05	; 5
    3d62:	8c 91       	ld	r24, X
    3d64:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    3d66:	89 81       	ldd	r24, Y+1	; 0x01
    3d68:	9a 81       	ldd	r25, Y+2	; 0x02
    3d6a:	21 e0       	ldi	r18, 0x01	; 1
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    3d70:	0e 94 90 06 	call	0xd20	; 0xd20 <sync>
    3d74:	01 c0       	rjmp	.+2      	; 0x3d78 <f_utime+0x8a>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
    3d76:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3d78:	a4 96       	adiw	r28, 0x24	; 36
    3d7a:	0f b6       	in	r0, 0x3f	; 63
    3d7c:	f8 94       	cli
    3d7e:	de bf       	out	0x3e, r29	; 62
    3d80:	0f be       	out	0x3f, r0	; 63
    3d82:	cd bf       	out	0x3d, r28	; 61
    3d84:	df 91       	pop	r29
    3d86:	cf 91       	pop	r28
    3d88:	1f 91       	pop	r17
    3d8a:	0f 91       	pop	r16
    3d8c:	08 95       	ret
		res = follow_path(&dj, path);	/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    3d8e:	eb 89       	ldd	r30, Y+19	; 0x13
    3d90:	fc 89       	ldd	r31, Y+20	; 0x14
			if (!dir) {					/* Root directory */
    3d92:	30 97       	sbiw	r30, 0x00	; 0
    3d94:	c1 f6       	brne	.-80     	; 0x3d46 <f_utime+0x58>
    3d96:	ef cf       	rjmp	.-34     	; 0x3d76 <f_utime+0x88>

00003d98 <f_rename>:

FRESULT f_rename (
	const TCHAR *path_old,	/* Pointer to the old name */
	const TCHAR *path_new	/* Pointer to the new name */
)
{
    3d98:	ef 92       	push	r14
    3d9a:	ff 92       	push	r15
    3d9c:	0f 93       	push	r16
    3d9e:	1f 93       	push	r17
    3da0:	cf 93       	push	r28
    3da2:	df 93       	push	r29
    3da4:	cd b7       	in	r28, 0x3d	; 61
    3da6:	de b7       	in	r29, 0x3e	; 62
    3da8:	cf 54       	subi	r28, 0x4F	; 79
    3daa:	d0 40       	sbci	r29, 0x00	; 0
    3dac:	0f b6       	in	r0, 0x3f	; 63
    3dae:	f8 94       	cli
    3db0:	de bf       	out	0x3e, r29	; 62
    3db2:	0f be       	out	0x3f, r0	; 63
    3db4:	cd bf       	out	0x3d, r28	; 61
    3db6:	60 96       	adiw	r28, 0x10	; 16
    3db8:	9f af       	sts	0x7f, r25
    3dba:	8e af       	sts	0x7e, r24
    3dbc:	60 97       	sbiw	r28, 0x10	; 16
    3dbe:	8b 01       	movw	r16, r22
	BYTE buf[21], *dir;
	DWORD dw;
	DEF_NAMEBUF;


	res = chk_mounted(&path_old, &djo.fs, 1);
    3dc0:	ce 01       	movw	r24, r28
    3dc2:	82 5b       	subi	r24, 0xB2	; 178
    3dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc6:	be 01       	movw	r22, r28
    3dc8:	6f 5f       	subi	r22, 0xFF	; 255
    3dca:	7f 4f       	sbci	r23, 0xFF	; 255
    3dcc:	41 e0       	ldi	r20, 0x01	; 1
    3dce:	0e 94 ca 01 	call	0x394	; 0x394 <chk_mounted>
	if (res == FR_OK) {
    3dd2:	88 23       	and	r24, r24
    3dd4:	09 f0       	breq	.+2      	; 0x3dd8 <f_rename+0x40>
    3dd6:	d1 c0       	rjmp	.+418    	; 0x3f7a <f_rename+0x1e2>
		djn.fs = djo.fs;
    3dd8:	89 81       	ldd	r24, Y+1	; 0x01
    3dda:	9a 81       	ldd	r25, Y+2	; 0x02
    3ddc:	98 8f       	std	Y+24, r25	; 0x18
    3dde:	8f 8b       	std	Y+23, r24	; 0x17
		INIT_BUF(djo);
    3de0:	ce 01       	movw	r24, r28
    3de2:	8e 5b       	subi	r24, 0xBE	; 190
    3de4:	9f 4f       	sbci	r25, 0xFF	; 255
    3de6:	9e 8b       	std	Y+22, r25	; 0x16
    3de8:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&djo, path_old);		/* Check old object */
    3dea:	60 96       	adiw	r28, 0x10	; 16
    3dec:	6e ad       	sts	0x6e, r22
    3dee:	7f ad       	sts	0x6f, r23
    3df0:	60 97       	sbiw	r28, 0x10	; 16
    3df2:	ce 01       	movw	r24, r28
    3df4:	01 96       	adiw	r24, 0x01	; 1
    3df6:	0e 94 9f 0c 	call	0x193e	; 0x193e <follow_path>
		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
    3dfa:	88 23       	and	r24, r24
    3dfc:	09 f0       	breq	.+2      	; 0x3e00 <f_rename+0x68>
    3dfe:	bd c0       	rjmp	.+378    	; 0x3f7a <f_rename+0x1e2>
    3e00:	ed 89       	ldd	r30, Y+21	; 0x15
    3e02:	fe 89       	ldd	r31, Y+22	; 0x16
    3e04:	83 85       	ldd	r24, Z+11	; 0x0b
    3e06:	85 ff       	sbrs	r24, 5
    3e08:	c6 c0       	rjmp	.+396    	; 0x3f96 <f_rename+0x1fe>
			res = FR_INVALID_NAME;
    3e0a:	86 e0       	ldi	r24, 0x06	; 6
    3e0c:	b6 c0       	rjmp	.+364    	; 0x3f7a <f_rename+0x1e2>
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
    3e0e:	65 5f       	subi	r22, 0xF5	; 245
    3e10:	7f 4f       	sbci	r23, 0xFF	; 255
    3e12:	ce 01       	movw	r24, r28
    3e14:	8d 96       	adiw	r24, 0x2d	; 45
    3e16:	45 e1       	ldi	r20, 0x15	; 21
    3e18:	50 e0       	ldi	r21, 0x00	; 0
    3e1a:	0e 94 68 00 	call	0xd0	; 0xd0 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof(DIRS));		/* Check new object */
    3e1e:	ce 01       	movw	r24, r28
    3e20:	47 96       	adiw	r24, 0x17	; 23
    3e22:	be 01       	movw	r22, r28
    3e24:	6f 5f       	subi	r22, 0xFF	; 255
    3e26:	7f 4f       	sbci	r23, 0xFF	; 255
    3e28:	46 e1       	ldi	r20, 0x16	; 22
    3e2a:	50 e0       	ldi	r21, 0x00	; 0
    3e2c:	0e 94 68 00 	call	0xd0	; 0xd0 <mem_cpy>
				res = follow_path(&djn, path_new);
    3e30:	ce 01       	movw	r24, r28
    3e32:	47 96       	adiw	r24, 0x17	; 23
    3e34:	b8 01       	movw	r22, r16
    3e36:	0e 94 9f 0c 	call	0x193e	; 0x193e <follow_path>
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    3e3a:	88 23       	and	r24, r24
    3e3c:	09 f4       	brne	.+2      	; 0x3e40 <f_rename+0xa8>
    3e3e:	9a c0       	rjmp	.+308    	; 0x3f74 <f_rename+0x1dc>
				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
    3e40:	84 30       	cpi	r24, 0x04	; 4
    3e42:	09 f0       	breq	.+2      	; 0x3e46 <f_rename+0xae>
    3e44:	9a c0       	rjmp	.+308    	; 0x3f7a <f_rename+0x1e2>
/* Start critical section that any interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
    3e46:	ce 01       	movw	r24, r28
    3e48:	47 96       	adiw	r24, 0x17	; 23
    3e4a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <dir_register>
					if (res == FR_OK) {
    3e4e:	88 23       	and	r24, r24
    3e50:	09 f0       	breq	.+2      	; 0x3e54 <f_rename+0xbc>
    3e52:	93 c0       	rjmp	.+294    	; 0x3f7a <f_rename+0x1e2>
						dir = djn.dir;					/* Copy object information except for name */
    3e54:	09 a5       	lds	r16, 0x69
    3e56:	1a a5       	lds	r17, 0x6a
						mem_cpy(dir+13, buf+2, 19);
    3e58:	c8 01       	movw	r24, r16
    3e5a:	0d 96       	adiw	r24, 0x0d	; 13
    3e5c:	be 01       	movw	r22, r28
    3e5e:	61 5d       	subi	r22, 0xD1	; 209
    3e60:	7f 4f       	sbci	r23, 0xFF	; 255
    3e62:	43 e1       	ldi	r20, 0x13	; 19
    3e64:	50 e0       	ldi	r21, 0x00	; 0
    3e66:	0e 94 68 00 	call	0xd0	; 0xd0 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
    3e6a:	8d a5       	lds	r24, 0x6d
    3e6c:	80 62       	ori	r24, 0x20	; 32
    3e6e:	f8 01       	movw	r30, r16
    3e70:	83 87       	std	Z+11, r24	; 0x0b
						djo.fs->wflag = 1;
    3e72:	e9 81       	ldd	r30, Y+1	; 0x01
    3e74:	fa 81       	ldd	r31, Y+2	; 0x02
    3e76:	81 e0       	ldi	r24, 0x01	; 1
    3e78:	84 83       	std	Z+4, r24	; 0x04
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
    3e7a:	4f 81       	ldd	r20, Y+7	; 0x07
    3e7c:	58 85       	ldd	r21, Y+8	; 0x08
    3e7e:	69 85       	ldd	r22, Y+9	; 0x09
    3e80:	7a 85       	ldd	r23, Y+10	; 0x0a
    3e82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e86:	af 8d       	ldd	r26, Y+31	; 0x1f
    3e88:	b8 a1       	lds	r27, 0x48
    3e8a:	48 17       	cp	r20, r24
    3e8c:	59 07       	cpc	r21, r25
    3e8e:	6a 07       	cpc	r22, r26
    3e90:	7b 07       	cpc	r23, r27
    3e92:	09 f4       	brne	.+2      	; 0x3e96 <f_rename+0xfe>
    3e94:	64 c0       	rjmp	.+200    	; 0x3f5e <f_rename+0x1c6>
    3e96:	f8 01       	movw	r30, r16
    3e98:	83 85       	ldd	r24, Z+11	; 0x0b
    3e9a:	84 ff       	sbrs	r24, 4
    3e9c:	60 c0       	rjmp	.+192    	; 0x3f5e <f_rename+0x1c6>
							dw = clust2sect(djn.fs, LD_CLUST(dir));
    3e9e:	ef 88       	ldd	r14, Y+23	; 0x17
    3ea0:	f8 8c       	ldd	r15, Y+24	; 0x18
    3ea2:	35 89       	ldd	r19, Z+21	; 0x15
    3ea4:	20 e0       	ldi	r18, 0x00	; 0
    3ea6:	84 89       	ldd	r24, Z+20	; 0x14
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	82 2b       	or	r24, r18
    3eac:	93 2b       	or	r25, r19
    3eae:	ac 01       	movw	r20, r24
    3eb0:	60 e0       	ldi	r22, 0x00	; 0
    3eb2:	70 e0       	ldi	r23, 0x00	; 0
    3eb4:	ba 01       	movw	r22, r20
    3eb6:	55 27       	eor	r21, r21
    3eb8:	44 27       	eor	r20, r20
    3eba:	33 8d       	ldd	r19, Z+27	; 0x1b
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
    3ebe:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	82 2b       	or	r24, r18
    3ec4:	93 2b       	or	r25, r19
    3ec6:	a0 e0       	ldi	r26, 0x00	; 0
    3ec8:	b0 e0       	ldi	r27, 0x00	; 0
    3eca:	48 2b       	or	r20, r24
    3ecc:	59 2b       	or	r21, r25
    3ece:	6a 2b       	or	r22, r26
    3ed0:	7b 2b       	or	r23, r27
    3ed2:	c7 01       	movw	r24, r14
    3ed4:	0e 94 22 07 	call	0xe44	; 0xe44 <clust2sect>
    3ed8:	ab 01       	movw	r20, r22
    3eda:	bc 01       	movw	r22, r24
							if (!dw) {
    3edc:	41 15       	cp	r20, r1
    3ede:	51 05       	cpc	r21, r1
    3ee0:	61 05       	cpc	r22, r1
    3ee2:	71 05       	cpc	r23, r1
    3ee4:	09 f4       	brne	.+2      	; 0x3ee8 <f_rename+0x150>
    3ee6:	5e c0       	rjmp	.+188    	; 0x3fa4 <f_rename+0x20c>
								res = FR_INT_ERR;
							} else {
								res = move_window(djn.fs, dw);
    3ee8:	c7 01       	movw	r24, r14
    3eea:	0e 94 05 06 	call	0xc0a	; 0xc0a <move_window>
								dir = djn.fs->win+SZ_DIR;	/* .. entry */
    3eee:	ef 89       	ldd	r30, Y+23	; 0x17
    3ef0:	f8 8d       	ldd	r31, Y+24	; 0x18
								if (res == FR_OK && dir[1] == '.') {
    3ef2:	88 23       	and	r24, r24
    3ef4:	09 f0       	breq	.+2      	; 0x3ef8 <f_rename+0x160>
    3ef6:	41 c0       	rjmp	.+130    	; 0x3f7a <f_rename+0x1e2>
    3ef8:	df 01       	movw	r26, r30
    3efa:	ad 5a       	subi	r26, 0xAD	; 173
    3efc:	bf 4f       	sbci	r27, 0xFF	; 255
    3efe:	8c 91       	ld	r24, X
    3f00:	8e 32       	cpi	r24, 0x2E	; 46
    3f02:	69 f5       	brne	.+90     	; 0x3f5e <f_rename+0x1c6>
									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
    3f04:	80 81       	ld	r24, Z
    3f06:	83 30       	cpi	r24, 0x03	; 3
    3f08:	69 f4       	brne	.+26     	; 0x3f24 <f_rename+0x18c>
    3f0a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    3f0c:	5e 8d       	ldd	r21, Y+30	; 0x1e
    3f0e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3f10:	78 a1       	lds	r23, 0x48
    3f12:	86 a1       	lds	r24, 0x46
    3f14:	97 a1       	lds	r25, 0x47
    3f16:	a0 a5       	lds	r26, 0x60
    3f18:	b1 a5       	lds	r27, 0x61
    3f1a:	48 17       	cp	r20, r24
    3f1c:	59 07       	cpc	r21, r25
    3f1e:	6a 07       	cpc	r22, r26
    3f20:	7b 07       	cpc	r23, r27
    3f22:	29 f0       	breq	.+10     	; 0x3f2e <f_rename+0x196>
    3f24:	4d 8d       	ldd	r20, Y+29	; 0x1d
    3f26:	5e 8d       	ldd	r21, Y+30	; 0x1e
    3f28:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3f2a:	78 a1       	lds	r23, 0x48
    3f2c:	03 c0       	rjmp	.+6      	; 0x3f34 <f_rename+0x19c>
    3f2e:	40 e0       	ldi	r20, 0x00	; 0
    3f30:	50 e0       	ldi	r21, 0x00	; 0
    3f32:	ba 01       	movw	r22, r20
									ST_CLUST(dir, dw);
    3f34:	df 01       	movw	r26, r30
    3f36:	a4 59       	subi	r26, 0x94	; 148
    3f38:	bf 4f       	sbci	r27, 0xFF	; 255
    3f3a:	4c 93       	st	X, r20
    3f3c:	df 01       	movw	r26, r30
    3f3e:	a3 59       	subi	r26, 0x93	; 147
    3f40:	bf 4f       	sbci	r27, 0xFF	; 255
    3f42:	5c 93       	st	X, r21
    3f44:	ab 01       	movw	r20, r22
    3f46:	66 27       	eor	r22, r22
    3f48:	77 27       	eor	r23, r23
    3f4a:	df 01       	movw	r26, r30
    3f4c:	aa 59       	subi	r26, 0x9A	; 154
    3f4e:	bf 4f       	sbci	r27, 0xFF	; 255
    3f50:	4c 93       	st	X, r20
    3f52:	df 01       	movw	r26, r30
    3f54:	a9 59       	subi	r26, 0x99	; 153
    3f56:	bf 4f       	sbci	r27, 0xFF	; 255
    3f58:	5c 93       	st	X, r21
									djn.fs->wflag = 1;
    3f5a:	81 e0       	ldi	r24, 0x01	; 1
    3f5c:	84 83       	std	Z+4, r24	; 0x04
								}
							}
						}
						if (res == FR_OK) {
							res = dir_remove(&djo);		/* Remove old entry */
    3f5e:	ce 01       	movw	r24, r28
    3f60:	01 96       	adiw	r24, 0x01	; 1
    3f62:	0e 94 29 09 	call	0x1252	; 0x1252 <dir_remove>
							if (res == FR_OK)
    3f66:	88 23       	and	r24, r24
    3f68:	41 f4       	brne	.+16     	; 0x3f7a <f_rename+0x1e2>
								res = sync(djo.fs);
    3f6a:	89 81       	ldd	r24, Y+1	; 0x01
    3f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f6e:	0e 94 90 06 	call	0xd20	; 0xd20 <sync>
    3f72:	03 c0       	rjmp	.+6      	; 0x3f7a <f_rename+0x1e2>
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
				mem_cpy(&djn, &djo, sizeof(DIRS));		/* Check new object */
				res = follow_path(&djn, path_new);
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    3f74:	88 e0       	ldi	r24, 0x08	; 8
    3f76:	01 c0       	rjmp	.+2      	; 0x3f7a <f_rename+0x1e2>
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
    3f78:	84 e0       	ldi	r24, 0x04	; 4
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
    3f7a:	c1 5b       	subi	r28, 0xB1	; 177
    3f7c:	df 4f       	sbci	r29, 0xFF	; 255
    3f7e:	0f b6       	in	r0, 0x3f	; 63
    3f80:	f8 94       	cli
    3f82:	de bf       	out	0x3e, r29	; 62
    3f84:	0f be       	out	0x3f, r0	; 63
    3f86:	cd bf       	out	0x3d, r28	; 61
    3f88:	df 91       	pop	r29
    3f8a:	cf 91       	pop	r28
    3f8c:	1f 91       	pop	r17
    3f8e:	0f 91       	pop	r16
    3f90:	ff 90       	pop	r15
    3f92:	ef 90       	pop	r14
    3f94:	08 95       	ret
			res = FR_INVALID_NAME;
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
    3f96:	6b 89       	ldd	r22, Y+19	; 0x13
    3f98:	7c 89       	ldd	r23, Y+20	; 0x14
    3f9a:	61 15       	cp	r22, r1
    3f9c:	71 05       	cpc	r23, r1
    3f9e:	09 f0       	breq	.+2      	; 0x3fa2 <f_rename+0x20a>
    3fa0:	36 cf       	rjmp	.-404    	; 0x3e0e <f_rename+0x76>
    3fa2:	ea cf       	rjmp	.-44     	; 0x3f78 <f_rename+0x1e0>
						dir[DIR_Attr] = buf[0] | AM_ARC;
						djo.fs->wflag = 1;
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
							dw = clust2sect(djn.fs, LD_CLUST(dir));
							if (!dw) {
								res = FR_INT_ERR;
    3fa4:	82 e0       	ldi	r24, 0x02	; 2
    3fa6:	e9 cf       	rjmp	.-46     	; 0x3f7a <f_rename+0x1e2>

00003fa8 <main>:

int main(void)
{

	
	DDRD = 0b01100000;  // Enabling PD5&PD6
    3fa8:	80 e6       	ldi	r24, 0x60	; 96
    3faa:	8a b9       	out	0x0a, r24	; 10
	
	PORTD = 0b01100000;
    3fac:	8b b9       	out	0x0b, r24	; 11
	
	disk_initialize(0);
    3fae:	80 e0       	ldi	r24, 0x00	; 0
    3fb0:	0e 94 af 21 	call	0x435e	; 0x435e <disk_initialize>
	f_err_code = f_mount(0, &FATFS_Obj);
    3fb4:	80 e0       	ldi	r24, 0x00	; 0
    3fb6:	63 e2       	ldi	r22, 0x23	; 35
    3fb8:	71 e0       	ldi	r23, 0x01	; 1
    3fba:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <f_mount>
    3fbe:	80 93 56 03 	sts	0x0356, r24
	
	if (f_err_code == FR_OK)
    3fc2:	88 23       	and	r24, r24
    3fc4:	49 f4       	brne	.+18     	; 0x3fd8 <main+0x30>
	{
		f_err_code = f_open(&fil_obj, "check.txt", FA_WRITE);
    3fc6:	87 e5       	ldi	r24, 0x57	; 87
    3fc8:	93 e0       	ldi	r25, 0x03	; 3
    3fca:	6f e0       	ldi	r22, 0x0F	; 15
    3fcc:	71 e0       	ldi	r23, 0x01	; 1
    3fce:	42 e0       	ldi	r20, 0x02	; 2
    3fd0:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <f_open>
    3fd4:	80 93 56 03 	sts	0x0356, r24
	}
	
	
	
	
	f_close(&fil_obj);
    3fd8:	87 e5       	ldi	r24, 0x57	; 87
    3fda:	93 e0       	ldi	r25, 0x03	; 3
    3fdc:	0e 94 82 15 	call	0x2b04	; 0x2b04 <f_close>
    3fe0:	ff cf       	rjmp	.-2      	; 0x3fe0 <main+0x38>

00003fe2 <dly_us>:

static
void dly_us (UINT n)	/* Delay n microseconds (avr-gcc -Os) */
{
	do {
		PINB;
    3fe2:	23 b1       	in	r18, 0x03	; 3
		PINB; PINB;
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif
	} while (--n);
    3fe4:	01 97       	sbiw	r24, 0x01	; 1
    3fe6:	e9 f7       	brne	.-6      	; 0x3fe2 <dly_us>
}
    3fe8:	08 95       	ret

00003fea <xmit_mmc>:
static
void xmit_mmc (
	const BYTE* buff,	/* Data to be sent */
	UINT bc				/* Number of bytes to send */
)
{
    3fea:	fc 01       	movw	r30, r24
	BYTE d;


	do {
		d = *buff++;	/* Get a byte to be sent */
    3fec:	81 91       	ld	r24, Z+
		if (d & 0x80) DI_H(); else DI_L();	/* bit7 */
    3fee:	88 23       	and	r24, r24
    3ff0:	14 f4       	brge	.+4      	; 0x3ff6 <xmit_mmc+0xc>
    3ff2:	2d 9a       	sbi	0x05, 5	; 5
    3ff4:	01 c0       	rjmp	.+2      	; 0x3ff8 <xmit_mmc+0xe>
    3ff6:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    3ff8:	2f 9a       	sbi	0x05, 7	; 5
    3ffa:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x40) DI_H(); else DI_L();	/* bit6 */
    3ffc:	86 ff       	sbrs	r24, 6
    3ffe:	02 c0       	rjmp	.+4      	; 0x4004 <xmit_mmc+0x1a>
    4000:	2d 9a       	sbi	0x05, 5	; 5
    4002:	01 c0       	rjmp	.+2      	; 0x4006 <xmit_mmc+0x1c>
    4004:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    4006:	2f 9a       	sbi	0x05, 7	; 5
    4008:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x20) DI_H(); else DI_L();	/* bit5 */
    400a:	85 ff       	sbrs	r24, 5
    400c:	02 c0       	rjmp	.+4      	; 0x4012 <xmit_mmc+0x28>
    400e:	2d 9a       	sbi	0x05, 5	; 5
    4010:	01 c0       	rjmp	.+2      	; 0x4014 <xmit_mmc+0x2a>
    4012:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    4014:	2f 9a       	sbi	0x05, 7	; 5
    4016:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x10) DI_H(); else DI_L();	/* bit4 */
    4018:	84 ff       	sbrs	r24, 4
    401a:	02 c0       	rjmp	.+4      	; 0x4020 <xmit_mmc+0x36>
    401c:	2d 9a       	sbi	0x05, 5	; 5
    401e:	01 c0       	rjmp	.+2      	; 0x4022 <xmit_mmc+0x38>
    4020:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    4022:	2f 9a       	sbi	0x05, 7	; 5
    4024:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x08) DI_H(); else DI_L();	/* bit3 */
    4026:	83 ff       	sbrs	r24, 3
    4028:	02 c0       	rjmp	.+4      	; 0x402e <xmit_mmc+0x44>
    402a:	2d 9a       	sbi	0x05, 5	; 5
    402c:	01 c0       	rjmp	.+2      	; 0x4030 <xmit_mmc+0x46>
    402e:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    4030:	2f 9a       	sbi	0x05, 7	; 5
    4032:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x04) DI_H(); else DI_L();	/* bit2 */
    4034:	82 ff       	sbrs	r24, 2
    4036:	02 c0       	rjmp	.+4      	; 0x403c <xmit_mmc+0x52>
    4038:	2d 9a       	sbi	0x05, 5	; 5
    403a:	01 c0       	rjmp	.+2      	; 0x403e <xmit_mmc+0x54>
    403c:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    403e:	2f 9a       	sbi	0x05, 7	; 5
    4040:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x02) DI_H(); else DI_L();	/* bit1 */
    4042:	81 ff       	sbrs	r24, 1
    4044:	02 c0       	rjmp	.+4      	; 0x404a <xmit_mmc+0x60>
    4046:	2d 9a       	sbi	0x05, 5	; 5
    4048:	01 c0       	rjmp	.+2      	; 0x404c <xmit_mmc+0x62>
    404a:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    404c:	2f 9a       	sbi	0x05, 7	; 5
    404e:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x01) DI_H(); else DI_L();	/* bit0 */
    4050:	80 ff       	sbrs	r24, 0
    4052:	02 c0       	rjmp	.+4      	; 0x4058 <xmit_mmc+0x6e>
    4054:	2d 9a       	sbi	0x05, 5	; 5
    4056:	01 c0       	rjmp	.+2      	; 0x405a <xmit_mmc+0x70>
    4058:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    405a:	2f 9a       	sbi	0x05, 7	; 5
    405c:	2f 98       	cbi	0x05, 7	; 5
	} while (--bc);
    405e:	61 50       	subi	r22, 0x01	; 1
    4060:	70 40       	sbci	r23, 0x00	; 0
    4062:	21 f6       	brne	.-120    	; 0x3fec <xmit_mmc+0x2>
}
    4064:	08 95       	ret

00004066 <rcvr_mmc>:
static
void rcvr_mmc (
	BYTE *buff,	/* Pointer to read buffer */
	UINT bc		/* Number of bytes to receive */
)
{
    4066:	fc 01       	movw	r30, r24
	BYTE r;


	DI_H();	/* Send 0xFF */
    4068:	2d 9a       	sbi	0x05, 5	; 5

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
    406a:	21 e0       	ldi	r18, 0x01	; 1
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	93 b1       	in	r25, 0x03	; 3
		CK_H(); CK_L();
    4070:	2f 9a       	sbi	0x05, 7	; 5
    4072:	2f 98       	cbi	0x05, 7	; 5


	DI_H();	/* Send 0xFF */

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
    4074:	82 2f       	mov	r24, r18
    4076:	96 ff       	sbrs	r25, 6
    4078:	83 2f       	mov	r24, r19
		CK_H(); CK_L();
		r <<= 1; if (DO) r++;	/* bit6 */
    407a:	88 0f       	add	r24, r24
    407c:	1e 99       	sbic	0x03, 6	; 3
    407e:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    4080:	2f 9a       	sbi	0x05, 7	; 5
    4082:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit5 */
    4084:	88 0f       	add	r24, r24
    4086:	1e 99       	sbic	0x03, 6	; 3
    4088:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    408a:	2f 9a       	sbi	0x05, 7	; 5
    408c:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit4 */
    408e:	88 0f       	add	r24, r24
    4090:	1e 99       	sbic	0x03, 6	; 3
    4092:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    4094:	2f 9a       	sbi	0x05, 7	; 5
    4096:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit3 */
    4098:	88 0f       	add	r24, r24
    409a:	1e 99       	sbic	0x03, 6	; 3
    409c:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    409e:	2f 9a       	sbi	0x05, 7	; 5
    40a0:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit2 */
    40a2:	88 0f       	add	r24, r24
    40a4:	1e 99       	sbic	0x03, 6	; 3
    40a6:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    40a8:	2f 9a       	sbi	0x05, 7	; 5
    40aa:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit1 */
    40ac:	88 0f       	add	r24, r24
    40ae:	1e 99       	sbic	0x03, 6	; 3
    40b0:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    40b2:	2f 9a       	sbi	0x05, 7	; 5
    40b4:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit0 */
    40b6:	88 0f       	add	r24, r24
    40b8:	1e 99       	sbic	0x03, 6	; 3
    40ba:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    40bc:	2f 9a       	sbi	0x05, 7	; 5
    40be:	2f 98       	cbi	0x05, 7	; 5
		*buff++ = r;			/* Store a received byte */
    40c0:	81 93       	st	Z+, r24
	} while (--bc);
    40c2:	61 50       	subi	r22, 0x01	; 1
    40c4:	70 40       	sbci	r23, 0x00	; 0
    40c6:	99 f6       	brne	.-90     	; 0x406e <rcvr_mmc+0x8>
}
    40c8:	08 95       	ret

000040ca <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
    40ca:	0f 93       	push	r16
    40cc:	1f 93       	push	r17
    40ce:	cf 93       	push	r28
    40d0:	df 93       	push	r29
    40d2:	0f 92       	push	r0
    40d4:	cd b7       	in	r28, 0x3d	; 61
    40d6:	de b7       	in	r29, 0x3e	; 62
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    40d8:	08 e8       	ldi	r16, 0x88	; 136
    40da:	13 e1       	ldi	r17, 0x13	; 19
		rcvr_mmc(&d, 1);
    40dc:	ce 01       	movw	r24, r28
    40de:	01 96       	adiw	r24, 0x01	; 1
    40e0:	61 e0       	ldi	r22, 0x01	; 1
    40e2:	70 e0       	ldi	r23, 0x00	; 0
    40e4:	0e 94 33 20 	call	0x4066	; 0x4066 <rcvr_mmc>
		if (d == 0xFF) break;
    40e8:	89 81       	ldd	r24, Y+1	; 0x01
    40ea:	8f 3f       	cpi	r24, 0xFF	; 255
    40ec:	39 f0       	breq	.+14     	; 0x40fc <wait_ready+0x32>
		dly_us(100);
    40ee:	84 e6       	ldi	r24, 0x64	; 100
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <dly_us>
{
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    40f6:	01 50       	subi	r16, 0x01	; 1
    40f8:	10 40       	sbci	r17, 0x00	; 0
    40fa:	81 f7       	brne	.-32     	; 0x40dc <wait_ready+0x12>
		rcvr_mmc(&d, 1);
		if (d == 0xFF) break;
		dly_us(100);
	}

	return tmr ? 1 : 0;
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	01 15       	cp	r16, r1
    4102:	11 05       	cpc	r17, r1
    4104:	11 f4       	brne	.+4      	; 0x410a <__stack+0xb>
    4106:	80 e0       	ldi	r24, 0x00	; 0
    4108:	90 e0       	ldi	r25, 0x00	; 0
}
    410a:	0f 90       	pop	r0
    410c:	df 91       	pop	r29
    410e:	cf 91       	pop	r28
    4110:	1f 91       	pop	r17
    4112:	0f 91       	pop	r16
    4114:	08 95       	ret

00004116 <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
    4116:	cf 93       	push	r28
    4118:	df 93       	push	r29
    411a:	0f 92       	push	r0
    411c:	cd b7       	in	r28, 0x3d	; 61
    411e:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_H();				/* Set CS# high */
    4120:	2c 9a       	sbi	0x05, 4	; 5
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    4122:	ce 01       	movw	r24, r28
    4124:	01 96       	adiw	r24, 0x01	; 1
    4126:	61 e0       	ldi	r22, 0x01	; 1
    4128:	70 e0       	ldi	r23, 0x00	; 0
    412a:	0e 94 33 20 	call	0x4066	; 0x4066 <rcvr_mmc>
}
    412e:	0f 90       	pop	r0
    4130:	df 91       	pop	r29
    4132:	cf 91       	pop	r28
    4134:	08 95       	ret

00004136 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
    4136:	cf 93       	push	r28
    4138:	df 93       	push	r29
    413a:	0f 92       	push	r0
    413c:	cd b7       	in	r28, 0x3d	; 61
    413e:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_L();				/* Set CS# low */
    4140:	2c 98       	cbi	0x05, 4	; 5
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
    4142:	ce 01       	movw	r24, r28
    4144:	01 96       	adiw	r24, 0x01	; 1
    4146:	61 e0       	ldi	r22, 0x01	; 1
    4148:	70 e0       	ldi	r23, 0x00	; 0
    414a:	0e 94 33 20 	call	0x4066	; 0x4066 <rcvr_mmc>
	if (wait_ready()) return 1;	/* Wait for card ready */
    414e:	0e 94 65 20 	call	0x40ca	; 0x40ca <wait_ready>
    4152:	00 97       	sbiw	r24, 0x00	; 0
    4154:	29 f4       	brne	.+10     	; 0x4160 <select+0x2a>

	deselect();
    4156:	0e 94 8b 20 	call	0x4116	; 0x4116 <deselect>
	return 0;			/* Failed */
    415a:	80 e0       	ldi	r24, 0x00	; 0
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	02 c0       	rjmp	.+4      	; 0x4164 <select+0x2e>
{
	BYTE d;

	CS_L();				/* Set CS# low */
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
	if (wait_ready()) return 1;	/* Wait for card ready */
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;			/* Failed */
}
    4164:	0f 90       	pop	r0
    4166:	df 91       	pop	r29
    4168:	cf 91       	pop	r28
    416a:	08 95       	ret

0000416c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count */
)
{
    416c:	cf 92       	push	r12
    416e:	df 92       	push	r13
    4170:	ef 92       	push	r14
    4172:	ff 92       	push	r15
    4174:	0f 93       	push	r16
    4176:	1f 93       	push	r17
    4178:	cf 93       	push	r28
    417a:	df 93       	push	r29
    417c:	00 d0       	rcall	.+0      	; 0x417e <rcvr_datablock+0x12>
    417e:	cd b7       	in	r28, 0x3d	; 61
    4180:	de b7       	in	r29, 0x3e	; 62
    4182:	7c 01       	movw	r14, r24
    4184:	6b 01       	movw	r12, r22
    4186:	08 ee       	ldi	r16, 0xE8	; 232
    4188:	13 e0       	ldi	r17, 0x03	; 3
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
    418a:	ce 01       	movw	r24, r28
    418c:	01 96       	adiw	r24, 0x01	; 1
    418e:	61 e0       	ldi	r22, 0x01	; 1
    4190:	70 e0       	ldi	r23, 0x00	; 0
    4192:	0e 94 33 20 	call	0x4066	; 0x4066 <rcvr_mmc>
		if (d[0] != 0xFF) break;
    4196:	89 81       	ldd	r24, Y+1	; 0x01
    4198:	8f 3f       	cpi	r24, 0xFF	; 255
    419a:	39 f4       	brne	.+14     	; 0x41aa <rcvr_datablock+0x3e>
		dly_us(100);
    419c:	84 e6       	ldi	r24, 0x64	; 100
    419e:	90 e0       	ldi	r25, 0x00	; 0
    41a0:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <dly_us>
    41a4:	01 50       	subi	r16, 0x01	; 1
    41a6:	10 40       	sbci	r17, 0x00	; 0
{
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    41a8:	81 f7       	brne	.-32     	; 0x418a <rcvr_datablock+0x1e>
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    41aa:	89 81       	ldd	r24, Y+1	; 0x01
    41ac:	8e 3f       	cpi	r24, 0xFE	; 254
    41ae:	69 f4       	brne	.+26     	; 0x41ca <rcvr_datablock+0x5e>

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
    41b0:	c7 01       	movw	r24, r14
    41b2:	b6 01       	movw	r22, r12
    41b4:	0e 94 33 20 	call	0x4066	; 0x4066 <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
    41b8:	ce 01       	movw	r24, r28
    41ba:	01 96       	adiw	r24, 0x01	; 1
    41bc:	62 e0       	ldi	r22, 0x02	; 2
    41be:	70 e0       	ldi	r23, 0x00	; 0
    41c0:	0e 94 33 20 	call	0x4066	; 0x4066 <rcvr_mmc>

	return 1;						/* Return with success */
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	02 c0       	rjmp	.+4      	; 0x41ce <rcvr_datablock+0x62>
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    41ca:	80 e0       	ldi	r24, 0x00	; 0
    41cc:	90 e0       	ldi	r25, 0x00	; 0

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
	rcvr_mmc(d, 2);					/* Discard CRC */

	return 1;						/* Return with success */
}
    41ce:	0f 90       	pop	r0
    41d0:	0f 90       	pop	r0
    41d2:	df 91       	pop	r29
    41d4:	cf 91       	pop	r28
    41d6:	1f 91       	pop	r17
    41d8:	0f 91       	pop	r16
    41da:	ff 90       	pop	r15
    41dc:	ef 90       	pop	r14
    41de:	df 90       	pop	r13
    41e0:	cf 90       	pop	r12
    41e2:	08 95       	ret

000041e4 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    41e4:	ef 92       	push	r14
    41e6:	ff 92       	push	r15
    41e8:	1f 93       	push	r17
    41ea:	cf 93       	push	r28
    41ec:	df 93       	push	r29
    41ee:	00 d0       	rcall	.+0      	; 0x41f0 <xmit_datablock+0xc>
    41f0:	cd b7       	in	r28, 0x3d	; 61
    41f2:	de b7       	in	r29, 0x3e	; 62
    41f4:	7c 01       	movw	r14, r24
    41f6:	16 2f       	mov	r17, r22
	BYTE d[2];


	if (!wait_ready()) return 0;
    41f8:	0e 94 65 20 	call	0x40ca	; 0x40ca <wait_ready>
    41fc:	00 97       	sbiw	r24, 0x00	; 0
    41fe:	19 f1       	breq	.+70     	; 0x4246 <xmit_datablock+0x62>

	d[0] = token;
    4200:	19 83       	std	Y+1, r17	; 0x01
	xmit_mmc(d, 1);				/* Xmit a token */
    4202:	ce 01       	movw	r24, r28
    4204:	01 96       	adiw	r24, 0x01	; 1
    4206:	61 e0       	ldi	r22, 0x01	; 1
    4208:	70 e0       	ldi	r23, 0x00	; 0
    420a:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
    420e:	1d 3f       	cpi	r17, 0xFD	; 253
    4210:	e9 f0       	breq	.+58     	; 0x424c <xmit_datablock+0x68>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
    4212:	c7 01       	movw	r24, r14
    4214:	60 e0       	ldi	r22, 0x00	; 0
    4216:	72 e0       	ldi	r23, 0x02	; 2
    4218:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
    421c:	ce 01       	movw	r24, r28
    421e:	01 96       	adiw	r24, 0x01	; 1
    4220:	62 e0       	ldi	r22, 0x02	; 2
    4222:	70 e0       	ldi	r23, 0x00	; 0
    4224:	0e 94 33 20 	call	0x4066	; 0x4066 <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
    4228:	ce 01       	movw	r24, r28
    422a:	01 96       	adiw	r24, 0x01	; 1
    422c:	61 e0       	ldi	r22, 0x01	; 1
    422e:	70 e0       	ldi	r23, 0x00	; 0
    4230:	0e 94 33 20 	call	0x4066	; 0x4066 <rcvr_mmc>
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
    4234:	29 81       	ldd	r18, Y+1	; 0x01
    4236:	2f 71       	andi	r18, 0x1F	; 31
/*-----------------------------------------------------------------------*/
/* Send a data packet to the card                                        */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (	/* 1:OK, 0:Failed */
    4238:	81 e0       	ldi	r24, 0x01	; 1
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	25 30       	cpi	r18, 0x05	; 5
    423e:	41 f0       	breq	.+16     	; 0x4250 <xmit_datablock+0x6c>
    4240:	80 e0       	ldi	r24, 0x00	; 0
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	05 c0       	rjmp	.+10     	; 0x4250 <xmit_datablock+0x6c>
)
{
	BYTE d[2];


	if (!wait_ready()) return 0;
    4246:	80 e0       	ldi	r24, 0x00	; 0
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	02 c0       	rjmp	.+4      	; 0x4250 <xmit_datablock+0x6c>
		rcvr_mmc(d, 1);			/* Receive data response */
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
    424c:	81 e0       	ldi	r24, 0x01	; 1
    424e:	90 e0       	ldi	r25, 0x00	; 0
}
    4250:	0f 90       	pop	r0
    4252:	0f 90       	pop	r0
    4254:	df 91       	pop	r29
    4256:	cf 91       	pop	r28
    4258:	1f 91       	pop	r17
    425a:	ff 90       	pop	r15
    425c:	ef 90       	pop	r14
    425e:	08 95       	ret

00004260 <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    4260:	df 92       	push	r13
    4262:	ef 92       	push	r14
    4264:	ff 92       	push	r15
    4266:	0f 93       	push	r16
    4268:	1f 93       	push	r17
    426a:	cf 93       	push	r28
    426c:	df 93       	push	r29
    426e:	cd b7       	in	r28, 0x3d	; 61
    4270:	de b7       	in	r29, 0x3e	; 62
    4272:	27 97       	sbiw	r28, 0x07	; 7
    4274:	0f b6       	in	r0, 0x3f	; 63
    4276:	f8 94       	cli
    4278:	de bf       	out	0x3e, r29	; 62
    427a:	0f be       	out	0x3f, r0	; 63
    427c:	cd bf       	out	0x3d, r28	; 61
    427e:	18 2f       	mov	r17, r24
    4280:	d4 2e       	mov	r13, r20
    4282:	05 2f       	mov	r16, r21
    4284:	f6 2e       	mov	r15, r22
    4286:	e7 2e       	mov	r14, r23
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    4288:	88 23       	and	r24, r24
    428a:	4c f4       	brge	.+18     	; 0x429e <send_cmd+0x3e>
		cmd &= 0x7F;
		n = send_cmd(CMD55, 0);
    428c:	87 e3       	ldi	r24, 0x37	; 55
    428e:	40 e0       	ldi	r20, 0x00	; 0
    4290:	50 e0       	ldi	r21, 0x00	; 0
    4292:	ba 01       	movw	r22, r20
    4294:	0e 94 30 21 	call	0x4260	; 0x4260 <send_cmd>
		if (n > 1) return n;
    4298:	82 30       	cpi	r24, 0x02	; 2
    429a:	98 f5       	brcc	.+102    	; 0x4302 <send_cmd+0xa2>
{
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    429c:	1f 77       	andi	r17, 0x7F	; 127
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    429e:	1c 30       	cpi	r17, 0x0C	; 12
    42a0:	f1 f1       	breq	.+124    	; 0x431e <send_cmd+0xbe>
		deselect();
    42a2:	0e 94 8b 20 	call	0x4116	; 0x4116 <deselect>
		if (!select()) return 0xFF;
    42a6:	0e 94 9b 20 	call	0x4136	; 0x4136 <select>
    42aa:	00 97       	sbiw	r24, 0x00	; 0
    42ac:	49 f1       	breq	.+82     	; 0x4300 <send_cmd+0xa0>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    42ae:	81 2f       	mov	r24, r17
    42b0:	80 64       	ori	r24, 0x40	; 64
    42b2:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    42b4:	eb 82       	std	Y+3, r14	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    42b6:	fc 82       	std	Y+4, r15	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    42b8:	0d 83       	std	Y+5, r16	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    42ba:	de 82       	std	Y+6, r13	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    42bc:	11 23       	and	r17, r17
    42be:	09 f4       	brne	.+2      	; 0x42c2 <send_cmd+0x62>
    42c0:	3e c0       	rjmp	.+124    	; 0x433e <send_cmd+0xde>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    42c2:	18 30       	cpi	r17, 0x08	; 8
    42c4:	99 f1       	breq	.+102    	; 0x432c <send_cmd+0xcc>
	buf[5] = n;
    42c6:	81 e0       	ldi	r24, 0x01	; 1
    42c8:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    42ca:	ce 01       	movw	r24, r28
    42cc:	02 96       	adiw	r24, 0x02	; 2
    42ce:	66 e0       	ldi	r22, 0x06	; 6
    42d0:	70 e0       	ldi	r23, 0x00	; 0
    42d2:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    42d6:	1c 30       	cpi	r17, 0x0C	; 12
    42d8:	31 f4       	brne	.+12     	; 0x42e6 <send_cmd+0x86>
    42da:	ce 01       	movw	r24, r28
    42dc:	01 96       	adiw	r24, 0x01	; 1
    42de:	61 e0       	ldi	r22, 0x01	; 1
    42e0:	70 e0       	ldi	r23, 0x00	; 0
    42e2:	0e 94 33 20 	call	0x4066	; 0x4066 <rcvr_mmc>
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    42e6:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		rcvr_mmc(&d, 1);
    42e8:	ce 01       	movw	r24, r28
    42ea:	01 96       	adiw	r24, 0x01	; 1
    42ec:	61 e0       	ldi	r22, 0x01	; 1
    42ee:	70 e0       	ldi	r23, 0x00	; 0
    42f0:	0e 94 33 20 	call	0x4066	; 0x4066 <rcvr_mmc>
	while ((d & 0x80) && --n);
    42f4:	89 81       	ldd	r24, Y+1	; 0x01
    42f6:	88 23       	and	r24, r24
    42f8:	24 f4       	brge	.+8      	; 0x4302 <send_cmd+0xa2>
    42fa:	11 50       	subi	r17, 0x01	; 1
    42fc:	a9 f7       	brne	.-22     	; 0x42e8 <send_cmd+0x88>
    42fe:	01 c0       	rjmp	.+2      	; 0x4302 <send_cmd+0xa2>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    4300:	8f ef       	ldi	r24, 0xFF	; 255
	do
		rcvr_mmc(&d, 1);
	while ((d & 0x80) && --n);

	return d;			/* Return with the response value */
}
    4302:	27 96       	adiw	r28, 0x07	; 7
    4304:	0f b6       	in	r0, 0x3f	; 63
    4306:	f8 94       	cli
    4308:	de bf       	out	0x3e, r29	; 62
    430a:	0f be       	out	0x3f, r0	; 63
    430c:	cd bf       	out	0x3d, r28	; 61
    430e:	df 91       	pop	r29
    4310:	cf 91       	pop	r28
    4312:	1f 91       	pop	r17
    4314:	0f 91       	pop	r16
    4316:	ff 90       	pop	r15
    4318:	ef 90       	pop	r14
    431a:	df 90       	pop	r13
    431c:	08 95       	ret
		deselect();
		if (!select()) return 0xFF;
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    431e:	8c e4       	ldi	r24, 0x4C	; 76
    4320:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    4322:	eb 82       	std	Y+3, r14	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    4324:	fc 82       	std	Y+4, r15	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    4326:	0d 83       	std	Y+5, r16	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    4328:	de 82       	std	Y+6, r13	; 0x06
    432a:	cd cf       	rjmp	.-102    	; 0x42c6 <send_cmd+0x66>
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    432c:	87 e8       	ldi	r24, 0x87	; 135
    432e:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    4330:	ce 01       	movw	r24, r28
    4332:	02 96       	adiw	r24, 0x02	; 2
    4334:	66 e0       	ldi	r22, 0x06	; 6
    4336:	70 e0       	ldi	r23, 0x00	; 0
    4338:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <xmit_mmc>
    433c:	d4 cf       	rjmp	.-88     	; 0x42e6 <send_cmd+0x86>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    433e:	85 e9       	ldi	r24, 0x95	; 149
    4340:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    4342:	ce 01       	movw	r24, r28
    4344:	02 96       	adiw	r24, 0x02	; 2
    4346:	66 e0       	ldi	r22, 0x06	; 6
    4348:	70 e0       	ldi	r23, 0x00	; 0
    434a:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <xmit_mmc>
    434e:	cb cf       	rjmp	.-106    	; 0x42e6 <send_cmd+0x86>

00004350 <disk_status>:

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    4350:	88 23       	and	r24, r24
    4352:	19 f4       	brne	.+6      	; 0x435a <disk_status+0xa>

	return Stat;
    4354:	80 91 1b 01 	lds	r24, 0x011B
    4358:	08 95       	ret

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    435a:	81 e0       	ldi	r24, 0x01	; 1

	return Stat;
}
    435c:	08 95       	ret

0000435e <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    435e:	ef 92       	push	r14
    4360:	ff 92       	push	r15
    4362:	0f 93       	push	r16
    4364:	1f 93       	push	r17
    4366:	cf 93       	push	r28
    4368:	df 93       	push	r29
    436a:	00 d0       	rcall	.+0      	; 0x436c <disk_initialize+0xe>
    436c:	00 d0       	rcall	.+0      	; 0x436e <disk_initialize+0x10>
    436e:	cd b7       	in	r28, 0x3d	; 61
    4370:	de b7       	in	r29, 0x3e	; 62
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    4372:	88 23       	and	r24, r24
    4374:	09 f0       	breq	.+2      	; 0x4378 <disk_initialize+0x1a>
    4376:	b1 c0       	rjmp	.+354    	; 0x44da <disk_initialize+0x17c>

	dly_us(10000);			/* 10ms */
    4378:	80 e1       	ldi	r24, 0x10	; 16
    437a:	97 e2       	ldi	r25, 0x27	; 39
    437c:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <dly_us>
	CS_INIT(); CS_H();		/* Initialize port pin tied to CS */
    4380:	24 9a       	sbi	0x04, 4	; 4
    4382:	2c 9a       	sbi	0x05, 4	; 5
	CK_INIT(); CK_L();		/* Initialize port pin tied to SCLK */
    4384:	27 9a       	sbi	0x04, 7	; 4
    4386:	2f 98       	cbi	0x05, 7	; 5
	DI_INIT();				/* Initialize port pin tied to DI */
    4388:	25 9a       	sbi	0x04, 5	; 4
    438a:	0a e0       	ldi	r16, 0x0A	; 10
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
    438c:	ce 01       	movw	r24, r28
    438e:	01 96       	adiw	r24, 0x01	; 1
    4390:	61 e0       	ldi	r22, 0x01	; 1
    4392:	70 e0       	ldi	r23, 0x00	; 0
    4394:	0e 94 33 20 	call	0x4066	; 0x4066 <rcvr_mmc>
    4398:	01 50       	subi	r16, 0x01	; 1
    439a:	c1 f7       	brne	.-16     	; 0x438c <disk_initialize+0x2e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    439c:	80 e0       	ldi	r24, 0x00	; 0
    439e:	40 e0       	ldi	r20, 0x00	; 0
    43a0:	50 e0       	ldi	r21, 0x00	; 0
    43a2:	ba 01       	movw	r22, r20
    43a4:	0e 94 30 21 	call	0x4260	; 0x4260 <send_cmd>
    43a8:	81 30       	cpi	r24, 0x01	; 1
    43aa:	09 f0       	breq	.+2      	; 0x43ae <disk_initialize+0x50>
    43ac:	7b c0       	rjmp	.+246    	; 0x44a4 <disk_initialize+0x146>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    43ae:	88 e0       	ldi	r24, 0x08	; 8
    43b0:	4a ea       	ldi	r20, 0xAA	; 170
    43b2:	51 e0       	ldi	r21, 0x01	; 1
    43b4:	60 e0       	ldi	r22, 0x00	; 0
    43b6:	70 e0       	ldi	r23, 0x00	; 0
    43b8:	0e 94 30 21 	call	0x4260	; 0x4260 <send_cmd>
    43bc:	81 30       	cpi	r24, 0x01	; 1
    43be:	09 f0       	breq	.+2      	; 0x43c2 <disk_initialize+0x64>
    43c0:	3d c0       	rjmp	.+122    	; 0x443c <disk_initialize+0xde>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
    43c2:	ce 01       	movw	r24, r28
    43c4:	01 96       	adiw	r24, 0x01	; 1
    43c6:	64 e0       	ldi	r22, 0x04	; 4
    43c8:	70 e0       	ldi	r23, 0x00	; 0
    43ca:	0e 94 33 20 	call	0x4066	; 0x4066 <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    43ce:	8b 81       	ldd	r24, Y+3	; 0x03
    43d0:	81 30       	cpi	r24, 0x01	; 1
    43d2:	09 f0       	breq	.+2      	; 0x43d6 <disk_initialize+0x78>
    43d4:	69 c0       	rjmp	.+210    	; 0x44a8 <disk_initialize+0x14a>
    43d6:	8c 81       	ldd	r24, Y+4	; 0x04
    43d8:	8a 3a       	cpi	r24, 0xAA	; 170
    43da:	09 f0       	breq	.+2      	; 0x43de <disk_initialize+0x80>
    43dc:	67 c0       	rjmp	.+206    	; 0x44ac <disk_initialize+0x14e>
    43de:	08 ee       	ldi	r16, 0xE8	; 232
    43e0:	13 e0       	ldi	r17, 0x03	; 3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    43e2:	89 ea       	ldi	r24, 0xA9	; 169
    43e4:	40 e0       	ldi	r20, 0x00	; 0
    43e6:	50 e0       	ldi	r21, 0x00	; 0
    43e8:	60 e0       	ldi	r22, 0x00	; 0
    43ea:	70 e4       	ldi	r23, 0x40	; 64
    43ec:	0e 94 30 21 	call	0x4260	; 0x4260 <send_cmd>
    43f0:	88 23       	and	r24, r24
    43f2:	49 f0       	breq	.+18     	; 0x4406 <disk_initialize+0xa8>
					dly_us(1000);
    43f4:	88 ee       	ldi	r24, 0xE8	; 232
    43f6:	93 e0       	ldi	r25, 0x03	; 3
    43f8:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <dly_us>
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    43fc:	01 50       	subi	r16, 0x01	; 1
    43fe:	10 40       	sbci	r17, 0x00	; 0
    4400:	81 f7       	brne	.-32     	; 0x43e2 <disk_initialize+0x84>
	DI_INIT();				/* Initialize port pin tied to DI */
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */

	ty = 0;
    4402:	ff 24       	eor	r15, r15
    4404:	60 c0       	rjmp	.+192    	; 0x44c6 <disk_initialize+0x168>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
    4406:	01 15       	cp	r16, r1
    4408:	11 05       	cpc	r17, r1
    440a:	09 f4       	brne	.+2      	; 0x440e <disk_initialize+0xb0>
    440c:	51 c0       	rjmp	.+162    	; 0x44b0 <disk_initialize+0x152>
    440e:	8a e3       	ldi	r24, 0x3A	; 58
    4410:	40 e0       	ldi	r20, 0x00	; 0
    4412:	50 e0       	ldi	r21, 0x00	; 0
    4414:	ba 01       	movw	r22, r20
    4416:	0e 94 30 21 	call	0x4260	; 0x4260 <send_cmd>
    441a:	88 23       	and	r24, r24
    441c:	09 f0       	breq	.+2      	; 0x4420 <disk_initialize+0xc2>
    441e:	4a c0       	rjmp	.+148    	; 0x44b4 <disk_initialize+0x156>
					rcvr_mmc(buf, 4);
    4420:	ce 01       	movw	r24, r28
    4422:	01 96       	adiw	r24, 0x01	; 1
    4424:	64 e0       	ldi	r22, 0x04	; 4
    4426:	70 e0       	ldi	r23, 0x00	; 0
    4428:	0e 94 33 20 	call	0x4066	; 0x4066 <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    442c:	89 81       	ldd	r24, Y+1	; 0x01
    442e:	86 ff       	sbrs	r24, 6
    4430:	43 c0       	rjmp	.+134    	; 0x44b8 <disk_initialize+0x15a>
    4432:	0f 2e       	mov	r0, r31
    4434:	fc e0       	ldi	r31, 0x0C	; 12
    4436:	ff 2e       	mov	r15, r31
    4438:	f0 2d       	mov	r31, r0
    443a:	45 c0       	rjmp	.+138    	; 0x44c6 <disk_initialize+0x168>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    443c:	89 ea       	ldi	r24, 0xA9	; 169
    443e:	40 e0       	ldi	r20, 0x00	; 0
    4440:	50 e0       	ldi	r21, 0x00	; 0
    4442:	ba 01       	movw	r22, r20
    4444:	0e 94 30 21 	call	0x4260	; 0x4260 <send_cmd>
    4448:	82 30       	cpi	r24, 0x02	; 2
    444a:	40 f4       	brcc	.+16     	; 0x445c <disk_initialize+0xfe>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    444c:	0f 2e       	mov	r0, r31
    444e:	f9 ea       	ldi	r31, 0xA9	; 169
    4450:	ef 2e       	mov	r14, r31
    4452:	f0 2d       	mov	r31, r0
    4454:	ff 24       	eor	r15, r15
    4456:	68 94       	set
    4458:	f1 f8       	bld	r15, 1
    445a:	04 c0       	rjmp	.+8      	; 0x4464 <disk_initialize+0x106>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    445c:	ee 24       	eor	r14, r14
    445e:	e3 94       	inc	r14
    4460:	ff 24       	eor	r15, r15
    4462:	f3 94       	inc	r15
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    4464:	08 ee       	ldi	r16, 0xE8	; 232
    4466:	13 e0       	ldi	r17, 0x03	; 3
				if (send_cmd(cmd, 0) == 0) break;
    4468:	8e 2d       	mov	r24, r14
    446a:	40 e0       	ldi	r20, 0x00	; 0
    446c:	50 e0       	ldi	r21, 0x00	; 0
    446e:	ba 01       	movw	r22, r20
    4470:	0e 94 30 21 	call	0x4260	; 0x4260 <send_cmd>
    4474:	88 23       	and	r24, r24
    4476:	49 f0       	breq	.+18     	; 0x448a <disk_initialize+0x12c>
				dly_us(1000);
    4478:	88 ee       	ldi	r24, 0xE8	; 232
    447a:	93 e0       	ldi	r25, 0x03	; 3
    447c:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <dly_us>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    4480:	01 50       	subi	r16, 0x01	; 1
    4482:	10 40       	sbci	r17, 0x00	; 0
    4484:	89 f7       	brne	.-30     	; 0x4468 <disk_initialize+0x10a>
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    4486:	ff 24       	eor	r15, r15
    4488:	1e c0       	rjmp	.+60     	; 0x44c6 <disk_initialize+0x168>
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    448a:	01 15       	cp	r16, r1
    448c:	11 05       	cpc	r17, r1
    448e:	c1 f0       	breq	.+48     	; 0x44c0 <disk_initialize+0x162>
    4490:	80 e1       	ldi	r24, 0x10	; 16
    4492:	40 e0       	ldi	r20, 0x00	; 0
    4494:	52 e0       	ldi	r21, 0x02	; 2
    4496:	60 e0       	ldi	r22, 0x00	; 0
    4498:	70 e0       	ldi	r23, 0x00	; 0
    449a:	0e 94 30 21 	call	0x4260	; 0x4260 <send_cmd>
    449e:	88 23       	and	r24, r24
    44a0:	89 f4       	brne	.+34     	; 0x44c4 <disk_initialize+0x166>
    44a2:	11 c0       	rjmp	.+34     	; 0x44c6 <disk_initialize+0x168>
	DI_INIT();				/* Initialize port pin tied to DI */
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */

	ty = 0;
    44a4:	ff 24       	eor	r15, r15
    44a6:	0f c0       	rjmp	.+30     	; 0x44c6 <disk_initialize+0x168>
    44a8:	ff 24       	eor	r15, r15
    44aa:	0d c0       	rjmp	.+26     	; 0x44c6 <disk_initialize+0x168>
    44ac:	ff 24       	eor	r15, r15
    44ae:	0b c0       	rjmp	.+22     	; 0x44c6 <disk_initialize+0x168>
    44b0:	ff 24       	eor	r15, r15
    44b2:	09 c0       	rjmp	.+18     	; 0x44c6 <disk_initialize+0x168>
    44b4:	ff 24       	eor	r15, r15
    44b6:	07 c0       	rjmp	.+14     	; 0x44c6 <disk_initialize+0x168>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
					rcvr_mmc(buf, 4);
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    44b8:	ff 24       	eor	r15, r15
    44ba:	68 94       	set
    44bc:	f2 f8       	bld	r15, 2
    44be:	03 c0       	rjmp	.+6      	; 0x44c6 <disk_initialize+0x168>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    44c0:	ff 24       	eor	r15, r15
    44c2:	01 c0       	rjmp	.+2      	; 0x44c6 <disk_initialize+0x168>
    44c4:	ff 24       	eor	r15, r15
		}
	}
	CardType = ty;
    44c6:	f0 92 55 03 	sts	0x0355, r15
	s = ty ? 0 : STA_NOINIT;
    44ca:	01 e0       	ldi	r16, 0x01	; 1
    44cc:	f1 10       	cpse	r15, r1
    44ce:	00 e0       	ldi	r16, 0x00	; 0
	Stat = s;
    44d0:	00 93 1b 01 	sts	0x011B, r16

	deselect();
    44d4:	0e 94 8b 20 	call	0x4116	; 0x4116 <deselect>

	return s;
    44d8:	01 c0       	rjmp	.+2      	; 0x44dc <disk_initialize+0x17e>
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    44da:	03 e0       	ldi	r16, 0x03	; 3
	Stat = s;

	deselect();

	return s;
}
    44dc:	80 2f       	mov	r24, r16
    44de:	0f 90       	pop	r0
    44e0:	0f 90       	pop	r0
    44e2:	0f 90       	pop	r0
    44e4:	0f 90       	pop	r0
    44e6:	df 91       	pop	r29
    44e8:	cf 91       	pop	r28
    44ea:	1f 91       	pop	r17
    44ec:	0f 91       	pop	r16
    44ee:	ff 90       	pop	r15
    44f0:	ef 90       	pop	r14
    44f2:	08 95       	ret

000044f4 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    44f4:	bf 92       	push	r11
    44f6:	cf 92       	push	r12
    44f8:	df 92       	push	r13
    44fa:	ef 92       	push	r14
    44fc:	ff 92       	push	r15
    44fe:	0f 93       	push	r16
    4500:	1f 93       	push	r17
    4502:	cf 93       	push	r28
    4504:	df 93       	push	r29
    4506:	eb 01       	movw	r28, r22
    4508:	69 01       	movw	r12, r18
    450a:	7a 01       	movw	r14, r20
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    450c:	0e 94 a8 21 	call	0x4350	; 0x4350 <disk_status>
    4510:	80 fd       	sbrc	r24, 0
    4512:	3d c0       	rjmp	.+122    	; 0x458e <disk_read+0x9a>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    4514:	80 91 55 03 	lds	r24, 0x0355
    4518:	83 fd       	sbrc	r24, 3
    451a:	09 c0       	rjmp	.+18     	; 0x452e <disk_read+0x3a>
    451c:	0b 2e       	mov	r0, r27
    451e:	b9 e0       	ldi	r27, 0x09	; 9
    4520:	cc 0c       	add	r12, r12
    4522:	dd 1c       	adc	r13, r13
    4524:	ee 1c       	adc	r14, r14
    4526:	ff 1c       	adc	r15, r15
    4528:	ba 95       	dec	r27
    452a:	d1 f7       	brne	.-12     	; 0x4520 <disk_read+0x2c>
    452c:	b0 2d       	mov	r27, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    452e:	02 30       	cpi	r16, 0x02	; 2
    4530:	11 05       	cpc	r17, r1
    4532:	28 f0       	brcs	.+10     	; 0x453e <disk_read+0x4a>
    4534:	0f 2e       	mov	r0, r31
    4536:	f2 e1       	ldi	r31, 0x12	; 18
    4538:	bf 2e       	mov	r11, r31
    453a:	f0 2d       	mov	r31, r0
    453c:	04 c0       	rjmp	.+8      	; 0x4546 <disk_read+0x52>
    453e:	0f 2e       	mov	r0, r31
    4540:	f1 e1       	ldi	r31, 0x11	; 17
    4542:	bf 2e       	mov	r11, r31
    4544:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    4546:	8b 2d       	mov	r24, r11
    4548:	b7 01       	movw	r22, r14
    454a:	a6 01       	movw	r20, r12
    454c:	0e 94 30 21 	call	0x4260	; 0x4260 <send_cmd>
    4550:	88 23       	and	r24, r24
    4552:	a9 f4       	brne	.+42     	; 0x457e <disk_read+0x8a>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    4554:	ce 01       	movw	r24, r28
    4556:	60 e0       	ldi	r22, 0x00	; 0
    4558:	72 e0       	ldi	r23, 0x02	; 2
    455a:	0e 94 b6 20 	call	0x416c	; 0x416c <rcvr_datablock>
    455e:	00 97       	sbiw	r24, 0x00	; 0
    4560:	29 f0       	breq	.+10     	; 0x456c <disk_read+0x78>
			buff += 512;
    4562:	c0 50       	subi	r28, 0x00	; 0
    4564:	de 4f       	sbci	r29, 0xFE	; 254
		} while (--count);
    4566:	01 50       	subi	r16, 0x01	; 1
    4568:	10 40       	sbci	r17, 0x00	; 0
    456a:	a1 f7       	brne	.-24     	; 0x4554 <disk_read+0x60>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    456c:	82 e1       	ldi	r24, 0x12	; 18
    456e:	b8 16       	cp	r11, r24
    4570:	31 f4       	brne	.+12     	; 0x457e <disk_read+0x8a>
    4572:	8c e0       	ldi	r24, 0x0C	; 12
    4574:	40 e0       	ldi	r20, 0x00	; 0
    4576:	50 e0       	ldi	r21, 0x00	; 0
    4578:	ba 01       	movw	r22, r20
    457a:	0e 94 30 21 	call	0x4260	; 0x4260 <send_cmd>
	}
	deselect();
    457e:	0e 94 8b 20 	call	0x4116	; 0x4116 <deselect>

	return count ? RES_ERROR : RES_OK;
    4582:	81 e0       	ldi	r24, 0x01	; 1
    4584:	01 15       	cp	r16, r1
    4586:	11 05       	cpc	r17, r1
    4588:	19 f4       	brne	.+6      	; 0x4590 <disk_read+0x9c>
    458a:	80 e0       	ldi	r24, 0x00	; 0
    458c:	01 c0       	rjmp	.+2      	; 0x4590 <disk_read+0x9c>
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    458e:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    4590:	df 91       	pop	r29
    4592:	cf 91       	pop	r28
    4594:	1f 91       	pop	r17
    4596:	0f 91       	pop	r16
    4598:	ff 90       	pop	r15
    459a:	ef 90       	pop	r14
    459c:	df 90       	pop	r13
    459e:	cf 90       	pop	r12
    45a0:	bf 90       	pop	r11
    45a2:	08 95       	ret

000045a4 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    45a4:	cf 92       	push	r12
    45a6:	df 92       	push	r13
    45a8:	ef 92       	push	r14
    45aa:	ff 92       	push	r15
    45ac:	0f 93       	push	r16
    45ae:	1f 93       	push	r17
    45b0:	cf 93       	push	r28
    45b2:	df 93       	push	r29
    45b4:	eb 01       	movw	r28, r22
    45b6:	69 01       	movw	r12, r18
    45b8:	7a 01       	movw	r14, r20
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    45ba:	0e 94 a8 21 	call	0x4350	; 0x4350 <disk_status>
    45be:	80 fd       	sbrc	r24, 0
    45c0:	50 c0       	rjmp	.+160    	; 0x4662 <disk_write+0xbe>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    45c2:	80 91 55 03 	lds	r24, 0x0355
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	83 fd       	sbrc	r24, 3
    45ca:	09 c0       	rjmp	.+18     	; 0x45de <disk_write+0x3a>
    45cc:	0b 2e       	mov	r0, r27
    45ce:	b9 e0       	ldi	r27, 0x09	; 9
    45d0:	cc 0c       	add	r12, r12
    45d2:	dd 1c       	adc	r13, r13
    45d4:	ee 1c       	adc	r14, r14
    45d6:	ff 1c       	adc	r15, r15
    45d8:	ba 95       	dec	r27
    45da:	d1 f7       	brne	.-12     	; 0x45d0 <disk_write+0x2c>
    45dc:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    45de:	01 30       	cpi	r16, 0x01	; 1
    45e0:	11 05       	cpc	r17, r1
    45e2:	71 f4       	brne	.+28     	; 0x4600 <disk_write+0x5c>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    45e4:	88 e1       	ldi	r24, 0x18	; 24
    45e6:	b7 01       	movw	r22, r14
    45e8:	a6 01       	movw	r20, r12
    45ea:	0e 94 30 21 	call	0x4260	; 0x4260 <send_cmd>
    45ee:	88 23       	and	r24, r24
    45f0:	81 f5       	brne	.+96     	; 0x4652 <disk_write+0xae>
			&& xmit_datablock(buff, 0xFE))
    45f2:	ce 01       	movw	r24, r28
    45f4:	6e ef       	ldi	r22, 0xFE	; 254
    45f6:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <xmit_datablock>
    45fa:	00 97       	sbiw	r24, 0x00	; 0
    45fc:	29 f5       	brne	.+74     	; 0x4648 <disk_write+0xa4>
    45fe:	29 c0       	rjmp	.+82     	; 0x4652 <disk_write+0xae>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    4600:	86 70       	andi	r24, 0x06	; 6
    4602:	90 70       	andi	r25, 0x00	; 0
    4604:	00 97       	sbiw	r24, 0x00	; 0
    4606:	31 f0       	breq	.+12     	; 0x4614 <disk_write+0x70>
    4608:	a8 01       	movw	r20, r16
    460a:	60 e0       	ldi	r22, 0x00	; 0
    460c:	70 e0       	ldi	r23, 0x00	; 0
    460e:	87 e9       	ldi	r24, 0x97	; 151
    4610:	0e 94 30 21 	call	0x4260	; 0x4260 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    4614:	89 e1       	ldi	r24, 0x19	; 25
    4616:	b7 01       	movw	r22, r14
    4618:	a6 01       	movw	r20, r12
    461a:	0e 94 30 21 	call	0x4260	; 0x4260 <send_cmd>
    461e:	88 23       	and	r24, r24
    4620:	c1 f4       	brne	.+48     	; 0x4652 <disk_write+0xae>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    4622:	ce 01       	movw	r24, r28
    4624:	6c ef       	ldi	r22, 0xFC	; 252
    4626:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <xmit_datablock>
    462a:	00 97       	sbiw	r24, 0x00	; 0
    462c:	29 f0       	breq	.+10     	; 0x4638 <disk_write+0x94>
				buff += 512;
    462e:	c0 50       	subi	r28, 0x00	; 0
    4630:	de 4f       	sbci	r29, 0xFE	; 254
			} while (--count);
    4632:	01 50       	subi	r16, 0x01	; 1
    4634:	10 40       	sbci	r17, 0x00	; 0
    4636:	a9 f7       	brne	.-22     	; 0x4622 <disk_write+0x7e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    4638:	80 e0       	ldi	r24, 0x00	; 0
    463a:	90 e0       	ldi	r25, 0x00	; 0
    463c:	6d ef       	ldi	r22, 0xFD	; 253
    463e:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <xmit_datablock>
    4642:	00 97       	sbiw	r24, 0x00	; 0
    4644:	21 f0       	breq	.+8      	; 0x464e <disk_write+0xaa>
    4646:	05 c0       	rjmp	.+10     	; 0x4652 <disk_write+0xae>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
    4648:	00 e0       	ldi	r16, 0x00	; 0
    464a:	10 e0       	ldi	r17, 0x00	; 0
    464c:	02 c0       	rjmp	.+4      	; 0x4652 <disk_write+0xae>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
    464e:	01 e0       	ldi	r16, 0x01	; 1
    4650:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    4652:	0e 94 8b 20 	call	0x4116	; 0x4116 <deselect>

	return count ? RES_ERROR : RES_OK;
    4656:	81 e0       	ldi	r24, 0x01	; 1
    4658:	01 15       	cp	r16, r1
    465a:	11 05       	cpc	r17, r1
    465c:	19 f4       	brne	.+6      	; 0x4664 <disk_write+0xc0>
    465e:	80 e0       	ldi	r24, 0x00	; 0
    4660:	01 c0       	rjmp	.+2      	; 0x4664 <disk_write+0xc0>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    4662:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    4664:	df 91       	pop	r29
    4666:	cf 91       	pop	r28
    4668:	1f 91       	pop	r17
    466a:	0f 91       	pop	r16
    466c:	ff 90       	pop	r15
    466e:	ef 90       	pop	r14
    4670:	df 90       	pop	r13
    4672:	cf 90       	pop	r12
    4674:	08 95       	ret

00004676 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    4676:	ef 92       	push	r14
    4678:	ff 92       	push	r15
    467a:	0f 93       	push	r16
    467c:	1f 93       	push	r17
    467e:	cf 93       	push	r28
    4680:	df 93       	push	r29
    4682:	cd b7       	in	r28, 0x3d	; 61
    4684:	de b7       	in	r29, 0x3e	; 62
    4686:	60 97       	sbiw	r28, 0x10	; 16
    4688:	0f b6       	in	r0, 0x3f	; 63
    468a:	f8 94       	cli
    468c:	de bf       	out	0x3e, r29	; 62
    468e:	0f be       	out	0x3f, r0	; 63
    4690:	cd bf       	out	0x3d, r28	; 61
    4692:	16 2f       	mov	r17, r22
    4694:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    4696:	0e 94 a8 21 	call	0x4350	; 0x4350 <disk_status>
    469a:	80 fd       	sbrc	r24, 0
    469c:	a2 c0       	rjmp	.+324    	; 0x47e2 <disk_ioctl+0x16c>

	res = RES_ERROR;
	switch (ctrl) {
    469e:	11 30       	cpi	r17, 0x01	; 1
    46a0:	69 f0       	breq	.+26     	; 0x46bc <disk_ioctl+0x46>
    46a2:	11 30       	cpi	r17, 0x01	; 1
    46a4:	20 f0       	brcs	.+8      	; 0x46ae <disk_ioctl+0x38>
    46a6:	13 30       	cpi	r17, 0x03	; 3
    46a8:	09 f0       	breq	.+2      	; 0x46ac <disk_ioctl+0x36>
    46aa:	91 c0       	rjmp	.+290    	; 0x47ce <disk_ioctl+0x158>
    46ac:	85 c0       	rjmp	.+266    	; 0x47b8 <disk_ioctl+0x142>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
    46ae:	0e 94 9b 20 	call	0x4136	; 0x4136 <select>
    46b2:	00 97       	sbiw	r24, 0x00	; 0
    46b4:	09 f0       	breq	.+2      	; 0x46b8 <disk_ioctl+0x42>
    46b6:	8d c0       	rjmp	.+282    	; 0x47d2 <disk_ioctl+0x15c>
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
    46b8:	11 e0       	ldi	r17, 0x01	; 1
    46ba:	90 c0       	rjmp	.+288    	; 0x47dc <disk_ioctl+0x166>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    46bc:	89 e0       	ldi	r24, 0x09	; 9
    46be:	40 e0       	ldi	r20, 0x00	; 0
    46c0:	50 e0       	ldi	r21, 0x00	; 0
    46c2:	ba 01       	movw	r22, r20
    46c4:	0e 94 30 21 	call	0x4260	; 0x4260 <send_cmd>
    46c8:	88 23       	and	r24, r24
    46ca:	09 f0       	breq	.+2      	; 0x46ce <disk_ioctl+0x58>
    46cc:	84 c0       	rjmp	.+264    	; 0x47d6 <disk_ioctl+0x160>
    46ce:	ce 01       	movw	r24, r28
    46d0:	01 96       	adiw	r24, 0x01	; 1
    46d2:	60 e1       	ldi	r22, 0x10	; 16
    46d4:	70 e0       	ldi	r23, 0x00	; 0
    46d6:	0e 94 b6 20 	call	0x416c	; 0x416c <rcvr_datablock>
    46da:	00 97       	sbiw	r24, 0x00	; 0
    46dc:	09 f4       	brne	.+2      	; 0x46e0 <disk_ioctl+0x6a>
    46de:	7d c0       	rjmp	.+250    	; 0x47da <disk_ioctl+0x164>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    46e0:	89 81       	ldd	r24, Y+1	; 0x01
    46e2:	82 95       	swap	r24
    46e4:	86 95       	lsr	r24
    46e6:	86 95       	lsr	r24
    46e8:	83 70       	andi	r24, 0x03	; 3
    46ea:	81 30       	cpi	r24, 0x01	; 1
    46ec:	61 f5       	brne	.+88     	; 0x4746 <disk_ioctl+0xd0>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    46ee:	48 85       	ldd	r20, Y+8	; 0x08
    46f0:	50 e0       	ldi	r21, 0x00	; 0
    46f2:	60 e0       	ldi	r22, 0x00	; 0
    46f4:	70 e0       	ldi	r23, 0x00	; 0
    46f6:	4f 73       	andi	r20, 0x3F	; 63
    46f8:	50 70       	andi	r21, 0x00	; 0
    46fa:	60 70       	andi	r22, 0x00	; 0
    46fc:	70 70       	andi	r23, 0x00	; 0
    46fe:	ba 01       	movw	r22, r20
    4700:	55 27       	eor	r21, r21
    4702:	44 27       	eor	r20, r20
    4704:	4f 5f       	subi	r20, 0xFF	; 255
    4706:	5f 4f       	sbci	r21, 0xFF	; 255
    4708:	6f 4f       	sbci	r22, 0xFF	; 255
    470a:	7f 4f       	sbci	r23, 0xFF	; 255
    470c:	99 85       	ldd	r25, Y+9	; 0x09
    470e:	80 e0       	ldi	r24, 0x00	; 0
    4710:	2a 85       	ldd	r18, Y+10	; 0x0a
    4712:	82 0f       	add	r24, r18
    4714:	91 1d       	adc	r25, r1
    4716:	a0 e0       	ldi	r26, 0x00	; 0
    4718:	b0 e0       	ldi	r27, 0x00	; 0
    471a:	48 0f       	add	r20, r24
    471c:	59 1f       	adc	r21, r25
    471e:	6a 1f       	adc	r22, r26
    4720:	7b 1f       	adc	r23, r27
					*(DWORD*)buff = cs << 10;
    4722:	db 01       	movw	r26, r22
    4724:	ca 01       	movw	r24, r20
    4726:	07 2e       	mov	r0, r23
    4728:	7a e0       	ldi	r23, 0x0A	; 10
    472a:	88 0f       	add	r24, r24
    472c:	99 1f       	adc	r25, r25
    472e:	aa 1f       	adc	r26, r26
    4730:	bb 1f       	adc	r27, r27
    4732:	7a 95       	dec	r23
    4734:	d1 f7       	brne	.-12     	; 0x472a <disk_ioctl+0xb4>
    4736:	70 2d       	mov	r23, r0
    4738:	f7 01       	movw	r30, r14
    473a:	80 83       	st	Z, r24
    473c:	91 83       	std	Z+1, r25	; 0x01
    473e:	a2 83       	std	Z+2, r26	; 0x02
    4740:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
				}
				res = RES_OK;
    4742:	10 e0       	ldi	r17, 0x00	; 0
    4744:	4b c0       	rjmp	.+150    	; 0x47dc <disk_ioctl+0x166>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    4746:	29 85       	ldd	r18, Y+9	; 0x09
    4748:	22 95       	swap	r18
    474a:	26 95       	lsr	r18
    474c:	26 95       	lsr	r18
    474e:	23 70       	andi	r18, 0x03	; 3
    4750:	88 85       	ldd	r24, Y+8	; 0x08
    4752:	90 e0       	ldi	r25, 0x00	; 0
    4754:	88 0f       	add	r24, r24
    4756:	99 1f       	adc	r25, r25
    4758:	88 0f       	add	r24, r24
    475a:	99 1f       	adc	r25, r25
    475c:	82 0f       	add	r24, r18
    475e:	91 1d       	adc	r25, r1
    4760:	01 96       	adiw	r24, 0x01	; 1
    4762:	4f 81       	ldd	r20, Y+7	; 0x07
    4764:	50 e0       	ldi	r21, 0x00	; 0
    4766:	43 70       	andi	r20, 0x03	; 3
    4768:	50 70       	andi	r21, 0x00	; 0
    476a:	54 2f       	mov	r21, r20
    476c:	44 27       	eor	r20, r20
    476e:	55 0f       	add	r21, r21
    4770:	55 0f       	add	r21, r21
    4772:	84 0f       	add	r24, r20
    4774:	95 1f       	adc	r25, r21
    4776:	ac 01       	movw	r20, r24
    4778:	60 e0       	ldi	r22, 0x00	; 0
    477a:	70 e0       	ldi	r23, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    477c:	9e 81       	ldd	r25, Y+6	; 0x06
    477e:	9f 70       	andi	r25, 0x0F	; 15
    4780:	8b 85       	ldd	r24, Y+11	; 0x0b
    4782:	88 1f       	adc	r24, r24
    4784:	88 27       	eor	r24, r24
    4786:	88 1f       	adc	r24, r24
    4788:	98 0f       	add	r25, r24
    478a:	9e 5f       	subi	r25, 0xFE	; 254
    478c:	8a 85       	ldd	r24, Y+10	; 0x0a
    478e:	83 70       	andi	r24, 0x03	; 3
    4790:	88 0f       	add	r24, r24
    4792:	89 0f       	add	r24, r25
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	09 97       	sbiw	r24, 0x09	; 9
    4798:	8a 01       	movw	r16, r20
    479a:	9b 01       	movw	r18, r22
    479c:	04 c0       	rjmp	.+8      	; 0x47a6 <disk_ioctl+0x130>
    479e:	00 0f       	add	r16, r16
    47a0:	11 1f       	adc	r17, r17
    47a2:	22 1f       	adc	r18, r18
    47a4:	33 1f       	adc	r19, r19
    47a6:	8a 95       	dec	r24
    47a8:	d2 f7       	brpl	.-12     	; 0x479e <disk_ioctl+0x128>
    47aa:	f7 01       	movw	r30, r14
    47ac:	00 83       	st	Z, r16
    47ae:	11 83       	std	Z+1, r17	; 0x01
    47b0:	22 83       	std	Z+2, r18	; 0x02
    47b2:	33 83       	std	Z+3, r19	; 0x03
				}
				res = RES_OK;
    47b4:	10 e0       	ldi	r17, 0x00	; 0
    47b6:	12 c0       	rjmp	.+36     	; 0x47dc <disk_ioctl+0x166>
			}
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			*(DWORD*)buff = 128;
    47b8:	80 e8       	ldi	r24, 0x80	; 128
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	a0 e0       	ldi	r26, 0x00	; 0
    47be:	b0 e0       	ldi	r27, 0x00	; 0
    47c0:	f7 01       	movw	r30, r14
    47c2:	80 83       	st	Z, r24
    47c4:	91 83       	std	Z+1, r25	; 0x01
    47c6:	a2 83       	std	Z+2, r26	; 0x02
    47c8:	b3 83       	std	Z+3, r27	; 0x03
			res = RES_OK;
    47ca:	10 e0       	ldi	r17, 0x00	; 0
			break;
    47cc:	07 c0       	rjmp	.+14     	; 0x47dc <disk_ioctl+0x166>

		default:
			res = RES_PARERR;
    47ce:	14 e0       	ldi	r17, 0x04	; 4
    47d0:	05 c0       	rjmp	.+10     	; 0x47dc <disk_ioctl+0x166>
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
	switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
    47d2:	10 e0       	ldi	r17, 0x00	; 0
    47d4:	03 c0       	rjmp	.+6      	; 0x47dc <disk_ioctl+0x166>
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
    47d6:	11 e0       	ldi	r17, 0x01	; 1
    47d8:	01 c0       	rjmp	.+2      	; 0x47dc <disk_ioctl+0x166>
    47da:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
	}

	deselect();
    47dc:	0e 94 8b 20 	call	0x4116	; 0x4116 <deselect>

	return res;
    47e0:	01 c0       	rjmp	.+2      	; 0x47e4 <disk_ioctl+0x16e>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    47e2:	13 e0       	ldi	r17, 0x03	; 3
	}

	deselect();

	return res;
}
    47e4:	81 2f       	mov	r24, r17
    47e6:	60 96       	adiw	r28, 0x10	; 16
    47e8:	0f b6       	in	r0, 0x3f	; 63
    47ea:	f8 94       	cli
    47ec:	de bf       	out	0x3e, r29	; 62
    47ee:	0f be       	out	0x3f, r0	; 63
    47f0:	cd bf       	out	0x3d, r28	; 61
    47f2:	df 91       	pop	r29
    47f4:	cf 91       	pop	r28
    47f6:	1f 91       	pop	r17
    47f8:	0f 91       	pop	r16
    47fa:	ff 90       	pop	r15
    47fc:	ef 90       	pop	r14
    47fe:	08 95       	ret

00004800 <__mulsi3>:
    4800:	62 9f       	mul	r22, r18
    4802:	d0 01       	movw	r26, r0
    4804:	73 9f       	mul	r23, r19
    4806:	f0 01       	movw	r30, r0
    4808:	82 9f       	mul	r24, r18
    480a:	e0 0d       	add	r30, r0
    480c:	f1 1d       	adc	r31, r1
    480e:	64 9f       	mul	r22, r20
    4810:	e0 0d       	add	r30, r0
    4812:	f1 1d       	adc	r31, r1
    4814:	92 9f       	mul	r25, r18
    4816:	f0 0d       	add	r31, r0
    4818:	83 9f       	mul	r24, r19
    481a:	f0 0d       	add	r31, r0
    481c:	74 9f       	mul	r23, r20
    481e:	f0 0d       	add	r31, r0
    4820:	65 9f       	mul	r22, r21
    4822:	f0 0d       	add	r31, r0
    4824:	99 27       	eor	r25, r25
    4826:	72 9f       	mul	r23, r18
    4828:	b0 0d       	add	r27, r0
    482a:	e1 1d       	adc	r30, r1
    482c:	f9 1f       	adc	r31, r25
    482e:	63 9f       	mul	r22, r19
    4830:	b0 0d       	add	r27, r0
    4832:	e1 1d       	adc	r30, r1
    4834:	f9 1f       	adc	r31, r25
    4836:	bd 01       	movw	r22, r26
    4838:	cf 01       	movw	r24, r30
    483a:	11 24       	eor	r1, r1
    483c:	08 95       	ret

0000483e <__udivmodsi4>:
    483e:	a1 e2       	ldi	r26, 0x21	; 33
    4840:	1a 2e       	mov	r1, r26
    4842:	aa 1b       	sub	r26, r26
    4844:	bb 1b       	sub	r27, r27
    4846:	fd 01       	movw	r30, r26
    4848:	0d c0       	rjmp	.+26     	; 0x4864 <__udivmodsi4_ep>

0000484a <__udivmodsi4_loop>:
    484a:	aa 1f       	adc	r26, r26
    484c:	bb 1f       	adc	r27, r27
    484e:	ee 1f       	adc	r30, r30
    4850:	ff 1f       	adc	r31, r31
    4852:	a2 17       	cp	r26, r18
    4854:	b3 07       	cpc	r27, r19
    4856:	e4 07       	cpc	r30, r20
    4858:	f5 07       	cpc	r31, r21
    485a:	20 f0       	brcs	.+8      	; 0x4864 <__udivmodsi4_ep>
    485c:	a2 1b       	sub	r26, r18
    485e:	b3 0b       	sbc	r27, r19
    4860:	e4 0b       	sbc	r30, r20
    4862:	f5 0b       	sbc	r31, r21

00004864 <__udivmodsi4_ep>:
    4864:	66 1f       	adc	r22, r22
    4866:	77 1f       	adc	r23, r23
    4868:	88 1f       	adc	r24, r24
    486a:	99 1f       	adc	r25, r25
    486c:	1a 94       	dec	r1
    486e:	69 f7       	brne	.-38     	; 0x484a <__udivmodsi4_loop>
    4870:	60 95       	com	r22
    4872:	70 95       	com	r23
    4874:	80 95       	com	r24
    4876:	90 95       	com	r25
    4878:	9b 01       	movw	r18, r22
    487a:	ac 01       	movw	r20, r24
    487c:	bd 01       	movw	r22, r26
    487e:	cf 01       	movw	r24, r30
    4880:	08 95       	ret

00004882 <_exit>:
    4882:	f8 94       	cli

00004884 <__stop_program>:
    4884:	ff cf       	rjmp	.-2      	; 0x4884 <__stop_program>
