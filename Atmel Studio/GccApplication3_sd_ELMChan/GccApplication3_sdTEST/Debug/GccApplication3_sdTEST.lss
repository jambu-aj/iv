
GccApplication3_sdTEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00004458  000044ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004458  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a7  0080011e  0080011e  0000450a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000450c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00004bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00004c60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002763  00000000  00000000  00004d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000058f  00000000  00000000  000074c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e87  00000000  00000000  00007a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b6c  00000000  00000000  000088dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066e  00000000  00000000  00009448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000051db  00000000  00000000  00009ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000ec91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e5       	ldi	r30, 0x58	; 88
      a0:	f4 e4       	ldi	r31, 0x44	; 68
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 31       	cpi	r26, 0x1E	; 30
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	13 e0       	ldi	r17, 0x03	; 3
      b4:	ae e1       	ldi	r26, 0x1E	; 30
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a5 3c       	cpi	r26, 0xC5	; 197
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <main>
      c6:	0c 94 2a 22 	jmp	0x4454	; 0x4454 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
      ce:	41 15       	cp	r20, r1
      d0:	51 05       	cpc	r21, r1
      d2:	49 f0       	breq	.+18     	; 0xe6 <mem_cpy+0x18>
      d4:	a6 2f       	mov	r26, r22
      d6:	b7 2f       	mov	r27, r23
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
      d8:	e8 2f       	mov	r30, r24
      da:	f9 2f       	mov	r31, r25
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
      dc:	8d 91       	ld	r24, X+
      de:	81 93       	st	Z+, r24
      e0:	41 50       	subi	r20, 0x01	; 1
      e2:	50 40       	sbci	r21, 0x00	; 0
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
      e4:	d9 f7       	brne	.-10     	; 0xdc <mem_cpy+0xe>
      e6:	08 95       	ret

000000e8 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
      e8:	41 15       	cp	r20, r1
      ea:	51 05       	cpc	r21, r1
      ec:	31 f0       	breq	.+12     	; 0xfa <mem_set+0x12>
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
      ee:	e8 2f       	mov	r30, r24
      f0:	f9 2f       	mov	r31, r25

	while (cnt--)
		*d++ = (BYTE)val;
      f2:	61 93       	st	Z+, r22
      f4:	41 50       	subi	r20, 0x01	; 1
      f6:	50 40       	sbci	r21, 0x00	; 0
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
      f8:	e1 f7       	brne	.-8      	; 0xf2 <mem_set+0xa>
      fa:	08 95       	ret

000000fc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIRS *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
      fc:	ef 92       	push	r14
      fe:	ff 92       	push	r15
     100:	0f 93       	push	r16
     102:	1f 93       	push	r17
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
     108:	fc 01       	movw	r30, r24
     10a:	7b 01       	movw	r14, r22
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
     10c:	8b 01       	movw	r16, r22
     10e:	07 5f       	subi	r16, 0xF7	; 247
     110:	1f 4f       	sbci	r17, 0xFF	; 255
	if (dj->sect) {
     112:	86 85       	ldd	r24, Z+14	; 0x0e
     114:	97 85       	ldd	r25, Z+15	; 0x0f
     116:	a0 89       	ldd	r26, Z+16	; 0x10
     118:	b1 89       	ldd	r27, Z+17	; 0x11
     11a:	00 97       	sbiw	r24, 0x00	; 0
     11c:	a1 05       	cpc	r26, r1
     11e:	b1 05       	cpc	r27, r1
     120:	09 f4       	brne	.+2      	; 0x124 <get_fileinfo+0x28>
     122:	65 c0       	rjmp	.+202    	; 0x1ee <get_fileinfo+0xf2>
		dir = dj->dir;
     124:	c2 89       	ldd	r28, Z+18	; 0x12
     126:	d3 89       	ldd	r29, Z+19	; 0x13
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
     128:	28 81       	ld	r18, Y
			if (c == ' ') break;
     12a:	20 32       	cpi	r18, 0x20	; 32
     12c:	99 f0       	breq	.+38     	; 0x154 <get_fileinfo+0x58>
/*-----------------------------------------------------------------------*/
/* Get file information from directory entry                             */
/*-----------------------------------------------------------------------*/
#if _FS_MINIMIZE <= 1
static
void get_fileinfo (		/* No return code */
     12e:	de 01       	movw	r26, r28
     130:	11 96       	adiw	r26, 0x01	; 1
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
     132:	f8 01       	movw	r30, r16

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	90 e0       	ldi	r25, 0x00	; 0
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
     138:	35 ee       	ldi	r19, 0xE5	; 229
     13a:	03 c0       	rjmp	.+6      	; 0x142 <get_fileinfo+0x46>
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
     13c:	2d 91       	ld	r18, X+
			if (c == ' ') break;
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	49 f0       	breq	.+18     	; 0x154 <get_fileinfo+0x58>
			if (c == NDDE) c = (TCHAR)DDE;
     142:	25 30       	cpi	r18, 0x05	; 5
     144:	09 f4       	brne	.+2      	; 0x148 <get_fileinfo+0x4c>
     146:	23 2f       	mov	r18, r19
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
     148:	21 93       	st	Z+, r18
     14a:	8f 01       	movw	r16, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
     14c:	01 96       	adiw	r24, 0x01	; 1
     14e:	88 30       	cpi	r24, 0x08	; 8
     150:	91 05       	cpc	r25, r1
     152:	a1 f7       	brne	.-24     	; 0x13c <get_fileinfo+0x40>
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
     154:	88 85       	ldd	r24, Y+8	; 0x08
     156:	80 32       	cpi	r24, 0x20	; 32
     158:	81 f0       	breq	.+32     	; 0x17a <get_fileinfo+0x7e>
			*p++ = '.';
     15a:	8e e2       	ldi	r24, 0x2E	; 46
     15c:	f8 01       	movw	r30, r16
     15e:	80 83       	st	Z, r24
			for (i = 8; i < 11; i++) {
				c = dir[i];
     160:	88 85       	ldd	r24, Y+8	; 0x08
				if (c == ' ') break;
     162:	80 32       	cpi	r24, 0x20	; 32
     164:	09 f0       	breq	.+2      	; 0x168 <get_fileinfo+0x6c>
     166:	4c c0       	rjmp	.+152    	; 0x200 <get_fileinfo+0x104>
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
     168:	0f 5f       	subi	r16, 0xFF	; 255
     16a:	1f 4f       	sbci	r17, 0xFF	; 255
     16c:	06 c0       	rjmp	.+12     	; 0x17a <get_fileinfo+0x7e>
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
     16e:	8c 01       	movw	r16, r24
     170:	04 c0       	rjmp	.+8      	; 0x17a <get_fileinfo+0x7e>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     172:	f8 01       	movw	r30, r16
     174:	23 83       	std	Z+3, r18	; 0x03
     176:	0c 5f       	subi	r16, 0xFC	; 252
     178:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     17a:	8b 85       	ldd	r24, Y+11	; 0x0b
     17c:	f7 01       	movw	r30, r14
     17e:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     180:	8f 8d       	ldd	r24, Y+31	; 0x1f
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b0 e0       	ldi	r27, 0x00	; 0
     188:	b8 2f       	mov	r27, r24
     18a:	aa 27       	eor	r26, r26
     18c:	99 27       	eor	r25, r25
     18e:	88 27       	eor	r24, r24
     190:	4e 8d       	ldd	r20, Y+30	; 0x1e
     192:	50 e0       	ldi	r21, 0x00	; 0
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	70 e0       	ldi	r23, 0x00	; 0
     198:	ba 01       	movw	r22, r20
     19a:	55 27       	eor	r21, r21
     19c:	44 27       	eor	r20, r20
     19e:	48 2b       	or	r20, r24
     1a0:	59 2b       	or	r21, r25
     1a2:	6a 2b       	or	r22, r26
     1a4:	7b 2b       	or	r23, r27
     1a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	a0 e0       	ldi	r26, 0x00	; 0
     1ac:	b0 e0       	ldi	r27, 0x00	; 0
     1ae:	48 2b       	or	r20, r24
     1b0:	59 2b       	or	r21, r25
     1b2:	6a 2b       	or	r22, r26
     1b4:	7b 2b       	or	r23, r27
     1b6:	9d 8d       	ldd	r25, Y+29	; 0x1d
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	a0 e0       	ldi	r26, 0x00	; 0
     1bc:	b0 e0       	ldi	r27, 0x00	; 0
     1be:	84 2b       	or	r24, r20
     1c0:	95 2b       	or	r25, r21
     1c2:	a6 2b       	or	r26, r22
     1c4:	b7 2b       	or	r27, r23
     1c6:	80 83       	st	Z, r24
     1c8:	91 83       	std	Z+1, r25	; 0x01
     1ca:	a2 83       	std	Z+2, r26	; 0x02
     1cc:	b3 83       	std	Z+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     1ce:	39 8d       	ldd	r19, Y+25	; 0x19
     1d0:	20 e0       	ldi	r18, 0x00	; 0
     1d2:	88 8d       	ldd	r24, Y+24	; 0x18
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	82 2b       	or	r24, r18
     1d8:	93 2b       	or	r25, r19
     1da:	95 83       	std	Z+5, r25	; 0x05
     1dc:	84 83       	std	Z+4, r24	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     1de:	9f 89       	ldd	r25, Y+23	; 0x17
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	2e 89       	ldd	r18, Y+22	; 0x16
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	82 2b       	or	r24, r18
     1e8:	93 2b       	or	r25, r19
     1ea:	97 83       	std	Z+7, r25	; 0x07
     1ec:	86 83       	std	Z+6, r24	; 0x06
	}
	*p = 0;		/* Terminate SFN str by a \0 */
     1ee:	f8 01       	movw	r30, r16
     1f0:	10 82       	st	Z, r1
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
	}
#endif
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	ff 90       	pop	r15
     1fc:	ef 90       	pop	r14
     1fe:	08 95       	ret
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     200:	f8 01       	movw	r30, r16
     202:	81 83       	std	Z+1, r24	; 0x01
     204:	c8 01       	movw	r24, r16
     206:	02 96       	adiw	r24, 0x02	; 2
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
     208:	29 85       	ldd	r18, Y+9	; 0x09
				if (c == ' ') break;
     20a:	20 32       	cpi	r18, 0x20	; 32
     20c:	09 f4       	brne	.+2      	; 0x210 <get_fileinfo+0x114>
     20e:	af cf       	rjmp	.-162    	; 0x16e <get_fileinfo+0x72>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     210:	22 83       	std	Z+2, r18	; 0x02
     212:	c8 01       	movw	r24, r16
     214:	03 96       	adiw	r24, 0x03	; 3
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
     216:	2a 85       	ldd	r18, Y+10	; 0x0a
				if (c == ' ') break;
     218:	20 32       	cpi	r18, 0x20	; 32
     21a:	09 f0       	breq	.+2      	; 0x21e <get_fileinfo+0x122>
     21c:	aa cf       	rjmp	.-172    	; 0x172 <get_fileinfo+0x76>
     21e:	a7 cf       	rjmp	.-178    	; 0x16e <get_fileinfo+0x72>

00000220 <validate>:
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
     220:	00 97       	sbiw	r24, 0x00	; 0
     222:	81 f0       	breq	.+32     	; 0x244 <validate+0x24>
     224:	fc 01       	movw	r30, r24
     226:	20 81       	ld	r18, Z
     228:	22 23       	and	r18, r18
     22a:	71 f0       	breq	.+28     	; 0x248 <validate+0x28>
     22c:	26 81       	ldd	r18, Z+6	; 0x06
     22e:	37 81       	ldd	r19, Z+7	; 0x07
     230:	26 17       	cp	r18, r22
     232:	37 07       	cpc	r19, r23
     234:	59 f4       	brne	.+22     	; 0x24c <validate+0x2c>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
     236:	81 81       	ldd	r24, Z+1	; 0x01
     238:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <disk_status>
     23c:	80 ff       	sbrs	r24, 0
     23e:	08 c0       	rjmp	.+16     	; 0x250 <validate+0x30>
		return FR_NOT_READY;
     240:	83 e0       	ldi	r24, 0x03	; 3
     242:	08 95       	ret
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
     244:	89 e0       	ldi	r24, 0x09	; 9
     246:	08 95       	ret
     248:	89 e0       	ldi	r24, 0x09	; 9
     24a:	08 95       	ret
     24c:	89 e0       	ldi	r24, 0x09	; 9
     24e:	08 95       	ret
	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
     250:	80 e0       	ldi	r24, 0x00	; 0
}
     252:	08 95       	ret

00000254 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	ec 01       	movw	r28, r24
     25e:	9a 01       	movw	r18, r20
     260:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
     262:	bc 01       	movw	r22, r24
     264:	62 5d       	subi	r22, 0xD2	; 210
     266:	7f 4f       	sbci	r23, 0xFF	; 255
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	01 e0       	ldi	r16, 0x01	; 1
     26c:	10 e0       	ldi	r17, 0x00	; 0
     26e:	0e 94 63 20 	call	0x40c6	; 0x40c6 <disk_read>
     272:	88 23       	and	r24, r24
     274:	09 f0       	breq	.+2      	; 0x278 <check_fs+0x24>
     276:	83 c0       	rjmp	.+262    	; 0x37e <check_fs+0x12a>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
     278:	fe 01       	movw	r30, r28
     27a:	e3 5d       	subi	r30, 0xD3	; 211
     27c:	fd 4f       	sbci	r31, 0xFD	; 253
     27e:	90 81       	ld	r25, Z
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	fe 01       	movw	r30, r28
     284:	e4 5d       	subi	r30, 0xD4	; 212
     286:	fd 4f       	sbci	r31, 0xFD	; 253
     288:	20 81       	ld	r18, Z
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	82 2b       	or	r24, r18
     28e:	93 2b       	or	r25, r19
     290:	2a ea       	ldi	r18, 0xAA	; 170
     292:	85 35       	cpi	r24, 0x55	; 85
     294:	92 07       	cpc	r25, r18
     296:	09 f0       	breq	.+2      	; 0x29a <check_fs+0x46>
     298:	74 c0       	rjmp	.+232    	; 0x382 <check_fs+0x12e>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     29a:	fe 01       	movw	r30, r28
     29c:	e9 59       	subi	r30, 0x99	; 153
     29e:	ff 4f       	sbci	r31, 0xFF	; 255
     2a0:	80 81       	ld	r24, Z
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	a0 e0       	ldi	r26, 0x00	; 0
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	b8 2f       	mov	r27, r24
     2aa:	aa 27       	eor	r26, r26
     2ac:	99 27       	eor	r25, r25
     2ae:	88 27       	eor	r24, r24
     2b0:	fe 01       	movw	r30, r28
     2b2:	ea 59       	subi	r30, 0x9A	; 154
     2b4:	ff 4f       	sbci	r31, 0xFF	; 255
     2b6:	40 81       	ld	r20, Z
     2b8:	50 e0       	ldi	r21, 0x00	; 0
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	ba 01       	movw	r22, r20
     2c0:	55 27       	eor	r21, r21
     2c2:	44 27       	eor	r20, r20
     2c4:	48 2b       	or	r20, r24
     2c6:	59 2b       	or	r21, r25
     2c8:	6a 2b       	or	r22, r26
     2ca:	7b 2b       	or	r23, r27
     2cc:	fe 01       	movw	r30, r28
     2ce:	ec 59       	subi	r30, 0x9C	; 156
     2d0:	ff 4f       	sbci	r31, 0xFF	; 255
     2d2:	80 81       	ld	r24, Z
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	a0 e0       	ldi	r26, 0x00	; 0
     2d8:	b0 e0       	ldi	r27, 0x00	; 0
     2da:	48 2b       	or	r20, r24
     2dc:	59 2b       	or	r21, r25
     2de:	6a 2b       	or	r22, r26
     2e0:	7b 2b       	or	r23, r27
     2e2:	fe 01       	movw	r30, r28
     2e4:	eb 59       	subi	r30, 0x9B	; 155
     2e6:	ff 4f       	sbci	r31, 0xFF	; 255
     2e8:	90 81       	ld	r25, Z
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	a0 e0       	ldi	r26, 0x00	; 0
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	48 2b       	or	r20, r24
     2f2:	59 2b       	or	r21, r25
     2f4:	6a 2b       	or	r22, r26
     2f6:	7b 2b       	or	r23, r27
     2f8:	70 70       	andi	r23, 0x00	; 0
     2fa:	46 34       	cpi	r20, 0x46	; 70
     2fc:	81 e4       	ldi	r24, 0x41	; 65
     2fe:	58 07       	cpc	r21, r24
     300:	84 e5       	ldi	r24, 0x54	; 84
     302:	68 07       	cpc	r22, r24
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	78 07       	cpc	r23, r24
     308:	f1 f1       	breq	.+124    	; 0x386 <check_fs+0x132>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
     30a:	fe 01       	movw	r30, r28
     30c:	ed 57       	subi	r30, 0x7D	; 125
     30e:	ff 4f       	sbci	r31, 0xFF	; 255
     310:	80 81       	ld	r24, Z
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	a0 e0       	ldi	r26, 0x00	; 0
     316:	b0 e0       	ldi	r27, 0x00	; 0
     318:	b8 2f       	mov	r27, r24
     31a:	aa 27       	eor	r26, r26
     31c:	99 27       	eor	r25, r25
     31e:	88 27       	eor	r24, r24
     320:	fe 01       	movw	r30, r28
     322:	ee 57       	subi	r30, 0x7E	; 126
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	40 81       	ld	r20, Z
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	ba 01       	movw	r22, r20
     330:	55 27       	eor	r21, r21
     332:	44 27       	eor	r20, r20
     334:	48 2b       	or	r20, r24
     336:	59 2b       	or	r21, r25
     338:	6a 2b       	or	r22, r26
     33a:	7b 2b       	or	r23, r27
     33c:	fe 01       	movw	r30, r28
     33e:	e0 58       	subi	r30, 0x80	; 128
     340:	ff 4f       	sbci	r31, 0xFF	; 255
     342:	80 81       	ld	r24, Z
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	a0 e0       	ldi	r26, 0x00	; 0
     348:	b0 e0       	ldi	r27, 0x00	; 0
     34a:	48 2b       	or	r20, r24
     34c:	59 2b       	or	r21, r25
     34e:	6a 2b       	or	r22, r26
     350:	7b 2b       	or	r23, r27
     352:	cf 57       	subi	r28, 0x7F	; 127
     354:	df 4f       	sbci	r29, 0xFF	; 255
     356:	98 81       	ld	r25, Y
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	a0 e0       	ldi	r26, 0x00	; 0
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	48 2b       	or	r20, r24
     360:	59 2b       	or	r21, r25
     362:	6a 2b       	or	r22, r26
     364:	7b 2b       	or	r23, r27
     366:	70 70       	andi	r23, 0x00	; 0
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	46 34       	cpi	r20, 0x46	; 70
     36c:	91 e4       	ldi	r25, 0x41	; 65
     36e:	59 07       	cpc	r21, r25
     370:	94 e5       	ldi	r25, 0x54	; 84
     372:	69 07       	cpc	r22, r25
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	79 07       	cpc	r23, r25
     378:	39 f4       	brne	.+14     	; 0x388 <check_fs+0x134>
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	05 c0       	rjmp	.+10     	; 0x388 <check_fs+0x134>
     37e:	83 e0       	ldi	r24, 0x03	; 3
     380:	03 c0       	rjmp	.+6      	; 0x388 <check_fs+0x134>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
     382:	82 e0       	ldi	r24, 0x02	; 2
     384:	01 c0       	rjmp	.+2      	; 0x388 <check_fs+0x134>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
     386:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	08 95       	ret

00000392 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
     392:	2f 92       	push	r2
     394:	3f 92       	push	r3
     396:	4f 92       	push	r4
     398:	5f 92       	push	r5
     39a:	6f 92       	push	r6
     39c:	7f 92       	push	r7
     39e:	8f 92       	push	r8
     3a0:	9f 92       	push	r9
     3a2:	af 92       	push	r10
     3a4:	bf 92       	push	r11
     3a6:	cf 92       	push	r12
     3a8:	df 92       	push	r13
     3aa:	ef 92       	push	r14
     3ac:	ff 92       	push	r15
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	60 97       	sbiw	r28, 0x10	; 16
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	f8 94       	cli
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	cd bf       	out	0x3d, r28	; 61
     3c6:	dc 01       	movw	r26, r24
     3c8:	04 2f       	mov	r16, r20
	BYTE fmt, b, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
     3ca:	ed 91       	ld	r30, X+
     3cc:	fc 91       	ld	r31, X
     3ce:	11 97       	sbiw	r26, 0x01	; 1
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
     3d0:	80 81       	ld	r24, Z
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	c0 97       	sbiw	r24, 0x30	; 48
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
     3d6:	8a 30       	cpi	r24, 0x0A	; 10
     3d8:	91 05       	cpc	r25, r1
     3da:	50 f4       	brcc	.+20     	; 0x3f0 <chk_mounted+0x5e>
     3dc:	21 81       	ldd	r18, Z+1	; 0x01
     3de:	2a 33       	cpi	r18, 0x3A	; 58
     3e0:	39 f4       	brne	.+14     	; 0x3f0 <chk_mounted+0x5e>
		p += 2; *path = p;				/* Return pointer to the path name */
     3e2:	32 96       	adiw	r30, 0x02	; 2
     3e4:	11 96       	adiw	r26, 0x01	; 1
     3e6:	fc 93       	st	X, r31
     3e8:	ee 93       	st	-X, r30
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
     3ea:	00 97       	sbiw	r24, 0x00	; 0
     3ec:	09 f0       	breq	.+2      	; 0x3f0 <chk_mounted+0x5e>
     3ee:	99 c3       	rjmp	.+1842   	; 0xb22 <chk_mounted+0x790>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
     3f0:	e0 90 1e 01 	lds	r14, 0x011E
     3f4:	f0 90 1f 01 	lds	r15, 0x011F
     3f8:	db 01       	movw	r26, r22
     3fa:	11 96       	adiw	r26, 0x01	; 1
     3fc:	fc 92       	st	X, r15
     3fe:	ee 92       	st	-X, r14
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     400:	e1 14       	cp	r14, r1
     402:	f1 04       	cpc	r15, r1
     404:	09 f4       	brne	.+2      	; 0x408 <chk_mounted+0x76>
     406:	8f c3       	rjmp	.+1822   	; 0xb26 <chk_mounted+0x794>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
     408:	f7 01       	movw	r30, r14
     40a:	80 81       	ld	r24, Z
     40c:	88 23       	and	r24, r24
     40e:	61 f0       	breq	.+24     	; 0x428 <chk_mounted+0x96>
		stat = disk_status(fs->drv);
     410:	81 81       	ldd	r24, Z+1	; 0x01
     412:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
     416:	80 fd       	sbrc	r24, 0
     418:	07 c0       	rjmp	.+14     	; 0x428 <chk_mounted+0x96>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
     41a:	00 23       	and	r16, r16
     41c:	09 f4       	brne	.+2      	; 0x420 <chk_mounted+0x8e>
     41e:	85 c3       	rjmp	.+1802   	; 0xb2a <chk_mounted+0x798>
     420:	82 fd       	sbrc	r24, 2
     422:	85 c3       	rjmp	.+1802   	; 0xb2e <chk_mounted+0x79c>
				return FR_WRITE_PROTECTED;
#endif
			return FR_OK;				/* The file system object is valid */
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	a4 c3       	rjmp	.+1864   	; 0xb70 <chk_mounted+0x7de>
	}

	/* The logical drive must be mounted. */
	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
     428:	d7 01       	movw	r26, r14
     42a:	1c 92       	st	X, r1
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
     42c:	11 96       	adiw	r26, 0x01	; 1
     42e:	1c 92       	st	X, r1
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
     436:	80 fd       	sbrc	r24, 0
     438:	7c c3       	rjmp	.+1784   	; 0xb32 <chk_mounted+0x7a0>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
     43a:	00 23       	and	r16, r16
     43c:	11 f0       	breq	.+4      	; 0x442 <chk_mounted+0xb0>
     43e:	82 fd       	sbrc	r24, 2
     440:	7a c3       	rjmp	.+1780   	; 0xb36 <chk_mounted+0x7a4>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
     442:	c7 01       	movw	r24, r14
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	50 e0       	ldi	r21, 0x00	; 0
     448:	ba 01       	movw	r22, r20
     44a:	0e 94 2a 01 	call	0x254	; 0x254 <check_fs>
	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
     44e:	81 30       	cpi	r24, 0x01	; 1
     450:	e9 f5       	brne	.+122    	; 0x4cc <chk_mounted+0x13a>
		/* Check the partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * SZ_PTE];/* Partition table */
		if (tbl[4]) {									/* Is the partition existing? */
     452:	f7 01       	movw	r30, r14
     454:	e0 51       	subi	r30, 0x10	; 16
     456:	fe 4f       	sbci	r31, 0xFE	; 254
     458:	80 81       	ld	r24, Z
     45a:	88 23       	and	r24, r24
     45c:	09 f4       	brne	.+2      	; 0x460 <chk_mounted+0xce>
     45e:	6d c3       	rjmp	.+1754   	; 0xb3a <chk_mounted+0x7a8>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
     460:	f7 01       	movw	r30, r14
     462:	e9 50       	subi	r30, 0x09	; 9
     464:	fe 4f       	sbci	r31, 0xFE	; 254
     466:	80 81       	ld	r24, Z
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	a0 e0       	ldi	r26, 0x00	; 0
     46c:	b0 e0       	ldi	r27, 0x00	; 0
     46e:	b8 2f       	mov	r27, r24
     470:	aa 27       	eor	r26, r26
     472:	99 27       	eor	r25, r25
     474:	88 27       	eor	r24, r24
     476:	f7 01       	movw	r30, r14
     478:	ea 50       	subi	r30, 0x0A	; 10
     47a:	fe 4f       	sbci	r31, 0xFE	; 254
     47c:	40 81       	ld	r20, Z
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	ba 01       	movw	r22, r20
     486:	55 27       	eor	r21, r21
     488:	44 27       	eor	r20, r20
     48a:	84 2b       	or	r24, r20
     48c:	95 2b       	or	r25, r21
     48e:	a6 2b       	or	r26, r22
     490:	b7 2b       	or	r27, r23
     492:	f7 01       	movw	r30, r14
     494:	ec 50       	subi	r30, 0x0C	; 12
     496:	fe 4f       	sbci	r31, 0xFE	; 254
     498:	40 81       	ld	r20, Z
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	48 2b       	or	r20, r24
     4a2:	59 2b       	or	r21, r25
     4a4:	6a 2b       	or	r22, r26
     4a6:	7b 2b       	or	r23, r27
     4a8:	f7 01       	movw	r30, r14
     4aa:	eb 50       	subi	r30, 0x0B	; 11
     4ac:	fe 4f       	sbci	r31, 0xFE	; 254
     4ae:	90 81       	ld	r25, Z
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	4c 01       	movw	r8, r24
     4b4:	aa 24       	eor	r10, r10
     4b6:	bb 24       	eor	r11, r11
     4b8:	84 2a       	or	r8, r20
     4ba:	95 2a       	or	r9, r21
     4bc:	a6 2a       	or	r10, r22
     4be:	b7 2a       	or	r11, r23
			fmt = check_fs(fs, bsect);					/* Check the partition */
     4c0:	c7 01       	movw	r24, r14
     4c2:	b5 01       	movw	r22, r10
     4c4:	a4 01       	movw	r20, r8
     4c6:	0e 94 2a 01 	call	0x254	; 0x254 <check_fs>
     4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <chk_mounted+0x140>
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
     4cc:	88 24       	eor	r8, r8
     4ce:	99 24       	eor	r9, r9
     4d0:	54 01       	movw	r10, r8
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     4d2:	83 30       	cpi	r24, 0x03	; 3
     4d4:	09 f4       	brne	.+2      	; 0x4d8 <chk_mounted+0x146>
     4d6:	33 c3       	rjmp	.+1638   	; 0xb3e <chk_mounted+0x7ac>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
     4d8:	88 23       	and	r24, r24
     4da:	09 f0       	breq	.+2      	; 0x4de <chk_mounted+0x14c>
     4dc:	32 c3       	rjmp	.+1636   	; 0xb42 <chk_mounted+0x7b0>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
     4de:	f7 01       	movw	r30, r14
     4e0:	92 ad       	sts	0x62, r25
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	21 ad       	sts	0x61, r18
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	82 2b       	or	r24, r18
     4ea:	93 2b       	or	r25, r19
     4ec:	f2 e0       	ldi	r31, 0x02	; 2
     4ee:	80 30       	cpi	r24, 0x00	; 0
     4f0:	9f 07       	cpc	r25, r31
     4f2:	09 f0       	breq	.+2      	; 0x4f6 <chk_mounted+0x164>
     4f4:	28 c3       	rjmp	.+1616   	; 0xb46 <chk_mounted+0x7b4>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
     4f6:	f7 01       	movw	r30, r14
     4f8:	eb 5b       	subi	r30, 0xBB	; 187
     4fa:	ff 4f       	sbci	r31, 0xFF	; 255
     4fc:	30 81       	ld	r19, Z
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	f7 01       	movw	r30, r14
     502:	ec 5b       	subi	r30, 0xBC	; 188
     504:	ff 4f       	sbci	r31, 0xFF	; 255
     506:	80 81       	ld	r24, Z
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	82 2b       	or	r24, r18
     50c:	93 2b       	or	r25, r19
     50e:	2c 01       	movw	r4, r24
     510:	66 24       	eor	r6, r6
     512:	77 24       	eor	r7, r7
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
     514:	41 14       	cp	r4, r1
     516:	51 04       	cpc	r5, r1
     518:	61 04       	cpc	r6, r1
     51a:	71 04       	cpc	r7, r1
     51c:	89 f5       	brne	.+98     	; 0x580 <chk_mounted+0x1ee>
     51e:	f7 01       	movw	r30, r14
     520:	eb 5a       	subi	r30, 0xAB	; 171
     522:	ff 4f       	sbci	r31, 0xFF	; 255
     524:	40 81       	ld	r20, Z
     526:	50 e0       	ldi	r21, 0x00	; 0
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	74 2f       	mov	r23, r20
     52e:	66 27       	eor	r22, r22
     530:	55 27       	eor	r21, r21
     532:	44 27       	eor	r20, r20
     534:	f7 01       	movw	r30, r14
     536:	ec 5a       	subi	r30, 0xAC	; 172
     538:	ff 4f       	sbci	r31, 0xFF	; 255
     53a:	80 81       	ld	r24, Z
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	a0 e0       	ldi	r26, 0x00	; 0
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	dc 01       	movw	r26, r24
     544:	99 27       	eor	r25, r25
     546:	88 27       	eor	r24, r24
     548:	48 2b       	or	r20, r24
     54a:	59 2b       	or	r21, r25
     54c:	6a 2b       	or	r22, r26
     54e:	7b 2b       	or	r23, r27
     550:	f7 01       	movw	r30, r14
     552:	ee 5a       	subi	r30, 0xAE	; 174
     554:	ff 4f       	sbci	r31, 0xFF	; 255
     556:	80 81       	ld	r24, Z
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	a0 e0       	ldi	r26, 0x00	; 0
     55c:	b0 e0       	ldi	r27, 0x00	; 0
     55e:	48 2b       	or	r20, r24
     560:	59 2b       	or	r21, r25
     562:	6a 2b       	or	r22, r26
     564:	7b 2b       	or	r23, r27
     566:	f7 01       	movw	r30, r14
     568:	ed 5a       	subi	r30, 0xAD	; 173
     56a:	ff 4f       	sbci	r31, 0xFF	; 255
     56c:	90 81       	ld	r25, Z
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	a0 e0       	ldi	r26, 0x00	; 0
     572:	b0 e0       	ldi	r27, 0x00	; 0
     574:	2a 01       	movw	r4, r20
     576:	3b 01       	movw	r6, r22
     578:	48 2a       	or	r4, r24
     57a:	59 2a       	or	r5, r25
     57c:	6a 2a       	or	r6, r26
     57e:	7b 2a       	or	r7, r27
	fs->fsize = fasize;
     580:	d7 01       	movw	r26, r14
     582:	5a 96       	adiw	r26, 0x1a	; 26
     584:	4d 92       	st	X+, r4
     586:	5d 92       	st	X+, r5
     588:	6d 92       	st	X+, r6
     58a:	7c 92       	st	X, r7
     58c:	5d 97       	sbiw	r26, 0x1d	; 29

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
     58e:	de 96       	adiw	r26, 0x3e	; 62
     590:	cc 90       	ld	r12, X
     592:	de 97       	sbiw	r26, 0x3e	; 62
     594:	13 96       	adiw	r26, 0x03	; 3
     596:	cc 92       	st	X, r12
     598:	13 97       	sbiw	r26, 0x03	; 3
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
     59a:	8c 2d       	mov	r24, r12
     59c:	81 50       	subi	r24, 0x01	; 1
     59e:	82 30       	cpi	r24, 0x02	; 2
     5a0:	08 f0       	brcs	.+2      	; 0x5a4 <chk_mounted+0x212>
     5a2:	d3 c2       	rjmp	.+1446   	; 0xb4a <chk_mounted+0x7b8>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
     5a4:	db 96       	adiw	r26, 0x3b	; 59
     5a6:	dc 90       	ld	r13, X
     5a8:	db 97       	sbiw	r26, 0x3b	; 59
     5aa:	12 96       	adiw	r26, 0x02	; 2
     5ac:	dc 92       	st	X, r13
     5ae:	12 97       	sbiw	r26, 0x02	; 2
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
     5b0:	dd 20       	and	r13, r13
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <chk_mounted+0x224>
     5b4:	cc c2       	rjmp	.+1432   	; 0xb4e <chk_mounted+0x7bc>
     5b6:	8d 2d       	mov	r24, r13
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	9c 01       	movw	r18, r24
     5bc:	21 50       	subi	r18, 0x01	; 1
     5be:	30 40       	sbci	r19, 0x00	; 0
     5c0:	82 23       	and	r24, r18
     5c2:	93 23       	and	r25, r19
     5c4:	00 97       	sbiw	r24, 0x00	; 0
     5c6:	09 f0       	breq	.+2      	; 0x5ca <chk_mounted+0x238>
     5c8:	c4 c2       	rjmp	.+1416   	; 0xb52 <chk_mounted+0x7c0>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
     5ca:	f7 01       	movw	r30, r14
     5cc:	e0 5c       	subi	r30, 0xC0	; 192
     5ce:	ff 4f       	sbci	r31, 0xFF	; 255
     5d0:	30 81       	ld	r19, Z
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	f7 01       	movw	r30, r14
     5d6:	87 ad       	sts	0x67, r24
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	19 01       	movw	r2, r18
     5dc:	28 2a       	or	r2, r24
     5de:	39 2a       	or	r3, r25
     5e0:	31 86       	std	Z+9, r3	; 0x09
     5e2:	20 86       	std	Z+8, r2	; 0x08
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
     5e4:	c1 01       	movw	r24, r2
     5e6:	8f 70       	andi	r24, 0x0F	; 15
     5e8:	90 70       	andi	r25, 0x00	; 0
     5ea:	00 97       	sbiw	r24, 0x00	; 0
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <chk_mounted+0x25e>
     5ee:	b3 c2       	rjmp	.+1382   	; 0xb56 <chk_mounted+0x7c4>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
     5f0:	ee 5b       	subi	r30, 0xBE	; 190
     5f2:	ff 4f       	sbci	r31, 0xFF	; 255
     5f4:	30 81       	ld	r19, Z
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	f7 01       	movw	r30, r14
     5fa:	ef 5b       	subi	r30, 0xBF	; 191
     5fc:	ff 4f       	sbci	r31, 0xFF	; 255
     5fe:	80 81       	ld	r24, Z
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	82 2b       	or	r24, r18
     604:	93 2b       	or	r25, r19
     606:	8c 01       	movw	r16, r24
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	09 83       	std	Y+1, r16	; 0x01
     60e:	1a 83       	std	Y+2, r17	; 0x02
     610:	2b 83       	std	Y+3, r18	; 0x03
     612:	3c 83       	std	Y+4, r19	; 0x04
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
     614:	01 15       	cp	r16, r1
     616:	11 05       	cpc	r17, r1
     618:	21 05       	cpc	r18, r1
     61a:	31 05       	cpc	r19, r1
     61c:	a9 f5       	brne	.+106    	; 0x688 <chk_mounted+0x2f6>
     61e:	f7 01       	movw	r30, r14
     620:	ef 5a       	subi	r30, 0xAF	; 175
     622:	ff 4f       	sbci	r31, 0xFF	; 255
     624:	80 81       	ld	r24, Z
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	a0 e0       	ldi	r26, 0x00	; 0
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	78 2f       	mov	r23, r24
     62e:	66 27       	eor	r22, r22
     630:	55 27       	eor	r21, r21
     632:	44 27       	eor	r20, r20
     634:	f7 01       	movw	r30, r14
     636:	e0 5b       	subi	r30, 0xB0	; 176
     638:	ff 4f       	sbci	r31, 0xFF	; 255
     63a:	80 81       	ld	r24, Z
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	a0 e0       	ldi	r26, 0x00	; 0
     640:	b0 e0       	ldi	r27, 0x00	; 0
     642:	dc 01       	movw	r26, r24
     644:	99 27       	eor	r25, r25
     646:	88 27       	eor	r24, r24
     648:	48 2b       	or	r20, r24
     64a:	59 2b       	or	r21, r25
     64c:	6a 2b       	or	r22, r26
     64e:	7b 2b       	or	r23, r27
     650:	f7 01       	movw	r30, r14
     652:	e2 5b       	subi	r30, 0xB2	; 178
     654:	ff 4f       	sbci	r31, 0xFF	; 255
     656:	80 81       	ld	r24, Z
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	a0 e0       	ldi	r26, 0x00	; 0
     65c:	b0 e0       	ldi	r27, 0x00	; 0
     65e:	48 2b       	or	r20, r24
     660:	59 2b       	or	r21, r25
     662:	6a 2b       	or	r22, r26
     664:	7b 2b       	or	r23, r27
     666:	f7 01       	movw	r30, r14
     668:	e1 5b       	subi	r30, 0xB1	; 177
     66a:	ff 4f       	sbci	r31, 0xFF	; 255
     66c:	90 81       	ld	r25, Z
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b0 e0       	ldi	r27, 0x00	; 0
     674:	8a 01       	movw	r16, r20
     676:	9b 01       	movw	r18, r22
     678:	08 2b       	or	r16, r24
     67a:	19 2b       	or	r17, r25
     67c:	2a 2b       	or	r18, r26
     67e:	3b 2b       	or	r19, r27
     680:	09 83       	std	Y+1, r16	; 0x01
     682:	1a 83       	std	Y+2, r17	; 0x02
     684:	2b 83       	std	Y+3, r18	; 0x03
     686:	3c 83       	std	Y+4, r19	; 0x04

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
     688:	d7 01       	movw	r26, r14
     68a:	dd 96       	adiw	r26, 0x3d	; 61
     68c:	3c 91       	ld	r19, X
     68e:	dd 97       	sbiw	r26, 0x3d	; 61
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	dc 96       	adiw	r26, 0x3c	; 60
     694:	8c 91       	ld	r24, X
     696:	dc 97       	sbiw	r26, 0x3c	; 60
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	89 01       	movw	r16, r18
     69c:	08 2b       	or	r16, r24
     69e:	19 2b       	or	r17, r25
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
     6a0:	01 15       	cp	r16, r1
     6a2:	11 05       	cpc	r17, r1
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <chk_mounted+0x316>
     6a6:	59 c2       	rjmp	.+1202   	; 0xb5a <chk_mounted+0x7c8>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
     6a8:	2c 2d       	mov	r18, r12
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	40 e0       	ldi	r20, 0x00	; 0
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	c3 01       	movw	r24, r6
     6b2:	b2 01       	movw	r22, r4
     6b4:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsi3>
     6b8:	6d 87       	std	Y+13, r22	; 0x0d
     6ba:	7e 87       	std	Y+14, r23	; 0x0e
     6bc:	8f 87       	std	Y+15, r24	; 0x0f
     6be:	98 8b       	std	Y+16, r25	; 0x10

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIRS */
     6c0:	98 01       	movw	r18, r16
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	29 87       	std	Y+9, r18	; 0x09
     6c8:	3a 87       	std	Y+10, r19	; 0x0a
     6ca:	4b 87       	std	Y+11, r20	; 0x0b
     6cc:	5c 87       	std	Y+12, r21	; 0x0c
     6ce:	c1 01       	movw	r24, r2
     6d0:	92 95       	swap	r25
     6d2:	82 95       	swap	r24
     6d4:	8f 70       	andi	r24, 0x0F	; 15
     6d6:	89 27       	eor	r24, r25
     6d8:	9f 70       	andi	r25, 0x0F	; 15
     6da:	89 27       	eor	r24, r25
     6dc:	a0 e0       	ldi	r26, 0x00	; 0
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	82 0f       	add	r24, r18
     6e2:	93 1f       	adc	r25, r19
     6e4:	a4 1f       	adc	r26, r20
     6e6:	b5 1f       	adc	r27, r21
     6e8:	0d 85       	ldd	r16, Y+13	; 0x0d
     6ea:	1e 85       	ldd	r17, Y+14	; 0x0e
     6ec:	2f 85       	ldd	r18, Y+15	; 0x0f
     6ee:	38 89       	ldd	r19, Y+16	; 0x10
     6f0:	08 0f       	add	r16, r24
     6f2:	19 1f       	adc	r17, r25
     6f4:	2a 1f       	adc	r18, r26
     6f6:	3b 1f       	adc	r19, r27
     6f8:	0d 83       	std	Y+5, r16	; 0x05
     6fa:	1e 83       	std	Y+6, r17	; 0x06
     6fc:	2f 83       	std	Y+7, r18	; 0x07
     6fe:	38 87       	std	Y+8, r19	; 0x08
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	9a 81       	ldd	r25, Y+2	; 0x02
     704:	ab 81       	ldd	r26, Y+3	; 0x03
     706:	bc 81       	ldd	r27, Y+4	; 0x04
     708:	80 17       	cp	r24, r16
     70a:	91 07       	cpc	r25, r17
     70c:	a2 07       	cpc	r26, r18
     70e:	b3 07       	cpc	r27, r19
     710:	08 f4       	brcc	.+2      	; 0x714 <chk_mounted+0x382>
     712:	25 c2       	rjmp	.+1098   	; 0xb5e <chk_mounted+0x7cc>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
     714:	bc 01       	movw	r22, r24
     716:	cd 01       	movw	r24, r26
     718:	60 1b       	sub	r22, r16
     71a:	71 0b       	sbc	r23, r17
     71c:	82 0b       	sbc	r24, r18
     71e:	93 0b       	sbc	r25, r19
     720:	2d 2d       	mov	r18, r13
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	40 e0       	ldi	r20, 0x00	; 0
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	0e 94 08 22 	call	0x4410	; 0x4410 <__udivmodsi4>
     72c:	89 01       	movw	r16, r18
     72e:	9a 01       	movw	r18, r20
     730:	d9 01       	movw	r26, r18
     732:	c8 01       	movw	r24, r16
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
     734:	01 15       	cp	r16, r1
     736:	11 05       	cpc	r17, r1
     738:	21 05       	cpc	r18, r1
     73a:	31 05       	cpc	r19, r1
     73c:	09 f4       	brne	.+2      	; 0x740 <chk_mounted+0x3ae>
     73e:	11 c2       	rjmp	.+1058   	; 0xb62 <chk_mounted+0x7d0>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
     740:	06 3f       	cpi	r16, 0xF6	; 246
     742:	ef e0       	ldi	r30, 0x0F	; 15
     744:	1e 07       	cpc	r17, r30
     746:	e0 e0       	ldi	r30, 0x00	; 0
     748:	2e 07       	cpc	r18, r30
     74a:	e0 e0       	ldi	r30, 0x00	; 0
     74c:	3e 07       	cpc	r19, r30
     74e:	18 f4       	brcc	.+6      	; 0x756 <chk_mounted+0x3c4>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIRS */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
     750:	dd 24       	eor	r13, r13
     752:	d3 94       	inc	r13
     754:	03 c0       	rjmp	.+6      	; 0x75c <chk_mounted+0x3ca>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
     756:	dd 24       	eor	r13, r13
     758:	68 94       	set
     75a:	d1 f8       	bld	r13, 1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
     75c:	86 3f       	cpi	r24, 0xF6	; 246
     75e:	ff ef       	ldi	r31, 0xFF	; 255
     760:	9f 07       	cpc	r25, r31
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	af 07       	cpc	r26, r31
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	bf 07       	cpc	r27, r31
     76a:	08 f0       	brcs	.+2      	; 0x76e <chk_mounted+0x3dc>
     76c:	1a c2       	rjmp	.+1076   	; 0xba2 <chk_mounted+0x810>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     76e:	b9 01       	movw	r22, r18
     770:	a8 01       	movw	r20, r16
     772:	4e 5f       	subi	r20, 0xFE	; 254
     774:	5f 4f       	sbci	r21, 0xFF	; 255
     776:	6f 4f       	sbci	r22, 0xFF	; 255
     778:	7f 4f       	sbci	r23, 0xFF	; 255
     77a:	d7 01       	movw	r26, r14
     77c:	56 96       	adiw	r26, 0x16	; 22
     77e:	4d 93       	st	X+, r20
     780:	5d 93       	st	X+, r21
     782:	6d 93       	st	X+, r22
     784:	7c 93       	st	X, r23
     786:	59 97       	sbiw	r26, 0x19	; 25
	fs->database = bsect + sysect;						/* Data start sector */
     788:	8d 81       	ldd	r24, Y+5	; 0x05
     78a:	9e 81       	ldd	r25, Y+6	; 0x06
     78c:	af 81       	ldd	r26, Y+7	; 0x07
     78e:	b8 85       	ldd	r27, Y+8	; 0x08
     790:	88 0d       	add	r24, r8
     792:	99 1d       	adc	r25, r9
     794:	aa 1d       	adc	r26, r10
     796:	bb 1d       	adc	r27, r11
     798:	f7 01       	movw	r30, r14
     79a:	86 a3       	lds	r24, 0x56
     79c:	97 a3       	lds	r25, 0x57
     79e:	a0 a7       	lds	r26, 0x70
     7a0:	b1 a7       	lds	r27, 0x71
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     7a2:	89 85       	ldd	r24, Y+9	; 0x09
     7a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     7a6:	ab 85       	ldd	r26, Y+11	; 0x0b
     7a8:	bc 85       	ldd	r27, Y+12	; 0x0c
     7aa:	88 0d       	add	r24, r8
     7ac:	99 1d       	adc	r25, r9
     7ae:	aa 1d       	adc	r26, r10
     7b0:	bb 1d       	adc	r27, r11
     7b2:	86 8f       	std	Z+30, r24	; 0x1e
     7b4:	97 8f       	std	Z+31, r25	; 0x1f
     7b6:	a0 a3       	lds	r26, 0x50
     7b8:	b1 a3       	lds	r27, 0x51
	if (fmt == FS_FAT32) {
     7ba:	f3 e0       	ldi	r31, 0x03	; 3
     7bc:	df 16       	cp	r13, r31
     7be:	09 f0       	breq	.+2      	; 0x7c2 <chk_mounted+0x430>
     7c0:	41 c0       	rjmp	.+130    	; 0x844 <chk_mounted+0x4b2>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
     7c2:	21 14       	cp	r2, r1
     7c4:	31 04       	cpc	r3, r1
     7c6:	09 f0       	breq	.+2      	; 0x7ca <chk_mounted+0x438>
     7c8:	ce c1       	rjmp	.+924    	; 0xb66 <chk_mounted+0x7d4>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
     7ca:	f7 01       	movw	r30, r14
     7cc:	e3 5a       	subi	r30, 0xA3	; 163
     7ce:	ff 4f       	sbci	r31, 0xFF	; 255
     7d0:	80 81       	ld	r24, Z
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	a0 e0       	ldi	r26, 0x00	; 0
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	38 2f       	mov	r19, r24
     7da:	22 27       	eor	r18, r18
     7dc:	11 27       	eor	r17, r17
     7de:	00 27       	eor	r16, r16
     7e0:	f7 01       	movw	r30, r14
     7e2:	e4 5a       	subi	r30, 0xA4	; 164
     7e4:	ff 4f       	sbci	r31, 0xFF	; 255
     7e6:	80 81       	ld	r24, Z
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	a0 e0       	ldi	r26, 0x00	; 0
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	dc 01       	movw	r26, r24
     7f0:	99 27       	eor	r25, r25
     7f2:	88 27       	eor	r24, r24
     7f4:	08 2b       	or	r16, r24
     7f6:	19 2b       	or	r17, r25
     7f8:	2a 2b       	or	r18, r26
     7fa:	3b 2b       	or	r19, r27
     7fc:	f7 01       	movw	r30, r14
     7fe:	e6 5a       	subi	r30, 0xA6	; 166
     800:	ff 4f       	sbci	r31, 0xFF	; 255
     802:	80 81       	ld	r24, Z
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	a0 e0       	ldi	r26, 0x00	; 0
     808:	b0 e0       	ldi	r27, 0x00	; 0
     80a:	08 2b       	or	r16, r24
     80c:	19 2b       	or	r17, r25
     80e:	2a 2b       	or	r18, r26
     810:	3b 2b       	or	r19, r27
     812:	f7 01       	movw	r30, r14
     814:	e5 5a       	subi	r30, 0xA5	; 165
     816:	ff 4f       	sbci	r31, 0xFF	; 255
     818:	90 81       	ld	r25, Z
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	a0 e0       	ldi	r26, 0x00	; 0
     81e:	b0 e0       	ldi	r27, 0x00	; 0
     820:	80 2b       	or	r24, r16
     822:	91 2b       	or	r25, r17
     824:	a2 2b       	or	r26, r18
     826:	b3 2b       	or	r27, r19
     828:	f7 01       	movw	r30, r14
     82a:	82 a3       	lds	r24, 0x52
     82c:	93 a3       	lds	r25, 0x53
     82e:	a4 a3       	lds	r26, 0x54
     830:	b5 a3       	lds	r27, 0x55
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
     832:	44 0f       	add	r20, r20
     834:	55 1f       	adc	r21, r21
     836:	66 1f       	adc	r22, r22
     838:	77 1f       	adc	r23, r23
     83a:	44 0f       	add	r20, r20
     83c:	55 1f       	adc	r21, r21
     83e:	66 1f       	adc	r22, r22
     840:	77 1f       	adc	r23, r23
     842:	2f c0       	rjmp	.+94     	; 0x8a2 <chk_mounted+0x510>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
     844:	21 14       	cp	r2, r1
     846:	31 04       	cpc	r3, r1
     848:	09 f4       	brne	.+2      	; 0x84c <chk_mounted+0x4ba>
     84a:	8f c1       	rjmp	.+798    	; 0xb6a <chk_mounted+0x7d8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
     84c:	0d 85       	ldd	r16, Y+13	; 0x0d
     84e:	1e 85       	ldd	r17, Y+14	; 0x0e
     850:	2f 85       	ldd	r18, Y+15	; 0x0f
     852:	38 89       	ldd	r19, Y+16	; 0x10
     854:	80 0f       	add	r24, r16
     856:	91 1f       	adc	r25, r17
     858:	a2 1f       	adc	r26, r18
     85a:	b3 1f       	adc	r27, r19
     85c:	f7 01       	movw	r30, r14
     85e:	82 a3       	lds	r24, 0x52
     860:	93 a3       	lds	r25, 0x53
     862:	a4 a3       	lds	r26, 0x54
     864:	b5 a3       	lds	r27, 0x55
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
     866:	f2 e0       	ldi	r31, 0x02	; 2
     868:	df 16       	cp	r13, r31
     86a:	29 f4       	brne	.+10     	; 0x876 <chk_mounted+0x4e4>
     86c:	44 0f       	add	r20, r20
     86e:	55 1f       	adc	r21, r21
     870:	66 1f       	adc	r22, r22
     872:	77 1f       	adc	r23, r23
     874:	16 c0       	rjmp	.+44     	; 0x8a2 <chk_mounted+0x510>
     876:	db 01       	movw	r26, r22
     878:	ca 01       	movw	r24, r20
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	aa 1f       	adc	r26, r26
     880:	bb 1f       	adc	r27, r27
     882:	84 0f       	add	r24, r20
     884:	95 1f       	adc	r25, r21
     886:	a6 1f       	adc	r26, r22
     888:	b7 1f       	adc	r27, r23
     88a:	b6 95       	lsr	r27
     88c:	a7 95       	ror	r26
     88e:	97 95       	ror	r25
     890:	87 95       	ror	r24
     892:	41 70       	andi	r20, 0x01	; 1
     894:	50 70       	andi	r21, 0x00	; 0
     896:	60 70       	andi	r22, 0x00	; 0
     898:	70 70       	andi	r23, 0x00	; 0
     89a:	48 0f       	add	r20, r24
     89c:	59 1f       	adc	r21, r25
     89e:	6a 1f       	adc	r22, r26
     8a0:	7b 1f       	adc	r23, r27
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
     8a2:	db 01       	movw	r26, r22
     8a4:	ca 01       	movw	r24, r20
     8a6:	81 50       	subi	r24, 0x01	; 1
     8a8:	9e 4f       	sbci	r25, 0xFE	; 254
     8aa:	af 4f       	sbci	r26, 0xFF	; 255
     8ac:	bf 4f       	sbci	r27, 0xFF	; 255
     8ae:	07 2e       	mov	r0, r23
     8b0:	79 e0       	ldi	r23, 0x09	; 9
     8b2:	b6 95       	lsr	r27
     8b4:	a7 95       	ror	r26
     8b6:	97 95       	ror	r25
     8b8:	87 95       	ror	r24
     8ba:	7a 95       	dec	r23
     8bc:	d1 f7       	brne	.-12     	; 0x8b2 <chk_mounted+0x520>
     8be:	70 2d       	mov	r23, r0
     8c0:	48 16       	cp	r4, r24
     8c2:	59 06       	cpc	r5, r25
     8c4:	6a 06       	cpc	r6, r26
     8c6:	7b 06       	cpc	r7, r27
     8c8:	08 f4       	brcc	.+2      	; 0x8cc <chk_mounted+0x53a>
     8ca:	51 c1       	rjmp	.+674    	; 0xb6e <chk_mounted+0x7dc>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
     8cc:	8f ef       	ldi	r24, 0xFF	; 255
     8ce:	9f ef       	ldi	r25, 0xFF	; 255
     8d0:	dc 01       	movw	r26, r24
     8d2:	f7 01       	movw	r30, r14
     8d4:	86 87       	std	Z+14, r24	; 0x0e
     8d6:	97 87       	std	Z+15, r25	; 0x0f
     8d8:	a0 8b       	std	Z+16, r26	; 0x10
     8da:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
     8dc:	12 86       	std	Z+10, r1	; 0x0a
     8de:	13 86       	std	Z+11, r1	; 0x0b
     8e0:	14 86       	std	Z+12, r1	; 0x0c
     8e2:	15 86       	std	Z+13, r1	; 0x0d

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
     8e4:	b3 e0       	ldi	r27, 0x03	; 3
     8e6:	db 16       	cp	r13, r27
     8e8:	09 f0       	breq	.+2      	; 0x8ec <chk_mounted+0x55a>
     8ea:	04 c1       	rjmp	.+520    	; 0xaf4 <chk_mounted+0x762>
	 	fs->fsi_flag = 0;
     8ec:	15 82       	std	Z+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
     8ee:	e1 5a       	subi	r30, 0xA1	; 161
     8f0:	ff 4f       	sbci	r31, 0xFF	; 255
     8f2:	30 81       	ld	r19, Z
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	f7 01       	movw	r30, r14
     8f8:	e2 5a       	subi	r30, 0xA2	; 162
     8fa:	ff 4f       	sbci	r31, 0xFF	; 255
     8fc:	80 81       	ld	r24, Z
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	82 2b       	or	r24, r18
     902:	93 2b       	or	r25, r19
     904:	a0 e0       	ldi	r26, 0x00	; 0
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	a5 01       	movw	r20, r10
     90a:	94 01       	movw	r18, r8
     90c:	28 0f       	add	r18, r24
     90e:	39 1f       	adc	r19, r25
     910:	4a 1f       	adc	r20, r26
     912:	5b 1f       	adc	r21, r27
     914:	d7 01       	movw	r26, r14
     916:	52 96       	adiw	r26, 0x12	; 18
     918:	2d 93       	st	X+, r18
     91a:	3d 93       	st	X+, r19
     91c:	4d 93       	st	X+, r20
     91e:	5c 93       	st	X, r21
     920:	55 97       	sbiw	r26, 0x15	; 21
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
     922:	b7 01       	movw	r22, r14
     924:	62 5d       	subi	r22, 0xD2	; 210
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	11 96       	adiw	r26, 0x01	; 1
     92a:	8c 91       	ld	r24, X
     92c:	01 e0       	ldi	r16, 0x01	; 1
     92e:	10 e0       	ldi	r17, 0x00	; 0
     930:	0e 94 63 20 	call	0x40c6	; 0x40c6 <disk_read>
     934:	88 23       	and	r24, r24
     936:	09 f0       	breq	.+2      	; 0x93a <chk_mounted+0x5a8>
     938:	dd c0       	rjmp	.+442    	; 0xaf4 <chk_mounted+0x762>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
     93a:	f7 01       	movw	r30, r14
     93c:	e3 5d       	subi	r30, 0xD3	; 211
     93e:	fd 4f       	sbci	r31, 0xFD	; 253
     940:	30 81       	ld	r19, Z
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	f7 01       	movw	r30, r14
     946:	e4 5d       	subi	r30, 0xD4	; 212
     948:	fd 4f       	sbci	r31, 0xFD	; 253
     94a:	80 81       	ld	r24, Z
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	82 2b       	or	r24, r18
     950:	93 2b       	or	r25, r19

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
     952:	ba ea       	ldi	r27, 0xAA	; 170
     954:	85 35       	cpi	r24, 0x55	; 85
     956:	9b 07       	cpc	r25, r27
     958:	09 f0       	breq	.+2      	; 0x95c <chk_mounted+0x5ca>
     95a:	cc c0       	rjmp	.+408    	; 0xaf4 <chk_mounted+0x762>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
     95c:	f7 01       	movw	r30, r14
     95e:	41 a9       	sts	0x41, r20
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	74 2f       	mov	r23, r20
     968:	66 27       	eor	r22, r22
     96a:	55 27       	eor	r21, r21
     96c:	44 27       	eor	r20, r20
     96e:	80 a9       	sts	0x40, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e0       	ldi	r26, 0x00	; 0
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	dc 01       	movw	r26, r24
     978:	99 27       	eor	r25, r25
     97a:	88 27       	eor	r24, r24
     97c:	48 2b       	or	r20, r24
     97e:	59 2b       	or	r21, r25
     980:	6a 2b       	or	r22, r26
     982:	7b 2b       	or	r23, r27
     984:	86 a5       	lds	r24, 0x66
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	a0 e0       	ldi	r26, 0x00	; 0
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	48 2b       	or	r20, r24
     98e:	59 2b       	or	r21, r25
     990:	6a 2b       	or	r22, r26
     992:	7b 2b       	or	r23, r27
     994:	97 a5       	lds	r25, 0x67
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	a0 e0       	ldi	r26, 0x00	; 0
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	84 2b       	or	r24, r20
     99e:	95 2b       	or	r25, r21
     9a0:	a6 2b       	or	r26, r22
     9a2:	b7 2b       	or	r27, r23
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
     9a4:	82 35       	cpi	r24, 0x52	; 82
     9a6:	f2 e5       	ldi	r31, 0x52	; 82
     9a8:	9f 07       	cpc	r25, r31
     9aa:	f1 e6       	ldi	r31, 0x61	; 97
     9ac:	af 07       	cpc	r26, r31
     9ae:	f1 e4       	ldi	r31, 0x41	; 65
     9b0:	bf 07       	cpc	r27, r31
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <chk_mounted+0x624>
     9b4:	9f c0       	rjmp	.+318    	; 0xaf4 <chk_mounted+0x762>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
     9b6:	f7 01       	movw	r30, r14
     9b8:	eb 5e       	subi	r30, 0xEB	; 235
     9ba:	fd 4f       	sbci	r31, 0xFD	; 253
     9bc:	80 81       	ld	r24, Z
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	b8 2f       	mov	r27, r24
     9c6:	aa 27       	eor	r26, r26
     9c8:	99 27       	eor	r25, r25
     9ca:	88 27       	eor	r24, r24
     9cc:	f7 01       	movw	r30, r14
     9ce:	ec 5e       	subi	r30, 0xEC	; 236
     9d0:	fd 4f       	sbci	r31, 0xFD	; 253
     9d2:	40 81       	ld	r20, Z
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	ba 01       	movw	r22, r20
     9dc:	55 27       	eor	r21, r21
     9de:	44 27       	eor	r20, r20
     9e0:	84 2b       	or	r24, r20
     9e2:	95 2b       	or	r25, r21
     9e4:	a6 2b       	or	r26, r22
     9e6:	b7 2b       	or	r27, r23
     9e8:	f7 01       	movw	r30, r14
     9ea:	ee 5e       	subi	r30, 0xEE	; 238
     9ec:	fd 4f       	sbci	r31, 0xFD	; 253
     9ee:	40 81       	ld	r20, Z
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	48 2b       	or	r20, r24
     9f8:	59 2b       	or	r21, r25
     9fa:	6a 2b       	or	r22, r26
     9fc:	7b 2b       	or	r23, r27
     9fe:	f7 01       	movw	r30, r14
     a00:	ed 5e       	subi	r30, 0xED	; 237
     a02:	fd 4f       	sbci	r31, 0xFD	; 253
     a04:	90 81       	ld	r25, Z
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	84 2b       	or	r24, r20
     a0e:	95 2b       	or	r25, r21
     a10:	a6 2b       	or	r26, r22
     a12:	b7 2b       	or	r27, r23
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
     a14:	82 37       	cpi	r24, 0x72	; 114
     a16:	02 e7       	ldi	r16, 0x72	; 114
     a18:	90 07       	cpc	r25, r16
     a1a:	01 e4       	ldi	r16, 0x41	; 65
     a1c:	a0 07       	cpc	r26, r16
     a1e:	01 e6       	ldi	r16, 0x61	; 97
     a20:	b0 07       	cpc	r27, r16
     a22:	09 f0       	breq	.+2      	; 0xa26 <chk_mounted+0x694>
     a24:	67 c0       	rjmp	.+206    	; 0xaf4 <chk_mounted+0x762>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
     a26:	f7 01       	movw	r30, r14
     a28:	e3 5e       	subi	r30, 0xE3	; 227
     a2a:	fd 4f       	sbci	r31, 0xFD	; 253
     a2c:	80 81       	ld	r24, Z
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	a0 e0       	ldi	r26, 0x00	; 0
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	b8 2f       	mov	r27, r24
     a36:	aa 27       	eor	r26, r26
     a38:	99 27       	eor	r25, r25
     a3a:	88 27       	eor	r24, r24
     a3c:	f7 01       	movw	r30, r14
     a3e:	e4 5e       	subi	r30, 0xE4	; 228
     a40:	fd 4f       	sbci	r31, 0xFD	; 253
     a42:	40 81       	ld	r20, Z
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	ba 01       	movw	r22, r20
     a4c:	55 27       	eor	r21, r21
     a4e:	44 27       	eor	r20, r20
     a50:	84 2b       	or	r24, r20
     a52:	95 2b       	or	r25, r21
     a54:	a6 2b       	or	r26, r22
     a56:	b7 2b       	or	r27, r23
     a58:	f7 01       	movw	r30, r14
     a5a:	e6 5e       	subi	r30, 0xE6	; 230
     a5c:	fd 4f       	sbci	r31, 0xFD	; 253
     a5e:	40 81       	ld	r20, Z
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	48 2b       	or	r20, r24
     a68:	59 2b       	or	r21, r25
     a6a:	6a 2b       	or	r22, r26
     a6c:	7b 2b       	or	r23, r27
     a6e:	f7 01       	movw	r30, r14
     a70:	e5 5e       	subi	r30, 0xE5	; 229
     a72:	fd 4f       	sbci	r31, 0xFD	; 253
     a74:	90 81       	ld	r25, Z
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	84 2b       	or	r24, r20
     a7e:	95 2b       	or	r25, r21
     a80:	a6 2b       	or	r26, r22
     a82:	b7 2b       	or	r27, r23
     a84:	f7 01       	movw	r30, r14
     a86:	82 87       	std	Z+10, r24	; 0x0a
     a88:	93 87       	std	Z+11, r25	; 0x0b
     a8a:	a4 87       	std	Z+12, r26	; 0x0c
     a8c:	b5 87       	std	Z+13, r27	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
     a8e:	e7 5e       	subi	r30, 0xE7	; 231
     a90:	fd 4f       	sbci	r31, 0xFD	; 253
     a92:	80 81       	ld	r24, Z
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	a0 e0       	ldi	r26, 0x00	; 0
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	b8 2f       	mov	r27, r24
     a9c:	aa 27       	eor	r26, r26
     a9e:	99 27       	eor	r25, r25
     aa0:	88 27       	eor	r24, r24
     aa2:	f7 01       	movw	r30, r14
     aa4:	e8 5e       	subi	r30, 0xE8	; 232
     aa6:	fd 4f       	sbci	r31, 0xFD	; 253
     aa8:	40 81       	ld	r20, Z
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	ba 01       	movw	r22, r20
     ab2:	55 27       	eor	r21, r21
     ab4:	44 27       	eor	r20, r20
     ab6:	84 2b       	or	r24, r20
     ab8:	95 2b       	or	r25, r21
     aba:	a6 2b       	or	r26, r22
     abc:	b7 2b       	or	r27, r23
     abe:	f7 01       	movw	r30, r14
     ac0:	ea 5e       	subi	r30, 0xEA	; 234
     ac2:	fd 4f       	sbci	r31, 0xFD	; 253
     ac4:	40 81       	ld	r20, Z
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	48 2b       	or	r20, r24
     ace:	59 2b       	or	r21, r25
     ad0:	6a 2b       	or	r22, r26
     ad2:	7b 2b       	or	r23, r27
     ad4:	f7 01       	movw	r30, r14
     ad6:	e9 5e       	subi	r30, 0xE9	; 233
     ad8:	fd 4f       	sbci	r31, 0xFD	; 253
     ada:	90 81       	ld	r25, Z
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	84 2b       	or	r24, r20
     ae4:	95 2b       	or	r25, r21
     ae6:	a6 2b       	or	r26, r22
     ae8:	b7 2b       	or	r27, r23
     aea:	f7 01       	movw	r30, r14
     aec:	86 87       	std	Z+14, r24	; 0x0e
     aee:	97 87       	std	Z+15, r25	; 0x0f
     af0:	a0 8b       	std	Z+16, r26	; 0x10
     af2:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
     af4:	d7 01       	movw	r26, r14
     af6:	dc 92       	st	X, r13
	fs->id = ++Fsid;		/* File system mount ID */
     af8:	80 91 20 01 	lds	r24, 0x0120
     afc:	90 91 21 01 	lds	r25, 0x0121
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	90 93 21 01 	sts	0x0121, r25
     b06:	80 93 20 01 	sts	0x0120, r24
     b0a:	17 96       	adiw	r26, 0x07	; 7
     b0c:	9c 93       	st	X, r25
     b0e:	8e 93       	st	-X, r24
     b10:	16 97       	sbiw	r26, 0x06	; 6
	fs->winsect = 0;		/* Invalidate sector cache */
     b12:	f7 01       	movw	r30, r14
     b14:	12 a6       	lds	r17, 0xb2
     b16:	13 a6       	lds	r17, 0xb3
     b18:	14 a6       	lds	r17, 0xb4
     b1a:	15 a6       	lds	r17, 0xb5
	fs->wflag = 0;
     b1c:	14 82       	std	Z+4, r1	; 0x04
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	27 c0       	rjmp	.+78     	; 0xb70 <chk_mounted+0x7de>
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
     b22:	8b e0       	ldi	r24, 0x0B	; 11
     b24:	25 c0       	rjmp	.+74     	; 0xb70 <chk_mounted+0x7de>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     b26:	8c e0       	ldi	r24, 0x0C	; 12
     b28:	23 c0       	rjmp	.+70     	; 0xb70 <chk_mounted+0x7de>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
#endif
			return FR_OK;				/* The file system object is valid */
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	21 c0       	rjmp	.+66     	; 0xb70 <chk_mounted+0x7de>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
     b2e:	8a e0       	ldi	r24, 0x0A	; 10
     b30:	1f c0       	rjmp	.+62     	; 0xb70 <chk_mounted+0x7de>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
     b32:	83 e0       	ldi	r24, 0x03	; 3
     b34:	1d c0       	rjmp	.+58     	; 0xb70 <chk_mounted+0x7de>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
     b36:	8a e0       	ldi	r24, 0x0A	; 10
     b38:	1b c0       	rjmp	.+54     	; 0xb70 <chk_mounted+0x7de>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
     b3a:	8d e0       	ldi	r24, 0x0D	; 13
     b3c:	19 c0       	rjmp	.+50     	; 0xb70 <chk_mounted+0x7de>
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	17 c0       	rjmp	.+46     	; 0xb70 <chk_mounted+0x7de>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
     b42:	8d e0       	ldi	r24, 0x0D	; 13
     b44:	15 c0       	rjmp	.+42     	; 0xb70 <chk_mounted+0x7de>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
     b46:	8d e0       	ldi	r24, 0x0D	; 13
     b48:	13 c0       	rjmp	.+38     	; 0xb70 <chk_mounted+0x7de>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
     b4a:	8d e0       	ldi	r24, 0x0D	; 13
     b4c:	11 c0       	rjmp	.+34     	; 0xb70 <chk_mounted+0x7de>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
     b4e:	8d e0       	ldi	r24, 0x0D	; 13
     b50:	0f c0       	rjmp	.+30     	; 0xb70 <chk_mounted+0x7de>
     b52:	8d e0       	ldi	r24, 0x0D	; 13
     b54:	0d c0       	rjmp	.+26     	; 0xb70 <chk_mounted+0x7de>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
     b56:	8d e0       	ldi	r24, 0x0D	; 13
     b58:	0b c0       	rjmp	.+22     	; 0xb70 <chk_mounted+0x7de>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
     b5a:	8d e0       	ldi	r24, 0x0D	; 13
     b5c:	09 c0       	rjmp	.+18     	; 0xb70 <chk_mounted+0x7de>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIRS */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
     b5e:	8d e0       	ldi	r24, 0x0D	; 13
     b60:	07 c0       	rjmp	.+14     	; 0xb70 <chk_mounted+0x7de>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
     b62:	8d e0       	ldi	r24, 0x0D	; 13
     b64:	05 c0       	rjmp	.+10     	; 0xb70 <chk_mounted+0x7de>
	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
     b66:	8d e0       	ldi	r24, 0x0D	; 13
     b68:	03 c0       	rjmp	.+6      	; 0xb70 <chk_mounted+0x7de>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
     b6a:	8d e0       	ldi	r24, 0x0D	; 13
     b6c:	01 c0       	rjmp	.+2      	; 0xb70 <chk_mounted+0x7de>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;
     b6e:	8d e0       	ldi	r24, 0x0D	; 13
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
     b70:	60 96       	adiw	r28, 0x10	; 16
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	cd bf       	out	0x3d, r28	; 61
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	df 90       	pop	r13
     b8a:	cf 90       	pop	r12
     b8c:	bf 90       	pop	r11
     b8e:	af 90       	pop	r10
     b90:	9f 90       	pop	r9
     b92:	8f 90       	pop	r8
     b94:	7f 90       	pop	r7
     b96:	6f 90       	pop	r6
     b98:	5f 90       	pop	r5
     b9a:	4f 90       	pop	r4
     b9c:	3f 90       	pop	r3
     b9e:	2f 90       	pop	r2
     ba0:	08 95       	ret
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     ba2:	b9 01       	movw	r22, r18
     ba4:	a8 01       	movw	r20, r16
     ba6:	4e 5f       	subi	r20, 0xFE	; 254
     ba8:	5f 4f       	sbci	r21, 0xFF	; 255
     baa:	6f 4f       	sbci	r22, 0xFF	; 255
     bac:	7f 4f       	sbci	r23, 0xFF	; 255
     bae:	d7 01       	movw	r26, r14
     bb0:	56 96       	adiw	r26, 0x16	; 22
     bb2:	4d 93       	st	X+, r20
     bb4:	5d 93       	st	X+, r21
     bb6:	6d 93       	st	X+, r22
     bb8:	7c 93       	st	X, r23
     bba:	59 97       	sbiw	r26, 0x19	; 25
	fs->database = bsect + sysect;						/* Data start sector */
     bbc:	8d 81       	ldd	r24, Y+5	; 0x05
     bbe:	9e 81       	ldd	r25, Y+6	; 0x06
     bc0:	af 81       	ldd	r26, Y+7	; 0x07
     bc2:	b8 85       	ldd	r27, Y+8	; 0x08
     bc4:	88 0d       	add	r24, r8
     bc6:	99 1d       	adc	r25, r9
     bc8:	aa 1d       	adc	r26, r10
     bca:	bb 1d       	adc	r27, r11
     bcc:	f7 01       	movw	r30, r14
     bce:	86 a3       	lds	r24, 0x56
     bd0:	97 a3       	lds	r25, 0x57
     bd2:	a0 a7       	lds	r26, 0x70
     bd4:	b1 a7       	lds	r27, 0x71
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     bd6:	89 85       	ldd	r24, Y+9	; 0x09
     bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bda:	ab 85       	ldd	r26, Y+11	; 0x0b
     bdc:	bc 85       	ldd	r27, Y+12	; 0x0c
     bde:	88 0d       	add	r24, r8
     be0:	99 1d       	adc	r25, r9
     be2:	aa 1d       	adc	r26, r10
     be4:	bb 1d       	adc	r27, r11
     be6:	86 8f       	std	Z+30, r24	; 0x1e
     be8:	97 8f       	std	Z+31, r25	; 0x1f
     bea:	a0 a3       	lds	r26, 0x50
     bec:	b1 a3       	lds	r27, 0x51
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
     bee:	0f 2e       	mov	r0, r31
     bf0:	f3 e0       	ldi	r31, 0x03	; 3
     bf2:	df 2e       	mov	r13, r31
     bf4:	f0 2d       	mov	r31, r0
     bf6:	e5 cd       	rjmp	.-1078   	; 0x7c2 <chk_mounted+0x430>

00000bf8 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
     bf8:	4f 92       	push	r4
     bfa:	5f 92       	push	r5
     bfc:	6f 92       	push	r6
     bfe:	7f 92       	push	r7
     c00:	8f 92       	push	r8
     c02:	9f 92       	push	r9
     c04:	af 92       	push	r10
     c06:	bf 92       	push	r11
     c08:	cf 92       	push	r12
     c0a:	df 92       	push	r13
     c0c:	ef 92       	push	r14
     c0e:	ff 92       	push	r15
     c10:	0f 93       	push	r16
     c12:	1f 93       	push	r17
     c14:	cf 93       	push	r28
     c16:	5c 01       	movw	r10, r24
     c18:	2a 01       	movw	r4, r20
     c1a:	3b 01       	movw	r6, r22
	DWORD wsect;


	wsect = fs->winsect;
     c1c:	fc 01       	movw	r30, r24
     c1e:	c2 a4       	lds	r28, 0xa2
     c20:	d3 a4       	lds	r29, 0xa3
     c22:	e4 a4       	lds	r30, 0xa4
     c24:	f5 a4       	lds	r31, 0xa5
	if (wsect != sector) {	/* Changed current window */
     c26:	c4 16       	cp	r12, r20
     c28:	d5 06       	cpc	r13, r21
     c2a:	e6 06       	cpc	r14, r22
     c2c:	f7 06       	cpc	r15, r23
     c2e:	09 f4       	brne	.+2      	; 0xc32 <move_window+0x3a>
     c30:	57 c0       	rjmp	.+174    	; 0xce0 <move_window+0xe8>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
     c32:	84 81       	ldd	r24, Z+4	; 0x04
     c34:	88 23       	and	r24, r24
     c36:	e1 f1       	breq	.+120    	; 0xcb0 <move_window+0xb8>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
     c38:	0f 2e       	mov	r0, r31
     c3a:	fe e2       	ldi	r31, 0x2E	; 46
     c3c:	8f 2e       	mov	r8, r31
     c3e:	99 24       	eor	r9, r9
     c40:	f0 2d       	mov	r31, r0
     c42:	8a 0c       	add	r8, r10
     c44:	9b 1c       	adc	r9, r11
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	b4 01       	movw	r22, r8
     c4a:	a7 01       	movw	r20, r14
     c4c:	96 01       	movw	r18, r12
     c4e:	01 e0       	ldi	r16, 0x01	; 1
     c50:	10 e0       	ldi	r17, 0x00	; 0
     c52:	0e 94 bb 20 	call	0x4176	; 0x4176 <disk_write>
     c56:	88 23       	and	r24, r24
     c58:	09 f0       	breq	.+2      	; 0xc5c <move_window+0x64>
     c5a:	44 c0       	rjmp	.+136    	; 0xce4 <move_window+0xec>
				return FR_DISK_ERR;
			fs->wflag = 0;
     c5c:	f5 01       	movw	r30, r10
     c5e:	14 82       	std	Z+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
     c60:	42 8d       	ldd	r20, Z+26	; 0x1a
     c62:	53 8d       	ldd	r21, Z+27	; 0x1b
     c64:	64 8d       	ldd	r22, Z+28	; 0x1c
     c66:	75 8d       	ldd	r23, Z+29	; 0x1d
     c68:	86 8d       	ldd	r24, Z+30	; 0x1e
     c6a:	97 8d       	ldd	r25, Z+31	; 0x1f
     c6c:	a0 a1       	lds	r26, 0x40
     c6e:	b1 a1       	lds	r27, 0x41
     c70:	84 0f       	add	r24, r20
     c72:	95 1f       	adc	r25, r21
     c74:	a6 1f       	adc	r26, r22
     c76:	b7 1f       	adc	r27, r23
     c78:	c8 16       	cp	r12, r24
     c7a:	d9 06       	cpc	r13, r25
     c7c:	ea 06       	cpc	r14, r26
     c7e:	fb 06       	cpc	r15, r27
     c80:	b8 f4       	brcc	.+46     	; 0xcb0 <move_window+0xb8>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
     c82:	c3 81       	ldd	r28, Z+3	; 0x03
     c84:	c2 30       	cpi	r28, 0x02	; 2
     c86:	a0 f0       	brcs	.+40     	; 0xcb0 <move_window+0xb8>
					wsect += fs->fsize;
     c88:	f5 01       	movw	r30, r10
     c8a:	82 8d       	ldd	r24, Z+26	; 0x1a
     c8c:	93 8d       	ldd	r25, Z+27	; 0x1b
     c8e:	a4 8d       	ldd	r26, Z+28	; 0x1c
     c90:	b5 8d       	ldd	r27, Z+29	; 0x1d
     c92:	c8 0e       	add	r12, r24
     c94:	d9 1e       	adc	r13, r25
     c96:	ea 1e       	adc	r14, r26
     c98:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
     c9a:	81 81       	ldd	r24, Z+1	; 0x01
     c9c:	b4 01       	movw	r22, r8
     c9e:	a7 01       	movw	r20, r14
     ca0:	96 01       	movw	r18, r12
     ca2:	01 e0       	ldi	r16, 0x01	; 1
     ca4:	10 e0       	ldi	r17, 0x00	; 0
     ca6:	0e 94 bb 20 	call	0x4176	; 0x4176 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
     caa:	c1 50       	subi	r28, 0x01	; 1
     cac:	c1 30       	cpi	r28, 0x01	; 1
     cae:	61 f7       	brne	.-40     	; 0xc88 <move_window+0x90>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
     cb0:	41 14       	cp	r4, r1
     cb2:	51 04       	cpc	r5, r1
     cb4:	61 04       	cpc	r6, r1
     cb6:	71 04       	cpc	r7, r1
     cb8:	b9 f0       	breq	.+46     	; 0xce8 <move_window+0xf0>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
     cba:	b5 01       	movw	r22, r10
     cbc:	62 5d       	subi	r22, 0xD2	; 210
     cbe:	7f 4f       	sbci	r23, 0xFF	; 255
     cc0:	f5 01       	movw	r30, r10
     cc2:	81 81       	ldd	r24, Z+1	; 0x01
     cc4:	a3 01       	movw	r20, r6
     cc6:	92 01       	movw	r18, r4
     cc8:	01 e0       	ldi	r16, 0x01	; 1
     cca:	10 e0       	ldi	r17, 0x00	; 0
     ccc:	0e 94 63 20 	call	0x40c6	; 0x40c6 <disk_read>
     cd0:	88 23       	and	r24, r24
     cd2:	61 f4       	brne	.+24     	; 0xcec <move_window+0xf4>
				return FR_DISK_ERR;
			fs->winsect = sector;
     cd4:	f5 01       	movw	r30, r10
     cd6:	42 a6       	lds	r20, 0xb2
     cd8:	53 a6       	lds	r21, 0xb3
     cda:	64 a6       	lds	r22, 0xb4
     cdc:	75 a6       	lds	r23, 0xb5
     cde:	07 c0       	rjmp	.+14     	; 0xcee <move_window+0xf6>
		}
	}

	return FR_OK;
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	05 c0       	rjmp	.+10     	; 0xcee <move_window+0xf6>
	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	03 c0       	rjmp	.+6      	; 0xcee <move_window+0xf6>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	01 c0       	rjmp	.+2      	; 0xcee <move_window+0xf6>
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
     cec:	81 e0       	ldi	r24, 0x01	; 1
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
     cee:	cf 91       	pop	r28
     cf0:	1f 91       	pop	r17
     cf2:	0f 91       	pop	r16
     cf4:	ff 90       	pop	r15
     cf6:	ef 90       	pop	r14
     cf8:	df 90       	pop	r13
     cfa:	cf 90       	pop	r12
     cfc:	bf 90       	pop	r11
     cfe:	af 90       	pop	r10
     d00:	9f 90       	pop	r9
     d02:	8f 90       	pop	r8
     d04:	7f 90       	pop	r7
     d06:	6f 90       	pop	r6
     d08:	5f 90       	pop	r5
     d0a:	4f 90       	pop	r4
     d0c:	08 95       	ret

00000d0e <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	7c 01       	movw	r14, r24
	FRESULT res;


	res = move_window(fs, 0);
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	ba 01       	movw	r22, r20
     d20:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
     d24:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
     d26:	88 23       	and	r24, r24
     d28:	09 f0       	breq	.+2      	; 0xd2c <sync+0x1e>
     d2a:	77 c0       	rjmp	.+238    	; 0xe1a <sync+0x10c>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
     d2c:	f7 01       	movw	r30, r14
     d2e:	80 81       	ld	r24, Z
     d30:	83 30       	cpi	r24, 0x03	; 3
     d32:	09 f0       	breq	.+2      	; 0xd36 <sync+0x28>
     d34:	69 c0       	rjmp	.+210    	; 0xe08 <sync+0xfa>
     d36:	85 81       	ldd	r24, Z+5	; 0x05
     d38:	88 23       	and	r24, r24
     d3a:	09 f4       	brne	.+2      	; 0xd3e <sync+0x30>
     d3c:	65 c0       	rjmp	.+202    	; 0xe08 <sync+0xfa>
			fs->winsect = 0;
     d3e:	12 a6       	lds	r17, 0xb2
     d40:	13 a6       	lds	r17, 0xb3
     d42:	14 a6       	lds	r17, 0xb4
     d44:	15 a6       	lds	r17, 0xb5
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
     d46:	87 01       	movw	r16, r14
     d48:	02 5d       	subi	r16, 0xD2	; 210
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
     d4c:	c8 01       	movw	r24, r16
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	52 e0       	ldi	r21, 0x02	; 2
     d56:	0e 94 74 00 	call	0xe8	; 0xe8 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
     d5a:	f7 01       	movw	r30, r14
     d5c:	e4 5d       	subi	r30, 0xD4	; 212
     d5e:	fd 4f       	sbci	r31, 0xFD	; 253
     d60:	85 e5       	ldi	r24, 0x55	; 85
     d62:	80 83       	st	Z, r24
     d64:	f7 01       	movw	r30, r14
     d66:	e3 5d       	subi	r30, 0xD3	; 211
     d68:	fd 4f       	sbci	r31, 0xFD	; 253
     d6a:	8a ea       	ldi	r24, 0xAA	; 170
     d6c:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
     d6e:	82 e5       	ldi	r24, 0x52	; 82
     d70:	f7 01       	movw	r30, r14
     d72:	86 a7       	lds	r24, 0x76
     d74:	87 a7       	lds	r24, 0x77
     d76:	81 e6       	ldi	r24, 0x61	; 97
     d78:	80 ab       	sts	0x50, r24
     d7a:	91 e4       	ldi	r25, 0x41	; 65
     d7c:	91 ab       	sts	0x51, r25
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
     d7e:	ee 5e       	subi	r30, 0xEE	; 238
     d80:	fd 4f       	sbci	r31, 0xFD	; 253
     d82:	22 e7       	ldi	r18, 0x72	; 114
     d84:	20 83       	st	Z, r18
     d86:	f7 01       	movw	r30, r14
     d88:	ed 5e       	subi	r30, 0xED	; 237
     d8a:	fd 4f       	sbci	r31, 0xFD	; 253
     d8c:	20 83       	st	Z, r18
     d8e:	f7 01       	movw	r30, r14
     d90:	ec 5e       	subi	r30, 0xEC	; 236
     d92:	fd 4f       	sbci	r31, 0xFD	; 253
     d94:	90 83       	st	Z, r25
     d96:	f7 01       	movw	r30, r14
     d98:	eb 5e       	subi	r30, 0xEB	; 235
     d9a:	fd 4f       	sbci	r31, 0xFD	; 253
     d9c:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
     d9e:	f7 01       	movw	r30, r14
     da0:	36 85       	ldd	r19, Z+14	; 0x0e
     da2:	27 85       	ldd	r18, Z+15	; 0x0f
     da4:	90 89       	ldd	r25, Z+16	; 0x10
     da6:	81 89       	ldd	r24, Z+17	; 0x11
     da8:	ea 5e       	subi	r30, 0xEA	; 234
     daa:	fd 4f       	sbci	r31, 0xFD	; 253
     dac:	30 83       	st	Z, r19
     dae:	f7 01       	movw	r30, r14
     db0:	e9 5e       	subi	r30, 0xE9	; 233
     db2:	fd 4f       	sbci	r31, 0xFD	; 253
     db4:	20 83       	st	Z, r18
     db6:	f7 01       	movw	r30, r14
     db8:	e8 5e       	subi	r30, 0xE8	; 232
     dba:	fd 4f       	sbci	r31, 0xFD	; 253
     dbc:	90 83       	st	Z, r25
     dbe:	f7 01       	movw	r30, r14
     dc0:	e7 5e       	subi	r30, 0xE7	; 231
     dc2:	fd 4f       	sbci	r31, 0xFD	; 253
     dc4:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
     dc6:	f7 01       	movw	r30, r14
     dc8:	32 85       	ldd	r19, Z+10	; 0x0a
     dca:	23 85       	ldd	r18, Z+11	; 0x0b
     dcc:	94 85       	ldd	r25, Z+12	; 0x0c
     dce:	85 85       	ldd	r24, Z+13	; 0x0d
     dd0:	e6 5e       	subi	r30, 0xE6	; 230
     dd2:	fd 4f       	sbci	r31, 0xFD	; 253
     dd4:	30 83       	st	Z, r19
     dd6:	f7 01       	movw	r30, r14
     dd8:	e5 5e       	subi	r30, 0xE5	; 229
     dda:	fd 4f       	sbci	r31, 0xFD	; 253
     ddc:	20 83       	st	Z, r18
     dde:	f7 01       	movw	r30, r14
     de0:	e4 5e       	subi	r30, 0xE4	; 228
     de2:	fd 4f       	sbci	r31, 0xFD	; 253
     de4:	90 83       	st	Z, r25
     de6:	f7 01       	movw	r30, r14
     de8:	e3 5e       	subi	r30, 0xE3	; 227
     dea:	fd 4f       	sbci	r31, 0xFD	; 253
     dec:	80 83       	st	Z, r24
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
     dee:	f7 01       	movw	r30, r14
     df0:	22 89       	ldd	r18, Z+18	; 0x12
     df2:	33 89       	ldd	r19, Z+19	; 0x13
     df4:	44 89       	ldd	r20, Z+20	; 0x14
     df6:	55 89       	ldd	r21, Z+21	; 0x15
     df8:	81 81       	ldd	r24, Z+1	; 0x01
     dfa:	b8 01       	movw	r22, r16
     dfc:	01 e0       	ldi	r16, 0x01	; 1
     dfe:	10 e0       	ldi	r17, 0x00	; 0
     e00:	0e 94 bb 20 	call	0x4176	; 0x4176 <disk_write>
			fs->fsi_flag = 0;
     e04:	f7 01       	movw	r30, r14
     e06:	15 82       	std	Z+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
     e08:	f7 01       	movw	r30, r14
     e0a:	81 81       	ldd	r24, Z+1	; 0x01
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	50 e0       	ldi	r21, 0x00	; 0
     e12:	0e 94 24 21 	call	0x4248	; 0x4248 <disk_ioctl>
     e16:	81 11       	cpse	r24, r1
			res = FR_DISK_ERR;
     e18:	c1 e0       	ldi	r28, 0x01	; 1
	}

	return res;
}
     e1a:	8c 2f       	mov	r24, r28
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	ff 90       	pop	r15
     e24:	ef 90       	pop	r14
     e26:	08 95       	ret

00000e28 <get_fattime>:
	| (WORD)(4 << 11)               // rtcHour
	| (WORD)(30 << 5)               // rtcMin
	| (WORD)(0 >> 1);               // rtcSec

	return tmr;
}
     e28:	60 ec       	ldi	r22, 0xC0	; 192
     e2a:	73 e2       	ldi	r23, 0x23	; 35
     e2c:	8b e2       	ldi	r24, 0x2B	; 43
     e2e:	93 e0       	ldi	r25, 0x03	; 3
     e30:	08 95       	ret

00000e32 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	ec 01       	movw	r28, r24
     e3c:	db 01       	movw	r26, r22
     e3e:	ca 01       	movw	r24, r20
	clst -= 2;
     e40:	02 97       	sbiw	r24, 0x02	; 2
     e42:	a1 09       	sbc	r26, r1
     e44:	b1 09       	sbc	r27, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     e46:	4e 89       	ldd	r20, Y+22	; 0x16
     e48:	5f 89       	ldd	r21, Y+23	; 0x17
     e4a:	68 8d       	ldd	r22, Y+24	; 0x18
     e4c:	79 8d       	ldd	r23, Y+25	; 0x19
     e4e:	42 50       	subi	r20, 0x02	; 2
     e50:	50 40       	sbci	r21, 0x00	; 0
     e52:	60 40       	sbci	r22, 0x00	; 0
     e54:	70 40       	sbci	r23, 0x00	; 0
     e56:	84 17       	cp	r24, r20
     e58:	95 07       	cpc	r25, r21
     e5a:	a6 07       	cpc	r26, r22
     e5c:	b7 07       	cpc	r27, r23
     e5e:	98 f4       	brcc	.+38     	; 0xe86 <clust2sect+0x54>
	return clst * fs->csize + fs->database;
     e60:	2a 81       	ldd	r18, Y+2	; 0x02
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	bc 01       	movw	r22, r24
     e6a:	cd 01       	movw	r24, r26
     e6c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__mulsi3>
     e70:	8b 01       	movw	r16, r22
     e72:	9c 01       	movw	r18, r24
     e74:	8e a1       	lds	r24, 0x4e
     e76:	9f a1       	lds	r25, 0x4f
     e78:	a8 a5       	lds	r26, 0x68
     e7a:	b9 a5       	lds	r27, 0x69
     e7c:	08 0f       	add	r16, r24
     e7e:	19 1f       	adc	r17, r25
     e80:	2a 1f       	adc	r18, r26
     e82:	3b 1f       	adc	r19, r27
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <clust2sect+0x5a>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     e86:	00 e0       	ldi	r16, 0x00	; 0
     e88:	10 e0       	ldi	r17, 0x00	; 0
     e8a:	98 01       	movw	r18, r16
	return clst * fs->csize + fs->database;
}
     e8c:	60 2f       	mov	r22, r16
     e8e:	71 2f       	mov	r23, r17
     e90:	82 2f       	mov	r24, r18
     e92:	93 2f       	mov	r25, r19
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	08 95       	ret

00000e9e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
     e9e:	bf 92       	push	r11
     ea0:	cf 92       	push	r12
     ea2:	df 92       	push	r13
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	ec 01       	movw	r28, r24
     eb2:	6a 01       	movw	r12, r20
     eb4:	7b 01       	movw	r14, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
     eb6:	42 30       	cpi	r20, 0x02	; 2
     eb8:	51 05       	cpc	r21, r1
     eba:	61 05       	cpc	r22, r1
     ebc:	71 05       	cpc	r23, r1
     ebe:	08 f4       	brcc	.+2      	; 0xec2 <get_fat+0x24>
     ec0:	cf c0       	rjmp	.+414    	; 0x1060 <get_fat+0x1c2>
     ec2:	8e 89       	ldd	r24, Y+22	; 0x16
     ec4:	9f 89       	ldd	r25, Y+23	; 0x17
     ec6:	a8 8d       	ldd	r26, Y+24	; 0x18
     ec8:	b9 8d       	ldd	r27, Y+25	; 0x19
     eca:	48 17       	cp	r20, r24
     ecc:	59 07       	cpc	r21, r25
     ece:	6a 07       	cpc	r22, r26
     ed0:	7b 07       	cpc	r23, r27
     ed2:	08 f0       	brcs	.+2      	; 0xed6 <get_fat+0x38>
     ed4:	ca c0       	rjmp	.+404    	; 0x106a <get_fat+0x1cc>
		return 1;

	switch (fs->fs_type) {
     ed6:	88 81       	ld	r24, Y
     ed8:	82 30       	cpi	r24, 0x02	; 2
     eda:	09 f4       	brne	.+2      	; 0xede <get_fat+0x40>
     edc:	5c c0       	rjmp	.+184    	; 0xf96 <get_fat+0xf8>
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	09 f4       	brne	.+2      	; 0xee4 <get_fat+0x46>
     ee2:	7b c0       	rjmp	.+246    	; 0xfda <get_fat+0x13c>
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	09 f0       	breq	.+2      	; 0xeea <get_fat+0x4c>
     ee8:	c5 c0       	rjmp	.+394    	; 0x1074 <get_fat+0x1d6>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
     eea:	9a 01       	movw	r18, r20
     eec:	36 95       	lsr	r19
     eee:	27 95       	ror	r18
     ef0:	89 01       	movw	r16, r18
     ef2:	04 0f       	add	r16, r20
     ef4:	15 1f       	adc	r17, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
     ef6:	a8 01       	movw	r20, r16
     ef8:	45 2f       	mov	r20, r21
     efa:	55 27       	eor	r21, r21
     efc:	46 95       	lsr	r20
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f04:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f06:	a8 a1       	lds	r26, 0x48
     f08:	b9 a1       	lds	r27, 0x49
     f0a:	48 0f       	add	r20, r24
     f0c:	59 1f       	adc	r21, r25
     f0e:	6a 1f       	adc	r22, r26
     f10:	7b 1f       	adc	r23, r27
     f12:	ce 01       	movw	r24, r28
     f14:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
     f18:	88 23       	and	r24, r24
     f1a:	09 f0       	breq	.+2      	; 0xf1e <get_fat+0x80>
     f1c:	af c0       	rjmp	.+350    	; 0x107c <get_fat+0x1de>
		wc = fs->win[bc % SS(fs)]; bc++;
     f1e:	f8 01       	movw	r30, r16
     f20:	f1 70       	andi	r31, 0x01	; 1
     f22:	ec 0f       	add	r30, r28
     f24:	fd 1f       	adc	r31, r29
     f26:	b6 a4       	lds	r27, 0xa6
     f28:	0f 5f       	subi	r16, 0xFF	; 255
     f2a:	1f 4f       	sbci	r17, 0xFF	; 255
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
     f2c:	a8 01       	movw	r20, r16
     f2e:	45 2f       	mov	r20, r21
     f30:	55 27       	eor	r21, r21
     f32:	46 95       	lsr	r20
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f3a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f3c:	a8 a1       	lds	r26, 0x48
     f3e:	b9 a1       	lds	r27, 0x49
     f40:	48 0f       	add	r20, r24
     f42:	59 1f       	adc	r21, r25
     f44:	6a 1f       	adc	r22, r26
     f46:	7b 1f       	adc	r23, r27
     f48:	ce 01       	movw	r24, r28
     f4a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
     f4e:	88 23       	and	r24, r24
     f50:	09 f0       	breq	.+2      	; 0xf54 <get_fat+0xb6>
     f52:	98 c0       	rjmp	.+304    	; 0x1084 <get_fat+0x1e6>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
     f54:	2b 2d       	mov	r18, r11
     f56:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
     f58:	f8 01       	movw	r30, r16
     f5a:	f1 70       	andi	r31, 0x01	; 1
     f5c:	ec 0f       	add	r30, r28
     f5e:	fd 1f       	adc	r31, r29
     f60:	96 a5       	lds	r25, 0x66
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	82 2b       	or	r24, r18
     f66:	93 2b       	or	r25, r19
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     f68:	21 e0       	ldi	r18, 0x01	; 1
     f6a:	c2 22       	and	r12, r18
     f6c:	dd 24       	eor	r13, r13
     f6e:	c1 14       	cp	r12, r1
     f70:	d1 04       	cpc	r13, r1
     f72:	51 f0       	breq	.+20     	; 0xf88 <get_fat+0xea>
     f74:	92 95       	swap	r25
     f76:	82 95       	swap	r24
     f78:	8f 70       	andi	r24, 0x0F	; 15
     f7a:	89 27       	eor	r24, r25
     f7c:	9f 70       	andi	r25, 0x0F	; 15
     f7e:	89 27       	eor	r24, r25
     f80:	8c 01       	movw	r16, r24
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	89 c0       	rjmp	.+274    	; 0x109a <get_fat+0x1fc>
     f88:	8c 01       	movw	r16, r24
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	1f 70       	andi	r17, 0x0F	; 15
     f90:	20 70       	andi	r18, 0x00	; 0
     f92:	30 70       	andi	r19, 0x00	; 0
     f94:	82 c0       	rjmp	.+260    	; 0x109a <get_fat+0x1fc>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
     f96:	45 2f       	mov	r20, r21
     f98:	56 2f       	mov	r21, r22
     f9a:	67 2f       	mov	r22, r23
     f9c:	77 27       	eor	r23, r23
     f9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fa0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fa2:	a8 a1       	lds	r26, 0x48
     fa4:	b9 a1       	lds	r27, 0x49
     fa6:	48 0f       	add	r20, r24
     fa8:	59 1f       	adc	r21, r25
     faa:	6a 1f       	adc	r22, r26
     fac:	7b 1f       	adc	r23, r27
     fae:	ce 01       	movw	r24, r28
     fb0:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
     fb4:	88 23       	and	r24, r24
     fb6:	09 f0       	breq	.+2      	; 0xfba <get_fat+0x11c>
     fb8:	69 c0       	rjmp	.+210    	; 0x108c <get_fat+0x1ee>
		p = &fs->win[clst * 2 % SS(fs)];
     fba:	f6 01       	movw	r30, r12
     fbc:	ee 0f       	add	r30, r30
     fbe:	ff 1f       	adc	r31, r31
     fc0:	f1 70       	andi	r31, 0x01	; 1
		return LD_WORD(p);
     fc2:	ce 0f       	add	r28, r30
     fc4:	df 1f       	adc	r29, r31
     fc6:	9f a5       	lds	r25, 0x6f
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	0e a5       	lds	r16, 0x6e
     fcc:	10 e0       	ldi	r17, 0x00	; 0
     fce:	80 2b       	or	r24, r16
     fd0:	91 2b       	or	r25, r17
     fd2:	8c 01       	movw	r16, r24
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	60 c0       	rjmp	.+192    	; 0x109a <get_fat+0x1fc>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
     fda:	68 94       	set
     fdc:	16 f8       	bld	r1, 6
     fde:	76 95       	lsr	r23
     fe0:	67 95       	ror	r22
     fe2:	57 95       	ror	r21
     fe4:	47 95       	ror	r20
     fe6:	16 94       	lsr	r1
     fe8:	d1 f7       	brne	.-12     	; 0xfde <get_fat+0x140>
     fea:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fec:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fee:	a8 a1       	lds	r26, 0x48
     ff0:	b9 a1       	lds	r27, 0x49
     ff2:	48 0f       	add	r20, r24
     ff4:	59 1f       	adc	r21, r25
     ff6:	6a 1f       	adc	r22, r26
     ff8:	7b 1f       	adc	r23, r27
     ffa:	ce 01       	movw	r24, r28
     ffc:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
    1000:	88 23       	and	r24, r24
    1002:	09 f0       	breq	.+2      	; 0x1006 <get_fat+0x168>
    1004:	47 c0       	rjmp	.+142    	; 0x1094 <get_fat+0x1f6>
		p = &fs->win[clst * 4 % SS(fs)];
    1006:	f6 01       	movw	r30, r12
    1008:	ee 0f       	add	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	ee 0f       	add	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	f1 70       	andi	r31, 0x01	; 1
		return LD_DWORD(p) & 0x0FFFFFFF;
    1012:	ce 0f       	add	r28, r30
    1014:	df 1f       	adc	r29, r31
    1016:	09 a9       	sts	0x49, r16
    1018:	10 e0       	ldi	r17, 0x00	; 0
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	30 2f       	mov	r19, r16
    1020:	22 27       	eor	r18, r18
    1022:	11 27       	eor	r17, r17
    1024:	00 27       	eor	r16, r16
    1026:	88 a9       	sts	0x48, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	a0 e0       	ldi	r26, 0x00	; 0
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	dc 01       	movw	r26, r24
    1030:	99 27       	eor	r25, r25
    1032:	88 27       	eor	r24, r24
    1034:	08 2b       	or	r16, r24
    1036:	19 2b       	or	r17, r25
    1038:	2a 2b       	or	r18, r26
    103a:	3b 2b       	or	r19, r27
    103c:	8e a5       	lds	r24, 0x6e
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	a0 e0       	ldi	r26, 0x00	; 0
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	08 2b       	or	r16, r24
    1046:	19 2b       	or	r17, r25
    1048:	2a 2b       	or	r18, r26
    104a:	3b 2b       	or	r19, r27
    104c:	9f a5       	lds	r25, 0x6f
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	a0 e0       	ldi	r26, 0x00	; 0
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	08 2b       	or	r16, r24
    1056:	19 2b       	or	r17, r25
    1058:	2a 2b       	or	r18, r26
    105a:	3b 2b       	or	r19, r27
    105c:	3f 70       	andi	r19, 0x0F	; 15
    105e:	1d c0       	rjmp	.+58     	; 0x109a <get_fat+0x1fc>
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;
    1060:	01 e0       	ldi	r16, 0x01	; 1
    1062:	10 e0       	ldi	r17, 0x00	; 0
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	18 c0       	rjmp	.+48     	; 0x109a <get_fat+0x1fc>
    106a:	01 e0       	ldi	r16, 0x01	; 1
    106c:	10 e0       	ldi	r17, 0x00	; 0
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	13 c0       	rjmp	.+38     	; 0x109a <get_fat+0x1fc>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    1074:	0f ef       	ldi	r16, 0xFF	; 255
    1076:	1f ef       	ldi	r17, 0xFF	; 255
    1078:	98 01       	movw	r18, r16
    107a:	0f c0       	rjmp	.+30     	; 0x109a <get_fat+0x1fc>
    107c:	0f ef       	ldi	r16, 0xFF	; 255
    107e:	1f ef       	ldi	r17, 0xFF	; 255
    1080:	98 01       	movw	r18, r16
    1082:	0b c0       	rjmp	.+22     	; 0x109a <get_fat+0x1fc>
    1084:	0f ef       	ldi	r16, 0xFF	; 255
    1086:	1f ef       	ldi	r17, 0xFF	; 255
    1088:	98 01       	movw	r18, r16
    108a:	07 c0       	rjmp	.+14     	; 0x109a <get_fat+0x1fc>
    108c:	0f ef       	ldi	r16, 0xFF	; 255
    108e:	1f ef       	ldi	r17, 0xFF	; 255
    1090:	98 01       	movw	r18, r16
    1092:	03 c0       	rjmp	.+6      	; 0x109a <get_fat+0x1fc>
    1094:	0f ef       	ldi	r16, 0xFF	; 255
    1096:	1f ef       	ldi	r17, 0xFF	; 255
    1098:	98 01       	movw	r18, r16
}
    109a:	60 2f       	mov	r22, r16
    109c:	71 2f       	mov	r23, r17
    109e:	82 2f       	mov	r24, r18
    10a0:	93 2f       	mov	r25, r19
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	df 90       	pop	r13
    10b0:	cf 90       	pop	r12
    10b2:	bf 90       	pop	r11
    10b4:	08 95       	ret

000010b6 <dir_sdi>:
static
FRESULT dir_sdi (
	DIRS *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    10b6:	ef 92       	push	r14
    10b8:	ff 92       	push	r15
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	ec 01       	movw	r28, r24
    10c4:	8b 01       	movw	r16, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    10c6:	7d 83       	std	Y+5, r23	; 0x05
    10c8:	6c 83       	std	Y+4, r22	; 0x04
	clst = dj->sclust;
    10ca:	4e 81       	ldd	r20, Y+6	; 0x06
    10cc:	5f 81       	ldd	r21, Y+7	; 0x07
    10ce:	68 85       	ldd	r22, Y+8	; 0x08
    10d0:	79 85       	ldd	r23, Y+9	; 0x09
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    10d2:	41 30       	cpi	r20, 0x01	; 1
    10d4:	51 05       	cpc	r21, r1
    10d6:	61 05       	cpc	r22, r1
    10d8:	71 05       	cpc	r23, r1
    10da:	09 f4       	brne	.+2      	; 0x10de <dir_sdi+0x28>
    10dc:	9f c0       	rjmp	.+318    	; 0x121c <dir_sdi+0x166>
    10de:	e8 81       	ld	r30, Y
    10e0:	f9 81       	ldd	r31, Y+1	; 0x01
    10e2:	86 89       	ldd	r24, Z+22	; 0x16
    10e4:	97 89       	ldd	r25, Z+23	; 0x17
    10e6:	a0 8d       	ldd	r26, Z+24	; 0x18
    10e8:	b1 8d       	ldd	r27, Z+25	; 0x19
    10ea:	48 17       	cp	r20, r24
    10ec:	59 07       	cpc	r21, r25
    10ee:	6a 07       	cpc	r22, r26
    10f0:	7b 07       	cpc	r23, r27
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <dir_sdi+0x40>
    10f4:	95 c0       	rjmp	.+298    	; 0x1220 <dir_sdi+0x16a>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    10f6:	41 15       	cp	r20, r1
    10f8:	51 05       	cpc	r21, r1
    10fa:	61 05       	cpc	r22, r1
    10fc:	71 05       	cpc	r23, r1
    10fe:	69 f5       	brne	.+90     	; 0x115a <dir_sdi+0xa4>
    1100:	80 81       	ld	r24, Z
    1102:	83 30       	cpi	r24, 0x03	; 3
    1104:	49 f4       	brne	.+18     	; 0x1118 <dir_sdi+0x62>
		clst = dj->fs->dirbase;
    1106:	42 a1       	lds	r20, 0x42
    1108:	53 a1       	lds	r21, 0x43
    110a:	64 a1       	lds	r22, 0x44
    110c:	75 a1       	lds	r23, 0x45

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    110e:	41 15       	cp	r20, r1
    1110:	51 05       	cpc	r21, r1
    1112:	61 05       	cpc	r22, r1
    1114:	71 05       	cpc	r23, r1
    1116:	09 f5       	brne	.+66     	; 0x115a <dir_sdi+0xa4>
		dj->clust = clst;
    1118:	1a 86       	std	Y+10, r1	; 0x0a
    111a:	1b 86       	std	Y+11, r1	; 0x0b
    111c:	1c 86       	std	Y+12, r1	; 0x0c
    111e:	1d 86       	std	Y+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1120:	80 85       	ldd	r24, Z+8	; 0x08
    1122:	91 85       	ldd	r25, Z+9	; 0x09
    1124:	08 17       	cp	r16, r24
    1126:	19 07       	cpc	r17, r25
    1128:	08 f0       	brcs	.+2      	; 0x112c <dir_sdi+0x76>
    112a:	7c c0       	rjmp	.+248    	; 0x1224 <dir_sdi+0x16e>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    112c:	c8 01       	movw	r24, r16
    112e:	92 95       	swap	r25
    1130:	82 95       	swap	r24
    1132:	8f 70       	andi	r24, 0x0F	; 15
    1134:	89 27       	eor	r24, r25
    1136:	9f 70       	andi	r25, 0x0F	; 15
    1138:	89 27       	eor	r24, r25
    113a:	ac 01       	movw	r20, r24
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	82 a1       	lds	r24, 0x42
    1142:	93 a1       	lds	r25, 0x43
    1144:	a4 a1       	lds	r26, 0x44
    1146:	b5 a1       	lds	r27, 0x45
    1148:	84 0f       	add	r24, r20
    114a:	95 1f       	adc	r25, r21
    114c:	a6 1f       	adc	r26, r22
    114e:	b7 1f       	adc	r27, r23
    1150:	8e 87       	std	Y+14, r24	; 0x0e
    1152:	9f 87       	std	Y+15, r25	; 0x0f
    1154:	a8 8b       	std	Y+16, r26	; 0x10
    1156:	b9 8b       	std	Y+17, r27	; 0x11
    1158:	4e c0       	rjmp	.+156    	; 0x11f6 <dir_sdi+0x140>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    115a:	82 81       	ldd	r24, Z+2	; 0x02
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	7c 01       	movw	r14, r24
    1160:	ee 0c       	add	r14, r14
    1162:	ff 1c       	adc	r15, r15
    1164:	ee 0c       	add	r14, r14
    1166:	ff 1c       	adc	r15, r15
    1168:	ee 0c       	add	r14, r14
    116a:	ff 1c       	adc	r15, r15
    116c:	ee 0c       	add	r14, r14
    116e:	ff 1c       	adc	r15, r15
		while (idx >= ic) {	/* Follow cluster chain */
    1170:	0e 15       	cp	r16, r14
    1172:	1f 05       	cpc	r17, r15
    1174:	28 f1       	brcs	.+74     	; 0x11c0 <dir_sdi+0x10a>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1176:	88 81       	ld	r24, Y
    1178:	99 81       	ldd	r25, Y+1	; 0x01
    117a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <get_fat>
    117e:	ab 01       	movw	r20, r22
    1180:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1182:	4f 3f       	cpi	r20, 0xFF	; 255
    1184:	8f ef       	ldi	r24, 0xFF	; 255
    1186:	58 07       	cpc	r21, r24
    1188:	8f ef       	ldi	r24, 0xFF	; 255
    118a:	68 07       	cpc	r22, r24
    118c:	8f ef       	ldi	r24, 0xFF	; 255
    118e:	78 07       	cpc	r23, r24
    1190:	09 f4       	brne	.+2      	; 0x1194 <dir_sdi+0xde>
    1192:	4a c0       	rjmp	.+148    	; 0x1228 <dir_sdi+0x172>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    1194:	42 30       	cpi	r20, 0x02	; 2
    1196:	51 05       	cpc	r21, r1
    1198:	61 05       	cpc	r22, r1
    119a:	71 05       	cpc	r23, r1
    119c:	08 f4       	brcc	.+2      	; 0x11a0 <dir_sdi+0xea>
    119e:	46 c0       	rjmp	.+140    	; 0x122c <dir_sdi+0x176>
    11a0:	e8 81       	ld	r30, Y
    11a2:	f9 81       	ldd	r31, Y+1	; 0x01
    11a4:	86 89       	ldd	r24, Z+22	; 0x16
    11a6:	97 89       	ldd	r25, Z+23	; 0x17
    11a8:	a0 8d       	ldd	r26, Z+24	; 0x18
    11aa:	b1 8d       	ldd	r27, Z+25	; 0x19
    11ac:	48 17       	cp	r20, r24
    11ae:	59 07       	cpc	r21, r25
    11b0:	6a 07       	cpc	r22, r26
    11b2:	7b 07       	cpc	r23, r27
    11b4:	e8 f5       	brcc	.+122    	; 0x1230 <dir_sdi+0x17a>
				return FR_INT_ERR;
			idx -= ic;
    11b6:	0e 19       	sub	r16, r14
    11b8:	1f 09       	sbc	r17, r15
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    11ba:	0e 15       	cp	r16, r14
    11bc:	1f 05       	cpc	r17, r15
    11be:	d8 f6       	brcc	.-74     	; 0x1176 <dir_sdi+0xc0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    11c0:	4a 87       	std	Y+10, r20	; 0x0a
    11c2:	5b 87       	std	Y+11, r21	; 0x0b
    11c4:	6c 87       	std	Y+12, r22	; 0x0c
    11c6:	7d 87       	std	Y+13, r23	; 0x0d
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    11c8:	88 81       	ld	r24, Y
    11ca:	99 81       	ldd	r25, Y+1	; 0x01
    11cc:	0e 94 19 07 	call	0xe32	; 0xe32 <clust2sect>
    11d0:	ab 01       	movw	r20, r22
    11d2:	bc 01       	movw	r22, r24
    11d4:	c8 01       	movw	r24, r16
    11d6:	92 95       	swap	r25
    11d8:	82 95       	swap	r24
    11da:	8f 70       	andi	r24, 0x0F	; 15
    11dc:	89 27       	eor	r24, r25
    11de:	9f 70       	andi	r25, 0x0F	; 15
    11e0:	89 27       	eor	r24, r25
    11e2:	a0 e0       	ldi	r26, 0x00	; 0
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	84 0f       	add	r24, r20
    11e8:	95 1f       	adc	r25, r21
    11ea:	a6 1f       	adc	r26, r22
    11ec:	b7 1f       	adc	r27, r23
    11ee:	8e 87       	std	Y+14, r24	; 0x0e
    11f0:	9f 87       	std	Y+15, r25	; 0x0f
    11f2:	a8 8b       	std	Y+16, r26	; 0x10
    11f4:	b9 8b       	std	Y+17, r27	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    11f6:	88 81       	ld	r24, Y
    11f8:	99 81       	ldd	r25, Y+1	; 0x01
    11fa:	8e 96       	adiw	r24, 0x2e	; 46
    11fc:	0f 70       	andi	r16, 0x0F	; 15
    11fe:	10 70       	andi	r17, 0x00	; 0
    1200:	00 0f       	add	r16, r16
    1202:	11 1f       	adc	r17, r17
    1204:	02 95       	swap	r16
    1206:	12 95       	swap	r17
    1208:	10 7f       	andi	r17, 0xF0	; 240
    120a:	10 27       	eor	r17, r16
    120c:	00 7f       	andi	r16, 0xF0	; 240
    120e:	10 27       	eor	r17, r16
    1210:	80 0f       	add	r24, r16
    1212:	91 1f       	adc	r25, r17
    1214:	9b 8b       	std	Y+19, r25	; 0x13
    1216:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;	/* Seek succeeded */
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	0b c0       	rjmp	.+22     	; 0x1232 <dir_sdi+0x17c>


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	09 c0       	rjmp	.+18     	; 0x1232 <dir_sdi+0x17c>
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	07 c0       	rjmp	.+14     	; 0x1232 <dir_sdi+0x17c>
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
		dj->clust = clst;
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
			return FR_INT_ERR;
    1224:	82 e0       	ldi	r24, 0x02	; 2
    1226:	05 c0       	rjmp	.+10     	; 0x1232 <dir_sdi+0x17c>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	03 c0       	rjmp	.+6      	; 0x1232 <dir_sdi+0x17c>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
    122c:	82 e0       	ldi	r24, 0x02	; 2
    122e:	01 c0       	rjmp	.+2      	; 0x1232 <dir_sdi+0x17c>
    1230:	82 e0       	ldi	r24, 0x02	; 2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	08 95       	ret

00001240 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIRS *dj				/* Directory object pointing the entry to be removed */
)
{
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dj, dj->index);
    1246:	6c 81       	ldd	r22, Y+4	; 0x04
    1248:	7d 81       	ldd	r23, Y+5	; 0x05
    124a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <dir_sdi>
	if (res == FR_OK) {
    124e:	88 23       	and	r24, r24
    1250:	91 f4       	brne	.+36     	; 0x1276 <dir_remove+0x36>
		res = move_window(dj->fs, dj->sect);
    1252:	4e 85       	ldd	r20, Y+14	; 0x0e
    1254:	5f 85       	ldd	r21, Y+15	; 0x0f
    1256:	68 89       	ldd	r22, Y+16	; 0x10
    1258:	79 89       	ldd	r23, Y+17	; 0x11
    125a:	88 81       	ld	r24, Y
    125c:	99 81       	ldd	r25, Y+1	; 0x01
    125e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
		if (res == FR_OK) {
    1262:	88 23       	and	r24, r24
    1264:	41 f4       	brne	.+16     	; 0x1276 <dir_remove+0x36>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    1266:	ea 89       	ldd	r30, Y+18	; 0x12
    1268:	fb 89       	ldd	r31, Y+19	; 0x13
    126a:	95 ee       	ldi	r25, 0xE5	; 229
    126c:	90 83       	st	Z, r25
			dj->fs->wflag = 1;
    126e:	e8 81       	ld	r30, Y
    1270:	f9 81       	ldd	r31, Y+1	; 0x01
    1272:	91 e0       	ldi	r25, 0x01	; 1
    1274:	94 83       	std	Z+4, r25	; 0x04
		}
	}
#endif

	return res;
}
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	08 95       	ret

0000127c <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    127c:	8f 92       	push	r8
    127e:	9f 92       	push	r9
    1280:	af 92       	push	r10
    1282:	bf 92       	push	r11
    1284:	cf 92       	push	r12
    1286:	df 92       	push	r13
    1288:	ef 92       	push	r14
    128a:	ff 92       	push	r15
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	ec 01       	movw	r28, r24
    1296:	6a 01       	movw	r12, r20
    1298:	7b 01       	movw	r14, r22
    129a:	48 01       	movw	r8, r16
    129c:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    129e:	42 30       	cpi	r20, 0x02	; 2
    12a0:	51 05       	cpc	r21, r1
    12a2:	61 05       	cpc	r22, r1
    12a4:	71 05       	cpc	r23, r1
    12a6:	08 f4       	brcc	.+2      	; 0x12aa <put_fat+0x2e>
    12a8:	ca c0       	rjmp	.+404    	; 0x143e <put_fat+0x1c2>
    12aa:	8e 89       	ldd	r24, Y+22	; 0x16
    12ac:	9f 89       	ldd	r25, Y+23	; 0x17
    12ae:	a8 8d       	ldd	r26, Y+24	; 0x18
    12b0:	b9 8d       	ldd	r27, Y+25	; 0x19
    12b2:	48 17       	cp	r20, r24
    12b4:	59 07       	cpc	r21, r25
    12b6:	6a 07       	cpc	r22, r26
    12b8:	7b 07       	cpc	r23, r27
    12ba:	08 f0       	brcs	.+2      	; 0x12be <put_fat+0x42>
    12bc:	c2 c0       	rjmp	.+388    	; 0x1442 <put_fat+0x1c6>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    12be:	88 81       	ld	r24, Y
    12c0:	82 30       	cpi	r24, 0x02	; 2
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <put_fat+0x4a>
    12c4:	6a c0       	rjmp	.+212    	; 0x139a <put_fat+0x11e>
    12c6:	83 30       	cpi	r24, 0x03	; 3
    12c8:	09 f4       	brne	.+2      	; 0x12cc <put_fat+0x50>
    12ca:	82 c0       	rjmp	.+260    	; 0x13d0 <put_fat+0x154>
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <put_fat+0x56>
    12d0:	b2 c0       	rjmp	.+356    	; 0x1436 <put_fat+0x1ba>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    12d2:	9a 01       	movw	r18, r20
    12d4:	36 95       	lsr	r19
    12d6:	27 95       	ror	r18
    12d8:	89 01       	movw	r16, r18
    12da:	04 0f       	add	r16, r20
    12dc:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    12de:	a8 01       	movw	r20, r16
    12e0:	45 2f       	mov	r20, r21
    12e2:	55 27       	eor	r21, r21
    12e4:	46 95       	lsr	r20
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    12ee:	a8 a1       	lds	r26, 0x48
    12f0:	b9 a1       	lds	r27, 0x49
    12f2:	48 0f       	add	r20, r24
    12f4:	59 1f       	adc	r21, r25
    12f6:	6a 1f       	adc	r22, r26
    12f8:	7b 1f       	adc	r23, r27
    12fa:	ce 01       	movw	r24, r28
    12fc:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
			if (res != FR_OK) break;
    1300:	88 23       	and	r24, r24
    1302:	09 f0       	breq	.+2      	; 0x1306 <put_fat+0x8a>
    1304:	99 c0       	rjmp	.+306    	; 0x1438 <put_fat+0x1bc>
			p = &fs->win[bc % SS(fs)];
    1306:	c8 01       	movw	r24, r16
    1308:	91 70       	andi	r25, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    130a:	e1 e0       	ldi	r30, 0x01	; 1
    130c:	ce 22       	and	r12, r30
    130e:	dd 24       	eor	r13, r13
    1310:	c1 14       	cp	r12, r1
    1312:	d1 04       	cpc	r13, r1
    1314:	51 f0       	breq	.+20     	; 0x132a <put_fat+0xae>
    1316:	fe 01       	movw	r30, r28
    1318:	e8 0f       	add	r30, r24
    131a:	f9 1f       	adc	r31, r25
    131c:	26 a5       	lds	r18, 0x66
    131e:	2f 70       	andi	r18, 0x0F	; 15
    1320:	38 2d       	mov	r19, r8
    1322:	32 95       	swap	r19
    1324:	30 7f       	andi	r19, 0xF0	; 240
    1326:	23 2b       	or	r18, r19
    1328:	01 c0       	rjmp	.+2      	; 0x132c <put_fat+0xb0>
    132a:	28 2d       	mov	r18, r8
    132c:	fe 01       	movw	r30, r28
    132e:	e8 0f       	add	r30, r24
    1330:	f9 1f       	adc	r31, r25
    1332:	26 a7       	lds	r18, 0x76
			bc++;
    1334:	0f 5f       	subi	r16, 0xFF	; 255
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    133c:	a8 01       	movw	r20, r16
    133e:	45 2f       	mov	r20, r21
    1340:	55 27       	eor	r21, r21
    1342:	46 95       	lsr	r20
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	8e 8d       	ldd	r24, Y+30	; 0x1e
    134a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    134c:	a8 a1       	lds	r26, 0x48
    134e:	b9 a1       	lds	r27, 0x49
    1350:	48 0f       	add	r20, r24
    1352:	59 1f       	adc	r21, r25
    1354:	6a 1f       	adc	r22, r26
    1356:	7b 1f       	adc	r23, r27
    1358:	ce 01       	movw	r24, r28
    135a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
			if (res != FR_OK) break;
    135e:	88 23       	and	r24, r24
    1360:	09 f0       	breq	.+2      	; 0x1364 <put_fat+0xe8>
    1362:	6a c0       	rjmp	.+212    	; 0x1438 <put_fat+0x1bc>
			p = &fs->win[bc % SS(fs)];
    1364:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1366:	c1 14       	cp	r12, r1
    1368:	d1 04       	cpc	r13, r1
    136a:	49 f0       	breq	.+18     	; 0x137e <put_fat+0x102>
    136c:	68 94       	set
    136e:	13 f8       	bld	r1, 3
    1370:	b6 94       	lsr	r11
    1372:	a7 94       	ror	r10
    1374:	97 94       	ror	r9
    1376:	87 94       	ror	r8
    1378:	16 94       	lsr	r1
    137a:	d1 f7       	brne	.-12     	; 0x1370 <put_fat+0xf4>
    137c:	09 c0       	rjmp	.+18     	; 0x1390 <put_fat+0x114>
    137e:	fe 01       	movw	r30, r28
    1380:	e0 0f       	add	r30, r16
    1382:	f1 1f       	adc	r31, r17
    1384:	26 a5       	lds	r18, 0x66
    1386:	20 7f       	andi	r18, 0xF0	; 240
    1388:	99 2d       	mov	r25, r9
    138a:	9f 70       	andi	r25, 0x0F	; 15
    138c:	82 2e       	mov	r8, r18
    138e:	89 2a       	or	r8, r25
    1390:	0c 0f       	add	r16, r28
    1392:	1d 1f       	adc	r17, r29
    1394:	f8 01       	movw	r30, r16
    1396:	86 a6       	lds	r24, 0xb6
			break;
    1398:	4f c0       	rjmp	.+158    	; 0x1438 <put_fat+0x1bc>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    139a:	45 2f       	mov	r20, r21
    139c:	56 2f       	mov	r21, r22
    139e:	67 2f       	mov	r22, r23
    13a0:	77 27       	eor	r23, r23
    13a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13a4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13a6:	a8 a1       	lds	r26, 0x48
    13a8:	b9 a1       	lds	r27, 0x49
    13aa:	48 0f       	add	r20, r24
    13ac:	59 1f       	adc	r21, r25
    13ae:	6a 1f       	adc	r22, r26
    13b0:	7b 1f       	adc	r23, r27
    13b2:	ce 01       	movw	r24, r28
    13b4:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
			if (res != FR_OK) break;
    13b8:	88 23       	and	r24, r24
    13ba:	09 f0       	breq	.+2      	; 0x13be <put_fat+0x142>
    13bc:	3d c0       	rjmp	.+122    	; 0x1438 <put_fat+0x1bc>
			p = &fs->win[clst * 2 % SS(fs)];
    13be:	f6 01       	movw	r30, r12
    13c0:	ee 0f       	add	r30, r30
    13c2:	ff 1f       	adc	r31, r31
    13c4:	f1 70       	andi	r31, 0x01	; 1
			ST_WORD(p, (WORD)val);
    13c6:	ec 0f       	add	r30, r28
    13c8:	fd 1f       	adc	r31, r29
    13ca:	86 a6       	lds	r24, 0xb6
    13cc:	97 a6       	lds	r25, 0xb7
			break;
    13ce:	34 c0       	rjmp	.+104    	; 0x1438 <put_fat+0x1bc>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    13d0:	68 94       	set
    13d2:	16 f8       	bld	r1, 6
    13d4:	76 95       	lsr	r23
    13d6:	67 95       	ror	r22
    13d8:	57 95       	ror	r21
    13da:	47 95       	ror	r20
    13dc:	16 94       	lsr	r1
    13de:	d1 f7       	brne	.-12     	; 0x13d4 <put_fat+0x158>
    13e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13e2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13e4:	a8 a1       	lds	r26, 0x48
    13e6:	b9 a1       	lds	r27, 0x49
    13e8:	48 0f       	add	r20, r24
    13ea:	59 1f       	adc	r21, r25
    13ec:	6a 1f       	adc	r22, r26
    13ee:	7b 1f       	adc	r23, r27
    13f0:	ce 01       	movw	r24, r28
    13f2:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
			if (res != FR_OK) break;
    13f6:	88 23       	and	r24, r24
    13f8:	f9 f4       	brne	.+62     	; 0x1438 <put_fat+0x1bc>
			p = &fs->win[clst * 4 % SS(fs)];
    13fa:	96 01       	movw	r18, r12
    13fc:	22 0f       	add	r18, r18
    13fe:	33 1f       	adc	r19, r19
    1400:	22 0f       	add	r18, r18
    1402:	33 1f       	adc	r19, r19
    1404:	31 70       	andi	r19, 0x01	; 1
			val |= LD_DWORD(p) & 0xF0000000;
    1406:	fe 01       	movw	r30, r28
    1408:	e2 0f       	add	r30, r18
    140a:	f3 1f       	adc	r31, r19
    140c:	41 a9       	sts	0x41, r20
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	74 2f       	mov	r23, r20
    1416:	66 27       	eor	r22, r22
    1418:	55 27       	eor	r21, r21
    141a:	44 27       	eor	r20, r20
    141c:	40 70       	andi	r20, 0x00	; 0
    141e:	50 70       	andi	r21, 0x00	; 0
    1420:	60 70       	andi	r22, 0x00	; 0
    1422:	70 7f       	andi	r23, 0xF0	; 240
    1424:	48 29       	or	r20, r8
    1426:	59 29       	or	r21, r9
    1428:	6a 29       	or	r22, r10
    142a:	7b 29       	or	r23, r11
			ST_DWORD(p, val);
    142c:	46 a7       	lds	r20, 0x76
    142e:	57 a7       	lds	r21, 0x77
    1430:	60 ab       	sts	0x50, r22
    1432:	71 ab       	sts	0x51, r23
			break;
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <put_fat+0x1bc>

		default :
			res = FR_INT_ERR;
    1436:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
    1438:	91 e0       	ldi	r25, 0x01	; 1
    143a:	9c 83       	std	Y+4, r25	; 0x04
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <put_fat+0x1c8>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <put_fat+0x1c8>
    1442:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
	}

	return res;
}
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	ff 90       	pop	r15
    144e:	ef 90       	pop	r14
    1450:	df 90       	pop	r13
    1452:	cf 90       	pop	r12
    1454:	bf 90       	pop	r11
    1456:	af 90       	pop	r10
    1458:	9f 90       	pop	r9
    145a:	8f 90       	pop	r8
    145c:	08 95       	ret

0000145e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    145e:	2f 92       	push	r2
    1460:	3f 92       	push	r3
    1462:	4f 92       	push	r4
    1464:	5f 92       	push	r5
    1466:	6f 92       	push	r6
    1468:	7f 92       	push	r7
    146a:	8f 92       	push	r8
    146c:	9f 92       	push	r9
    146e:	af 92       	push	r10
    1470:	bf 92       	push	r11
    1472:	cf 92       	push	r12
    1474:	df 92       	push	r13
    1476:	ef 92       	push	r14
    1478:	ff 92       	push	r15
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	00 d0       	rcall	.+0      	; 0x1484 <create_chain+0x26>
    1484:	00 d0       	rcall	.+0      	; 0x1486 <create_chain+0x28>
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	1c 01       	movw	r2, r24
    148c:	49 83       	std	Y+1, r20	; 0x01
    148e:	5a 83       	std	Y+2, r21	; 0x02
    1490:	6b 83       	std	Y+3, r22	; 0x03
    1492:	7c 83       	std	Y+4, r23	; 0x04
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    1494:	41 15       	cp	r20, r1
    1496:	51 05       	cpc	r21, r1
    1498:	61 05       	cpc	r22, r1
    149a:	71 05       	cpc	r23, r1
    149c:	c1 f4       	brne	.+48     	; 0x14ce <create_chain+0x70>
		scl = fs->last_clust;			/* Get suggested start point */
    149e:	dc 01       	movw	r26, r24
    14a0:	1a 96       	adiw	r26, 0x0a	; 10
    14a2:	8d 90       	ld	r8, X+
    14a4:	9d 90       	ld	r9, X+
    14a6:	ad 90       	ld	r10, X+
    14a8:	bc 90       	ld	r11, X
    14aa:	1d 97       	sbiw	r26, 0x0d	; 13
		if (!scl || scl >= fs->n_fatent) scl = 1;
    14ac:	81 14       	cp	r8, r1
    14ae:	91 04       	cpc	r9, r1
    14b0:	a1 04       	cpc	r10, r1
    14b2:	b1 04       	cpc	r11, r1
    14b4:	51 f1       	breq	.+84     	; 0x150a <create_chain+0xac>
    14b6:	56 96       	adiw	r26, 0x16	; 22
    14b8:	8d 91       	ld	r24, X+
    14ba:	9d 91       	ld	r25, X+
    14bc:	0d 90       	ld	r0, X+
    14be:	bc 91       	ld	r27, X
    14c0:	a0 2d       	mov	r26, r0
    14c2:	88 16       	cp	r8, r24
    14c4:	99 06       	cpc	r9, r25
    14c6:	aa 06       	cpc	r10, r26
    14c8:	bb 06       	cpc	r11, r27
    14ca:	20 f5       	brcc	.+72     	; 0x1514 <create_chain+0xb6>
    14cc:	27 c0       	rjmp	.+78     	; 0x151c <create_chain+0xbe>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    14ce:	49 81       	ldd	r20, Y+1	; 0x01
    14d0:	5a 81       	ldd	r21, Y+2	; 0x02
    14d2:	6b 81       	ldd	r22, Y+3	; 0x03
    14d4:	7c 81       	ldd	r23, Y+4	; 0x04
    14d6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <get_fat>
    14da:	8b 01       	movw	r16, r22
    14dc:	9c 01       	movw	r18, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    14de:	62 30       	cpi	r22, 0x02	; 2
    14e0:	71 05       	cpc	r23, r1
    14e2:	81 05       	cpc	r24, r1
    14e4:	91 05       	cpc	r25, r1
    14e6:	08 f4       	brcc	.+2      	; 0x14ea <create_chain+0x8c>
    14e8:	ad c0       	rjmp	.+346    	; 0x1644 <create_chain+0x1e6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    14ea:	f1 01       	movw	r30, r2
    14ec:	86 89       	ldd	r24, Z+22	; 0x16
    14ee:	97 89       	ldd	r25, Z+23	; 0x17
    14f0:	a0 8d       	ldd	r26, Z+24	; 0x18
    14f2:	b1 8d       	ldd	r27, Z+25	; 0x19
    14f4:	08 17       	cp	r16, r24
    14f6:	19 07       	cpc	r17, r25
    14f8:	2a 07       	cpc	r18, r26
    14fa:	3b 07       	cpc	r19, r27
    14fc:	08 f4       	brcc	.+2      	; 0x1500 <create_chain+0xa2>
    14fe:	b6 c0       	rjmp	.+364    	; 0x166c <create_chain+0x20e>
		scl = clst;
    1500:	89 80       	ldd	r8, Y+1	; 0x01
    1502:	9a 80       	ldd	r9, Y+2	; 0x02
    1504:	ab 80       	ldd	r10, Y+3	; 0x03
    1506:	bc 80       	ldd	r11, Y+4	; 0x04
    1508:	09 c0       	rjmp	.+18     	; 0x151c <create_chain+0xbe>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    150a:	88 24       	eor	r8, r8
    150c:	99 24       	eor	r9, r9
    150e:	54 01       	movw	r10, r8
    1510:	83 94       	inc	r8
    1512:	04 c0       	rjmp	.+8      	; 0x151c <create_chain+0xbe>
    1514:	88 24       	eor	r8, r8
    1516:	99 24       	eor	r9, r9
    1518:	54 01       	movw	r10, r8
    151a:	83 94       	inc	r8
		if (cs < 2) return 1;			/* It is an invalid cluster */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
    151c:	75 01       	movw	r14, r10
    151e:	64 01       	movw	r12, r8
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    1520:	44 24       	eor	r4, r4
    1522:	55 24       	eor	r5, r5
    1524:	32 01       	movw	r6, r4
    1526:	68 94       	set
    1528:	41 f8       	bld	r4, 1
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    152a:	08 94       	sec
    152c:	c1 1c       	adc	r12, r1
    152e:	d1 1c       	adc	r13, r1
    1530:	e1 1c       	adc	r14, r1
    1532:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1534:	f1 01       	movw	r30, r2
    1536:	86 89       	ldd	r24, Z+22	; 0x16
    1538:	97 89       	ldd	r25, Z+23	; 0x17
    153a:	a0 8d       	ldd	r26, Z+24	; 0x18
    153c:	b1 8d       	ldd	r27, Z+25	; 0x19
    153e:	c8 16       	cp	r12, r24
    1540:	d9 06       	cpc	r13, r25
    1542:	ea 06       	cpc	r14, r26
    1544:	fb 06       	cpc	r15, r27
    1546:	48 f0       	brcs	.+18     	; 0x155a <create_chain+0xfc>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1548:	f2 e0       	ldi	r31, 0x02	; 2
    154a:	8f 16       	cp	r8, r31
    154c:	91 04       	cpc	r9, r1
    154e:	a1 04       	cpc	r10, r1
    1550:	b1 04       	cpc	r11, r1
    1552:	08 f4       	brcc	.+2      	; 0x1556 <create_chain+0xf8>
    1554:	7c c0       	rjmp	.+248    	; 0x164e <create_chain+0x1f0>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    1556:	73 01       	movw	r14, r6
    1558:	62 01       	movw	r12, r4
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    155a:	c1 01       	movw	r24, r2
    155c:	b7 01       	movw	r22, r14
    155e:	a6 01       	movw	r20, r12
    1560:	0e 94 4f 07 	call	0xe9e	; 0xe9e <get_fat>
    1564:	8b 01       	movw	r16, r22
    1566:	9c 01       	movw	r18, r24
		if (cs == 0) break;				/* Found a free cluster */
    1568:	61 15       	cp	r22, r1
    156a:	71 05       	cpc	r23, r1
    156c:	81 05       	cpc	r24, r1
    156e:	91 05       	cpc	r25, r1
    1570:	a9 f0       	breq	.+42     	; 0x159c <create_chain+0x13e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1572:	0f 3f       	cpi	r16, 0xFF	; 255
    1574:	8f ef       	ldi	r24, 0xFF	; 255
    1576:	18 07       	cpc	r17, r24
    1578:	8f ef       	ldi	r24, 0xFF	; 255
    157a:	28 07       	cpc	r18, r24
    157c:	8f ef       	ldi	r24, 0xFF	; 255
    157e:	38 07       	cpc	r19, r24
    1580:	09 f4       	brne	.+2      	; 0x1584 <create_chain+0x126>
    1582:	74 c0       	rjmp	.+232    	; 0x166c <create_chain+0x20e>
    1584:	01 30       	cpi	r16, 0x01	; 1
    1586:	11 05       	cpc	r17, r1
    1588:	21 05       	cpc	r18, r1
    158a:	31 05       	cpc	r19, r1
    158c:	09 f4       	brne	.+2      	; 0x1590 <create_chain+0x132>
    158e:	6e c0       	rjmp	.+220    	; 0x166c <create_chain+0x20e>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1590:	c8 14       	cp	r12, r8
    1592:	d9 04       	cpc	r13, r9
    1594:	ea 04       	cpc	r14, r10
    1596:	fb 04       	cpc	r15, r11
    1598:	41 f6       	brne	.-112    	; 0x152a <create_chain+0xcc>
    159a:	5d c0       	rjmp	.+186    	; 0x1656 <create_chain+0x1f8>
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
    159c:	8c 2c       	mov	r8, r12
    159e:	4d 2c       	mov	r4, r13
    15a0:	be 2c       	mov	r11, r14
    15a2:	af 2c       	mov	r10, r15
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    15a4:	c1 01       	movw	r24, r2
    15a6:	4c 2d       	mov	r20, r12
    15a8:	5d 2d       	mov	r21, r13
    15aa:	6e 2d       	mov	r22, r14
    15ac:	7f 2d       	mov	r23, r15
    15ae:	0f ef       	ldi	r16, 0xFF	; 255
    15b0:	1f ef       	ldi	r17, 0xFF	; 255
    15b2:	2f ef       	ldi	r18, 0xFF	; 255
    15b4:	3f e0       	ldi	r19, 0x0F	; 15
    15b6:	0e 94 3e 09 	call	0x127c	; 0x127c <put_fat>
	if (res == FR_OK && clst != 0) {
    15ba:	88 23       	and	r24, r24
    15bc:	e9 f5       	brne	.+122    	; 0x1638 <create_chain+0x1da>
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	9a 81       	ldd	r25, Y+2	; 0x02
    15c2:	ab 81       	ldd	r26, Y+3	; 0x03
    15c4:	bc 81       	ldd	r27, Y+4	; 0x04
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	a1 05       	cpc	r26, r1
    15ca:	b1 05       	cpc	r27, r1
    15cc:	69 f0       	breq	.+26     	; 0x15e8 <create_chain+0x18a>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    15ce:	c1 01       	movw	r24, r2
    15d0:	49 81       	ldd	r20, Y+1	; 0x01
    15d2:	5a 81       	ldd	r21, Y+2	; 0x02
    15d4:	6b 81       	ldd	r22, Y+3	; 0x03
    15d6:	7c 81       	ldd	r23, Y+4	; 0x04
    15d8:	0c 2d       	mov	r16, r12
    15da:	1d 2d       	mov	r17, r13
    15dc:	2e 2d       	mov	r18, r14
    15de:	3f 2d       	mov	r19, r15
    15e0:	0e 94 3e 09 	call	0x127c	; 0x127c <put_fat>
	}
	if (res == FR_OK) {
    15e4:	88 23       	and	r24, r24
    15e6:	41 f5       	brne	.+80     	; 0x1638 <create_chain+0x1da>
		fs->last_clust = ncl;			/* Update FSINFO */
    15e8:	d1 01       	movw	r26, r2
    15ea:	1a 96       	adiw	r26, 0x0a	; 10
    15ec:	8c 92       	st	X, r8
    15ee:	1a 97       	sbiw	r26, 0x0a	; 10
    15f0:	1b 96       	adiw	r26, 0x0b	; 11
    15f2:	4c 92       	st	X, r4
    15f4:	1b 97       	sbiw	r26, 0x0b	; 11
    15f6:	1c 96       	adiw	r26, 0x0c	; 12
    15f8:	bc 92       	st	X, r11
    15fa:	1c 97       	sbiw	r26, 0x0c	; 12
    15fc:	1d 96       	adiw	r26, 0x0d	; 13
    15fe:	ac 92       	st	X, r10
    1600:	1d 97       	sbiw	r26, 0x0d	; 13
		if (fs->free_clust != 0xFFFFFFFF) {
    1602:	1e 96       	adiw	r26, 0x0e	; 14
    1604:	8d 91       	ld	r24, X+
    1606:	9d 91       	ld	r25, X+
    1608:	0d 90       	ld	r0, X+
    160a:	bc 91       	ld	r27, X
    160c:	a0 2d       	mov	r26, r0
    160e:	8f 3f       	cpi	r24, 0xFF	; 255
    1610:	ef ef       	ldi	r30, 0xFF	; 255
    1612:	9e 07       	cpc	r25, r30
    1614:	ef ef       	ldi	r30, 0xFF	; 255
    1616:	ae 07       	cpc	r26, r30
    1618:	ef ef       	ldi	r30, 0xFF	; 255
    161a:	be 07       	cpc	r27, r30
    161c:	01 f1       	breq	.+64     	; 0x165e <create_chain+0x200>
			fs->free_clust--;
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	a1 09       	sbc	r26, r1
    1622:	b1 09       	sbc	r27, r1
    1624:	f1 01       	movw	r30, r2
    1626:	86 87       	std	Z+14, r24	; 0x0e
    1628:	97 87       	std	Z+15, r25	; 0x0f
    162a:	a0 8b       	std	Z+16, r26	; 0x10
    162c:	b1 8b       	std	Z+17, r27	; 0x11
			fs->fsi_flag = 1;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	85 83       	std	Z+5, r24	; 0x05
    1632:	97 01       	movw	r18, r14
    1634:	86 01       	movw	r16, r12
    1636:	1a c0       	rjmp	.+52     	; 0x166c <create_chain+0x20e>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	a1 f4       	brne	.+40     	; 0x1664 <create_chain+0x206>
    163c:	0f ef       	ldi	r16, 0xFF	; 255
    163e:	1f ef       	ldi	r17, 0xFF	; 255
    1640:	98 01       	movw	r18, r16
    1642:	14 c0       	rjmp	.+40     	; 0x166c <create_chain+0x20e>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1644:	01 e0       	ldi	r16, 0x01	; 1
    1646:	10 e0       	ldi	r17, 0x00	; 0
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	0f c0       	rjmp	.+30     	; 0x166c <create_chain+0x20e>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    164e:	00 e0       	ldi	r16, 0x00	; 0
    1650:	10 e0       	ldi	r17, 0x00	; 0
    1652:	98 01       	movw	r18, r16
    1654:	0b c0       	rjmp	.+22     	; 0x166c <create_chain+0x20e>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1656:	00 e0       	ldi	r16, 0x00	; 0
    1658:	10 e0       	ldi	r17, 0x00	; 0
    165a:	98 01       	movw	r18, r16
    165c:	07 c0       	rjmp	.+14     	; 0x166c <create_chain+0x20e>
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
    165e:	97 01       	movw	r18, r14
    1660:	86 01       	movw	r16, r12
    1662:	04 c0       	rjmp	.+8      	; 0x166c <create_chain+0x20e>
			fs->free_clust--;
			fs->fsi_flag = 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1664:	01 e0       	ldi	r16, 0x01	; 1
    1666:	10 e0       	ldi	r17, 0x00	; 0
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
    166c:	60 2f       	mov	r22, r16
    166e:	71 2f       	mov	r23, r17
    1670:	82 2f       	mov	r24, r18
    1672:	93 2f       	mov	r25, r19
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	df 91       	pop	r29
    167e:	cf 91       	pop	r28
    1680:	1f 91       	pop	r17
    1682:	0f 91       	pop	r16
    1684:	ff 90       	pop	r15
    1686:	ef 90       	pop	r14
    1688:	df 90       	pop	r13
    168a:	cf 90       	pop	r12
    168c:	bf 90       	pop	r11
    168e:	af 90       	pop	r10
    1690:	9f 90       	pop	r9
    1692:	8f 90       	pop	r8
    1694:	7f 90       	pop	r7
    1696:	6f 90       	pop	r6
    1698:	5f 90       	pop	r5
    169a:	4f 90       	pop	r4
    169c:	3f 90       	pop	r3
    169e:	2f 90       	pop	r2
    16a0:	08 95       	ret

000016a2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIRS *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    16a2:	8f 92       	push	r8
    16a4:	9f 92       	push	r9
    16a6:	af 92       	push	r10
    16a8:	bf 92       	push	r11
    16aa:	cf 92       	push	r12
    16ac:	df 92       	push	r13
    16ae:	ef 92       	push	r14
    16b0:	ff 92       	push	r15
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	8c 01       	movw	r16, r24
    16bc:	eb 01       	movw	r28, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    16be:	dc 01       	movw	r26, r24
    16c0:	14 96       	adiw	r26, 0x04	; 4
    16c2:	ed 90       	ld	r14, X+
    16c4:	fc 90       	ld	r15, X
    16c6:	15 97       	sbiw	r26, 0x05	; 5
    16c8:	08 94       	sec
    16ca:	e1 1c       	adc	r14, r1
    16cc:	f1 1c       	adc	r15, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    16ce:	e1 14       	cp	r14, r1
    16d0:	f1 04       	cpc	r15, r1
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <dir_next+0x34>
    16d4:	09 c1       	rjmp	.+530    	; 0x18e8 <dir_next+0x246>
    16d6:	1e 96       	adiw	r26, 0x0e	; 14
    16d8:	8d 91       	ld	r24, X+
    16da:	9d 91       	ld	r25, X+
    16dc:	0d 90       	ld	r0, X+
    16de:	bc 91       	ld	r27, X
    16e0:	a0 2d       	mov	r26, r0
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	a1 05       	cpc	r26, r1
    16e6:	b1 05       	cpc	r27, r1
    16e8:	09 f4       	brne	.+2      	; 0x16ec <dir_next+0x4a>
    16ea:	00 c1       	rjmp	.+512    	; 0x18ec <dir_next+0x24a>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    16ec:	0f 2e       	mov	r0, r31
    16ee:	ff e0       	ldi	r31, 0x0F	; 15
    16f0:	cf 2e       	mov	r12, r31
    16f2:	dd 24       	eor	r13, r13
    16f4:	f0 2d       	mov	r31, r0
    16f6:	ce 20       	and	r12, r14
    16f8:	df 20       	and	r13, r15
    16fa:	c1 14       	cp	r12, r1
    16fc:	d1 04       	cpc	r13, r1
    16fe:	09 f0       	breq	.+2      	; 0x1702 <dir_next+0x60>
    1700:	d8 c0       	rjmp	.+432    	; 0x18b2 <dir_next+0x210>
		dj->sect++;					/* Next sector */
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	a1 1d       	adc	r26, r1
    1706:	b1 1d       	adc	r27, r1
    1708:	f8 01       	movw	r30, r16
    170a:	86 87       	std	Z+14, r24	; 0x0e
    170c:	97 87       	std	Z+15, r25	; 0x0f
    170e:	a0 8b       	std	Z+16, r26	; 0x10
    1710:	b1 8b       	std	Z+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    1712:	42 85       	ldd	r20, Z+10	; 0x0a
    1714:	53 85       	ldd	r21, Z+11	; 0x0b
    1716:	64 85       	ldd	r22, Z+12	; 0x0c
    1718:	75 85       	ldd	r23, Z+13	; 0x0d
    171a:	41 15       	cp	r20, r1
    171c:	51 05       	cpc	r21, r1
    171e:	61 05       	cpc	r22, r1
    1720:	71 05       	cpc	r23, r1
    1722:	51 f4       	brne	.+20     	; 0x1738 <dir_next+0x96>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    1724:	01 90       	ld	r0, Z+
    1726:	f0 81       	ld	r31, Z
    1728:	e0 2d       	mov	r30, r0
    172a:	80 85       	ldd	r24, Z+8	; 0x08
    172c:	91 85       	ldd	r25, Z+9	; 0x09
    172e:	e8 16       	cp	r14, r24
    1730:	f9 06       	cpc	r15, r25
    1732:	08 f0       	brcs	.+2      	; 0x1736 <dir_next+0x94>
    1734:	dd c0       	rjmp	.+442    	; 0x18f0 <dir_next+0x24e>
    1736:	bd c0       	rjmp	.+378    	; 0x18b2 <dir_next+0x210>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1738:	01 90       	ld	r0, Z+
    173a:	f0 81       	ld	r31, Z
    173c:	e0 2d       	mov	r30, r0
    173e:	82 81       	ldd	r24, Z+2	; 0x02
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	97 01       	movw	r18, r14
    1746:	32 95       	swap	r19
    1748:	22 95       	swap	r18
    174a:	2f 70       	andi	r18, 0x0F	; 15
    174c:	23 27       	eor	r18, r19
    174e:	3f 70       	andi	r19, 0x0F	; 15
    1750:	23 27       	eor	r18, r19
    1752:	82 23       	and	r24, r18
    1754:	93 23       	and	r25, r19
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	09 f0       	breq	.+2      	; 0x175c <dir_next+0xba>
    175a:	ab c0       	rjmp	.+342    	; 0x18b2 <dir_next+0x210>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    175c:	cf 01       	movw	r24, r30
    175e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <get_fat>
    1762:	4b 01       	movw	r8, r22
    1764:	5c 01       	movw	r10, r24
				if (clst <= 1) return FR_INT_ERR;
    1766:	62 30       	cpi	r22, 0x02	; 2
    1768:	71 05       	cpc	r23, r1
    176a:	81 05       	cpc	r24, r1
    176c:	91 05       	cpc	r25, r1
    176e:	08 f4       	brcc	.+2      	; 0x1772 <dir_next+0xd0>
    1770:	c1 c0       	rjmp	.+386    	; 0x18f4 <dir_next+0x252>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1772:	6f 3f       	cpi	r22, 0xFF	; 255
    1774:	ef ef       	ldi	r30, 0xFF	; 255
    1776:	7e 07       	cpc	r23, r30
    1778:	ef ef       	ldi	r30, 0xFF	; 255
    177a:	8e 07       	cpc	r24, r30
    177c:	ef ef       	ldi	r30, 0xFF	; 255
    177e:	9e 07       	cpc	r25, r30
    1780:	09 f4       	brne	.+2      	; 0x1784 <dir_next+0xe2>
    1782:	ba c0       	rjmp	.+372    	; 0x18f8 <dir_next+0x256>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    1784:	d8 01       	movw	r26, r16
    1786:	ed 91       	ld	r30, X+
    1788:	fc 91       	ld	r31, X
    178a:	86 89       	ldd	r24, Z+22	; 0x16
    178c:	97 89       	ldd	r25, Z+23	; 0x17
    178e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1790:	b1 8d       	ldd	r27, Z+25	; 0x19
    1792:	88 16       	cp	r8, r24
    1794:	99 06       	cpc	r9, r25
    1796:	aa 06       	cpc	r10, r26
    1798:	bb 06       	cpc	r11, r27
    179a:	08 f4       	brcc	.+2      	; 0x179e <dir_next+0xfc>
    179c:	78 c0       	rjmp	.+240    	; 0x188e <dir_next+0x1ec>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    179e:	20 97       	sbiw	r28, 0x00	; 0
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <dir_next+0x102>
    17a2:	ac c0       	rjmp	.+344    	; 0x18fc <dir_next+0x25a>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    17a4:	d8 01       	movw	r26, r16
    17a6:	1a 96       	adiw	r26, 0x0a	; 10
    17a8:	4d 91       	ld	r20, X+
    17aa:	5d 91       	ld	r21, X+
    17ac:	6d 91       	ld	r22, X+
    17ae:	7c 91       	ld	r23, X
    17b0:	1d 97       	sbiw	r26, 0x0d	; 13
    17b2:	cf 01       	movw	r24, r30
    17b4:	0e 94 2f 0a 	call	0x145e	; 0x145e <create_chain>
    17b8:	4b 01       	movw	r8, r22
    17ba:	5c 01       	movw	r10, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    17bc:	61 15       	cp	r22, r1
    17be:	71 05       	cpc	r23, r1
    17c0:	81 05       	cpc	r24, r1
    17c2:	91 05       	cpc	r25, r1
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <dir_next+0x126>
    17c6:	9c c0       	rjmp	.+312    	; 0x1900 <dir_next+0x25e>
					if (clst == 1) return FR_INT_ERR;
    17c8:	61 30       	cpi	r22, 0x01	; 1
    17ca:	71 05       	cpc	r23, r1
    17cc:	81 05       	cpc	r24, r1
    17ce:	91 05       	cpc	r25, r1
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <dir_next+0x132>
    17d2:	98 c0       	rjmp	.+304    	; 0x1904 <dir_next+0x262>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    17d4:	6f 3f       	cpi	r22, 0xFF	; 255
    17d6:	ef ef       	ldi	r30, 0xFF	; 255
    17d8:	7e 07       	cpc	r23, r30
    17da:	ef ef       	ldi	r30, 0xFF	; 255
    17dc:	8e 07       	cpc	r24, r30
    17de:	ef ef       	ldi	r30, 0xFF	; 255
    17e0:	9e 07       	cpc	r25, r30
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <dir_next+0x144>
    17e4:	91 c0       	rjmp	.+290    	; 0x1908 <dir_next+0x266>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    17e6:	d8 01       	movw	r26, r16
    17e8:	8d 91       	ld	r24, X+
    17ea:	9c 91       	ld	r25, X
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	50 e0       	ldi	r21, 0x00	; 0
    17f0:	ba 01       	movw	r22, r20
    17f2:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
    17f6:	88 23       	and	r24, r24
    17f8:	09 f0       	breq	.+2      	; 0x17fc <dir_next+0x15a>
    17fa:	88 c0       	rjmp	.+272    	; 0x190c <dir_next+0x26a>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    17fc:	f8 01       	movw	r30, r16
    17fe:	80 81       	ld	r24, Z
    1800:	91 81       	ldd	r25, Z+1	; 0x01
    1802:	8e 96       	adiw	r24, 0x2e	; 46
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	40 e0       	ldi	r20, 0x00	; 0
    180a:	52 e0       	ldi	r21, 0x02	; 2
    180c:	0e 94 74 00 	call	0xe8	; 0xe8 <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    1810:	d8 01       	movw	r26, r16
    1812:	cd 91       	ld	r28, X+
    1814:	dc 91       	ld	r29, X
    1816:	ce 01       	movw	r24, r28
    1818:	b5 01       	movw	r22, r10
    181a:	a4 01       	movw	r20, r8
    181c:	0e 94 19 07 	call	0xe32	; 0xe32 <clust2sect>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	8a a7       	lds	r24, 0x7a
    1826:	9b a7       	lds	r25, 0x7b
    1828:	ac a7       	lds	r26, 0x7c
    182a:	bd a7       	lds	r27, 0x7d
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    182c:	c0 e0       	ldi	r28, 0x00	; 0
						dj->fs->wflag = 1;
    182e:	d1 e0       	ldi	r29, 0x01	; 1
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1830:	1b c0       	rjmp	.+54     	; 0x1868 <dir_next+0x1c6>
						dj->fs->wflag = 1;
    1832:	d4 83       	std	Z+4, r29	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1834:	f8 01       	movw	r30, r16
    1836:	80 81       	ld	r24, Z
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	40 e0       	ldi	r20, 0x00	; 0
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	ba 01       	movw	r22, r20
    1840:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
    1844:	88 23       	and	r24, r24
    1846:	09 f0       	breq	.+2      	; 0x184a <dir_next+0x1a8>
    1848:	63 c0       	rjmp	.+198    	; 0x1910 <dir_next+0x26e>
						dj->fs->winsect++;
    184a:	d8 01       	movw	r26, r16
    184c:	ed 91       	ld	r30, X+
    184e:	fc 91       	ld	r31, X
    1850:	82 a5       	lds	r24, 0x62
    1852:	93 a5       	lds	r25, 0x63
    1854:	a4 a5       	lds	r26, 0x64
    1856:	b5 a5       	lds	r27, 0x65
    1858:	01 96       	adiw	r24, 0x01	; 1
    185a:	a1 1d       	adc	r26, r1
    185c:	b1 1d       	adc	r27, r1
    185e:	82 a7       	lds	r24, 0x72
    1860:	93 a7       	lds	r25, 0x73
    1862:	a4 a7       	lds	r26, 0x74
    1864:	b5 a7       	lds	r27, 0x75
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1866:	cf 5f       	subi	r28, 0xFF	; 255
    1868:	d8 01       	movw	r26, r16
    186a:	ed 91       	ld	r30, X+
    186c:	fc 91       	ld	r31, X
    186e:	11 97       	sbiw	r26, 0x01	; 1
    1870:	82 81       	ldd	r24, Z+2	; 0x02
    1872:	c8 17       	cp	r28, r24
    1874:	f0 f2       	brcs	.-68     	; 0x1832 <dir_next+0x190>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    1876:	82 a5       	lds	r24, 0x62
    1878:	93 a5       	lds	r25, 0x63
    187a:	a4 a5       	lds	r26, 0x64
    187c:	b5 a5       	lds	r27, 0x65
    187e:	8c 1b       	sub	r24, r28
    1880:	91 09       	sbc	r25, r1
    1882:	a1 09       	sbc	r26, r1
    1884:	b1 09       	sbc	r27, r1
    1886:	82 a7       	lds	r24, 0x72
    1888:	93 a7       	lds	r25, 0x73
    188a:	a4 a7       	lds	r26, 0x74
    188c:	b5 a7       	lds	r27, 0x75
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    188e:	f8 01       	movw	r30, r16
    1890:	82 86       	std	Z+10, r8	; 0x0a
    1892:	93 86       	std	Z+11, r9	; 0x0b
    1894:	a4 86       	std	Z+12, r10	; 0x0c
    1896:	b5 86       	std	Z+13, r11	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    1898:	80 81       	ld	r24, Z
    189a:	91 81       	ldd	r25, Z+1	; 0x01
    189c:	b5 01       	movw	r22, r10
    189e:	a4 01       	movw	r20, r8
    18a0:	0e 94 19 07 	call	0xe32	; 0xe32 <clust2sect>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	f8 01       	movw	r30, r16
    18aa:	86 87       	std	Z+14, r24	; 0x0e
    18ac:	97 87       	std	Z+15, r25	; 0x0f
    18ae:	a0 8b       	std	Z+16, r26	; 0x10
    18b0:	b1 8b       	std	Z+17, r27	; 0x11
			}
		}
	}

	dj->index = i;
    18b2:	d8 01       	movw	r26, r16
    18b4:	15 96       	adiw	r26, 0x05	; 5
    18b6:	fc 92       	st	X, r15
    18b8:	ee 92       	st	-X, r14
    18ba:	14 97       	sbiw	r26, 0x04	; 4
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    18bc:	8d 91       	ld	r24, X+
    18be:	9c 91       	ld	r25, X
    18c0:	11 97       	sbiw	r26, 0x01	; 1
    18c2:	8e 96       	adiw	r24, 0x2e	; 46
    18c4:	cc 0c       	add	r12, r12
    18c6:	dd 1c       	adc	r13, r13
    18c8:	cc 0c       	add	r12, r12
    18ca:	dd 1c       	adc	r13, r13
    18cc:	cc 0c       	add	r12, r12
    18ce:	dd 1c       	adc	r13, r13
    18d0:	cc 0c       	add	r12, r12
    18d2:	dd 1c       	adc	r13, r13
    18d4:	cc 0c       	add	r12, r12
    18d6:	dd 1c       	adc	r13, r13
    18d8:	8c 0d       	add	r24, r12
    18da:	9d 1d       	adc	r25, r13
    18dc:	53 96       	adiw	r26, 0x13	; 19
    18de:	9c 93       	st	X, r25
    18e0:	8e 93       	st	-X, r24
    18e2:	52 97       	sbiw	r26, 0x12	; 18

	return FR_OK;
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	15 c0       	rjmp	.+42     	; 0x1912 <dir_next+0x270>
	WORD i;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
    18e8:	84 e0       	ldi	r24, 0x04	; 4
    18ea:	13 c0       	rjmp	.+38     	; 0x1912 <dir_next+0x270>
    18ec:	84 e0       	ldi	r24, 0x04	; 4
    18ee:	11 c0       	rjmp	.+34     	; 0x1912 <dir_next+0x270>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
    18f0:	84 e0       	ldi	r24, 0x04	; 4
    18f2:	0f c0       	rjmp	.+30     	; 0x1912 <dir_next+0x270>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    18f4:	82 e0       	ldi	r24, 0x02	; 2
    18f6:	0d c0       	rjmp	.+26     	; 0x1912 <dir_next+0x270>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	0b c0       	rjmp	.+22     	; 0x1912 <dir_next+0x270>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    18fc:	84 e0       	ldi	r24, 0x04	; 4
    18fe:	09 c0       	rjmp	.+18     	; 0x1912 <dir_next+0x270>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1900:	87 e0       	ldi	r24, 0x07	; 7
    1902:	07 c0       	rjmp	.+14     	; 0x1912 <dir_next+0x270>
					if (clst == 1) return FR_INT_ERR;
    1904:	82 e0       	ldi	r24, 0x02	; 2
    1906:	05 c0       	rjmp	.+10     	; 0x1912 <dir_next+0x270>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	03 c0       	rjmp	.+6      	; 0x1912 <dir_next+0x270>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	01 c0       	rjmp	.+2      	; 0x1912 <dir_next+0x270>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    1910:	81 e0       	ldi	r24, 0x01	; 1

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	1f 91       	pop	r17
    1918:	0f 91       	pop	r16
    191a:	ff 90       	pop	r15
    191c:	ef 90       	pop	r14
    191e:	df 90       	pop	r13
    1920:	cf 90       	pop	r12
    1922:	bf 90       	pop	r11
    1924:	af 90       	pop	r10
    1926:	9f 90       	pop	r9
    1928:	8f 90       	pop	r8
    192a:	08 95       	ret

0000192c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIRS *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    192c:	2f 92       	push	r2
    192e:	3f 92       	push	r3
    1930:	4f 92       	push	r4
    1932:	5f 92       	push	r5
    1934:	6f 92       	push	r6
    1936:	7f 92       	push	r7
    1938:	8f 92       	push	r8
    193a:	9f 92       	push	r9
    193c:	af 92       	push	r10
    193e:	bf 92       	push	r11
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	00 d0       	rcall	.+0      	; 0x1952 <follow_path+0x26>
    1952:	00 d0       	rcall	.+0      	; 0x1954 <follow_path+0x28>
    1954:	00 d0       	rcall	.+0      	; 0x1956 <follow_path+0x2a>
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	8c 01       	movw	r16, r24
    195c:	7b 01       	movw	r14, r22
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    195e:	db 01       	movw	r26, r22
    1960:	8c 91       	ld	r24, X
    1962:	8f 32       	cpi	r24, 0x2F	; 47
    1964:	11 f0       	breq	.+4      	; 0x196a <follow_path+0x3e>
    1966:	8c 35       	cpi	r24, 0x5C	; 92
    1968:	19 f4       	brne	.+6      	; 0x1970 <follow_path+0x44>
		path++;
    196a:	08 94       	sec
    196c:	e1 1c       	adc	r14, r1
    196e:	f1 1c       	adc	r15, r1
	dj->sclust = 0;						/* Start from the root dir */
    1970:	f8 01       	movw	r30, r16
    1972:	16 82       	std	Z+6, r1	; 0x06
    1974:	17 82       	std	Z+7, r1	; 0x07
    1976:	10 86       	std	Z+8, r1	; 0x08
    1978:	11 86       	std	Z+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    197a:	d7 01       	movw	r26, r14
    197c:	8c 91       	ld	r24, X
    197e:	80 32       	cpi	r24, 0x20	; 32
    1980:	50 f4       	brcc	.+20     	; 0x1996 <follow_path+0x6a>
		res = dir_sdi(dj, 0);
    1982:	c8 01       	movw	r24, r16
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <dir_sdi>
    198c:	48 2f       	mov	r20, r24
		dj->dir = 0;
    198e:	f8 01       	movw	r30, r16
    1990:	13 8a       	std	Z+19, r1	; 0x13
    1992:	12 8a       	std	Z+18, r1	; 0x12
    1994:	47 c1       	rjmp	.+654    	; 0x1c24 <follow_path+0x2f8>

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
    1996:	cc 24       	eor	r12, r12
    1998:	dd 24       	eor	r13, r13
    199a:	22 24       	eor	r2, r2
    199c:	33 24       	eor	r3, r3
    199e:	68 94       	set
    19a0:	23 f8       	bld	r2, 3
    19a2:	88 24       	eor	r8, r8
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    19a4:	2b 82       	std	Y+3, r2	; 0x03
    19a6:	3c 82       	std	Y+4, r3	; 0x04
    19a8:	0f 2e       	mov	r0, r31
    19aa:	fb e0       	ldi	r31, 0x0B	; 11
    19ac:	bf 2e       	mov	r11, r31
    19ae:	f0 2d       	mov	r31, r0
    19b0:	99 24       	eor	r9, r9
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    19b2:	5a 82       	std	Y+2, r5	; 0x02
    19b4:	49 82       	std	Y+1, r4	; 0x01
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
		res = dir_sdi(dj, 0);
		dj->dir = 0;
    19b6:	f7 01       	movw	r30, r14
    19b8:	9f 01       	movw	r18, r30
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    19ba:	81 91       	ld	r24, Z+
    19bc:	8f 32       	cpi	r24, 0x2F	; 47
    19be:	e1 f3       	breq	.-8      	; 0x19b8 <follow_path+0x8c>
    19c0:	8c 35       	cpi	r24, 0x5C	; 92
    19c2:	d1 f3       	breq	.-12     	; 0x19b8 <follow_path+0x8c>
    19c4:	3e 83       	std	Y+6, r19	; 0x06
    19c6:	2d 83       	std	Y+5, r18	; 0x05
	sfn = dj->fn;
    19c8:	d8 01       	movw	r26, r16
    19ca:	54 96       	adiw	r26, 0x14	; 20
    19cc:	6d 90       	ld	r6, X+
    19ce:	7c 90       	ld	r7, X
    19d0:	55 97       	sbiw	r26, 0x15	; 21
	mem_set(sfn, ' ', 11);
    19d2:	c3 01       	movw	r24, r6
    19d4:	60 e2       	ldi	r22, 0x20	; 32
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	4b e0       	ldi	r20, 0x0B	; 11
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	0e 94 74 00 	call	0xe8	; 0xe8 <mem_set>
	si = i = b = 0; ni = 8;
    19e0:	b6 01       	movw	r22, r12
    19e2:	a6 01       	movw	r20, r12
    19e4:	d1 01       	movw	r26, r2
    19e6:	a8 2c       	mov	r10, r8
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    19e8:	ed 81       	ldd	r30, Y+5	; 0x05
    19ea:	fe 81       	ldd	r31, Y+6	; 0x06
    19ec:	e4 0f       	add	r30, r20
    19ee:	f5 1f       	adc	r31, r21
    19f0:	20 81       	ld	r18, Z
    19f2:	7a 01       	movw	r14, r20
    19f4:	08 94       	sec
    19f6:	e1 1c       	adc	r14, r1
    19f8:	f1 1c       	adc	r15, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    19fa:	21 32       	cpi	r18, 0x21	; 33
    19fc:	08 f4       	brcc	.+2      	; 0x1a00 <follow_path+0xd4>
    19fe:	69 c0       	rjmp	.+210    	; 0x1ad2 <follow_path+0x1a6>
    1a00:	2f 32       	cpi	r18, 0x2F	; 47
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <follow_path+0xda>
    1a04:	29 c1       	rjmp	.+594    	; 0x1c58 <follow_path+0x32c>
    1a06:	2c 35       	cpi	r18, 0x5C	; 92
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <follow_path+0xe0>
    1a0a:	26 c1       	rjmp	.+588    	; 0x1c58 <follow_path+0x32c>
		if (c == '.' || i >= ni) {
    1a0c:	2e 32       	cpi	r18, 0x2E	; 46
    1a0e:	19 f0       	breq	.+6      	; 0x1a16 <follow_path+0xea>
    1a10:	6a 17       	cp	r22, r26
    1a12:	7b 07       	cpc	r23, r27
    1a14:	78 f0       	brcs	.+30     	; 0x1a34 <follow_path+0x108>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1a16:	a8 30       	cpi	r26, 0x08	; 8
    1a18:	b1 05       	cpc	r27, r1
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <follow_path+0xf2>
    1a1c:	f4 c0       	rjmp	.+488    	; 0x1c06 <follow_path+0x2da>
    1a1e:	2e 32       	cpi	r18, 0x2E	; 46
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <follow_path+0xf8>
    1a22:	f3 c0       	rjmp	.+486    	; 0x1c0a <follow_path+0x2de>
			i = 8; ni = 11;
			b <<= 2; continue;
    1a24:	aa 0c       	add	r10, r10
    1a26:	aa 0c       	add	r10, r10
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    1a28:	a7 01       	movw	r20, r14
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    1a2a:	6b 81       	ldd	r22, Y+3	; 0x03
    1a2c:	7c 81       	ldd	r23, Y+4	; 0x04
    1a2e:	ab 2d       	mov	r26, r11
    1a30:	b9 2d       	mov	r27, r9
    1a32:	da cf       	rjmp	.-76     	; 0x19e8 <follow_path+0xbc>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char? */
    1a34:	22 23       	and	r18, r18
    1a36:	14 f4       	brge	.+4      	; 0x1a3c <follow_path+0x110>
			b |= 3;						/* Eliminate NT flag */
    1a38:	f3 e0       	ldi	r31, 0x03	; 3
    1a3a:	af 2a       	or	r10, r31
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    1a3c:	82 2f       	mov	r24, r18
    1a3e:	81 58       	subi	r24, 0x81	; 129
    1a40:	8f 31       	cpi	r24, 0x1F	; 31
    1a42:	18 f0       	brcs	.+6      	; 0x1a4a <follow_path+0x11e>
    1a44:	8f 55       	subi	r24, 0x5F	; 95
    1a46:	8d 31       	cpi	r24, 0x1D	; 29
    1a48:	e8 f4       	brcc	.+58     	; 0x1a84 <follow_path+0x158>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    1a4a:	ed 81       	ldd	r30, Y+5	; 0x05
    1a4c:	fe 81       	ldd	r31, Y+6	; 0x06
    1a4e:	ee 0d       	add	r30, r14
    1a50:	ff 1d       	adc	r31, r15
    1a52:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    1a54:	83 2f       	mov	r24, r19
    1a56:	80 54       	subi	r24, 0x40	; 64
    1a58:	8f 33       	cpi	r24, 0x3F	; 63
    1a5a:	20 f0       	brcs	.+8      	; 0x1a64 <follow_path+0x138>
    1a5c:	80 54       	subi	r24, 0x40	; 64
    1a5e:	8d 37       	cpi	r24, 0x7D	; 125
    1a60:	08 f0       	brcs	.+2      	; 0x1a64 <follow_path+0x138>
    1a62:	d5 c0       	rjmp	.+426    	; 0x1c0e <follow_path+0x2e2>
    1a64:	cd 01       	movw	r24, r26
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	68 17       	cp	r22, r24
    1a6a:	79 07       	cpc	r23, r25
    1a6c:	08 f0       	brcs	.+2      	; 0x1a70 <follow_path+0x144>
    1a6e:	d1 c0       	rjmp	.+418    	; 0x1c12 <follow_path+0x2e6>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    1a70:	4e 5f       	subi	r20, 0xFE	; 254
    1a72:	5f 4f       	sbci	r21, 0xFF	; 255
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    1a74:	f3 01       	movw	r30, r6
    1a76:	e6 0f       	add	r30, r22
    1a78:	f7 1f       	adc	r31, r23
    1a7a:	20 83       	st	Z, r18
			sfn[i++] = d;
    1a7c:	31 83       	std	Z+1, r19	; 0x01
    1a7e:	6e 5f       	subi	r22, 0xFE	; 254
    1a80:	7f 4f       	sbci	r23, 0xFF	; 255
    1a82:	b2 cf       	rjmp	.-156    	; 0x19e8 <follow_path+0xbc>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    1a84:	42 2f       	mov	r20, r18
    1a86:	50 e0       	ldi	r21, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    1a88:	42 32       	cpi	r20, 0x22	; 34
    1a8a:	51 05       	cpc	r21, r1
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <follow_path+0x164>
    1a8e:	c3 c0       	rjmp	.+390    	; 0x1c16 <follow_path+0x2ea>
    1a90:	e1 e0       	ldi	r30, 0x01	; 1
    1a92:	f1 e0       	ldi	r31, 0x01	; 1
    1a94:	81 91       	ld	r24, Z+
    1a96:	88 23       	and	r24, r24
    1a98:	31 f0       	breq	.+12     	; 0x1aa6 <follow_path+0x17a>
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	48 17       	cp	r20, r24
    1a9e:	59 07       	cpc	r21, r25
    1aa0:	c9 f7       	brne	.-14     	; 0x1a94 <follow_path+0x168>
    1aa2:	46 e0       	ldi	r20, 0x06	; 6
    1aa4:	bf c0       	rjmp	.+382    	; 0x1c24 <follow_path+0x2f8>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    1aa6:	82 2f       	mov	r24, r18
    1aa8:	81 54       	subi	r24, 0x41	; 65
    1aaa:	8a 31       	cpi	r24, 0x1A	; 26
    1aac:	18 f4       	brcc	.+6      	; 0x1ab4 <follow_path+0x188>
				b |= 2;
    1aae:	f2 e0       	ldi	r31, 0x02	; 2
    1ab0:	af 2a       	or	r10, r31
    1ab2:	07 c0       	rjmp	.+14     	; 0x1ac2 <follow_path+0x196>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    1ab4:	82 2f       	mov	r24, r18
    1ab6:	81 56       	subi	r24, 0x61	; 97
    1ab8:	8a 31       	cpi	r24, 0x1A	; 26
    1aba:	18 f4       	brcc	.+6      	; 0x1ac2 <follow_path+0x196>
					b |= 1; c -= 0x20;
    1abc:	31 e0       	ldi	r19, 0x01	; 1
    1abe:	a3 2a       	or	r10, r19
    1ac0:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    1ac2:	f3 01       	movw	r30, r6
    1ac4:	e6 0f       	add	r30, r22
    1ac6:	f7 1f       	adc	r31, r23
    1ac8:	20 83       	st	Z, r18
    1aca:	6f 5f       	subi	r22, 0xFF	; 255
    1acc:	7f 4f       	sbci	r23, 0xFF	; 255
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    1ace:	a7 01       	movw	r20, r14
    1ad0:	8b cf       	rjmp	.-234    	; 0x19e8 <follow_path+0xbc>
    1ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad4:	9e 81       	ldd	r25, Y+6	; 0x06
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    1ad6:	e8 0e       	add	r14, r24
    1ad8:	f9 1e       	adc	r15, r25
    1ada:	9a 2d       	mov	r25, r10
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1adc:	44 e0       	ldi	r20, 0x04	; 4

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    1ade:	61 15       	cp	r22, r1
    1ae0:	71 05       	cpc	r23, r1
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <follow_path+0x1ba>
    1ae4:	9a c0       	rjmp	.+308    	; 0x1c1a <follow_path+0x2ee>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    1ae6:	f3 01       	movw	r30, r6
    1ae8:	80 81       	ld	r24, Z
    1aea:	85 3e       	cpi	r24, 0xE5	; 229
    1aec:	11 f4       	brne	.+4      	; 0x1af2 <follow_path+0x1c6>
    1aee:	25 e0       	ldi	r18, 0x05	; 5
    1af0:	20 83       	st	Z, r18

	if (ni == 8) b <<= 2;
    1af2:	a8 30       	cpi	r26, 0x08	; 8
    1af4:	b1 05       	cpc	r27, r1
    1af6:	19 f4       	brne	.+6      	; 0x1afe <follow_path+0x1d2>
    1af8:	a9 2e       	mov	r10, r25
    1afa:	aa 0c       	add	r10, r10
    1afc:	aa 0c       	add	r10, r10
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    1afe:	8a 2d       	mov	r24, r10
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	9c 01       	movw	r18, r24
    1b04:	23 70       	andi	r18, 0x03	; 3
    1b06:	30 70       	andi	r19, 0x00	; 0
    1b08:	21 30       	cpi	r18, 0x01	; 1
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <follow_path+0x1e4>
    1b0e:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    1b10:	8c 70       	andi	r24, 0x0C	; 12
    1b12:	90 70       	andi	r25, 0x00	; 0
    1b14:	84 30       	cpi	r24, 0x04	; 4
    1b16:	91 05       	cpc	r25, r1
    1b18:	09 f4       	brne	.+2      	; 0x1b1c <follow_path+0x1f0>
    1b1a:	48 60       	ori	r20, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    1b1c:	d3 01       	movw	r26, r6
    1b1e:	1b 96       	adiw	r26, 0x0b	; 11
    1b20:	4c 93       	st	X, r20
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    1b22:	c8 01       	movw	r24, r16
    1b24:	b6 01       	movw	r22, r12
    1b26:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <dir_sdi>
	if (res != FR_OK) return res;
    1b2a:	88 23       	and	r24, r24
    1b2c:	99 f5       	brne	.+102    	; 0x1b94 <follow_path+0x268>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    1b2e:	f8 01       	movw	r30, r16
    1b30:	46 85       	ldd	r20, Z+14	; 0x0e
    1b32:	57 85       	ldd	r21, Z+15	; 0x0f
    1b34:	60 89       	ldd	r22, Z+16	; 0x10
    1b36:	71 89       	ldd	r23, Z+17	; 0x11
    1b38:	80 81       	ld	r24, Z
    1b3a:	91 81       	ldd	r25, Z+1	; 0x01
    1b3c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
		if (res != FR_OK) break;
    1b40:	88 23       	and	r24, r24
    1b42:	51 f5       	brne	.+84     	; 0x1b98 <follow_path+0x26c>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    1b44:	d8 01       	movw	r26, r16
    1b46:	52 96       	adiw	r26, 0x12	; 18
    1b48:	4d 91       	ld	r20, X+
    1b4a:	5c 91       	ld	r21, X
    1b4c:	53 97       	sbiw	r26, 0x13	; 19
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1b4e:	fa 01       	movw	r30, r20
    1b50:	90 81       	ld	r25, Z
    1b52:	99 23       	and	r25, r25
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <follow_path+0x22c>
    1b56:	8e c0       	rjmp	.+284    	; 0x1c74 <follow_path+0x348>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1b58:	93 85       	ldd	r25, Z+11	; 0x0b
    1b5a:	93 fd       	sbrc	r25, 3
    1b5c:	13 c0       	rjmp	.+38     	; 0x1b84 <follow_path+0x258>
    1b5e:	54 96       	adiw	r26, 0x14	; 20
    1b60:	6d 91       	ld	r22, X+
    1b62:	7c 91       	ld	r23, X
    1b64:	55 97       	sbiw	r26, 0x15	; 21
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    1b66:	9a 01       	movw	r18, r20
    1b68:	25 5f       	subi	r18, 0xF5	; 245
    1b6a:	3f 4f       	sbci	r19, 0xFF	; 255
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    1b6c:	db 01       	movw	r26, r22
    1b6e:	3a 01       	movw	r6, r20
    1b70:	48 2f       	mov	r20, r24
    1b72:	04 c0       	rjmp	.+8      	; 0x1b7c <follow_path+0x250>
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1b74:	e2 17       	cp	r30, r18
    1b76:	f3 07       	cpc	r31, r19
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <follow_path+0x250>
    1b7a:	75 c0       	rjmp	.+234    	; 0x1c66 <follow_path+0x33a>
    1b7c:	91 91       	ld	r25, Z+
    1b7e:	8d 91       	ld	r24, X+
    1b80:	98 17       	cp	r25, r24
    1b82:	c1 f3       	breq	.-16     	; 0x1b74 <follow_path+0x248>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    1b84:	c8 01       	movw	r24, r16
    1b86:	b6 01       	movw	r22, r12
    1b88:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <dir_next>
	} while (res == FR_OK);
    1b8c:	88 23       	and	r24, r24
    1b8e:	79 f2       	breq	.-98     	; 0x1b2e <follow_path+0x202>
    1b90:	48 2f       	mov	r20, r24
    1b92:	03 c0       	rjmp	.+6      	; 0x1b9a <follow_path+0x26e>
    1b94:	48 2f       	mov	r20, r24
    1b96:	01 c0       	rjmp	.+2      	; 0x1b9a <follow_path+0x26e>
    1b98:	48 2f       	mov	r20, r24
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    1b9a:	d8 01       	movw	r26, r16
    1b9c:	54 96       	adiw	r26, 0x14	; 20
    1b9e:	ed 91       	ld	r30, X+
    1ba0:	fc 91       	ld	r31, X
    1ba2:	55 97       	sbiw	r26, 0x15	; 21
    1ba4:	83 85       	ldd	r24, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    1ba6:	44 30       	cpi	r20, 0x04	; 4
    1ba8:	e9 f5       	brne	.+122    	; 0x1c24 <follow_path+0x2f8>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    1baa:	82 ff       	sbrs	r24, 2
    1bac:	38 c0       	rjmp	.+112    	; 0x1c1e <follow_path+0x2f2>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
    1bae:	44 e0       	ldi	r20, 0x04	; 4
    1bb0:	39 c0       	rjmp	.+114    	; 0x1c24 <follow_path+0x2f8>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    1bb2:	f3 01       	movw	r30, r6
    1bb4:	83 85       	ldd	r24, Z+11	; 0x0b
    1bb6:	84 ff       	sbrs	r24, 4
    1bb8:	34 c0       	rjmp	.+104    	; 0x1c22 <follow_path+0x2f6>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
    1bba:	f5 89       	ldd	r31, Z+21	; 0x15
    1bbc:	fa 83       	std	Y+2, r31	; 0x02
    1bbe:	19 82       	std	Y+1, r1	; 0x01
    1bc0:	d3 01       	movw	r26, r6
    1bc2:	54 96       	adiw	r26, 0x14	; 20
    1bc4:	8c 91       	ld	r24, X
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bca:	fa 81       	ldd	r31, Y+2	; 0x02
    1bcc:	8e 2b       	or	r24, r30
    1bce:	9f 2b       	or	r25, r31
    1bd0:	a0 e0       	ldi	r26, 0x00	; 0
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	bc 01       	movw	r22, r24
    1bd6:	55 27       	eor	r21, r21
    1bd8:	44 27       	eor	r20, r20
    1bda:	d3 01       	movw	r26, r6
    1bdc:	5b 96       	adiw	r26, 0x1b	; 27
    1bde:	5c 90       	ld	r5, X
    1be0:	5b 97       	sbiw	r26, 0x1b	; 27
    1be2:	44 24       	eor	r4, r4
    1be4:	5a 96       	adiw	r26, 0x1a	; 26
    1be6:	8c 91       	ld	r24, X
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	84 29       	or	r24, r4
    1bec:	95 29       	or	r25, r5
    1bee:	a0 e0       	ldi	r26, 0x00	; 0
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	84 2b       	or	r24, r20
    1bf4:	95 2b       	or	r25, r21
    1bf6:	a6 2b       	or	r26, r22
    1bf8:	b7 2b       	or	r27, r23
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	86 83       	std	Z+6, r24	; 0x06
    1bfe:	97 83       	std	Z+7, r25	; 0x07
    1c00:	a0 87       	std	Z+8, r26	; 0x08
    1c02:	b1 87       	std	Z+9, r27	; 0x09
		}
    1c04:	d8 ce       	rjmp	.-592    	; 0x19b6 <follow_path+0x8a>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1c06:	46 e0       	ldi	r20, 0x06	; 6
    1c08:	0d c0       	rjmp	.+26     	; 0x1c24 <follow_path+0x2f8>
    1c0a:	46 e0       	ldi	r20, 0x06	; 6
    1c0c:	0b c0       	rjmp	.+22     	; 0x1c24 <follow_path+0x2f8>
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    1c0e:	46 e0       	ldi	r20, 0x06	; 6
    1c10:	09 c0       	rjmp	.+18     	; 0x1c24 <follow_path+0x2f8>
    1c12:	46 e0       	ldi	r20, 0x06	; 6
    1c14:	07 c0       	rjmp	.+14     	; 0x1c24 <follow_path+0x2f8>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    1c16:	46 e0       	ldi	r20, 0x06	; 6
    1c18:	05 c0       	rjmp	.+10     	; 0x1c24 <follow_path+0x2f8>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    1c1a:	46 e0       	ldi	r20, 0x06	; 6
    1c1c:	03 c0       	rjmp	.+6      	; 0x1c24 <follow_path+0x2f8>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    1c1e:	45 e0       	ldi	r20, 0x05	; 5
    1c20:	01 c0       	rjmp	.+2      	; 0x1c24 <follow_path+0x2f8>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    1c22:	45 e0       	ldi	r20, 0x05	; 5
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
    1c24:	84 2f       	mov	r24, r20
    1c26:	26 96       	adiw	r28, 0x06	; 6
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	ff 90       	pop	r15
    1c3c:	ef 90       	pop	r14
    1c3e:	df 90       	pop	r13
    1c40:	cf 90       	pop	r12
    1c42:	bf 90       	pop	r11
    1c44:	af 90       	pop	r10
    1c46:	9f 90       	pop	r9
    1c48:	8f 90       	pop	r8
    1c4a:	7f 90       	pop	r7
    1c4c:	6f 90       	pop	r6
    1c4e:	5f 90       	pop	r5
    1c50:	4f 90       	pop	r4
    1c52:	3f 90       	pop	r3
    1c54:	2f 90       	pop	r2
    1c56:	08 95       	ret
    1c58:	2d 81       	ldd	r18, Y+5	; 0x05
    1c5a:	3e 81       	ldd	r19, Y+6	; 0x06
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    1c5c:	e2 0e       	add	r14, r18
    1c5e:	f3 1e       	adc	r15, r19
    1c60:	9a 2d       	mov	r25, r10
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1c62:	48 2d       	mov	r20, r8
    1c64:	3c cf       	rjmp	.-392    	; 0x1ade <follow_path+0x1b2>
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    1c66:	db 01       	movw	r26, r22
    1c68:	1b 96       	adiw	r26, 0x0b	; 11
    1c6a:	9c 91       	ld	r25, X
    1c6c:	1b 97       	sbiw	r26, 0x0b	; 11
    1c6e:	92 ff       	sbrs	r25, 2
    1c70:	a0 cf       	rjmp	.-192    	; 0x1bb2 <follow_path+0x286>
    1c72:	d8 cf       	rjmp	.-80     	; 0x1c24 <follow_path+0x2f8>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    1c74:	d8 01       	movw	r26, r16
    1c76:	54 96       	adiw	r26, 0x14	; 20
    1c78:	ed 91       	ld	r30, X+
    1c7a:	fc 91       	ld	r31, X
    1c7c:	55 97       	sbiw	r26, 0x15	; 21
    1c7e:	83 85       	ldd	r24, Z+11	; 0x0b
    1c80:	94 cf       	rjmp	.-216    	; 0x1baa <follow_path+0x27e>

00001c82 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIRS *dj				/* Target directory with object name to be created */
)
{
    1c82:	ef 92       	push	r14
    1c84:	ff 92       	push	r15
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	8c 01       	movw	r16, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	70 e0       	ldi	r23, 0x00	; 0
    1c92:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <dir_sdi>
    1c96:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
    1c98:	88 23       	and	r24, r24
    1c9a:	d9 f5       	brne	.+118    	; 0x1d12 <dir_register+0x90>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    1c9c:	d8 01       	movw	r26, r16
    1c9e:	1e 96       	adiw	r26, 0x0e	; 14
    1ca0:	4d 91       	ld	r20, X+
    1ca2:	5d 91       	ld	r21, X+
    1ca4:	6d 91       	ld	r22, X+
    1ca6:	7c 91       	ld	r23, X
    1ca8:	51 97       	sbiw	r26, 0x11	; 17
    1caa:	8d 91       	ld	r24, X+
    1cac:	9c 91       	ld	r25, X
    1cae:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
    1cb2:	c8 2f       	mov	r28, r24
			if (res != FR_OK) break;
    1cb4:	88 23       	and	r24, r24
    1cb6:	69 f5       	brne	.+90     	; 0x1d12 <dir_register+0x90>
			c = *dj->dir;
    1cb8:	d8 01       	movw	r26, r16
    1cba:	52 96       	adiw	r26, 0x12	; 18
    1cbc:	ed 91       	ld	r30, X+
    1cbe:	fc 91       	ld	r31, X
    1cc0:	53 97       	sbiw	r26, 0x13	; 19
    1cc2:	80 81       	ld	r24, Z
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    1cc4:	85 3e       	cpi	r24, 0xE5	; 229
    1cc6:	61 f1       	breq	.+88     	; 0x1d20 <dir_register+0x9e>
    1cc8:	88 23       	and	r24, r24
    1cca:	51 f1       	breq	.+84     	; 0x1d20 <dir_register+0x9e>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    1ccc:	c8 01       	movw	r24, r16
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <dir_next>
    1cd6:	c8 2f       	mov	r28, r24
		} while (res == FR_OK);
    1cd8:	88 23       	and	r24, r24
    1cda:	01 f3       	breq	.-64     	; 0x1c9c <dir_register+0x1a>
    1cdc:	1a c0       	rjmp	.+52     	; 0x1d12 <dir_register+0x90>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    1cde:	f8 01       	movw	r30, r16
    1ce0:	e2 88       	ldd	r14, Z+18	; 0x12
    1ce2:	f3 88       	ldd	r15, Z+19	; 0x13
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    1ce4:	c7 01       	movw	r24, r14
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	70 e0       	ldi	r23, 0x00	; 0
    1cea:	40 e2       	ldi	r20, 0x20	; 32
    1cec:	50 e0       	ldi	r21, 0x00	; 0
    1cee:	0e 94 74 00 	call	0xe8	; 0xe8 <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    1cf2:	d8 01       	movw	r26, r16
    1cf4:	54 96       	adiw	r26, 0x14	; 20
    1cf6:	6d 91       	ld	r22, X+
    1cf8:	7c 91       	ld	r23, X
    1cfa:	55 97       	sbiw	r26, 0x15	; 21
    1cfc:	c7 01       	movw	r24, r14
    1cfe:	4b e0       	ldi	r20, 0x0B	; 11
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	0e 94 67 00 	call	0xce	; 0xce <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    1d06:	d8 01       	movw	r26, r16
    1d08:	ed 91       	ld	r30, X+
    1d0a:	fc 91       	ld	r31, X
    1d0c:	11 97       	sbiw	r26, 0x01	; 1
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    1d12:	8c 2f       	mov	r24, r28
    1d14:	cf 91       	pop	r28
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	ff 90       	pop	r15
    1d1c:	ef 90       	pop	r14
    1d1e:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    1d20:	f8 01       	movw	r30, r16
    1d22:	46 85       	ldd	r20, Z+14	; 0x0e
    1d24:	57 85       	ldd	r21, Z+15	; 0x0f
    1d26:	60 89       	ldd	r22, Z+16	; 0x10
    1d28:	71 89       	ldd	r23, Z+17	; 0x11
    1d2a:	80 81       	ld	r24, Z
    1d2c:	91 81       	ldd	r25, Z+1	; 0x01
    1d2e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
    1d32:	c8 2f       	mov	r28, r24
		if (res == FR_OK) {
    1d34:	88 23       	and	r24, r24
    1d36:	69 f7       	brne	.-38     	; 0x1d12 <dir_register+0x90>
    1d38:	d2 cf       	rjmp	.-92     	; 0x1cde <dir_register+0x5c>

00001d3a <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIRS *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	ec 01       	movw	r28, r24
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
    1d40:	84 e0       	ldi	r24, 0x04	; 4
	while (dj->sect) {
    1d42:	19 c0       	rjmp	.+50     	; 0x1d76 <dir_read+0x3c>
		res = move_window(dj->fs, dj->sect);
    1d44:	88 81       	ld	r24, Y
    1d46:	99 81       	ldd	r25, Y+1	; 0x01
    1d48:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
		if (res != FR_OK) break;
    1d4c:	88 23       	and	r24, r24
    1d4e:	f1 f4       	brne	.+60     	; 0x1d8c <dir_read+0x52>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    1d50:	ea 89       	ldd	r30, Y+18	; 0x12
    1d52:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    1d54:	90 81       	ld	r25, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1d56:	99 23       	and	r25, r25
    1d58:	01 f1       	breq	.+64     	; 0x1d9a <dir_read+0x60>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    1d5a:	95 3e       	cpi	r25, 0xE5	; 229
    1d5c:	29 f0       	breq	.+10     	; 0x1d68 <dir_read+0x2e>
    1d5e:	9e 32       	cpi	r25, 0x2E	; 46
    1d60:	19 f0       	breq	.+6      	; 0x1d68 <dir_read+0x2e>
    1d62:	93 85       	ldd	r25, Z+11	; 0x0b
    1d64:	93 ff       	sbrs	r25, 3
    1d66:	16 c0       	rjmp	.+44     	; 0x1d94 <dir_read+0x5a>
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    1d68:	ce 01       	movw	r24, r28
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <dir_next>
		if (res != FR_OK) break;
    1d72:	88 23       	and	r24, r24
    1d74:	59 f4       	brne	.+22     	; 0x1d8c <dir_read+0x52>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    1d76:	4e 85       	ldd	r20, Y+14	; 0x0e
    1d78:	5f 85       	ldd	r21, Y+15	; 0x0f
    1d7a:	68 89       	ldd	r22, Y+16	; 0x10
    1d7c:	79 89       	ldd	r23, Y+17	; 0x11
    1d7e:	41 15       	cp	r20, r1
    1d80:	51 05       	cpc	r21, r1
    1d82:	61 05       	cpc	r22, r1
    1d84:	71 05       	cpc	r23, r1
    1d86:	f1 f6       	brne	.-68     	; 0x1d44 <dir_read+0xa>
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    1d88:	88 23       	and	r24, r24
    1d8a:	21 f0       	breq	.+8      	; 0x1d94 <dir_read+0x5a>
    1d8c:	1e 86       	std	Y+14, r1	; 0x0e
    1d8e:	1f 86       	std	Y+15, r1	; 0x0f
    1d90:	18 8a       	std	Y+16, r1	; 0x10
    1d92:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	08 95       	ret
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1d9a:	84 e0       	ldi	r24, 0x04	; 4
    1d9c:	f7 cf       	rjmp	.-18     	; 0x1d8c <dir_read+0x52>

00001d9e <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    1d9e:	7f 92       	push	r7
    1da0:	8f 92       	push	r8
    1da2:	9f 92       	push	r9
    1da4:	af 92       	push	r10
    1da6:	bf 92       	push	r11
    1da8:	cf 92       	push	r12
    1daa:	df 92       	push	r13
    1dac:	ef 92       	push	r14
    1dae:	ff 92       	push	r15
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	ec 01       	movw	r28, r24
    1dba:	4a 01       	movw	r8, r20
    1dbc:	5b 01       	movw	r10, r22
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1dbe:	42 30       	cpi	r20, 0x02	; 2
    1dc0:	51 05       	cpc	r21, r1
    1dc2:	61 05       	cpc	r22, r1
    1dc4:	71 05       	cpc	r23, r1
    1dc6:	08 f4       	brcc	.+2      	; 0x1dca <remove_chain+0x2c>
    1dc8:	55 c0       	rjmp	.+170    	; 0x1e74 <remove_chain+0xd6>
    1dca:	8e 89       	ldd	r24, Y+22	; 0x16
    1dcc:	9f 89       	ldd	r25, Y+23	; 0x17
    1dce:	a8 8d       	ldd	r26, Y+24	; 0x18
    1dd0:	b9 8d       	ldd	r27, Y+25	; 0x19
    1dd2:	48 17       	cp	r20, r24
    1dd4:	59 07       	cpc	r21, r25
    1dd6:	6a 07       	cpc	r22, r26
    1dd8:	7b 07       	cpc	r23, r27
    1dda:	08 f0       	brcs	.+2      	; 0x1dde <remove_chain+0x40>
    1ddc:	4d c0       	rjmp	.+154    	; 0x1e78 <remove_chain+0xda>
    1dde:	03 c0       	rjmp	.+6      	; 0x1de6 <remove_chain+0x48>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    1de0:	46 01       	movw	r8, r12
    1de2:	57 01       	movw	r10, r14
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <remove_chain+0x4c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
				fs->fsi_flag = 1;
    1de6:	77 24       	eor	r7, r7
    1de8:	73 94       	inc	r7
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1dea:	ce 01       	movw	r24, r28
    1dec:	b5 01       	movw	r22, r10
    1dee:	a4 01       	movw	r20, r8
    1df0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <get_fat>
    1df4:	6b 01       	movw	r12, r22
    1df6:	7c 01       	movw	r14, r24
			if (nxt == 0) break;				/* Empty cluster? */
    1df8:	61 15       	cp	r22, r1
    1dfa:	71 05       	cpc	r23, r1
    1dfc:	81 05       	cpc	r24, r1
    1dfe:	91 05       	cpc	r25, r1
    1e00:	e9 f1       	breq	.+122    	; 0x1e7c <remove_chain+0xde>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1e02:	91 e0       	ldi	r25, 0x01	; 1
    1e04:	c9 16       	cp	r12, r25
    1e06:	d1 04       	cpc	r13, r1
    1e08:	e1 04       	cpc	r14, r1
    1e0a:	f1 04       	cpc	r15, r1
    1e0c:	c9 f1       	breq	.+114    	; 0x1e80 <remove_chain+0xe2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1e0e:	8f ef       	ldi	r24, 0xFF	; 255
    1e10:	c8 16       	cp	r12, r24
    1e12:	8f ef       	ldi	r24, 0xFF	; 255
    1e14:	d8 06       	cpc	r13, r24
    1e16:	8f ef       	ldi	r24, 0xFF	; 255
    1e18:	e8 06       	cpc	r14, r24
    1e1a:	8f ef       	ldi	r24, 0xFF	; 255
    1e1c:	f8 06       	cpc	r15, r24
    1e1e:	91 f1       	breq	.+100    	; 0x1e84 <remove_chain+0xe6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1e20:	ce 01       	movw	r24, r28
    1e22:	b5 01       	movw	r22, r10
    1e24:	a4 01       	movw	r20, r8
    1e26:	00 e0       	ldi	r16, 0x00	; 0
    1e28:	10 e0       	ldi	r17, 0x00	; 0
    1e2a:	98 01       	movw	r18, r16
    1e2c:	0e 94 3e 09 	call	0x127c	; 0x127c <put_fat>
			if (res != FR_OK) break;
    1e30:	88 23       	and	r24, r24
    1e32:	49 f5       	brne	.+82     	; 0x1e86 <remove_chain+0xe8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    1e34:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e36:	5f 85       	ldd	r21, Y+15	; 0x0f
    1e38:	68 89       	ldd	r22, Y+16	; 0x10
    1e3a:	79 89       	ldd	r23, Y+17	; 0x11
    1e3c:	4f 3f       	cpi	r20, 0xFF	; 255
    1e3e:	9f ef       	ldi	r25, 0xFF	; 255
    1e40:	59 07       	cpc	r21, r25
    1e42:	9f ef       	ldi	r25, 0xFF	; 255
    1e44:	69 07       	cpc	r22, r25
    1e46:	9f ef       	ldi	r25, 0xFF	; 255
    1e48:	79 07       	cpc	r23, r25
    1e4a:	49 f0       	breq	.+18     	; 0x1e5e <remove_chain+0xc0>
				fs->free_clust++;
    1e4c:	4f 5f       	subi	r20, 0xFF	; 255
    1e4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e50:	6f 4f       	sbci	r22, 0xFF	; 255
    1e52:	7f 4f       	sbci	r23, 0xFF	; 255
    1e54:	4e 87       	std	Y+14, r20	; 0x0e
    1e56:	5f 87       	std	Y+15, r21	; 0x0f
    1e58:	68 8b       	std	Y+16, r22	; 0x10
    1e5a:	79 8b       	std	Y+17, r23	; 0x11
				fs->fsi_flag = 1;
    1e5c:	7d 82       	std	Y+5, r7	; 0x05
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    1e5e:	4e 89       	ldd	r20, Y+22	; 0x16
    1e60:	5f 89       	ldd	r21, Y+23	; 0x17
    1e62:	68 8d       	ldd	r22, Y+24	; 0x18
    1e64:	79 8d       	ldd	r23, Y+25	; 0x19
    1e66:	c4 16       	cp	r12, r20
    1e68:	d5 06       	cpc	r13, r21
    1e6a:	e6 06       	cpc	r14, r22
    1e6c:	f7 06       	cpc	r15, r23
    1e6e:	08 f4       	brcc	.+2      	; 0x1e72 <remove_chain+0xd4>
    1e70:	b7 cf       	rjmp	.-146    	; 0x1de0 <remove_chain+0x42>
    1e72:	09 c0       	rjmp	.+18     	; 0x1e86 <remove_chain+0xe8>
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1e74:	82 e0       	ldi	r24, 0x02	; 2
    1e76:	07 c0       	rjmp	.+14     	; 0x1e86 <remove_chain+0xe8>
    1e78:	82 e0       	ldi	r24, 0x02	; 2
    1e7a:	05 c0       	rjmp	.+10     	; 0x1e86 <remove_chain+0xe8>

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	03 c0       	rjmp	.+6      	; 0x1e86 <remove_chain+0xe8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1e80:	82 e0       	ldi	r24, 0x02	; 2
    1e82:	01 c0       	rjmp	.+2      	; 0x1e86 <remove_chain+0xe8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1e84:	81 e0       	ldi	r24, 0x01	; 1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	1f 91       	pop	r17
    1e8c:	0f 91       	pop	r16
    1e8e:	ff 90       	pop	r15
    1e90:	ef 90       	pop	r14
    1e92:	df 90       	pop	r13
    1e94:	cf 90       	pop	r12
    1e96:	bf 90       	pop	r11
    1e98:	af 90       	pop	r10
    1e9a:	9f 90       	pop	r9
    1e9c:	8f 90       	pop	r8
    1e9e:	7f 90       	pop	r7
    1ea0:	08 95       	ret

00001ea2 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
    1ea2:	88 23       	and	r24, r24
    1ea4:	91 f4       	brne	.+36     	; 0x1eca <f_mount+0x28>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    1ea6:	e0 91 1e 01 	lds	r30, 0x011E
    1eaa:	f0 91 1f 01 	lds	r31, 0x011F

	if (rfs) {
    1eae:	30 97       	sbiw	r30, 0x00	; 0
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <f_mount+0x12>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    1eb2:	10 82       	st	Z, r1
	}

	if (fs) {
    1eb4:	61 15       	cp	r22, r1
    1eb6:	71 05       	cpc	r23, r1
    1eb8:	11 f0       	breq	.+4      	; 0x1ebe <f_mount+0x1c>
		fs->fs_type = 0;			/* Clear new fs object */
    1eba:	fb 01       	movw	r30, r22
    1ebc:	10 82       	st	Z, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    1ebe:	70 93 1f 01 	sts	0x011F, r23
    1ec2:	60 93 1e 01 	sts	0x011E, r22

	return FR_OK;
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	08 95       	ret
{
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    1eca:	8b e0       	ldi	r24, 0x0B	; 11
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */

	return FR_OK;
}
    1ecc:	08 95       	ret

00001ece <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1ece:	4f 92       	push	r4
    1ed0:	5f 92       	push	r5
    1ed2:	6f 92       	push	r6
    1ed4:	7f 92       	push	r7
    1ed6:	8f 92       	push	r8
    1ed8:	9f 92       	push	r9
    1eda:	af 92       	push	r10
    1edc:	bf 92       	push	r11
    1ede:	cf 92       	push	r12
    1ee0:	df 92       	push	r13
    1ee2:	ef 92       	push	r14
    1ee4:	ff 92       	push	r15
    1ee6:	1f 93       	push	r17
    1ee8:	cf 93       	push	r28
    1eea:	df 93       	push	r29
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	a4 97       	sbiw	r28, 0x24	; 36
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	6c 01       	movw	r12, r24
    1efe:	7c a3       	lds	r23, 0x5c
    1f00:	6b a3       	lds	r22, 0x5b
	DIRS dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    1f02:	dc 01       	movw	r26, r24
    1f04:	1d 92       	st	X+, r1
    1f06:	1c 92       	st	X, r1

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    1f08:	14 2f       	mov	r17, r20
    1f0a:	1f 71       	andi	r17, 0x1F	; 31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    1f0c:	4e 71       	andi	r20, 0x1E	; 30
    1f0e:	ce 01       	movw	r24, r28
    1f10:	83 96       	adiw	r24, 0x23	; 35
    1f12:	be 01       	movw	r22, r28
    1f14:	6f 5f       	subi	r22, 0xFF	; 255
    1f16:	7f 4f       	sbci	r23, 0xFF	; 255
    1f18:	0e 94 c9 01 	call	0x392	; 0x392 <chk_mounted>
    1f1c:	28 2f       	mov	r18, r24
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    1f1e:	ce 01       	movw	r24, r28
    1f20:	47 96       	adiw	r24, 0x17	; 23
    1f22:	9e 8b       	std	Y+22, r25	; 0x16
    1f24:	8d 8b       	std	Y+21, r24	; 0x15
	if (res == FR_OK)
    1f26:	22 23       	and	r18, r18
    1f28:	09 f0       	breq	.+2      	; 0x1f2c <f_open+0x5e>
    1f2a:	40 c1       	rjmp	.+640    	; 0x21ac <f_open+0x2de>
		res = follow_path(&dj, path);	/* Follow the file path */
    1f2c:	6b a1       	lds	r22, 0x4b
    1f2e:	7c a1       	lds	r23, 0x4c
    1f30:	ce 01       	movw	r24, r28
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	0e 94 96 0c 	call	0x192c	; 0x192c <follow_path>
    1f38:	28 2f       	mov	r18, r24
	dir = dj.dir;
    1f3a:	eb 88       	ldd	r14, Y+19	; 0x13
    1f3c:	fc 88       	ldd	r15, Y+20	; 0x14

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    1f3e:	88 23       	and	r24, r24
    1f40:	21 f4       	brne	.+8      	; 0x1f4a <f_open+0x7c>
		if (!dir)	/* Current dir itself */
    1f42:	e1 14       	cp	r14, r1
    1f44:	f1 04       	cpc	r15, r1
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <f_open+0x7c>
			res = FR_INVALID_NAME;
    1f48:	26 e0       	ldi	r18, 0x06	; 6
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1f4a:	41 2f       	mov	r20, r17
    1f4c:	50 e0       	ldi	r21, 0x00	; 0
    1f4e:	ca 01       	movw	r24, r20
    1f50:	8c 71       	andi	r24, 0x1C	; 28
    1f52:	90 70       	andi	r25, 0x00	; 0
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <f_open+0x8c>
    1f58:	82 c0       	rjmp	.+260    	; 0x205e <f_open+0x190>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    1f5a:	22 23       	and	r18, r18
    1f5c:	79 f0       	breq	.+30     	; 0x1f7c <f_open+0xae>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    1f5e:	24 30       	cpi	r18, 0x04	; 4
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <f_open+0x96>
    1f62:	0d c1       	rjmp	.+538    	; 0x217e <f_open+0x2b0>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    1f64:	ce 01       	movw	r24, r28
    1f66:	01 96       	adiw	r24, 0x01	; 1
    1f68:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <dir_register>
    1f6c:	28 2f       	mov	r18, r24
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
    1f6e:	eb 88       	ldd	r14, Y+19	; 0x13
    1f70:	fc 88       	ldd	r15, Y+20	; 0x14
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    1f72:	88 23       	and	r24, r24
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <f_open+0xaa>
    1f76:	03 c1       	rjmp	.+518    	; 0x217e <f_open+0x2b0>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    1f78:	18 60       	ori	r17, 0x08	; 8
    1f7a:	07 c0       	rjmp	.+14     	; 0x1f8a <f_open+0xbc>
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIRS) */
    1f7c:	f7 01       	movw	r30, r14
    1f7e:	83 85       	ldd	r24, Z+11	; 0x0b
    1f80:	81 71       	andi	r24, 0x11	; 17
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <f_open+0xb8>
    1f84:	16 c1       	rjmp	.+556    	; 0x21b2 <f_open+0x2e4>
				res = FR_DENIED;
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    1f86:	12 fd       	sbrc	r17, 2
    1f88:	16 c1       	rjmp	.+556    	; 0x21b6 <f_open+0x2e8>
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    1f8a:	13 ff       	sbrs	r17, 3
    1f8c:	1a c1       	rjmp	.+564    	; 0x21c2 <f_open+0x2f4>
			dw = get_fattime();					/* Created time */
    1f8e:	0e 94 14 07 	call	0xe28	; 0xe28 <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, dw);
    1f92:	d7 01       	movw	r26, r14
    1f94:	1e 96       	adiw	r26, 0x0e	; 14
    1f96:	6c 93       	st	X, r22
    1f98:	1e 97       	sbiw	r26, 0x0e	; 14
    1f9a:	1f 96       	adiw	r26, 0x0f	; 15
    1f9c:	7c 93       	st	X, r23
    1f9e:	1f 97       	sbiw	r26, 0x0f	; 15
    1fa0:	50 96       	adiw	r26, 0x10	; 16
    1fa2:	8c 93       	st	X, r24
    1fa4:	50 97       	sbiw	r26, 0x10	; 16
    1fa6:	51 96       	adiw	r26, 0x11	; 17
    1fa8:	9c 93       	st	X, r25
    1faa:	51 97       	sbiw	r26, 0x11	; 17
			dir[DIR_Attr] = 0;					/* Reset attribute */
    1fac:	1b 96       	adiw	r26, 0x0b	; 11
    1fae:	1c 92       	st	X, r1
    1fb0:	1b 97       	sbiw	r26, 0x0b	; 11
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    1fb2:	5c 96       	adiw	r26, 0x1c	; 28
    1fb4:	1c 92       	st	X, r1
    1fb6:	5c 97       	sbiw	r26, 0x1c	; 28
    1fb8:	5d 96       	adiw	r26, 0x1d	; 29
    1fba:	1c 92       	st	X, r1
    1fbc:	5d 97       	sbiw	r26, 0x1d	; 29
    1fbe:	5e 96       	adiw	r26, 0x1e	; 30
    1fc0:	1c 92       	st	X, r1
    1fc2:	5e 97       	sbiw	r26, 0x1e	; 30
    1fc4:	5f 96       	adiw	r26, 0x1f	; 31
    1fc6:	1c 92       	st	X, r1
    1fc8:	5f 97       	sbiw	r26, 0x1f	; 31
			cl = LD_CLUST(dir);					/* Get start cluster */
    1fca:	55 96       	adiw	r26, 0x15	; 21
    1fcc:	3c 91       	ld	r19, X
    1fce:	55 97       	sbiw	r26, 0x15	; 21
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	54 96       	adiw	r26, 0x14	; 20
    1fd4:	8c 91       	ld	r24, X
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	82 2b       	or	r24, r18
    1fda:	93 2b       	or	r25, r19
    1fdc:	a0 e0       	ldi	r26, 0x00	; 0
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	5c 01       	movw	r10, r24
    1fe2:	99 24       	eor	r9, r9
    1fe4:	88 24       	eor	r8, r8
    1fe6:	f7 01       	movw	r30, r14
    1fe8:	33 8d       	ldd	r19, Z+27	; 0x1b
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	82 2b       	or	r24, r18
    1ff2:	93 2b       	or	r25, r19
    1ff4:	a0 e0       	ldi	r26, 0x00	; 0
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	88 2a       	or	r8, r24
    1ffa:	99 2a       	or	r9, r25
    1ffc:	aa 2a       	or	r10, r26
    1ffe:	bb 2a       	or	r11, r27
			ST_CLUST(dir, 0);					/* cluster = 0 */
    2000:	12 8e       	std	Z+26, r1	; 0x1a
    2002:	13 8e       	std	Z+27, r1	; 0x1b
    2004:	14 8a       	std	Z+20, r1	; 0x14
    2006:	15 8a       	std	Z+21, r1	; 0x15
			dj.fs->wflag = 1;
    2008:	e9 81       	ldd	r30, Y+1	; 0x01
    200a:	fa 81       	ldd	r31, Y+2	; 0x02
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	84 83       	std	Z+4, r24	; 0x04
			if (cl) {							/* Remove the cluster chain if exist */
    2010:	81 14       	cp	r8, r1
    2012:	91 04       	cpc	r9, r1
    2014:	a1 04       	cpc	r10, r1
    2016:	b1 04       	cpc	r11, r1
    2018:	09 f4       	brne	.+2      	; 0x201c <f_open+0x14e>
    201a:	d3 c0       	rjmp	.+422    	; 0x21c2 <f_open+0x2f4>
				dw = dj.fs->winsect;
    201c:	42 a4       	lds	r20, 0xa2
    201e:	53 a4       	lds	r21, 0xa3
    2020:	64 a4       	lds	r22, 0xa4
    2022:	75 a4       	lds	r23, 0xa5
				res = remove_chain(dj.fs, cl);
    2024:	cf 01       	movw	r24, r30
    2026:	b5 01       	movw	r22, r10
    2028:	a4 01       	movw	r20, r8
    202a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <remove_chain>
    202e:	28 2f       	mov	r18, r24
				if (res == FR_OK) {
    2030:	88 23       	and	r24, r24
    2032:	09 f0       	breq	.+2      	; 0x2036 <f_open+0x168>
    2034:	a4 c0       	rjmp	.+328    	; 0x217e <f_open+0x2b0>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2036:	e9 81       	ldd	r30, Y+1	; 0x01
    2038:	fa 81       	ldd	r31, Y+2	; 0x02
    203a:	d5 01       	movw	r26, r10
    203c:	c4 01       	movw	r24, r8
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	a1 09       	sbc	r26, r1
    2042:	b1 09       	sbc	r27, r1
    2044:	82 87       	std	Z+10, r24	; 0x0a
    2046:	93 87       	std	Z+11, r25	; 0x0b
    2048:	a4 87       	std	Z+12, r26	; 0x0c
    204a:	b5 87       	std	Z+13, r27	; 0x0d
					res = move_window(dj.fs, dw);
    204c:	cf 01       	movw	r24, r30
    204e:	b3 01       	movw	r22, r6
    2050:	a2 01       	movw	r20, r4
    2052:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
    2056:	28 2f       	mov	r18, r24
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
    2058:	88 23       	and	r24, r24
    205a:	81 f0       	breq	.+32     	; 0x207c <f_open+0x1ae>
    205c:	90 c0       	rjmp	.+288    	; 0x217e <f_open+0x2b0>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    205e:	22 23       	and	r18, r18
    2060:	09 f0       	breq	.+2      	; 0x2064 <f_open+0x196>
    2062:	8d c0       	rjmp	.+282    	; 0x217e <f_open+0x2b0>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    2064:	d7 01       	movw	r26, r14
    2066:	1b 96       	adiw	r26, 0x0b	; 11
    2068:	8c 91       	ld	r24, X
    206a:	1b 97       	sbiw	r26, 0x0b	; 11
    206c:	84 fd       	sbrc	r24, 4
    206e:	a5 c0       	rjmp	.+330    	; 0x21ba <f_open+0x2ec>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2070:	11 ff       	sbrs	r17, 1
    2072:	a7 c0       	rjmp	.+334    	; 0x21c2 <f_open+0x2f4>
    2074:	80 fd       	sbrc	r24, 0
    2076:	a3 c0       	rjmp	.+326    	; 0x21be <f_open+0x2f0>
    2078:	a4 c0       	rjmp	.+328    	; 0x21c2 <f_open+0x2f4>
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    207a:	20 e0       	ldi	r18, 0x00	; 0
			mode |= FA__WRITTEN;
    207c:	10 62       	ori	r17, 0x20	; 32
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    207e:	e9 81       	ldd	r30, Y+1	; 0x01
    2080:	fa 81       	ldd	r31, Y+2	; 0x02
    2082:	42 a5       	lds	r20, 0x62
    2084:	53 a5       	lds	r21, 0x63
    2086:	64 a5       	lds	r22, 0x64
    2088:	75 a5       	lds	r23, 0x65
    208a:	d6 01       	movw	r26, r12
    208c:	5a 96       	adiw	r26, 0x1a	; 26
    208e:	4d 93       	st	X+, r20
    2090:	5d 93       	st	X+, r21
    2092:	6d 93       	st	X+, r22
    2094:	7c 93       	st	X, r23
    2096:	5d 97       	sbiw	r26, 0x1d	; 29
		fp->dir_ptr = dir;
    2098:	5f 96       	adiw	r26, 0x1f	; 31
    209a:	fc 92       	st	X, r15
    209c:	ee 92       	st	-X, r14
    209e:	5e 97       	sbiw	r26, 0x1e	; 30
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    20a0:	14 96       	adiw	r26, 0x04	; 4
    20a2:	1c 93       	st	X, r17
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    20a4:	d7 01       	movw	r26, r14
    20a6:	55 96       	adiw	r26, 0x15	; 21
    20a8:	5c 91       	ld	r21, X
    20aa:	55 97       	sbiw	r26, 0x15	; 21
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	54 96       	adiw	r26, 0x14	; 20
    20b0:	8c 91       	ld	r24, X
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	84 2b       	or	r24, r20
    20b6:	95 2b       	or	r25, r21
    20b8:	a0 e0       	ldi	r26, 0x00	; 0
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	5c 01       	movw	r10, r24
    20be:	99 24       	eor	r9, r9
    20c0:	88 24       	eor	r8, r8
    20c2:	d7 01       	movw	r26, r14
    20c4:	5b 96       	adiw	r26, 0x1b	; 27
    20c6:	5c 91       	ld	r21, X
    20c8:	5b 97       	sbiw	r26, 0x1b	; 27
    20ca:	40 e0       	ldi	r20, 0x00	; 0
    20cc:	5a 96       	adiw	r26, 0x1a	; 26
    20ce:	8c 91       	ld	r24, X
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	84 2b       	or	r24, r20
    20d4:	95 2b       	or	r25, r21
    20d6:	a0 e0       	ldi	r26, 0x00	; 0
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	88 2a       	or	r8, r24
    20dc:	99 2a       	or	r9, r25
    20de:	aa 2a       	or	r10, r26
    20e0:	bb 2a       	or	r11, r27
    20e2:	d6 01       	movw	r26, r12
    20e4:	1e 96       	adiw	r26, 0x0e	; 14
    20e6:	8d 92       	st	X+, r8
    20e8:	9d 92       	st	X+, r9
    20ea:	ad 92       	st	X+, r10
    20ec:	bc 92       	st	X, r11
    20ee:	51 97       	sbiw	r26, 0x11	; 17
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    20f0:	d7 01       	movw	r26, r14
    20f2:	5f 96       	adiw	r26, 0x1f	; 31
    20f4:	8c 91       	ld	r24, X
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a0 e0       	ldi	r26, 0x00	; 0
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	b8 2e       	mov	r11, r24
    20fe:	aa 24       	eor	r10, r10
    2100:	99 24       	eor	r9, r9
    2102:	88 24       	eor	r8, r8
    2104:	d7 01       	movw	r26, r14
    2106:	5e 96       	adiw	r26, 0x1e	; 30
    2108:	4c 91       	ld	r20, X
    210a:	5e 97       	sbiw	r26, 0x1e	; 30
    210c:	50 e0       	ldi	r21, 0x00	; 0
    210e:	60 e0       	ldi	r22, 0x00	; 0
    2110:	70 e0       	ldi	r23, 0x00	; 0
    2112:	ba 01       	movw	r22, r20
    2114:	55 27       	eor	r21, r21
    2116:	44 27       	eor	r20, r20
    2118:	48 29       	or	r20, r8
    211a:	59 29       	or	r21, r9
    211c:	6a 29       	or	r22, r10
    211e:	7b 29       	or	r23, r11
    2120:	5c 96       	adiw	r26, 0x1c	; 28
    2122:	8c 91       	ld	r24, X
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a0 e0       	ldi	r26, 0x00	; 0
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	48 2b       	or	r20, r24
    212c:	59 2b       	or	r21, r25
    212e:	6a 2b       	or	r22, r26
    2130:	7b 2b       	or	r23, r27
    2132:	d7 01       	movw	r26, r14
    2134:	5d 96       	adiw	r26, 0x1d	; 29
    2136:	9c 91       	ld	r25, X
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	a0 e0       	ldi	r26, 0x00	; 0
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	48 2b       	or	r20, r24
    2140:	59 2b       	or	r21, r25
    2142:	6a 2b       	or	r22, r26
    2144:	7b 2b       	or	r23, r27
    2146:	d6 01       	movw	r26, r12
    2148:	1a 96       	adiw	r26, 0x0a	; 10
    214a:	4d 93       	st	X+, r20
    214c:	5d 93       	st	X+, r21
    214e:	6d 93       	st	X+, r22
    2150:	7c 93       	st	X, r23
    2152:	1d 97       	sbiw	r26, 0x0d	; 13
		fp->fptr = 0;						/* File pointer */
    2154:	16 96       	adiw	r26, 0x06	; 6
    2156:	1d 92       	st	X+, r1
    2158:	1d 92       	st	X+, r1
    215a:	1d 92       	st	X+, r1
    215c:	1c 92       	st	X, r1
    215e:	19 97       	sbiw	r26, 0x09	; 9
		fp->dsect = 0;
    2160:	56 96       	adiw	r26, 0x16	; 22
    2162:	1d 92       	st	X+, r1
    2164:	1d 92       	st	X+, r1
    2166:	1d 92       	st	X+, r1
    2168:	1c 92       	st	X, r1
    216a:	59 97       	sbiw	r26, 0x19	; 25
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    216c:	11 96       	adiw	r26, 0x01	; 1
    216e:	fc 93       	st	X, r31
    2170:	ee 93       	st	-X, r30
    2172:	86 81       	ldd	r24, Z+6	; 0x06
    2174:	97 81       	ldd	r25, Z+7	; 0x07
    2176:	13 96       	adiw	r26, 0x03	; 3
    2178:	9c 93       	st	X, r25
    217a:	8e 93       	st	-X, r24
    217c:	12 97       	sbiw	r26, 0x02	; 2
	}

	LEAVE_FF(dj.fs, res);
}
    217e:	82 2f       	mov	r24, r18
    2180:	a4 96       	adiw	r28, 0x24	; 36
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	ff 90       	pop	r15
    2194:	ef 90       	pop	r14
    2196:	df 90       	pop	r13
    2198:	cf 90       	pop	r12
    219a:	bf 90       	pop	r11
    219c:	af 90       	pop	r10
    219e:	9f 90       	pop	r9
    21a0:	8f 90       	pop	r8
    21a2:	7f 90       	pop	r7
    21a4:	6f 90       	pop	r6
    21a6:	5f 90       	pop	r5
    21a8:	4f 90       	pop	r4
    21aa:	08 95       	ret
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
	if (res == FR_OK)
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    21ac:	eb 88       	ldd	r14, Y+19	; 0x13
    21ae:	fc 88       	ldd	r15, Y+20	; 0x14
    21b0:	cc ce       	rjmp	.-616    	; 0x1f4a <f_open+0x7c>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIRS) */
				res = FR_DENIED;
    21b2:	27 e0       	ldi	r18, 0x07	; 7
    21b4:	e4 cf       	rjmp	.-56     	; 0x217e <f_open+0x2b0>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
    21b6:	28 e0       	ldi	r18, 0x08	; 8
    21b8:	e2 cf       	rjmp	.-60     	; 0x217e <f_open+0x2b0>
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
				res = FR_NO_FILE;
    21ba:	24 e0       	ldi	r18, 0x04	; 4
    21bc:	e0 cf       	rjmp	.-64     	; 0x217e <f_open+0x2b0>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
    21be:	27 e0       	ldi	r18, 0x07	; 7
    21c0:	de cf       	rjmp	.-68     	; 0x217e <f_open+0x2b0>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    21c2:	13 fd       	sbrc	r17, 3
    21c4:	5a cf       	rjmp	.-332    	; 0x207a <f_open+0x1ac>
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	5a cf       	rjmp	.-332    	; 0x207e <f_open+0x1b0>

000021ca <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    21ca:	2f 92       	push	r2
    21cc:	3f 92       	push	r3
    21ce:	4f 92       	push	r4
    21d0:	5f 92       	push	r5
    21d2:	6f 92       	push	r6
    21d4:	7f 92       	push	r7
    21d6:	8f 92       	push	r8
    21d8:	9f 92       	push	r9
    21da:	bf 92       	push	r11
    21dc:	cf 92       	push	r12
    21de:	df 92       	push	r13
    21e0:	ef 92       	push	r14
    21e2:	ff 92       	push	r15
    21e4:	0f 93       	push	r16
    21e6:	1f 93       	push	r17
    21e8:	cf 93       	push	r28
    21ea:	df 93       	push	r29
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <f_read+0x24>
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <f_read+0x26>
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
    21f4:	9c 83       	std	Y+4, r25	; 0x04
    21f6:	8b 83       	std	Y+3, r24	; 0x03
    21f8:	c6 2e       	mov	r12, r22
    21fa:	17 2f       	mov	r17, r23
    21fc:	4a 01       	movw	r8, r20
    21fe:	19 01       	movw	r2, r18
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    2200:	d9 01       	movw	r26, r18
    2202:	1d 92       	st	X+, r1
    2204:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);				/* Check validity */
    2206:	fc 01       	movw	r30, r24
    2208:	62 81       	ldd	r22, Z+2	; 0x02
    220a:	73 81       	ldd	r23, Z+3	; 0x03
    220c:	80 81       	ld	r24, Z
    220e:	91 81       	ldd	r25, Z+1	; 0x01
    2210:	0e 94 10 01 	call	0x220	; 0x220 <validate>
    2214:	b8 2e       	mov	r11, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2216:	88 23       	and	r24, r24
    2218:	09 f0       	breq	.+2      	; 0x221c <f_read+0x52>
    221a:	7c c1       	rjmp	.+760    	; 0x2514 <f_read+0x34a>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    221c:	ab 81       	ldd	r26, Y+3	; 0x03
    221e:	bc 81       	ldd	r27, Y+4	; 0x04
    2220:	14 96       	adiw	r26, 0x04	; 4
    2222:	8c 91       	ld	r24, X
    2224:	14 97       	sbiw	r26, 0x04	; 4
    2226:	88 23       	and	r24, r24
    2228:	0c f4       	brge	.+2      	; 0x222c <f_read+0x62>
    222a:	6c c1       	rjmp	.+728    	; 0x2504 <f_read+0x33a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    222c:	80 ff       	sbrs	r24, 0
    222e:	6e c1       	rjmp	.+732    	; 0x250c <f_read+0x342>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    2230:	1a 96       	adiw	r26, 0x0a	; 10
    2232:	8d 91       	ld	r24, X+
    2234:	9d 91       	ld	r25, X+
    2236:	0d 90       	ld	r0, X+
    2238:	bc 91       	ld	r27, X
    223a:	a0 2d       	mov	r26, r0
    223c:	eb 81       	ldd	r30, Y+3	; 0x03
    223e:	fc 81       	ldd	r31, Y+4	; 0x04
    2240:	46 81       	ldd	r20, Z+6	; 0x06
    2242:	57 81       	ldd	r21, Z+7	; 0x07
    2244:	60 85       	ldd	r22, Z+8	; 0x08
    2246:	71 85       	ldd	r23, Z+9	; 0x09
    2248:	84 1b       	sub	r24, r20
    224a:	95 0b       	sbc	r25, r21
    224c:	a6 0b       	sbc	r26, r22
    224e:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    2250:	a4 01       	movw	r20, r8
    2252:	60 e0       	ldi	r22, 0x00	; 0
    2254:	70 e0       	ldi	r23, 0x00	; 0
    2256:	84 17       	cp	r24, r20
    2258:	95 07       	cpc	r25, r21
    225a:	a6 07       	cpc	r26, r22
    225c:	b7 07       	cpc	r27, r23
    225e:	08 f4       	brcc	.+2      	; 0x2262 <f_read+0x98>
    2260:	4c 01       	movw	r8, r24

	for ( ;  btr;								/* Repeat until all data read */
    2262:	81 14       	cp	r8, r1
    2264:	91 04       	cpc	r9, r1
    2266:	09 f4       	brne	.+2      	; 0x226a <f_read+0xa0>
    2268:	55 c1       	rjmp	.+682    	; 0x2514 <f_read+0x34a>
    226a:	c9 82       	std	Y+1, r12	; 0x01
    226c:	1a 83       	std	Y+2, r17	; 0x02
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    226e:	ab 81       	ldd	r26, Y+3	; 0x03
    2270:	bc 81       	ldd	r27, Y+4	; 0x04
    2272:	16 96       	adiw	r26, 0x06	; 6
    2274:	4d 91       	ld	r20, X+
    2276:	5d 91       	ld	r21, X+
    2278:	6d 91       	ld	r22, X+
    227a:	7c 91       	ld	r23, X
    227c:	19 97       	sbiw	r26, 0x09	; 9
    227e:	db 01       	movw	r26, r22
    2280:	ca 01       	movw	r24, r20
    2282:	91 70       	andi	r25, 0x01	; 1
    2284:	a0 70       	andi	r26, 0x00	; 0
    2286:	b0 70       	andi	r27, 0x00	; 0
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	a1 05       	cpc	r26, r1
    228c:	b1 05       	cpc	r27, r1
    228e:	09 f0       	breq	.+2      	; 0x2292 <f_read+0xc8>
    2290:	db c0       	rjmp	.+438    	; 0x2448 <f_read+0x27e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2292:	ab 81       	ldd	r26, Y+3	; 0x03
    2294:	bc 81       	ldd	r27, Y+4	; 0x04
    2296:	ed 91       	ld	r30, X+
    2298:	fc 91       	ld	r31, X
    229a:	db 01       	movw	r26, r22
    229c:	ca 01       	movw	r24, r20
    229e:	07 2e       	mov	r0, r23
    22a0:	79 e0       	ldi	r23, 0x09	; 9
    22a2:	b6 95       	lsr	r27
    22a4:	a7 95       	ror	r26
    22a6:	97 95       	ror	r25
    22a8:	87 95       	ror	r24
    22aa:	7a 95       	dec	r23
    22ac:	d1 f7       	brne	.-12     	; 0x22a2 <f_read+0xd8>
    22ae:	70 2d       	mov	r23, r0
    22b0:	12 81       	ldd	r17, Z+2	; 0x02
    22b2:	11 50       	subi	r17, 0x01	; 1
    22b4:	18 23       	and	r17, r24
			if (!csect) {						/* On the cluster boundary? */
    22b6:	09 f0       	breq	.+2      	; 0x22ba <f_read+0xf0>
    22b8:	41 c0       	rjmp	.+130    	; 0x233c <f_read+0x172>
				if (fp->fptr == 0) {			/* On the top of the file? */
    22ba:	41 15       	cp	r20, r1
    22bc:	51 05       	cpc	r21, r1
    22be:	61 05       	cpc	r22, r1
    22c0:	71 05       	cpc	r23, r1
    22c2:	39 f4       	brne	.+14     	; 0x22d2 <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
    22c4:	eb 81       	ldd	r30, Y+3	; 0x03
    22c6:	fc 81       	ldd	r31, Y+4	; 0x04
    22c8:	86 85       	ldd	r24, Z+14	; 0x0e
    22ca:	97 85       	ldd	r25, Z+15	; 0x0f
    22cc:	a0 89       	ldd	r26, Z+16	; 0x10
    22ce:	b1 89       	ldd	r27, Z+17	; 0x11
    22d0:	0d c0       	rjmp	.+26     	; 0x22ec <f_read+0x122>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    22d2:	ab 81       	ldd	r26, Y+3	; 0x03
    22d4:	bc 81       	ldd	r27, Y+4	; 0x04
    22d6:	52 96       	adiw	r26, 0x12	; 18
    22d8:	4d 91       	ld	r20, X+
    22da:	5d 91       	ld	r21, X+
    22dc:	6d 91       	ld	r22, X+
    22de:	7c 91       	ld	r23, X
    22e0:	55 97       	sbiw	r26, 0x15	; 21
    22e2:	cf 01       	movw	r24, r30
    22e4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <get_fat>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    22ec:	82 30       	cpi	r24, 0x02	; 2
    22ee:	91 05       	cpc	r25, r1
    22f0:	a1 05       	cpc	r26, r1
    22f2:	b1 05       	cpc	r27, r1
    22f4:	48 f4       	brcc	.+18     	; 0x2308 <f_read+0x13e>
    22f6:	eb 81       	ldd	r30, Y+3	; 0x03
    22f8:	fc 81       	ldd	r31, Y+4	; 0x04
    22fa:	84 81       	ldd	r24, Z+4	; 0x04
    22fc:	80 68       	ori	r24, 0x80	; 128
    22fe:	84 83       	std	Z+4, r24	; 0x04
    2300:	bb 24       	eor	r11, r11
    2302:	68 94       	set
    2304:	b1 f8       	bld	r11, 1
    2306:	06 c1       	rjmp	.+524    	; 0x2514 <f_read+0x34a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2308:	8f 3f       	cpi	r24, 0xFF	; 255
    230a:	ff ef       	ldi	r31, 0xFF	; 255
    230c:	9f 07       	cpc	r25, r31
    230e:	ff ef       	ldi	r31, 0xFF	; 255
    2310:	af 07       	cpc	r26, r31
    2312:	ff ef       	ldi	r31, 0xFF	; 255
    2314:	bf 07       	cpc	r27, r31
    2316:	61 f4       	brne	.+24     	; 0x2330 <f_read+0x166>
    2318:	ab 81       	ldd	r26, Y+3	; 0x03
    231a:	bc 81       	ldd	r27, Y+4	; 0x04
    231c:	14 96       	adiw	r26, 0x04	; 4
    231e:	8c 91       	ld	r24, X
    2320:	14 97       	sbiw	r26, 0x04	; 4
    2322:	80 68       	ori	r24, 0x80	; 128
    2324:	14 96       	adiw	r26, 0x04	; 4
    2326:	8c 93       	st	X, r24
    2328:	14 97       	sbiw	r26, 0x04	; 4
    232a:	bb 24       	eor	r11, r11
    232c:	b3 94       	inc	r11
    232e:	f2 c0       	rjmp	.+484    	; 0x2514 <f_read+0x34a>
				fp->clust = clst;				/* Update current cluster */
    2330:	eb 81       	ldd	r30, Y+3	; 0x03
    2332:	fc 81       	ldd	r31, Y+4	; 0x04
    2334:	82 8b       	std	Z+18, r24	; 0x12
    2336:	93 8b       	std	Z+19, r25	; 0x13
    2338:	a4 8b       	std	Z+20, r26	; 0x14
    233a:	b5 8b       	std	Z+21, r27	; 0x15
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    233c:	ab 81       	ldd	r26, Y+3	; 0x03
    233e:	bc 81       	ldd	r27, Y+4	; 0x04
    2340:	6d 90       	ld	r6, X+
    2342:	7c 90       	ld	r7, X
    2344:	11 97       	sbiw	r26, 0x01	; 1
    2346:	52 96       	adiw	r26, 0x12	; 18
    2348:	4d 91       	ld	r20, X+
    234a:	5d 91       	ld	r21, X+
    234c:	6d 91       	ld	r22, X+
    234e:	7c 91       	ld	r23, X
    2350:	55 97       	sbiw	r26, 0x15	; 21
    2352:	c3 01       	movw	r24, r6
    2354:	0e 94 19 07 	call	0xe32	; 0xe32 <clust2sect>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	a1 05       	cpc	r26, r1
    2360:	b1 05       	cpc	r27, r1
    2362:	49 f4       	brne	.+18     	; 0x2376 <f_read+0x1ac>
    2364:	eb 81       	ldd	r30, Y+3	; 0x03
    2366:	fc 81       	ldd	r31, Y+4	; 0x04
    2368:	84 81       	ldd	r24, Z+4	; 0x04
    236a:	80 68       	ori	r24, 0x80	; 128
    236c:	84 83       	std	Z+4, r24	; 0x04
    236e:	bb 24       	eor	r11, r11
    2370:	68 94       	set
    2372:	b1 f8       	bld	r11, 1
    2374:	cf c0       	rjmp	.+414    	; 0x2514 <f_read+0x34a>
			sect += csect;
    2376:	6c 01       	movw	r12, r24
    2378:	7d 01       	movw	r14, r26
    237a:	c1 0e       	add	r12, r17
    237c:	d1 1c       	adc	r13, r1
    237e:	e1 1c       	adc	r14, r1
    2380:	f1 1c       	adc	r15, r1
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    2382:	24 01       	movw	r4, r8
    2384:	45 2c       	mov	r4, r5
    2386:	55 24       	eor	r5, r5
    2388:	46 94       	lsr	r4
			if (cc) {							/* Read maximum contiguous sectors directly */
    238a:	41 14       	cp	r4, r1
    238c:	51 04       	cpc	r5, r1
    238e:	09 f4       	brne	.+2      	; 0x2392 <f_read+0x1c8>
    2390:	53 c0       	rjmp	.+166    	; 0x2438 <f_read+0x26e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2392:	d3 01       	movw	r26, r6
    2394:	12 96       	adiw	r26, 0x02	; 2
    2396:	4c 91       	ld	r20, X
    2398:	12 97       	sbiw	r26, 0x02	; 2
    239a:	c2 01       	movw	r24, r4
    239c:	81 0f       	add	r24, r17
    239e:	91 1d       	adc	r25, r1
    23a0:	24 2f       	mov	r18, r20
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	28 17       	cp	r18, r24
    23a6:	39 07       	cpc	r19, r25
    23a8:	20 f4       	brcc	.+8      	; 0x23b2 <f_read+0x1e8>
					cc = fp->fs->csize - csect;
    23aa:	c9 01       	movw	r24, r18
    23ac:	2c 01       	movw	r4, r24
    23ae:	41 1a       	sub	r4, r17
    23b0:	51 08       	sbc	r5, r1
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    23b2:	f3 01       	movw	r30, r6
    23b4:	81 81       	ldd	r24, Z+1	; 0x01
    23b6:	69 81       	ldd	r22, Y+1	; 0x01
    23b8:	7a 81       	ldd	r23, Y+2	; 0x02
    23ba:	a7 01       	movw	r20, r14
    23bc:	96 01       	movw	r18, r12
    23be:	04 2d       	mov	r16, r4
    23c0:	10 e0       	ldi	r17, 0x00	; 0
    23c2:	0e 94 63 20 	call	0x40c6	; 0x40c6 <disk_read>
    23c6:	88 23       	and	r24, r24
    23c8:	61 f0       	breq	.+24     	; 0x23e2 <f_read+0x218>
					ABORT(fp->fs, FR_DISK_ERR);
    23ca:	ab 81       	ldd	r26, Y+3	; 0x03
    23cc:	bc 81       	ldd	r27, Y+4	; 0x04
    23ce:	14 96       	adiw	r26, 0x04	; 4
    23d0:	8c 91       	ld	r24, X
    23d2:	14 97       	sbiw	r26, 0x04	; 4
    23d4:	80 68       	ori	r24, 0x80	; 128
    23d6:	14 96       	adiw	r26, 0x04	; 4
    23d8:	8c 93       	st	X, r24
    23da:	14 97       	sbiw	r26, 0x04	; 4
    23dc:	bb 24       	eor	r11, r11
    23de:	b3 94       	inc	r11
    23e0:	99 c0       	rjmp	.+306    	; 0x2514 <f_read+0x34a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    23e2:	ab 81       	ldd	r26, Y+3	; 0x03
    23e4:	bc 81       	ldd	r27, Y+4	; 0x04
    23e6:	ed 91       	ld	r30, X+
    23e8:	fc 91       	ld	r31, X
    23ea:	11 97       	sbiw	r26, 0x01	; 1
    23ec:	84 81       	ldd	r24, Z+4	; 0x04
    23ee:	88 23       	and	r24, r24
    23f0:	f1 f0       	breq	.+60     	; 0x242e <f_read+0x264>
    23f2:	82 a5       	lds	r24, 0x62
    23f4:	93 a5       	lds	r25, 0x63
    23f6:	a4 a5       	lds	r26, 0x64
    23f8:	b5 a5       	lds	r27, 0x65
    23fa:	8c 19       	sub	r24, r12
    23fc:	9d 09       	sbc	r25, r13
    23fe:	ae 09       	sbc	r26, r14
    2400:	bf 09       	sbc	r27, r15
    2402:	a2 01       	movw	r20, r4
    2404:	60 e0       	ldi	r22, 0x00	; 0
    2406:	70 e0       	ldi	r23, 0x00	; 0
    2408:	84 17       	cp	r24, r20
    240a:	95 07       	cpc	r25, r21
    240c:	a6 07       	cpc	r26, r22
    240e:	b7 07       	cpc	r27, r23
    2410:	70 f4       	brcc	.+28     	; 0x242e <f_read+0x264>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    2412:	98 2f       	mov	r25, r24
    2414:	88 27       	eor	r24, r24
    2416:	99 0f       	add	r25, r25
    2418:	bf 01       	movw	r22, r30
    241a:	62 5d       	subi	r22, 0xD2	; 210
    241c:	7f 4f       	sbci	r23, 0xFF	; 255
    241e:	e9 81       	ldd	r30, Y+1	; 0x01
    2420:	fa 81       	ldd	r31, Y+2	; 0x02
    2422:	8e 0f       	add	r24, r30
    2424:	9f 1f       	adc	r25, r31
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	52 e0       	ldi	r21, 0x02	; 2
    242a:	0e 94 67 00 	call	0xce	; 0xce <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    242e:	62 01       	movw	r12, r4
    2430:	dc 2c       	mov	r13, r12
    2432:	cc 24       	eor	r12, r12
    2434:	dd 0c       	add	r13, r13
				continue;
    2436:	41 c0       	rjmp	.+130    	; 0x24ba <f_read+0x2f0>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    2438:	ab 81       	ldd	r26, Y+3	; 0x03
    243a:	bc 81       	ldd	r27, Y+4	; 0x04
    243c:	56 96       	adiw	r26, 0x16	; 22
    243e:	cd 92       	st	X+, r12
    2440:	dd 92       	st	X+, r13
    2442:	ed 92       	st	X+, r14
    2444:	fc 92       	st	X, r15
    2446:	59 97       	sbiw	r26, 0x19	; 25
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    2448:	eb 81       	ldd	r30, Y+3	; 0x03
    244a:	fc 81       	ldd	r31, Y+4	; 0x04
    244c:	c6 80       	ldd	r12, Z+6	; 0x06
    244e:	d7 80       	ldd	r13, Z+7	; 0x07
    2450:	e0 84       	ldd	r14, Z+8	; 0x08
    2452:	f1 84       	ldd	r15, Z+9	; 0x09
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    2454:	46 89       	ldd	r20, Z+22	; 0x16
    2456:	57 89       	ldd	r21, Z+23	; 0x17
    2458:	60 8d       	ldd	r22, Z+24	; 0x18
    245a:	71 8d       	ldd	r23, Z+25	; 0x19
    245c:	80 81       	ld	r24, Z
    245e:	91 81       	ldd	r25, Z+1	; 0x01
    2460:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
    2464:	88 23       	and	r24, r24
    2466:	61 f0       	breq	.+24     	; 0x2480 <f_read+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
    2468:	ab 81       	ldd	r26, Y+3	; 0x03
    246a:	bc 81       	ldd	r27, Y+4	; 0x04
    246c:	14 96       	adiw	r26, 0x04	; 4
    246e:	8c 91       	ld	r24, X
    2470:	14 97       	sbiw	r26, 0x04	; 4
    2472:	80 68       	ori	r24, 0x80	; 128
    2474:	14 96       	adiw	r26, 0x04	; 4
    2476:	8c 93       	st	X, r24
    2478:	14 97       	sbiw	r26, 0x04	; 4
    247a:	bb 24       	eor	r11, r11
    247c:	b3 94       	inc	r11
    247e:	4a c0       	rjmp	.+148    	; 0x2514 <f_read+0x34a>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    2480:	c6 01       	movw	r24, r12
    2482:	91 70       	andi	r25, 0x01	; 1
    2484:	e0 e0       	ldi	r30, 0x00	; 0
    2486:	f2 e0       	ldi	r31, 0x02	; 2
    2488:	e8 1b       	sub	r30, r24
    248a:	f9 0b       	sbc	r31, r25
    248c:	64 01       	movw	r12, r8
    248e:	e8 15       	cp	r30, r8
    2490:	f9 05       	cpc	r31, r9
    2492:	08 f4       	brcc	.+2      	; 0x2496 <f_read+0x2cc>
    2494:	6f 01       	movw	r12, r30
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    2496:	ab 81       	ldd	r26, Y+3	; 0x03
    2498:	bc 81       	ldd	r27, Y+4	; 0x04
    249a:	16 96       	adiw	r26, 0x06	; 6
    249c:	6d 91       	ld	r22, X+
    249e:	7c 91       	ld	r23, X
    24a0:	17 97       	sbiw	r26, 0x07	; 7
    24a2:	71 70       	andi	r23, 0x01	; 1
    24a4:	cb 01       	movw	r24, r22
    24a6:	8e 96       	adiw	r24, 0x2e	; 46
    24a8:	6d 91       	ld	r22, X+
    24aa:	7c 91       	ld	r23, X
    24ac:	68 0f       	add	r22, r24
    24ae:	79 1f       	adc	r23, r25
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	9a 81       	ldd	r25, Y+2	; 0x02
    24b4:	a6 01       	movw	r20, r12
    24b6:	0e 94 67 00 	call	0xce	; 0xce <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    24ba:	e9 81       	ldd	r30, Y+1	; 0x01
    24bc:	fa 81       	ldd	r31, Y+2	; 0x02
    24be:	ec 0d       	add	r30, r12
    24c0:	fd 1d       	adc	r31, r13
    24c2:	fa 83       	std	Y+2, r31	; 0x02
    24c4:	e9 83       	std	Y+1, r30	; 0x01
    24c6:	a6 01       	movw	r20, r12
    24c8:	60 e0       	ldi	r22, 0x00	; 0
    24ca:	70 e0       	ldi	r23, 0x00	; 0
    24cc:	eb 81       	ldd	r30, Y+3	; 0x03
    24ce:	fc 81       	ldd	r31, Y+4	; 0x04
    24d0:	86 81       	ldd	r24, Z+6	; 0x06
    24d2:	97 81       	ldd	r25, Z+7	; 0x07
    24d4:	a0 85       	ldd	r26, Z+8	; 0x08
    24d6:	b1 85       	ldd	r27, Z+9	; 0x09
    24d8:	84 0f       	add	r24, r20
    24da:	95 1f       	adc	r25, r21
    24dc:	a6 1f       	adc	r26, r22
    24de:	b7 1f       	adc	r27, r23
    24e0:	86 83       	std	Z+6, r24	; 0x06
    24e2:	97 83       	std	Z+7, r25	; 0x07
    24e4:	a0 87       	std	Z+8, r26	; 0x08
    24e6:	b1 87       	std	Z+9, r27	; 0x09
    24e8:	d1 01       	movw	r26, r2
    24ea:	8d 91       	ld	r24, X+
    24ec:	9c 91       	ld	r25, X
    24ee:	11 97       	sbiw	r26, 0x01	; 1
    24f0:	8c 0d       	add	r24, r12
    24f2:	9d 1d       	adc	r25, r13
    24f4:	11 96       	adiw	r26, 0x01	; 1
    24f6:	9c 93       	st	X, r25
    24f8:	8e 93       	st	-X, r24
    24fa:	8c 18       	sub	r8, r12
    24fc:	9d 08       	sbc	r9, r13
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    24fe:	09 f0       	breq	.+2      	; 0x2502 <f_read+0x338>
    2500:	b6 ce       	rjmp	.-660    	; 0x226e <f_read+0xa4>
    2502:	08 c0       	rjmp	.+16     	; 0x2514 <f_read+0x34a>
	*br = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);				/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)					/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2504:	bb 24       	eor	r11, r11
    2506:	68 94       	set
    2508:	b1 f8       	bld	r11, 1
    250a:	04 c0       	rjmp	.+8      	; 0x2514 <f_read+0x34a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    250c:	0f 2e       	mov	r0, r31
    250e:	f7 e0       	ldi	r31, 0x07	; 7
    2510:	bf 2e       	mov	r11, r31
    2512:	f0 2d       	mov	r31, r0
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    2514:	8b 2d       	mov	r24, r11
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	0f 90       	pop	r0
    251e:	df 91       	pop	r29
    2520:	cf 91       	pop	r28
    2522:	1f 91       	pop	r17
    2524:	0f 91       	pop	r16
    2526:	ff 90       	pop	r15
    2528:	ef 90       	pop	r14
    252a:	df 90       	pop	r13
    252c:	cf 90       	pop	r12
    252e:	bf 90       	pop	r11
    2530:	9f 90       	pop	r9
    2532:	8f 90       	pop	r8
    2534:	7f 90       	pop	r7
    2536:	6f 90       	pop	r6
    2538:	5f 90       	pop	r5
    253a:	4f 90       	pop	r4
    253c:	3f 90       	pop	r3
    253e:	2f 90       	pop	r2
    2540:	08 95       	ret

00002542 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    2542:	2f 92       	push	r2
    2544:	3f 92       	push	r3
    2546:	4f 92       	push	r4
    2548:	5f 92       	push	r5
    254a:	6f 92       	push	r6
    254c:	7f 92       	push	r7
    254e:	8f 92       	push	r8
    2550:	9f 92       	push	r9
    2552:	af 92       	push	r10
    2554:	bf 92       	push	r11
    2556:	cf 92       	push	r12
    2558:	df 92       	push	r13
    255a:	ef 92       	push	r14
    255c:	ff 92       	push	r15
    255e:	0f 93       	push	r16
    2560:	1f 93       	push	r17
    2562:	cf 93       	push	r28
    2564:	df 93       	push	r29
    2566:	00 d0       	rcall	.+0      	; 0x2568 <f_write+0x26>
    2568:	00 d0       	rcall	.+0      	; 0x256a <f_write+0x28>
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62
    256e:	9c 83       	std	Y+4, r25	; 0x04
    2570:	8b 83       	std	Y+3, r24	; 0x03
    2572:	c6 2e       	mov	r12, r22
    2574:	17 2f       	mov	r17, r23
    2576:	4a 01       	movw	r8, r20
    2578:	19 01       	movw	r2, r18
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    257a:	d9 01       	movw	r26, r18
    257c:	1d 92       	st	X+, r1
    257e:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);			/* Check validity */
    2580:	fc 01       	movw	r30, r24
    2582:	62 81       	ldd	r22, Z+2	; 0x02
    2584:	73 81       	ldd	r23, Z+3	; 0x03
    2586:	80 81       	ld	r24, Z
    2588:	91 81       	ldd	r25, Z+1	; 0x01
    258a:	0e 94 10 01 	call	0x220	; 0x220 <validate>
    258e:	b8 2e       	mov	r11, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2590:	88 23       	and	r24, r24
    2592:	09 f0       	breq	.+2      	; 0x2596 <f_write+0x54>
    2594:	fd c1       	rjmp	.+1018   	; 0x2990 <f_write+0x44e>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    2596:	ab 81       	ldd	r26, Y+3	; 0x03
    2598:	bc 81       	ldd	r27, Y+4	; 0x04
    259a:	14 96       	adiw	r26, 0x04	; 4
    259c:	8c 91       	ld	r24, X
    259e:	14 97       	sbiw	r26, 0x04	; 4
    25a0:	88 23       	and	r24, r24
    25a2:	0c f4       	brge	.+2      	; 0x25a6 <f_write+0x64>
    25a4:	ed c1       	rjmp	.+986    	; 0x2980 <f_write+0x43e>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    25a6:	81 ff       	sbrs	r24, 1
    25a8:	ef c1       	rjmp	.+990    	; 0x2988 <f_write+0x446>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    25aa:	1a 96       	adiw	r26, 0x0a	; 10
    25ac:	4d 91       	ld	r20, X+
    25ae:	5d 91       	ld	r21, X+
    25b0:	6d 91       	ld	r22, X+
    25b2:	7c 91       	ld	r23, X
    25b4:	1d 97       	sbiw	r26, 0x0d	; 13
    25b6:	c4 01       	movw	r24, r8
    25b8:	a0 e0       	ldi	r26, 0x00	; 0
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	84 0f       	add	r24, r20
    25be:	95 1f       	adc	r25, r21
    25c0:	a6 1f       	adc	r26, r22
    25c2:	b7 1f       	adc	r27, r23
    25c4:	84 17       	cp	r24, r20
    25c6:	95 07       	cpc	r25, r21
    25c8:	a6 07       	cpc	r26, r22
    25ca:	b7 07       	cpc	r27, r23
    25cc:	08 f4       	brcc	.+2      	; 0x25d0 <f_write+0x8e>
    25ce:	bb c1       	rjmp	.+886    	; 0x2946 <f_write+0x404>

	for ( ;  btw;							/* Repeat until all data written */
    25d0:	81 14       	cp	r8, r1
    25d2:	91 04       	cpc	r9, r1
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <f_write+0x96>
    25d6:	b7 c1       	rjmp	.+878    	; 0x2946 <f_write+0x404>
    25d8:	c9 82       	std	Y+1, r12	; 0x01
    25da:	1a 83       	std	Y+2, r17	; 0x02
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    25dc:	aa 24       	eor	r10, r10
    25de:	a3 94       	inc	r10
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    25e0:	eb 81       	ldd	r30, Y+3	; 0x03
    25e2:	fc 81       	ldd	r31, Y+4	; 0x04
    25e4:	46 81       	ldd	r20, Z+6	; 0x06
    25e6:	57 81       	ldd	r21, Z+7	; 0x07
    25e8:	60 85       	ldd	r22, Z+8	; 0x08
    25ea:	71 85       	ldd	r23, Z+9	; 0x09
    25ec:	db 01       	movw	r26, r22
    25ee:	ca 01       	movw	r24, r20
    25f0:	91 70       	andi	r25, 0x01	; 1
    25f2:	a0 70       	andi	r26, 0x00	; 0
    25f4:	b0 70       	andi	r27, 0x00	; 0
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	a1 05       	cpc	r26, r1
    25fa:	b1 05       	cpc	r27, r1
    25fc:	09 f0       	breq	.+2      	; 0x2600 <f_write+0xbe>
    25fe:	40 c1       	rjmp	.+640    	; 0x2880 <f_write+0x33e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2600:	20 81       	ld	r18, Z
    2602:	31 81       	ldd	r19, Z+1	; 0x01
    2604:	db 01       	movw	r26, r22
    2606:	ca 01       	movw	r24, r20
    2608:	07 2e       	mov	r0, r23
    260a:	79 e0       	ldi	r23, 0x09	; 9
    260c:	b6 95       	lsr	r27
    260e:	a7 95       	ror	r26
    2610:	97 95       	ror	r25
    2612:	87 95       	ror	r24
    2614:	7a 95       	dec	r23
    2616:	d1 f7       	brne	.-12     	; 0x260c <f_write+0xca>
    2618:	70 2d       	mov	r23, r0
    261a:	f9 01       	movw	r30, r18
    261c:	12 81       	ldd	r17, Z+2	; 0x02
    261e:	11 50       	subi	r17, 0x01	; 1
    2620:	18 23       	and	r17, r24
			if (!csect) {					/* On the cluster boundary? */
    2622:	09 f0       	breq	.+2      	; 0x2626 <f_write+0xe4>
    2624:	58 c0       	rjmp	.+176    	; 0x26d6 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
    2626:	41 15       	cp	r20, r1
    2628:	51 05       	cpc	r21, r1
    262a:	61 05       	cpc	r22, r1
    262c:	71 05       	cpc	r23, r1
    262e:	c9 f4       	brne	.+50     	; 0x2662 <f_write+0x120>
					clst = fp->sclust;		/* Follow from the origin */
    2630:	eb 81       	ldd	r30, Y+3	; 0x03
    2632:	fc 81       	ldd	r31, Y+4	; 0x04
    2634:	86 85       	ldd	r24, Z+14	; 0x0e
    2636:	97 85       	ldd	r25, Z+15	; 0x0f
    2638:	a0 89       	ldd	r26, Z+16	; 0x10
    263a:	b1 89       	ldd	r27, Z+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	a1 05       	cpc	r26, r1
    2640:	b1 05       	cpc	r27, r1
    2642:	09 f5       	brne	.+66     	; 0x2686 <f_write+0x144>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    2644:	c9 01       	movw	r24, r18
    2646:	40 e0       	ldi	r20, 0x00	; 0
    2648:	50 e0       	ldi	r21, 0x00	; 0
    264a:	ba 01       	movw	r22, r20
    264c:	0e 94 2f 0a 	call	0x145e	; 0x145e <create_chain>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	eb 81       	ldd	r30, Y+3	; 0x03
    2656:	fc 81       	ldd	r31, Y+4	; 0x04
    2658:	86 87       	std	Z+14, r24	; 0x0e
    265a:	97 87       	std	Z+15, r25	; 0x0f
    265c:	a0 8b       	std	Z+16, r26	; 0x10
    265e:	b1 8b       	std	Z+17, r27	; 0x11
    2660:	0d c0       	rjmp	.+26     	; 0x267c <f_write+0x13a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    2662:	ab 81       	ldd	r26, Y+3	; 0x03
    2664:	bc 81       	ldd	r27, Y+4	; 0x04
    2666:	52 96       	adiw	r26, 0x12	; 18
    2668:	4d 91       	ld	r20, X+
    266a:	5d 91       	ld	r21, X+
    266c:	6d 91       	ld	r22, X+
    266e:	7c 91       	ld	r23, X
    2670:	55 97       	sbiw	r26, 0x15	; 21
    2672:	c9 01       	movw	r24, r18
    2674:	0e 94 2f 0a 	call	0x145e	; 0x145e <create_chain>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    267c:	00 97       	sbiw	r24, 0x00	; 0
    267e:	a1 05       	cpc	r26, r1
    2680:	b1 05       	cpc	r27, r1
    2682:	09 f4       	brne	.+2      	; 0x2686 <f_write+0x144>
    2684:	60 c1       	rjmp	.+704    	; 0x2946 <f_write+0x404>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2686:	81 30       	cpi	r24, 0x01	; 1
    2688:	91 05       	cpc	r25, r1
    268a:	a1 05       	cpc	r26, r1
    268c:	b1 05       	cpc	r27, r1
    268e:	49 f4       	brne	.+18     	; 0x26a2 <f_write+0x160>
    2690:	eb 81       	ldd	r30, Y+3	; 0x03
    2692:	fc 81       	ldd	r31, Y+4	; 0x04
    2694:	84 81       	ldd	r24, Z+4	; 0x04
    2696:	80 68       	ori	r24, 0x80	; 128
    2698:	84 83       	std	Z+4, r24	; 0x04
    269a:	bb 24       	eor	r11, r11
    269c:	68 94       	set
    269e:	b1 f8       	bld	r11, 1
    26a0:	77 c1       	rjmp	.+750    	; 0x2990 <f_write+0x44e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    26a2:	8f 3f       	cpi	r24, 0xFF	; 255
    26a4:	ff ef       	ldi	r31, 0xFF	; 255
    26a6:	9f 07       	cpc	r25, r31
    26a8:	ff ef       	ldi	r31, 0xFF	; 255
    26aa:	af 07       	cpc	r26, r31
    26ac:	ff ef       	ldi	r31, 0xFF	; 255
    26ae:	bf 07       	cpc	r27, r31
    26b0:	61 f4       	brne	.+24     	; 0x26ca <f_write+0x188>
    26b2:	ab 81       	ldd	r26, Y+3	; 0x03
    26b4:	bc 81       	ldd	r27, Y+4	; 0x04
    26b6:	14 96       	adiw	r26, 0x04	; 4
    26b8:	8c 91       	ld	r24, X
    26ba:	14 97       	sbiw	r26, 0x04	; 4
    26bc:	80 68       	ori	r24, 0x80	; 128
    26be:	14 96       	adiw	r26, 0x04	; 4
    26c0:	8c 93       	st	X, r24
    26c2:	14 97       	sbiw	r26, 0x04	; 4
    26c4:	bb 24       	eor	r11, r11
    26c6:	b3 94       	inc	r11
    26c8:	63 c1       	rjmp	.+710    	; 0x2990 <f_write+0x44e>
				fp->clust = clst;			/* Update current cluster */
    26ca:	eb 81       	ldd	r30, Y+3	; 0x03
    26cc:	fc 81       	ldd	r31, Y+4	; 0x04
    26ce:	82 8b       	std	Z+18, r24	; 0x12
    26d0:	93 8b       	std	Z+19, r25	; 0x13
    26d2:	a4 8b       	std	Z+20, r26	; 0x14
    26d4:	b5 8b       	std	Z+21, r27	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    26d6:	ab 81       	ldd	r26, Y+3	; 0x03
    26d8:	bc 81       	ldd	r27, Y+4	; 0x04
    26da:	2d 91       	ld	r18, X+
    26dc:	3c 91       	ld	r19, X
    26de:	f9 01       	movw	r30, r18
    26e0:	82 a5       	lds	r24, 0x62
    26e2:	93 a5       	lds	r25, 0x63
    26e4:	a4 a5       	lds	r26, 0x64
    26e6:	b5 a5       	lds	r27, 0x65
    26e8:	eb 81       	ldd	r30, Y+3	; 0x03
    26ea:	fc 81       	ldd	r31, Y+4	; 0x04
    26ec:	46 89       	ldd	r20, Z+22	; 0x16
    26ee:	57 89       	ldd	r21, Z+23	; 0x17
    26f0:	60 8d       	ldd	r22, Z+24	; 0x18
    26f2:	71 8d       	ldd	r23, Z+25	; 0x19
    26f4:	84 17       	cp	r24, r20
    26f6:	95 07       	cpc	r25, r21
    26f8:	a6 07       	cpc	r26, r22
    26fa:	b7 07       	cpc	r27, r23
    26fc:	a1 f4       	brne	.+40     	; 0x2726 <f_write+0x1e4>
    26fe:	c9 01       	movw	r24, r18
    2700:	40 e0       	ldi	r20, 0x00	; 0
    2702:	50 e0       	ldi	r21, 0x00	; 0
    2704:	ba 01       	movw	r22, r20
    2706:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
    270a:	88 23       	and	r24, r24
    270c:	61 f0       	breq	.+24     	; 0x2726 <f_write+0x1e4>
				ABORT(fp->fs, FR_DISK_ERR);
    270e:	ab 81       	ldd	r26, Y+3	; 0x03
    2710:	bc 81       	ldd	r27, Y+4	; 0x04
    2712:	14 96       	adiw	r26, 0x04	; 4
    2714:	8c 91       	ld	r24, X
    2716:	14 97       	sbiw	r26, 0x04	; 4
    2718:	80 68       	ori	r24, 0x80	; 128
    271a:	14 96       	adiw	r26, 0x04	; 4
    271c:	8c 93       	st	X, r24
    271e:	14 97       	sbiw	r26, 0x04	; 4
    2720:	bb 24       	eor	r11, r11
    2722:	b3 94       	inc	r11
    2724:	35 c1       	rjmp	.+618    	; 0x2990 <f_write+0x44e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    2726:	eb 81       	ldd	r30, Y+3	; 0x03
    2728:	fc 81       	ldd	r31, Y+4	; 0x04
    272a:	40 80       	ld	r4, Z
    272c:	51 80       	ldd	r5, Z+1	; 0x01
    272e:	42 89       	ldd	r20, Z+18	; 0x12
    2730:	53 89       	ldd	r21, Z+19	; 0x13
    2732:	64 89       	ldd	r22, Z+20	; 0x14
    2734:	75 89       	ldd	r23, Z+21	; 0x15
    2736:	c2 01       	movw	r24, r4
    2738:	0e 94 19 07 	call	0xe32	; 0xe32 <clust2sect>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2740:	00 97       	sbiw	r24, 0x00	; 0
    2742:	a1 05       	cpc	r26, r1
    2744:	b1 05       	cpc	r27, r1
    2746:	69 f4       	brne	.+26     	; 0x2762 <f_write+0x220>
    2748:	ab 81       	ldd	r26, Y+3	; 0x03
    274a:	bc 81       	ldd	r27, Y+4	; 0x04
    274c:	14 96       	adiw	r26, 0x04	; 4
    274e:	8c 91       	ld	r24, X
    2750:	14 97       	sbiw	r26, 0x04	; 4
    2752:	80 68       	ori	r24, 0x80	; 128
    2754:	14 96       	adiw	r26, 0x04	; 4
    2756:	8c 93       	st	X, r24
    2758:	14 97       	sbiw	r26, 0x04	; 4
    275a:	bb 24       	eor	r11, r11
    275c:	68 94       	set
    275e:	b1 f8       	bld	r11, 1
    2760:	17 c1       	rjmp	.+558    	; 0x2990 <f_write+0x44e>
			sect += csect;
    2762:	6c 01       	movw	r12, r24
    2764:	7d 01       	movw	r14, r26
    2766:	c1 0e       	add	r12, r17
    2768:	d1 1c       	adc	r13, r1
    276a:	e1 1c       	adc	r14, r1
    276c:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    276e:	34 01       	movw	r6, r8
    2770:	67 2c       	mov	r6, r7
    2772:	77 24       	eor	r7, r7
    2774:	66 94       	lsr	r6
			if (cc) {						/* Write maximum contiguous sectors directly */
    2776:	61 14       	cp	r6, r1
    2778:	71 04       	cpc	r7, r1
    277a:	09 f4       	brne	.+2      	; 0x277e <f_write+0x23c>
    277c:	50 c0       	rjmp	.+160    	; 0x281e <f_write+0x2dc>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    277e:	f2 01       	movw	r30, r4
    2780:	42 81       	ldd	r20, Z+2	; 0x02
    2782:	c3 01       	movw	r24, r6
    2784:	81 0f       	add	r24, r17
    2786:	91 1d       	adc	r25, r1
    2788:	24 2f       	mov	r18, r20
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	28 17       	cp	r18, r24
    278e:	39 07       	cpc	r19, r25
    2790:	20 f4       	brcc	.+8      	; 0x279a <f_write+0x258>
					cc = fp->fs->csize - csect;
    2792:	c9 01       	movw	r24, r18
    2794:	3c 01       	movw	r6, r24
    2796:	61 1a       	sub	r6, r17
    2798:	71 08       	sbc	r7, r1
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    279a:	d2 01       	movw	r26, r4
    279c:	11 96       	adiw	r26, 0x01	; 1
    279e:	8c 91       	ld	r24, X
    27a0:	69 81       	ldd	r22, Y+1	; 0x01
    27a2:	7a 81       	ldd	r23, Y+2	; 0x02
    27a4:	a7 01       	movw	r20, r14
    27a6:	96 01       	movw	r18, r12
    27a8:	06 2d       	mov	r16, r6
    27aa:	10 e0       	ldi	r17, 0x00	; 0
    27ac:	0e 94 bb 20 	call	0x4176	; 0x4176 <disk_write>
    27b0:	88 23       	and	r24, r24
    27b2:	41 f0       	breq	.+16     	; 0x27c4 <f_write+0x282>
					ABORT(fp->fs, FR_DISK_ERR);
    27b4:	eb 81       	ldd	r30, Y+3	; 0x03
    27b6:	fc 81       	ldd	r31, Y+4	; 0x04
    27b8:	84 81       	ldd	r24, Z+4	; 0x04
    27ba:	80 68       	ori	r24, 0x80	; 128
    27bc:	84 83       	std	Z+4, r24	; 0x04
    27be:	bb 24       	eor	r11, r11
    27c0:	b3 94       	inc	r11
    27c2:	e6 c0       	rjmp	.+460    	; 0x2990 <f_write+0x44e>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    27c4:	ab 81       	ldd	r26, Y+3	; 0x03
    27c6:	bc 81       	ldd	r27, Y+4	; 0x04
    27c8:	ed 91       	ld	r30, X+
    27ca:	fc 91       	ld	r31, X
    27cc:	82 a5       	lds	r24, 0x62
    27ce:	93 a5       	lds	r25, 0x63
    27d0:	a4 a5       	lds	r26, 0x64
    27d2:	b5 a5       	lds	r27, 0x65
    27d4:	8c 19       	sub	r24, r12
    27d6:	9d 09       	sbc	r25, r13
    27d8:	ae 09       	sbc	r26, r14
    27da:	bf 09       	sbc	r27, r15
    27dc:	a3 01       	movw	r20, r6
    27de:	60 e0       	ldi	r22, 0x00	; 0
    27e0:	70 e0       	ldi	r23, 0x00	; 0
    27e2:	84 17       	cp	r24, r20
    27e4:	95 07       	cpc	r25, r21
    27e6:	a6 07       	cpc	r26, r22
    27e8:	b7 07       	cpc	r27, r23
    27ea:	a0 f4       	brcc	.+40     	; 0x2814 <f_write+0x2d2>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    27ec:	bc 01       	movw	r22, r24
    27ee:	76 2f       	mov	r23, r22
    27f0:	66 27       	eor	r22, r22
    27f2:	77 0f       	add	r23, r23
    27f4:	29 81       	ldd	r18, Y+1	; 0x01
    27f6:	3a 81       	ldd	r19, Y+2	; 0x02
    27f8:	62 0f       	add	r22, r18
    27fa:	73 1f       	adc	r23, r19
    27fc:	cf 01       	movw	r24, r30
    27fe:	8e 96       	adiw	r24, 0x2e	; 46
    2800:	40 e0       	ldi	r20, 0x00	; 0
    2802:	52 e0       	ldi	r21, 0x02	; 2
    2804:	0e 94 67 00 	call	0xce	; 0xce <mem_cpy>
					fp->fs->wflag = 0;
    2808:	ab 81       	ldd	r26, Y+3	; 0x03
    280a:	bc 81       	ldd	r27, Y+4	; 0x04
    280c:	ed 91       	ld	r30, X+
    280e:	fc 91       	ld	r31, X
    2810:	11 97       	sbiw	r26, 0x01	; 1
    2812:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    2814:	63 01       	movw	r12, r6
    2816:	dc 2c       	mov	r13, r12
    2818:	cc 24       	eor	r12, r12
    281a:	dd 0c       	add	r13, r13
				continue;
    281c:	70 c0       	rjmp	.+224    	; 0x28fe <f_write+0x3bc>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    281e:	eb 81       	ldd	r30, Y+3	; 0x03
    2820:	fc 81       	ldd	r31, Y+4	; 0x04
    2822:	86 81       	ldd	r24, Z+6	; 0x06
    2824:	97 81       	ldd	r25, Z+7	; 0x07
    2826:	a0 85       	ldd	r26, Z+8	; 0x08
    2828:	b1 85       	ldd	r27, Z+9	; 0x09
    282a:	42 85       	ldd	r20, Z+10	; 0x0a
    282c:	53 85       	ldd	r21, Z+11	; 0x0b
    282e:	64 85       	ldd	r22, Z+12	; 0x0c
    2830:	75 85       	ldd	r23, Z+13	; 0x0d
    2832:	84 17       	cp	r24, r20
    2834:	95 07       	cpc	r25, r21
    2836:	a6 07       	cpc	r26, r22
    2838:	b7 07       	cpc	r27, r23
    283a:	e0 f0       	brcs	.+56     	; 0x2874 <f_write+0x332>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    283c:	c2 01       	movw	r24, r4
    283e:	40 e0       	ldi	r20, 0x00	; 0
    2840:	50 e0       	ldi	r21, 0x00	; 0
    2842:	ba 01       	movw	r22, r20
    2844:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
    2848:	88 23       	and	r24, r24
    284a:	61 f0       	breq	.+24     	; 0x2864 <f_write+0x322>
    284c:	ab 81       	ldd	r26, Y+3	; 0x03
    284e:	bc 81       	ldd	r27, Y+4	; 0x04
    2850:	14 96       	adiw	r26, 0x04	; 4
    2852:	8c 91       	ld	r24, X
    2854:	14 97       	sbiw	r26, 0x04	; 4
    2856:	80 68       	ori	r24, 0x80	; 128
    2858:	14 96       	adiw	r26, 0x04	; 4
    285a:	8c 93       	st	X, r24
    285c:	14 97       	sbiw	r26, 0x04	; 4
    285e:	bb 24       	eor	r11, r11
    2860:	b3 94       	inc	r11
    2862:	96 c0       	rjmp	.+300    	; 0x2990 <f_write+0x44e>
				fp->fs->winsect = sect;
    2864:	ab 81       	ldd	r26, Y+3	; 0x03
    2866:	bc 81       	ldd	r27, Y+4	; 0x04
    2868:	ed 91       	ld	r30, X+
    286a:	fc 91       	ld	r31, X
    286c:	c2 a6       	lds	r28, 0xb2
    286e:	d3 a6       	lds	r29, 0xb3
    2870:	e4 a6       	lds	r30, 0xb4
    2872:	f5 a6       	lds	r31, 0xb5
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    2874:	eb 81       	ldd	r30, Y+3	; 0x03
    2876:	fc 81       	ldd	r31, Y+4	; 0x04
    2878:	c6 8a       	std	Z+22, r12	; 0x16
    287a:	d7 8a       	std	Z+23, r13	; 0x17
    287c:	e0 8e       	std	Z+24, r14	; 0x18
    287e:	f1 8e       	std	Z+25, r15	; 0x19
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    2880:	ab 81       	ldd	r26, Y+3	; 0x03
    2882:	bc 81       	ldd	r27, Y+4	; 0x04
    2884:	16 96       	adiw	r26, 0x06	; 6
    2886:	cd 90       	ld	r12, X+
    2888:	dd 90       	ld	r13, X+
    288a:	ed 90       	ld	r14, X+
    288c:	fc 90       	ld	r15, X
    288e:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    2890:	56 96       	adiw	r26, 0x16	; 22
    2892:	4d 91       	ld	r20, X+
    2894:	5d 91       	ld	r21, X+
    2896:	6d 91       	ld	r22, X+
    2898:	7c 91       	ld	r23, X
    289a:	59 97       	sbiw	r26, 0x19	; 25
    289c:	8d 91       	ld	r24, X+
    289e:	9c 91       	ld	r25, X
    28a0:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
    28a4:	88 23       	and	r24, r24
    28a6:	41 f0       	breq	.+16     	; 0x28b8 <f_write+0x376>
			ABORT(fp->fs, FR_DISK_ERR);
    28a8:	eb 81       	ldd	r30, Y+3	; 0x03
    28aa:	fc 81       	ldd	r31, Y+4	; 0x04
    28ac:	84 81       	ldd	r24, Z+4	; 0x04
    28ae:	80 68       	ori	r24, 0x80	; 128
    28b0:	84 83       	std	Z+4, r24	; 0x04
    28b2:	bb 24       	eor	r11, r11
    28b4:	b3 94       	inc	r11
    28b6:	6c c0       	rjmp	.+216    	; 0x2990 <f_write+0x44e>
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    28b8:	c6 01       	movw	r24, r12
    28ba:	91 70       	andi	r25, 0x01	; 1
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	32 e0       	ldi	r19, 0x02	; 2
    28c0:	28 1b       	sub	r18, r24
    28c2:	39 0b       	sbc	r19, r25
    28c4:	64 01       	movw	r12, r8
    28c6:	28 15       	cp	r18, r8
    28c8:	39 05       	cpc	r19, r9
    28ca:	08 f4       	brcc	.+2      	; 0x28ce <f_write+0x38c>
    28cc:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    28ce:	ab 81       	ldd	r26, Y+3	; 0x03
    28d0:	bc 81       	ldd	r27, Y+4	; 0x04
    28d2:	16 96       	adiw	r26, 0x06	; 6
    28d4:	8d 91       	ld	r24, X+
    28d6:	9c 91       	ld	r25, X
    28d8:	17 97       	sbiw	r26, 0x07	; 7
    28da:	91 70       	andi	r25, 0x01	; 1
    28dc:	9c 01       	movw	r18, r24
    28de:	22 5d       	subi	r18, 0xD2	; 210
    28e0:	3f 4f       	sbci	r19, 0xFF	; 255
    28e2:	8d 91       	ld	r24, X+
    28e4:	9c 91       	ld	r25, X
    28e6:	82 0f       	add	r24, r18
    28e8:	93 1f       	adc	r25, r19
    28ea:	69 81       	ldd	r22, Y+1	; 0x01
    28ec:	7a 81       	ldd	r23, Y+2	; 0x02
    28ee:	a6 01       	movw	r20, r12
    28f0:	0e 94 67 00 	call	0xce	; 0xce <mem_cpy>
		fp->fs->wflag = 1;
    28f4:	ab 81       	ldd	r26, Y+3	; 0x03
    28f6:	bc 81       	ldd	r27, Y+4	; 0x04
    28f8:	ed 91       	ld	r30, X+
    28fa:	fc 91       	ld	r31, X
    28fc:	a4 82       	std	Z+4, r10	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    28fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2900:	fa 81       	ldd	r31, Y+2	; 0x02
    2902:	ec 0d       	add	r30, r12
    2904:	fd 1d       	adc	r31, r13
    2906:	fa 83       	std	Y+2, r31	; 0x02
    2908:	e9 83       	std	Y+1, r30	; 0x01
    290a:	a6 01       	movw	r20, r12
    290c:	60 e0       	ldi	r22, 0x00	; 0
    290e:	70 e0       	ldi	r23, 0x00	; 0
    2910:	eb 81       	ldd	r30, Y+3	; 0x03
    2912:	fc 81       	ldd	r31, Y+4	; 0x04
    2914:	86 81       	ldd	r24, Z+6	; 0x06
    2916:	97 81       	ldd	r25, Z+7	; 0x07
    2918:	a0 85       	ldd	r26, Z+8	; 0x08
    291a:	b1 85       	ldd	r27, Z+9	; 0x09
    291c:	84 0f       	add	r24, r20
    291e:	95 1f       	adc	r25, r21
    2920:	a6 1f       	adc	r26, r22
    2922:	b7 1f       	adc	r27, r23
    2924:	86 83       	std	Z+6, r24	; 0x06
    2926:	97 83       	std	Z+7, r25	; 0x07
    2928:	a0 87       	std	Z+8, r26	; 0x08
    292a:	b1 87       	std	Z+9, r27	; 0x09
    292c:	d1 01       	movw	r26, r2
    292e:	8d 91       	ld	r24, X+
    2930:	9c 91       	ld	r25, X
    2932:	11 97       	sbiw	r26, 0x01	; 1
    2934:	8c 0d       	add	r24, r12
    2936:	9d 1d       	adc	r25, r13
    2938:	11 96       	adiw	r26, 0x01	; 1
    293a:	9c 93       	st	X, r25
    293c:	8e 93       	st	-X, r24
    293e:	8c 18       	sub	r8, r12
    2940:	9d 08       	sbc	r9, r13
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    2942:	09 f0       	breq	.+2      	; 0x2946 <f_write+0x404>
    2944:	4d ce       	rjmp	.-870    	; 0x25e0 <f_write+0x9e>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    2946:	eb 81       	ldd	r30, Y+3	; 0x03
    2948:	fc 81       	ldd	r31, Y+4	; 0x04
    294a:	86 81       	ldd	r24, Z+6	; 0x06
    294c:	97 81       	ldd	r25, Z+7	; 0x07
    294e:	a0 85       	ldd	r26, Z+8	; 0x08
    2950:	b1 85       	ldd	r27, Z+9	; 0x09
    2952:	42 85       	ldd	r20, Z+10	; 0x0a
    2954:	53 85       	ldd	r21, Z+11	; 0x0b
    2956:	64 85       	ldd	r22, Z+12	; 0x0c
    2958:	75 85       	ldd	r23, Z+13	; 0x0d
    295a:	48 17       	cp	r20, r24
    295c:	59 07       	cpc	r21, r25
    295e:	6a 07       	cpc	r22, r26
    2960:	7b 07       	cpc	r23, r27
    2962:	20 f4       	brcc	.+8      	; 0x296c <f_write+0x42a>
    2964:	82 87       	std	Z+10, r24	; 0x0a
    2966:	93 87       	std	Z+11, r25	; 0x0b
    2968:	a4 87       	std	Z+12, r26	; 0x0c
    296a:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    296c:	ab 81       	ldd	r26, Y+3	; 0x03
    296e:	bc 81       	ldd	r27, Y+4	; 0x04
    2970:	14 96       	adiw	r26, 0x04	; 4
    2972:	8c 91       	ld	r24, X
    2974:	14 97       	sbiw	r26, 0x04	; 4
    2976:	80 62       	ori	r24, 0x20	; 32
    2978:	14 96       	adiw	r26, 0x04	; 4
    297a:	8c 93       	st	X, r24
    297c:	14 97       	sbiw	r26, 0x04	; 4

	LEAVE_FF(fp->fs, FR_OK);
    297e:	08 c0       	rjmp	.+16     	; 0x2990 <f_write+0x44e>
	*bw = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);			/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2980:	bb 24       	eor	r11, r11
    2982:	68 94       	set
    2984:	b1 f8       	bld	r11, 1
    2986:	04 c0       	rjmp	.+8      	; 0x2990 <f_write+0x44e>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    2988:	0f 2e       	mov	r0, r31
    298a:	f7 e0       	ldi	r31, 0x07	; 7
    298c:	bf 2e       	mov	r11, r31
    298e:	f0 2d       	mov	r31, r0

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    2990:	8b 2d       	mov	r24, r11
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	df 91       	pop	r29
    299c:	cf 91       	pop	r28
    299e:	1f 91       	pop	r17
    29a0:	0f 91       	pop	r16
    29a2:	ff 90       	pop	r15
    29a4:	ef 90       	pop	r14
    29a6:	df 90       	pop	r13
    29a8:	cf 90       	pop	r12
    29aa:	bf 90       	pop	r11
    29ac:	af 90       	pop	r10
    29ae:	9f 90       	pop	r9
    29b0:	8f 90       	pop	r8
    29b2:	7f 90       	pop	r7
    29b4:	6f 90       	pop	r6
    29b6:	5f 90       	pop	r5
    29b8:	4f 90       	pop	r4
    29ba:	3f 90       	pop	r3
    29bc:	2f 90       	pop	r2
    29be:	08 95       	ret

000029c0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    29c0:	0f 93       	push	r16
    29c2:	1f 93       	push	r17
    29c4:	cf 93       	push	r28
    29c6:	df 93       	push	r29
    29c8:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    29ca:	6a 81       	ldd	r22, Y+2	; 0x02
    29cc:	7b 81       	ldd	r23, Y+3	; 0x03
    29ce:	88 81       	ld	r24, Y
    29d0:	99 81       	ldd	r25, Y+1	; 0x01
    29d2:	0e 94 10 01 	call	0x220	; 0x220 <validate>
	if (res == FR_OK) {
    29d6:	88 23       	and	r24, r24
    29d8:	a9 f5       	brne	.+106    	; 0x2a44 <f_sync+0x84>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    29da:	9c 81       	ldd	r25, Y+4	; 0x04
    29dc:	95 ff       	sbrs	r25, 5
    29de:	32 c0       	rjmp	.+100    	; 0x2a44 <f_sync+0x84>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    29e0:	4a 8d       	ldd	r20, Y+26	; 0x1a
    29e2:	5b 8d       	ldd	r21, Y+27	; 0x1b
    29e4:	6c 8d       	ldd	r22, Y+28	; 0x1c
    29e6:	7d 8d       	ldd	r23, Y+29	; 0x1d
    29e8:	88 81       	ld	r24, Y
    29ea:	99 81       	ldd	r25, Y+1	; 0x01
    29ec:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
			if (res == FR_OK) {
    29f0:	88 23       	and	r24, r24
    29f2:	41 f5       	brne	.+80     	; 0x2a44 <f_sync+0x84>
				dir = fp->dir_ptr;
    29f4:	0e 8d       	ldd	r16, Y+30	; 0x1e
    29f6:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    29f8:	f8 01       	movw	r30, r16
    29fa:	83 85       	ldd	r24, Z+11	; 0x0b
    29fc:	80 62       	ori	r24, 0x20	; 32
    29fe:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    2a00:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a02:	84 8f       	std	Z+28, r24	; 0x1c
    2a04:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a06:	85 8f       	std	Z+29, r24	; 0x1d
    2a08:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a0a:	86 8f       	std	Z+30, r24	; 0x1e
    2a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0e:	87 8f       	std	Z+31, r24	; 0x1f
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    2a10:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a12:	82 8f       	std	Z+26, r24	; 0x1a
    2a14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a16:	83 8f       	std	Z+27, r24	; 0x1b
    2a18:	88 89       	ldd	r24, Y+16	; 0x10
    2a1a:	84 8b       	std	Z+20, r24	; 0x14
    2a1c:	89 89       	ldd	r24, Y+17	; 0x11
    2a1e:	85 8b       	std	Z+21, r24	; 0x15
				tim = get_fattime();						/* Update updated time */
    2a20:	0e 94 14 07 	call	0xe28	; 0xe28 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    2a24:	f8 01       	movw	r30, r16
    2a26:	66 8b       	std	Z+22, r22	; 0x16
    2a28:	77 8b       	std	Z+23, r23	; 0x17
    2a2a:	80 8f       	std	Z+24, r24	; 0x18
    2a2c:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    2a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a30:	8f 7d       	andi	r24, 0xDF	; 223
    2a32:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    2a34:	e8 81       	ld	r30, Y
    2a36:	f9 81       	ldd	r31, Y+1	; 0x01
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    2a3c:	88 81       	ld	r24, Y
    2a3e:	99 81       	ldd	r25, Y+1	; 0x01
    2a40:	0e 94 87 06 	call	0xd0e	; 0xd0e <sync>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    2a44:	df 91       	pop	r29
    2a46:	cf 91       	pop	r28
    2a48:	1f 91       	pop	r17
    2a4a:	0f 91       	pop	r16
    2a4c:	08 95       	ret

00002a4e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2a4e:	cf 93       	push	r28
    2a50:	df 93       	push	r29
    2a52:	ec 01       	movw	r28, r24
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    2a54:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <f_sync>
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    2a58:	88 23       	and	r24, r24
    2a5a:	11 f4       	brne	.+4      	; 0x2a60 <f_close+0x12>
    2a5c:	19 82       	std	Y+1, r1	; 0x01
    2a5e:	18 82       	st	Y, r1
	return res;
#endif
}
    2a60:	df 91       	pop	r29
    2a62:	cf 91       	pop	r28
    2a64:	08 95       	ret

00002a66 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    2a66:	2f 92       	push	r2
    2a68:	3f 92       	push	r3
    2a6a:	4f 92       	push	r4
    2a6c:	5f 92       	push	r5
    2a6e:	6f 92       	push	r6
    2a70:	7f 92       	push	r7
    2a72:	8f 92       	push	r8
    2a74:	9f 92       	push	r9
    2a76:	af 92       	push	r10
    2a78:	bf 92       	push	r11
    2a7a:	cf 92       	push	r12
    2a7c:	df 92       	push	r13
    2a7e:	ef 92       	push	r14
    2a80:	ff 92       	push	r15
    2a82:	1f 93       	push	r17
    2a84:	cf 93       	push	r28
    2a86:	df 93       	push	r29
    2a88:	00 d0       	rcall	.+0      	; 0x2a8a <f_lseek+0x24>
    2a8a:	00 d0       	rcall	.+0      	; 0x2a8c <f_lseek+0x26>
    2a8c:	00 d0       	rcall	.+0      	; 0x2a8e <f_lseek+0x28>
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	9e 83       	std	Y+6, r25	; 0x06
    2a94:	8d 83       	std	Y+5, r24	; 0x05
    2a96:	6a 01       	movw	r12, r20
    2a98:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	12 96       	adiw	r26, 0x02	; 2
    2a9e:	6d 91       	ld	r22, X+
    2aa0:	7c 91       	ld	r23, X
    2aa2:	13 97       	sbiw	r26, 0x03	; 3
    2aa4:	8d 91       	ld	r24, X+
    2aa6:	9c 91       	ld	r25, X
    2aa8:	0e 94 10 01 	call	0x220	; 0x220 <validate>
    2aac:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2aae:	88 23       	and	r24, r24
    2ab0:	09 f0       	breq	.+2      	; 0x2ab4 <f_lseek+0x4e>
    2ab2:	a5 c1       	rjmp	.+842    	; 0x2dfe <f_lseek+0x398>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    2ab4:	ed 81       	ldd	r30, Y+5	; 0x05
    2ab6:	fe 81       	ldd	r31, Y+6	; 0x06
    2ab8:	24 81       	ldd	r18, Z+4	; 0x04
    2aba:	22 23       	and	r18, r18
    2abc:	0c f4       	brge	.+2      	; 0x2ac0 <f_lseek+0x5a>
    2abe:	9e c1       	rjmp	.+828    	; 0x2dfc <f_lseek+0x396>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    2ac0:	82 85       	ldd	r24, Z+10	; 0x0a
    2ac2:	93 85       	ldd	r25, Z+11	; 0x0b
    2ac4:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ac6:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ac8:	8c 15       	cp	r24, r12
    2aca:	9d 05       	cpc	r25, r13
    2acc:	ae 05       	cpc	r26, r14
    2ace:	bf 05       	cpc	r27, r15
    2ad0:	20 f4       	brcc	.+8      	; 0x2ada <f_lseek+0x74>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    2ad2:	21 fd       	sbrc	r18, 1
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <f_lseek+0x74>
#endif
			) ofs = fp->fsize;
    2ad6:	6c 01       	movw	r12, r24
    2ad8:	7d 01       	movw	r14, r26

		ifptr = fp->fptr;
    2ada:	ad 81       	ldd	r26, Y+5	; 0x05
    2adc:	be 81       	ldd	r27, Y+6	; 0x06
    2ade:	16 96       	adiw	r26, 0x06	; 6
    2ae0:	4d 91       	ld	r20, X+
    2ae2:	5d 91       	ld	r21, X+
    2ae4:	6d 91       	ld	r22, X+
    2ae6:	7c 91       	ld	r23, X
    2ae8:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    2aea:	fd 01       	movw	r30, r26
    2aec:	16 82       	std	Z+6, r1	; 0x06
    2aee:	17 82       	std	Z+7, r1	; 0x07
    2af0:	10 86       	std	Z+8, r1	; 0x08
    2af2:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    2af4:	c1 14       	cp	r12, r1
    2af6:	d1 04       	cpc	r13, r1
    2af8:	e1 04       	cpc	r14, r1
    2afa:	f1 04       	cpc	r15, r1
    2afc:	09 f4       	brne	.+2      	; 0x2b00 <f_lseek+0x9a>
    2afe:	7f c1       	rjmp	.+766    	; 0x2dfe <f_lseek+0x398>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    2b00:	20 80       	ld	r2, Z
    2b02:	31 80       	ldd	r3, Z+1	; 0x01
    2b04:	d1 01       	movw	r26, r2
    2b06:	12 96       	adiw	r26, 0x02	; 2
    2b08:	8c 91       	ld	r24, X
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	a0 e0       	ldi	r26, 0x00	; 0
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	4c 01       	movw	r8, r24
    2b12:	5d 01       	movw	r10, r26
    2b14:	07 2e       	mov	r0, r23
    2b16:	79 e0       	ldi	r23, 0x09	; 9
    2b18:	88 0c       	add	r8, r8
    2b1a:	99 1c       	adc	r9, r9
    2b1c:	aa 1c       	adc	r10, r10
    2b1e:	bb 1c       	adc	r11, r11
    2b20:	7a 95       	dec	r23
    2b22:	d1 f7       	brne	.-12     	; 0x2b18 <f_lseek+0xb2>
    2b24:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    2b26:	41 15       	cp	r20, r1
    2b28:	51 05       	cpc	r21, r1
    2b2a:	61 05       	cpc	r22, r1
    2b2c:	71 05       	cpc	r23, r1
    2b2e:	f1 f1       	breq	.+124    	; 0x2bac <f_lseek+0x146>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2b30:	2a 01       	movw	r4, r20
    2b32:	3b 01       	movw	r6, r22
    2b34:	08 94       	sec
    2b36:	41 08       	sbc	r4, r1
    2b38:	51 08       	sbc	r5, r1
    2b3a:	61 08       	sbc	r6, r1
    2b3c:	71 08       	sbc	r7, r1
    2b3e:	c7 01       	movw	r24, r14
    2b40:	b6 01       	movw	r22, r12
    2b42:	61 50       	subi	r22, 0x01	; 1
    2b44:	70 40       	sbci	r23, 0x00	; 0
    2b46:	80 40       	sbci	r24, 0x00	; 0
    2b48:	90 40       	sbci	r25, 0x00	; 0
    2b4a:	a5 01       	movw	r20, r10
    2b4c:	94 01       	movw	r18, r8
    2b4e:	0e 94 08 22 	call	0x4410	; 0x4410 <__udivmodsi4>
    2b52:	29 83       	std	Y+1, r18	; 0x01
    2b54:	3a 83       	std	Y+2, r19	; 0x02
    2b56:	4b 83       	std	Y+3, r20	; 0x03
    2b58:	5c 83       	std	Y+4, r21	; 0x04
    2b5a:	c3 01       	movw	r24, r6
    2b5c:	b2 01       	movw	r22, r4
    2b5e:	a5 01       	movw	r20, r10
    2b60:	94 01       	movw	r18, r8
    2b62:	0e 94 08 22 	call	0x4410	; 0x4410 <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6a:	ab 81       	ldd	r26, Y+3	; 0x03
    2b6c:	bc 81       	ldd	r27, Y+4	; 0x04
    2b6e:	82 17       	cp	r24, r18
    2b70:	93 07       	cpc	r25, r19
    2b72:	a4 07       	cpc	r26, r20
    2b74:	b5 07       	cpc	r27, r21
    2b76:	d0 f0       	brcs	.+52     	; 0x2bac <f_lseek+0x146>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    2b78:	88 27       	eor	r24, r24
    2b7a:	99 27       	eor	r25, r25
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	88 19       	sub	r24, r8
    2b80:	99 09       	sbc	r25, r9
    2b82:	aa 09       	sbc	r26, r10
    2b84:	bb 09       	sbc	r27, r11
    2b86:	84 21       	and	r24, r4
    2b88:	95 21       	and	r25, r5
    2b8a:	a6 21       	and	r26, r6
    2b8c:	b7 21       	and	r27, r7
    2b8e:	ed 81       	ldd	r30, Y+5	; 0x05
    2b90:	fe 81       	ldd	r31, Y+6	; 0x06
    2b92:	86 83       	std	Z+6, r24	; 0x06
    2b94:	97 83       	std	Z+7, r25	; 0x07
    2b96:	a0 87       	std	Z+8, r26	; 0x08
    2b98:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    2b9a:	c8 1a       	sub	r12, r24
    2b9c:	d9 0a       	sbc	r13, r25
    2b9e:	ea 0a       	sbc	r14, r26
    2ba0:	fb 0a       	sbc	r15, r27
				clst = fp->clust;
    2ba2:	42 89       	ldd	r20, Z+18	; 0x12
    2ba4:	53 89       	ldd	r21, Z+19	; 0x13
    2ba6:	64 89       	ldd	r22, Z+20	; 0x14
    2ba8:	75 89       	ldd	r23, Z+21	; 0x15
    2baa:	42 c0       	rjmp	.+132    	; 0x2c30 <f_lseek+0x1ca>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    2bac:	ad 81       	ldd	r26, Y+5	; 0x05
    2bae:	be 81       	ldd	r27, Y+6	; 0x06
    2bb0:	1e 96       	adiw	r26, 0x0e	; 14
    2bb2:	4d 91       	ld	r20, X+
    2bb4:	5d 91       	ld	r21, X+
    2bb6:	6d 91       	ld	r22, X+
    2bb8:	7c 91       	ld	r23, X
    2bba:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    2bbc:	41 15       	cp	r20, r1
    2bbe:	51 05       	cpc	r21, r1
    2bc0:	61 05       	cpc	r22, r1
    2bc2:	71 05       	cpc	r23, r1
    2bc4:	69 f5       	brne	.+90     	; 0x2c20 <f_lseek+0x1ba>
					clst = create_chain(fp->fs, 0);
    2bc6:	c1 01       	movw	r24, r2
    2bc8:	40 e0       	ldi	r20, 0x00	; 0
    2bca:	50 e0       	ldi	r21, 0x00	; 0
    2bcc:	ba 01       	movw	r22, r20
    2bce:	0e 94 2f 0a 	call	0x145e	; 0x145e <create_chain>
    2bd2:	ab 01       	movw	r20, r22
    2bd4:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2bd6:	41 30       	cpi	r20, 0x01	; 1
    2bd8:	51 05       	cpc	r21, r1
    2bda:	61 05       	cpc	r22, r1
    2bdc:	71 05       	cpc	r23, r1
    2bde:	39 f4       	brne	.+14     	; 0x2bee <f_lseek+0x188>
    2be0:	ed 81       	ldd	r30, Y+5	; 0x05
    2be2:	fe 81       	ldd	r31, Y+6	; 0x06
    2be4:	84 81       	ldd	r24, Z+4	; 0x04
    2be6:	80 68       	ori	r24, 0x80	; 128
    2be8:	84 83       	std	Z+4, r24	; 0x04
    2bea:	12 e0       	ldi	r17, 0x02	; 2
    2bec:	08 c1       	rjmp	.+528    	; 0x2dfe <f_lseek+0x398>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2bee:	4f 3f       	cpi	r20, 0xFF	; 255
    2bf0:	ff ef       	ldi	r31, 0xFF	; 255
    2bf2:	5f 07       	cpc	r21, r31
    2bf4:	ff ef       	ldi	r31, 0xFF	; 255
    2bf6:	6f 07       	cpc	r22, r31
    2bf8:	ff ef       	ldi	r31, 0xFF	; 255
    2bfa:	7f 07       	cpc	r23, r31
    2bfc:	59 f4       	brne	.+22     	; 0x2c14 <f_lseek+0x1ae>
    2bfe:	ad 81       	ldd	r26, Y+5	; 0x05
    2c00:	be 81       	ldd	r27, Y+6	; 0x06
    2c02:	14 96       	adiw	r26, 0x04	; 4
    2c04:	8c 91       	ld	r24, X
    2c06:	14 97       	sbiw	r26, 0x04	; 4
    2c08:	80 68       	ori	r24, 0x80	; 128
    2c0a:	14 96       	adiw	r26, 0x04	; 4
    2c0c:	8c 93       	st	X, r24
    2c0e:	14 97       	sbiw	r26, 0x04	; 4
    2c10:	11 e0       	ldi	r17, 0x01	; 1
    2c12:	f5 c0       	rjmp	.+490    	; 0x2dfe <f_lseek+0x398>
					fp->sclust = clst;
    2c14:	ed 81       	ldd	r30, Y+5	; 0x05
    2c16:	fe 81       	ldd	r31, Y+6	; 0x06
    2c18:	46 87       	std	Z+14, r20	; 0x0e
    2c1a:	57 87       	std	Z+15, r21	; 0x0f
    2c1c:	60 8b       	std	Z+16, r22	; 0x10
    2c1e:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->clust = clst;
    2c20:	ad 81       	ldd	r26, Y+5	; 0x05
    2c22:	be 81       	ldd	r27, Y+6	; 0x06
    2c24:	52 96       	adiw	r26, 0x12	; 18
    2c26:	4d 93       	st	X+, r20
    2c28:	5d 93       	st	X+, r21
    2c2a:	6d 93       	st	X+, r22
    2c2c:	7c 93       	st	X, r23
    2c2e:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    2c30:	41 15       	cp	r20, r1
    2c32:	51 05       	cpc	r21, r1
    2c34:	61 05       	cpc	r22, r1
    2c36:	71 05       	cpc	r23, r1
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <f_lseek+0x1d6>
    2c3a:	a8 c0       	rjmp	.+336    	; 0x2d8c <f_lseek+0x326>
				while (ofs > bcs) {						/* Cluster following loop */
    2c3c:	8c 14       	cp	r8, r12
    2c3e:	9d 04       	cpc	r9, r13
    2c40:	ae 04       	cpc	r10, r14
    2c42:	bf 04       	cpc	r11, r15
    2c44:	08 f0       	brcs	.+2      	; 0x2c48 <f_lseek+0x1e2>
    2c46:	68 c0       	rjmp	.+208    	; 0x2d18 <f_lseek+0x2b2>
    2c48:	4d 80       	ldd	r4, Y+5	; 0x05
    2c4a:	5e 80       	ldd	r5, Y+6	; 0x06
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2c4c:	f2 01       	movw	r30, r4
    2c4e:	84 81       	ldd	r24, Z+4	; 0x04
    2c50:	81 ff       	sbrs	r24, 1
    2c52:	0c c0       	rjmp	.+24     	; 0x2c6c <f_lseek+0x206>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    2c54:	80 81       	ld	r24, Z
    2c56:	91 81       	ldd	r25, Z+1	; 0x01
    2c58:	0e 94 2f 0a 	call	0x145e	; 0x145e <create_chain>
    2c5c:	ab 01       	movw	r20, r22
    2c5e:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    2c60:	41 15       	cp	r20, r1
    2c62:	51 05       	cpc	r21, r1
    2c64:	61 05       	cpc	r22, r1
    2c66:	71 05       	cpc	r23, r1
    2c68:	39 f4       	brne	.+14     	; 0x2c78 <f_lseek+0x212>
    2c6a:	52 c0       	rjmp	.+164    	; 0x2d10 <f_lseek+0x2aa>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    2c6c:	80 81       	ld	r24, Z
    2c6e:	91 81       	ldd	r25, Z+1	; 0x01
    2c70:	0e 94 4f 07 	call	0xe9e	; 0xe9e <get_fat>
    2c74:	ab 01       	movw	r20, r22
    2c76:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2c78:	4f 3f       	cpi	r20, 0xFF	; 255
    2c7a:	bf ef       	ldi	r27, 0xFF	; 255
    2c7c:	5b 07       	cpc	r21, r27
    2c7e:	bf ef       	ldi	r27, 0xFF	; 255
    2c80:	6b 07       	cpc	r22, r27
    2c82:	bf ef       	ldi	r27, 0xFF	; 255
    2c84:	7b 07       	cpc	r23, r27
    2c86:	41 f4       	brne	.+16     	; 0x2c98 <f_lseek+0x232>
    2c88:	5e 82       	std	Y+6, r5	; 0x06
    2c8a:	4d 82       	std	Y+5, r4	; 0x05
    2c8c:	f2 01       	movw	r30, r4
    2c8e:	84 81       	ldd	r24, Z+4	; 0x04
    2c90:	80 68       	ori	r24, 0x80	; 128
    2c92:	84 83       	std	Z+4, r24	; 0x04
    2c94:	11 e0       	ldi	r17, 0x01	; 1
    2c96:	b3 c0       	rjmp	.+358    	; 0x2dfe <f_lseek+0x398>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    2c98:	42 30       	cpi	r20, 0x02	; 2
    2c9a:	51 05       	cpc	r21, r1
    2c9c:	61 05       	cpc	r22, r1
    2c9e:	71 05       	cpc	r23, r1
    2ca0:	60 f0       	brcs	.+24     	; 0x2cba <f_lseek+0x254>
    2ca2:	d2 01       	movw	r26, r4
    2ca4:	ed 91       	ld	r30, X+
    2ca6:	fc 91       	ld	r31, X
    2ca8:	86 89       	ldd	r24, Z+22	; 0x16
    2caa:	97 89       	ldd	r25, Z+23	; 0x17
    2cac:	a0 8d       	ldd	r26, Z+24	; 0x18
    2cae:	b1 8d       	ldd	r27, Z+25	; 0x19
    2cb0:	48 17       	cp	r20, r24
    2cb2:	59 07       	cpc	r21, r25
    2cb4:	6a 07       	cpc	r22, r26
    2cb6:	7b 07       	cpc	r23, r27
    2cb8:	40 f0       	brcs	.+16     	; 0x2cca <f_lseek+0x264>
    2cba:	5e 82       	std	Y+6, r5	; 0x06
    2cbc:	4d 82       	std	Y+5, r4	; 0x05
    2cbe:	f2 01       	movw	r30, r4
    2cc0:	84 81       	ldd	r24, Z+4	; 0x04
    2cc2:	80 68       	ori	r24, 0x80	; 128
    2cc4:	84 83       	std	Z+4, r24	; 0x04
    2cc6:	12 e0       	ldi	r17, 0x02	; 2
    2cc8:	9a c0       	rjmp	.+308    	; 0x2dfe <f_lseek+0x398>
					fp->clust = clst;
    2cca:	d2 01       	movw	r26, r4
    2ccc:	52 96       	adiw	r26, 0x12	; 18
    2cce:	4d 93       	st	X+, r20
    2cd0:	5d 93       	st	X+, r21
    2cd2:	6d 93       	st	X+, r22
    2cd4:	7c 93       	st	X, r23
    2cd6:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    2cd8:	16 96       	adiw	r26, 0x06	; 6
    2cda:	8d 91       	ld	r24, X+
    2cdc:	9d 91       	ld	r25, X+
    2cde:	0d 90       	ld	r0, X+
    2ce0:	bc 91       	ld	r27, X
    2ce2:	a0 2d       	mov	r26, r0
    2ce4:	88 0d       	add	r24, r8
    2ce6:	99 1d       	adc	r25, r9
    2ce8:	aa 1d       	adc	r26, r10
    2cea:	bb 1d       	adc	r27, r11
    2cec:	f2 01       	movw	r30, r4
    2cee:	86 83       	std	Z+6, r24	; 0x06
    2cf0:	97 83       	std	Z+7, r25	; 0x07
    2cf2:	a0 87       	std	Z+8, r26	; 0x08
    2cf4:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    2cf6:	c8 18       	sub	r12, r8
    2cf8:	d9 08       	sbc	r13, r9
    2cfa:	ea 08       	sbc	r14, r10
    2cfc:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    2cfe:	8c 14       	cp	r8, r12
    2d00:	9d 04       	cpc	r9, r13
    2d02:	ae 04       	cpc	r10, r14
    2d04:	bf 04       	cpc	r11, r15
    2d06:	08 f4       	brcc	.+2      	; 0x2d0a <f_lseek+0x2a4>
    2d08:	a1 cf       	rjmp	.-190    	; 0x2c4c <f_lseek+0x1e6>
    2d0a:	5e 82       	std	Y+6, r5	; 0x06
    2d0c:	4d 82       	std	Y+5, r4	; 0x05
    2d0e:	04 c0       	rjmp	.+8      	; 0x2d18 <f_lseek+0x2b2>
    2d10:	5e 82       	std	Y+6, r5	; 0x06
    2d12:	4d 82       	std	Y+5, r4	; 0x05
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    2d14:	75 01       	movw	r14, r10
    2d16:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    2d18:	ed 81       	ldd	r30, Y+5	; 0x05
    2d1a:	fe 81       	ldd	r31, Y+6	; 0x06
    2d1c:	86 81       	ldd	r24, Z+6	; 0x06
    2d1e:	97 81       	ldd	r25, Z+7	; 0x07
    2d20:	a0 85       	ldd	r26, Z+8	; 0x08
    2d22:	b1 85       	ldd	r27, Z+9	; 0x09
    2d24:	8c 0d       	add	r24, r12
    2d26:	9d 1d       	adc	r25, r13
    2d28:	ae 1d       	adc	r26, r14
    2d2a:	bf 1d       	adc	r27, r15
    2d2c:	86 83       	std	Z+6, r24	; 0x06
    2d2e:	97 83       	std	Z+7, r25	; 0x07
    2d30:	a0 87       	std	Z+8, r26	; 0x08
    2d32:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    2d34:	d7 01       	movw	r26, r14
    2d36:	c6 01       	movw	r24, r12
    2d38:	91 70       	andi	r25, 0x01	; 1
    2d3a:	a0 70       	andi	r26, 0x00	; 0
    2d3c:	b0 70       	andi	r27, 0x00	; 0
    2d3e:	00 97       	sbiw	r24, 0x00	; 0
    2d40:	a1 05       	cpc	r26, r1
    2d42:	b1 05       	cpc	r27, r1
    2d44:	39 f1       	breq	.+78     	; 0x2d94 <f_lseek+0x32e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    2d46:	80 81       	ld	r24, Z
    2d48:	91 81       	ldd	r25, Z+1	; 0x01
    2d4a:	0e 94 19 07 	call	0xe32	; 0xe32 <clust2sect>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	a1 05       	cpc	r26, r1
    2d56:	b1 05       	cpc	r27, r1
    2d58:	59 f4       	brne	.+22     	; 0x2d70 <f_lseek+0x30a>
    2d5a:	ad 81       	ldd	r26, Y+5	; 0x05
    2d5c:	be 81       	ldd	r27, Y+6	; 0x06
    2d5e:	14 96       	adiw	r26, 0x04	; 4
    2d60:	8c 91       	ld	r24, X
    2d62:	14 97       	sbiw	r26, 0x04	; 4
    2d64:	80 68       	ori	r24, 0x80	; 128
    2d66:	14 96       	adiw	r26, 0x04	; 4
    2d68:	8c 93       	st	X, r24
    2d6a:	14 97       	sbiw	r26, 0x04	; 4
    2d6c:	12 e0       	ldi	r17, 0x02	; 2
    2d6e:	47 c0       	rjmp	.+142    	; 0x2dfe <f_lseek+0x398>
					nsect += ofs / SS(fp->fs);
    2d70:	0b 2e       	mov	r0, r27
    2d72:	b9 e0       	ldi	r27, 0x09	; 9
    2d74:	f6 94       	lsr	r15
    2d76:	e7 94       	ror	r14
    2d78:	d7 94       	ror	r13
    2d7a:	c7 94       	ror	r12
    2d7c:	ba 95       	dec	r27
    2d7e:	d1 f7       	brne	.-12     	; 0x2d74 <f_lseek+0x30e>
    2d80:	b0 2d       	mov	r27, r0
    2d82:	c8 0e       	add	r12, r24
    2d84:	d9 1e       	adc	r13, r25
    2d86:	ea 1e       	adc	r14, r26
    2d88:	fb 1e       	adc	r15, r27
    2d8a:	07 c0       	rjmp	.+14     	; 0x2d9a <f_lseek+0x334>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2d8c:	cc 24       	eor	r12, r12
    2d8e:	dd 24       	eor	r13, r13
    2d90:	76 01       	movw	r14, r12
    2d92:	03 c0       	rjmp	.+6      	; 0x2d9a <f_lseek+0x334>
    2d94:	cc 24       	eor	r12, r12
    2d96:	dd 24       	eor	r13, r13
    2d98:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    2d9a:	ed 81       	ldd	r30, Y+5	; 0x05
    2d9c:	fe 81       	ldd	r31, Y+6	; 0x06
    2d9e:	86 81       	ldd	r24, Z+6	; 0x06
    2da0:	97 81       	ldd	r25, Z+7	; 0x07
    2da2:	a0 85       	ldd	r26, Z+8	; 0x08
    2da4:	b1 85       	ldd	r27, Z+9	; 0x09
    2da6:	91 70       	andi	r25, 0x01	; 1
    2da8:	a0 70       	andi	r26, 0x00	; 0
    2daa:	b0 70       	andi	r27, 0x00	; 0
    2dac:	00 97       	sbiw	r24, 0x00	; 0
    2dae:	a1 05       	cpc	r26, r1
    2db0:	b1 05       	cpc	r27, r1
    2db2:	69 f0       	breq	.+26     	; 0x2dce <f_lseek+0x368>
    2db4:	86 89       	ldd	r24, Z+22	; 0x16
    2db6:	97 89       	ldd	r25, Z+23	; 0x17
    2db8:	a0 8d       	ldd	r26, Z+24	; 0x18
    2dba:	b1 8d       	ldd	r27, Z+25	; 0x19
    2dbc:	8c 15       	cp	r24, r12
    2dbe:	9d 05       	cpc	r25, r13
    2dc0:	ae 05       	cpc	r26, r14
    2dc2:	bf 05       	cpc	r27, r15
    2dc4:	21 f0       	breq	.+8      	; 0x2dce <f_lseek+0x368>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    2dc6:	c6 8a       	std	Z+22, r12	; 0x16
    2dc8:	d7 8a       	std	Z+23, r13	; 0x17
    2dca:	e0 8e       	std	Z+24, r14	; 0x18
    2dcc:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    2dce:	ed 81       	ldd	r30, Y+5	; 0x05
    2dd0:	fe 81       	ldd	r31, Y+6	; 0x06
    2dd2:	86 81       	ldd	r24, Z+6	; 0x06
    2dd4:	97 81       	ldd	r25, Z+7	; 0x07
    2dd6:	a0 85       	ldd	r26, Z+8	; 0x08
    2dd8:	b1 85       	ldd	r27, Z+9	; 0x09
    2dda:	42 85       	ldd	r20, Z+10	; 0x0a
    2ddc:	53 85       	ldd	r21, Z+11	; 0x0b
    2dde:	64 85       	ldd	r22, Z+12	; 0x0c
    2de0:	75 85       	ldd	r23, Z+13	; 0x0d
    2de2:	48 17       	cp	r20, r24
    2de4:	59 07       	cpc	r21, r25
    2de6:	6a 07       	cpc	r22, r26
    2de8:	7b 07       	cpc	r23, r27
    2dea:	48 f4       	brcc	.+18     	; 0x2dfe <f_lseek+0x398>
			fp->fsize = fp->fptr;
    2dec:	82 87       	std	Z+10, r24	; 0x0a
    2dee:	93 87       	std	Z+11, r25	; 0x0b
    2df0:	a4 87       	std	Z+12, r26	; 0x0c
    2df2:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    2df4:	84 81       	ldd	r24, Z+4	; 0x04
    2df6:	80 62       	ori	r24, 0x20	; 32
    2df8:	84 83       	std	Z+4, r24	; 0x04
    2dfa:	01 c0       	rjmp	.+2      	; 0x2dfe <f_lseek+0x398>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2dfc:	12 e0       	ldi	r17, 0x02	; 2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    2dfe:	81 2f       	mov	r24, r17
    2e00:	26 96       	adiw	r28, 0x06	; 6
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	cd bf       	out	0x3d, r28	; 61
    2e0c:	df 91       	pop	r29
    2e0e:	cf 91       	pop	r28
    2e10:	1f 91       	pop	r17
    2e12:	ff 90       	pop	r15
    2e14:	ef 90       	pop	r14
    2e16:	df 90       	pop	r13
    2e18:	cf 90       	pop	r12
    2e1a:	bf 90       	pop	r11
    2e1c:	af 90       	pop	r10
    2e1e:	9f 90       	pop	r9
    2e20:	8f 90       	pop	r8
    2e22:	7f 90       	pop	r7
    2e24:	6f 90       	pop	r6
    2e26:	5f 90       	pop	r5
    2e28:	4f 90       	pop	r4
    2e2a:	3f 90       	pop	r3
    2e2c:	2f 90       	pop	r2
    2e2e:	08 95       	ret

00002e30 <f_opendir>:

FRESULT f_opendir (
	DIRS *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    2e30:	0f 93       	push	r16
    2e32:	1f 93       	push	r17
    2e34:	cf 93       	push	r28
    2e36:	df 93       	push	r29
    2e38:	cd b7       	in	r28, 0x3d	; 61
    2e3a:	de b7       	in	r29, 0x3e	; 62
    2e3c:	2e 97       	sbiw	r28, 0x0e	; 14
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	f8 94       	cli
    2e42:	de bf       	out	0x3e, r29	; 62
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	cd bf       	out	0x3d, r28	; 61
    2e48:	8c 01       	movw	r16, r24
    2e4a:	7e 87       	std	Y+14, r23	; 0x0e
    2e4c:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
    2e4e:	ce 01       	movw	r24, r28
    2e50:	0d 96       	adiw	r24, 0x0d	; 13
    2e52:	b8 01       	movw	r22, r16
    2e54:	40 e0       	ldi	r20, 0x00	; 0
    2e56:	0e 94 c9 01 	call	0x392	; 0x392 <chk_mounted>
	if (res == FR_OK) {
    2e5a:	88 23       	and	r24, r24
    2e5c:	09 f0       	breq	.+2      	; 0x2e60 <f_opendir+0x30>
    2e5e:	4a c0       	rjmp	.+148    	; 0x2ef4 <f_opendir+0xc4>
		INIT_BUF(*dj);
    2e60:	ce 01       	movw	r24, r28
    2e62:	01 96       	adiw	r24, 0x01	; 1
    2e64:	d8 01       	movw	r26, r16
    2e66:	55 96       	adiw	r26, 0x15	; 21
    2e68:	9c 93       	st	X, r25
    2e6a:	8e 93       	st	-X, r24
    2e6c:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    2e6e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2e70:	7e 85       	ldd	r23, Y+14	; 0x0e
    2e72:	c8 01       	movw	r24, r16
    2e74:	0e 94 96 0c 	call	0x192c	; 0x192c <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    2e78:	88 23       	and	r24, r24
    2e7a:	b1 f5       	brne	.+108    	; 0x2ee8 <f_opendir+0xb8>
			if (dj->dir) {						/* It is not the root dir */
    2e7c:	d8 01       	movw	r26, r16
    2e7e:	52 96       	adiw	r26, 0x12	; 18
    2e80:	ed 91       	ld	r30, X+
    2e82:	fc 91       	ld	r31, X
    2e84:	53 97       	sbiw	r26, 0x13	; 19
    2e86:	30 97       	sbiw	r30, 0x00	; 0
    2e88:	01 f1       	breq	.+64     	; 0x2eca <f_opendir+0x9a>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    2e8a:	83 85       	ldd	r24, Z+11	; 0x0b
    2e8c:	84 ff       	sbrs	r24, 4
    2e8e:	2f c0       	rjmp	.+94     	; 0x2eee <f_opendir+0xbe>
					dj->sclust = LD_CLUST(dj->dir);
    2e90:	35 89       	ldd	r19, Z+21	; 0x15
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	84 89       	ldd	r24, Z+20	; 0x14
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	82 2b       	or	r24, r18
    2e9a:	93 2b       	or	r25, r19
    2e9c:	ac 01       	movw	r20, r24
    2e9e:	60 e0       	ldi	r22, 0x00	; 0
    2ea0:	70 e0       	ldi	r23, 0x00	; 0
    2ea2:	ba 01       	movw	r22, r20
    2ea4:	55 27       	eor	r21, r21
    2ea6:	44 27       	eor	r20, r20
    2ea8:	93 8d       	ldd	r25, Z+27	; 0x1b
    2eaa:	80 e0       	ldi	r24, 0x00	; 0
    2eac:	22 8d       	ldd	r18, Z+26	; 0x1a
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	82 2b       	or	r24, r18
    2eb2:	93 2b       	or	r25, r19
    2eb4:	a0 e0       	ldi	r26, 0x00	; 0
    2eb6:	b0 e0       	ldi	r27, 0x00	; 0
    2eb8:	48 2b       	or	r20, r24
    2eba:	59 2b       	or	r21, r25
    2ebc:	6a 2b       	or	r22, r26
    2ebe:	7b 2b       	or	r23, r27
    2ec0:	f8 01       	movw	r30, r16
    2ec2:	46 83       	std	Z+6, r20	; 0x06
    2ec4:	57 83       	std	Z+7, r21	; 0x07
    2ec6:	60 87       	std	Z+8, r22	; 0x08
    2ec8:	71 87       	std	Z+9, r23	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
    2eca:	d8 01       	movw	r26, r16
    2ecc:	ed 91       	ld	r30, X+
    2ece:	fc 91       	ld	r31, X
    2ed0:	11 97       	sbiw	r26, 0x01	; 1
    2ed2:	86 81       	ldd	r24, Z+6	; 0x06
    2ed4:	97 81       	ldd	r25, Z+7	; 0x07
    2ed6:	13 96       	adiw	r26, 0x03	; 3
    2ed8:	9c 93       	st	X, r25
    2eda:	8e 93       	st	-X, r24
    2edc:	12 97       	sbiw	r26, 0x02	; 2
				res = dir_sdi(dj, 0);			/* Rewind dir */
    2ede:	c8 01       	movw	r24, r16
    2ee0:	60 e0       	ldi	r22, 0x00	; 0
    2ee2:	70 e0       	ldi	r23, 0x00	; 0
    2ee4:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <dir_sdi>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2ee8:	84 30       	cpi	r24, 0x04	; 4
    2eea:	19 f0       	breq	.+6      	; 0x2ef2 <f_opendir+0xc2>
    2eec:	03 c0       	rjmp	.+6      	; 0x2ef4 <f_opendir+0xc4>
		if (res == FR_OK) {						/* Follow completed */
			if (dj->dir) {						/* It is not the root dir */
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = LD_CLUST(dj->dir);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    2eee:	85 e0       	ldi	r24, 0x05	; 5
    2ef0:	01 c0       	rjmp	.+2      	; 0x2ef4 <f_opendir+0xc4>
			if (res == FR_OK) {
				dj->id = dj->fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2ef2:	85 e0       	ldi	r24, 0x05	; 5
	}

	LEAVE_FF(dj->fs, res);
}
    2ef4:	2e 96       	adiw	r28, 0x0e	; 14
    2ef6:	0f b6       	in	r0, 0x3f	; 63
    2ef8:	f8 94       	cli
    2efa:	de bf       	out	0x3e, r29	; 62
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	cd bf       	out	0x3d, r28	; 61
    2f00:	df 91       	pop	r29
    2f02:	cf 91       	pop	r28
    2f04:	1f 91       	pop	r17
    2f06:	0f 91       	pop	r16
    2f08:	08 95       	ret

00002f0a <f_readdir>:

FRESULT f_readdir (
	DIRS *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    2f0a:	cf 92       	push	r12
    2f0c:	df 92       	push	r13
    2f0e:	ef 92       	push	r14
    2f10:	ff 92       	push	r15
    2f12:	1f 93       	push	r17
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	2c 97       	sbiw	r28, 0x0c	; 12
    2f1e:	0f b6       	in	r0, 0x3f	; 63
    2f20:	f8 94       	cli
    2f22:	de bf       	out	0x3e, r29	; 62
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	cd bf       	out	0x3d, r28	; 61
    2f28:	7c 01       	movw	r14, r24
    2f2a:	6b 01       	movw	r12, r22
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	62 81       	ldd	r22, Z+2	; 0x02
    2f30:	73 81       	ldd	r23, Z+3	; 0x03
    2f32:	80 81       	ld	r24, Z
    2f34:	91 81       	ldd	r25, Z+1	; 0x01
    2f36:	0e 94 10 01 	call	0x220	; 0x220 <validate>
    2f3a:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    2f3c:	88 23       	and	r24, r24
    2f3e:	81 f5       	brne	.+96     	; 0x2fa0 <f_readdir+0x96>
		if (!fno) {
    2f40:	c1 14       	cp	r12, r1
    2f42:	d1 04       	cpc	r13, r1
    2f44:	39 f4       	brne	.+14     	; 0x2f54 <f_readdir+0x4a>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
    2f46:	c7 01       	movw	r24, r14
    2f48:	60 e0       	ldi	r22, 0x00	; 0
    2f4a:	70 e0       	ldi	r23, 0x00	; 0
    2f4c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <dir_sdi>
    2f50:	18 2f       	mov	r17, r24
    2f52:	26 c0       	rjmp	.+76     	; 0x2fa0 <f_readdir+0x96>
		} else {
			INIT_BUF(*dj);
    2f54:	ce 01       	movw	r24, r28
    2f56:	01 96       	adiw	r24, 0x01	; 1
    2f58:	f7 01       	movw	r30, r14
    2f5a:	95 8b       	std	Z+21, r25	; 0x15
    2f5c:	84 8b       	std	Z+20, r24	; 0x14
			res = dir_read(dj);				/* Read an directory item */
    2f5e:	c7 01       	movw	r24, r14
    2f60:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
    2f64:	84 30       	cpi	r24, 0x04	; 4
    2f66:	31 f4       	brne	.+12     	; 0x2f74 <f_readdir+0x6a>
				dj->sect = 0;
    2f68:	f7 01       	movw	r30, r14
    2f6a:	16 86       	std	Z+14, r1	; 0x0e
    2f6c:	17 86       	std	Z+15, r1	; 0x0f
    2f6e:	10 8a       	std	Z+16, r1	; 0x10
    2f70:	11 8a       	std	Z+17, r1	; 0x11
    2f72:	02 c0       	rjmp	.+4      	; 0x2f78 <f_readdir+0x6e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    2f74:	88 23       	and	r24, r24
    2f76:	89 f4       	brne	.+34     	; 0x2f9a <f_readdir+0x90>
				get_fileinfo(dj, fno);		/* Get the object information */
    2f78:	c7 01       	movw	r24, r14
    2f7a:	b6 01       	movw	r22, r12
    2f7c:	0e 94 7e 00 	call	0xfc	; 0xfc <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
    2f80:	c7 01       	movw	r24, r14
    2f82:	60 e0       	ldi	r22, 0x00	; 0
    2f84:	70 e0       	ldi	r23, 0x00	; 0
    2f86:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <dir_next>
				if (res == FR_NO_FILE) {
    2f8a:	84 30       	cpi	r24, 0x04	; 4
    2f8c:	41 f4       	brne	.+16     	; 0x2f9e <f_readdir+0x94>
					dj->sect = 0;
    2f8e:	f7 01       	movw	r30, r14
    2f90:	16 86       	std	Z+14, r1	; 0x0e
    2f92:	17 86       	std	Z+15, r1	; 0x0f
    2f94:	10 8a       	std	Z+16, r1	; 0x10
    2f96:	11 8a       	std	Z+17, r1	; 0x11
    2f98:	03 c0       	rjmp	.+6      	; 0x2fa0 <f_readdir+0x96>
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
			res = dir_read(dj);				/* Read an directory item */
    2f9a:	18 2f       	mov	r17, r24
    2f9c:	01 c0       	rjmp	.+2      	; 0x2fa0 <f_readdir+0x96>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
    2f9e:	18 2f       	mov	r17, r24
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
    2fa0:	81 2f       	mov	r24, r17
    2fa2:	2c 96       	adiw	r28, 0x0c	; 12
    2fa4:	0f b6       	in	r0, 0x3f	; 63
    2fa6:	f8 94       	cli
    2fa8:	de bf       	out	0x3e, r29	; 62
    2faa:	0f be       	out	0x3f, r0	; 63
    2fac:	cd bf       	out	0x3d, r28	; 61
    2fae:	df 91       	pop	r29
    2fb0:	cf 91       	pop	r28
    2fb2:	1f 91       	pop	r17
    2fb4:	ff 90       	pop	r15
    2fb6:	ef 90       	pop	r14
    2fb8:	df 90       	pop	r13
    2fba:	cf 90       	pop	r12
    2fbc:	08 95       	ret

00002fbe <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    2fbe:	ef 92       	push	r14
    2fc0:	ff 92       	push	r15
    2fc2:	1f 93       	push	r17
    2fc4:	cf 93       	push	r28
    2fc6:	df 93       	push	r29
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
    2fcc:	a4 97       	sbiw	r28, 0x24	; 36
    2fce:	0f b6       	in	r0, 0x3f	; 63
    2fd0:	f8 94       	cli
    2fd2:	de bf       	out	0x3e, r29	; 62
    2fd4:	0f be       	out	0x3f, r0	; 63
    2fd6:	cd bf       	out	0x3d, r28	; 61
    2fd8:	9c a3       	lds	r25, 0x5c
    2fda:	8b a3       	lds	r24, 0x5b
    2fdc:	7b 01       	movw	r14, r22
	FRESULT res;
	DIRS dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    2fde:	ce 01       	movw	r24, r28
    2fe0:	83 96       	adiw	r24, 0x23	; 35
    2fe2:	be 01       	movw	r22, r28
    2fe4:	6f 5f       	subi	r22, 0xFF	; 255
    2fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe8:	40 e0       	ldi	r20, 0x00	; 0
    2fea:	0e 94 c9 01 	call	0x392	; 0x392 <chk_mounted>
    2fee:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    2ff0:	88 23       	and	r24, r24
    2ff2:	c1 f4       	brne	.+48     	; 0x3024 <f_stat+0x66>
		INIT_BUF(dj);
    2ff4:	ce 01       	movw	r24, r28
    2ff6:	47 96       	adiw	r24, 0x17	; 23
    2ff8:	9e 8b       	std	Y+22, r25	; 0x16
    2ffa:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    2ffc:	6b a1       	lds	r22, 0x4b
    2ffe:	7c a1       	lds	r23, 0x4c
    3000:	ce 01       	movw	r24, r28
    3002:	01 96       	adiw	r24, 0x01	; 1
    3004:	0e 94 96 0c 	call	0x192c	; 0x192c <follow_path>
    3008:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follow completed */
    300a:	88 23       	and	r24, r24
    300c:	59 f4       	brne	.+22     	; 0x3024 <f_stat+0x66>
			if (dj.dir)		/* Found an object */
    300e:	8b 89       	ldd	r24, Y+19	; 0x13
    3010:	9c 89       	ldd	r25, Y+20	; 0x14
    3012:	00 97       	sbiw	r24, 0x00	; 0
    3014:	31 f0       	breq	.+12     	; 0x3022 <f_stat+0x64>
				get_fileinfo(&dj, fno);
    3016:	ce 01       	movw	r24, r28
    3018:	01 96       	adiw	r24, 0x01	; 1
    301a:	b7 01       	movw	r22, r14
    301c:	0e 94 7e 00 	call	0xfc	; 0xfc <get_fileinfo>
    3020:	01 c0       	rjmp	.+2      	; 0x3024 <f_stat+0x66>
			else			/* It is root dir */
				res = FR_INVALID_NAME;
    3022:	16 e0       	ldi	r17, 0x06	; 6
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    3024:	81 2f       	mov	r24, r17
    3026:	a4 96       	adiw	r28, 0x24	; 36
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	df 91       	pop	r29
    3034:	cf 91       	pop	r28
    3036:	1f 91       	pop	r17
    3038:	ff 90       	pop	r15
    303a:	ef 90       	pop	r14
    303c:	08 95       	ret

0000303e <f_getfree>:
FRESULT f_getfree (
	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    303e:	2f 92       	push	r2
    3040:	3f 92       	push	r3
    3042:	4f 92       	push	r4
    3044:	5f 92       	push	r5
    3046:	6f 92       	push	r6
    3048:	7f 92       	push	r7
    304a:	8f 92       	push	r8
    304c:	9f 92       	push	r9
    304e:	af 92       	push	r10
    3050:	bf 92       	push	r11
    3052:	cf 92       	push	r12
    3054:	df 92       	push	r13
    3056:	ef 92       	push	r14
    3058:	ff 92       	push	r15
    305a:	0f 93       	push	r16
    305c:	1f 93       	push	r17
    305e:	cf 93       	push	r28
    3060:	df 93       	push	r29
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	2a 97       	sbiw	r28, 0x0a	; 10
    3068:	0f b6       	in	r0, 0x3f	; 63
    306a:	f8 94       	cli
    306c:	de bf       	out	0x3e, r29	; 62
    306e:	0f be       	out	0x3f, r0	; 63
    3070:	cd bf       	out	0x3d, r28	; 61
    3072:	9a 83       	std	Y+2, r25	; 0x02
    3074:	89 83       	std	Y+1, r24	; 0x01
    3076:	7c 83       	std	Y+4, r23	; 0x04
    3078:	6b 83       	std	Y+3, r22	; 0x03
    307a:	3a 01       	movw	r6, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    307c:	ce 01       	movw	r24, r28
    307e:	01 96       	adiw	r24, 0x01	; 1
    3080:	ba 01       	movw	r22, r20
    3082:	40 e0       	ldi	r20, 0x00	; 0
    3084:	0e 94 c9 01 	call	0x392	; 0x392 <chk_mounted>
    3088:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    308a:	88 23       	and	r24, r24
    308c:	09 f0       	breq	.+2      	; 0x3090 <f_getfree+0x52>
    308e:	fb c0       	rjmp	.+502    	; 0x3286 <f_getfree+0x248>
		/* If free_clust is valid, return it without full cluster scan */
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
    3090:	d3 01       	movw	r26, r6
    3092:	ed 91       	ld	r30, X+
    3094:	fc 91       	ld	r31, X
    3096:	86 85       	ldd	r24, Z+14	; 0x0e
    3098:	97 85       	ldd	r25, Z+15	; 0x0f
    309a:	a0 89       	ldd	r26, Z+16	; 0x10
    309c:	b1 89       	ldd	r27, Z+17	; 0x11
    309e:	c6 88       	ldd	r12, Z+22	; 0x16
    30a0:	d7 88       	ldd	r13, Z+23	; 0x17
    30a2:	e0 8c       	ldd	r14, Z+24	; 0x18
    30a4:	f1 8c       	ldd	r15, Z+25	; 0x19
    30a6:	b7 01       	movw	r22, r14
    30a8:	a6 01       	movw	r20, r12
    30aa:	42 50       	subi	r20, 0x02	; 2
    30ac:	50 40       	sbci	r21, 0x00	; 0
    30ae:	60 40       	sbci	r22, 0x00	; 0
    30b0:	70 40       	sbci	r23, 0x00	; 0
    30b2:	48 17       	cp	r20, r24
    30b4:	59 07       	cpc	r21, r25
    30b6:	6a 07       	cpc	r22, r26
    30b8:	7b 07       	cpc	r23, r27
    30ba:	38 f0       	brcs	.+14     	; 0x30ca <f_getfree+0x8c>
			*nclst = (*fatfs)->free_clust;
    30bc:	eb 81       	ldd	r30, Y+3	; 0x03
    30be:	fc 81       	ldd	r31, Y+4	; 0x04
    30c0:	80 83       	st	Z, r24
    30c2:	91 83       	std	Z+1, r25	; 0x01
    30c4:	a2 83       	std	Z+2, r26	; 0x02
    30c6:	b3 83       	std	Z+3, r27	; 0x03
    30c8:	de c0       	rjmp	.+444    	; 0x3286 <f_getfree+0x248>
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
    30ca:	00 81       	ld	r16, Z
			n = 0;
			if (fat == FS_FAT12) {
    30cc:	01 30       	cpi	r16, 0x01	; 1
    30ce:	09 f0       	breq	.+2      	; 0x30d2 <f_getfree+0x94>
    30d0:	3f c0       	rjmp	.+126    	; 0x3150 <f_getfree+0x112>
    30d2:	cc 24       	eor	r12, r12
    30d4:	dd 24       	eor	r13, r13
    30d6:	76 01       	movw	r14, r12
    30d8:	68 94       	set
    30da:	c1 f8       	bld	r12, 1
    30dc:	88 24       	eor	r8, r8
    30de:	99 24       	eor	r9, r9
    30e0:	54 01       	movw	r10, r8
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
    30e2:	d3 01       	movw	r26, r6
    30e4:	8d 91       	ld	r24, X+
    30e6:	9c 91       	ld	r25, X
    30e8:	b7 01       	movw	r22, r14
    30ea:	a6 01       	movw	r20, r12
    30ec:	0e 94 4f 07 	call	0xe9e	; 0xe9e <get_fat>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    30f4:	8f 3f       	cpi	r24, 0xFF	; 255
    30f6:	ef ef       	ldi	r30, 0xFF	; 255
    30f8:	9e 07       	cpc	r25, r30
    30fa:	ef ef       	ldi	r30, 0xFF	; 255
    30fc:	ae 07       	cpc	r26, r30
    30fe:	ef ef       	ldi	r30, 0xFF	; 255
    3100:	be 07       	cpc	r27, r30
    3102:	09 f4       	brne	.+2      	; 0x3106 <f_getfree+0xc8>
    3104:	a4 c0       	rjmp	.+328    	; 0x324e <f_getfree+0x210>
					if (stat == 1) { res = FR_INT_ERR; break; }
    3106:	81 30       	cpi	r24, 0x01	; 1
    3108:	91 05       	cpc	r25, r1
    310a:	a1 05       	cpc	r26, r1
    310c:	b1 05       	cpc	r27, r1
    310e:	09 f4       	brne	.+2      	; 0x3112 <f_getfree+0xd4>
    3110:	a0 c0       	rjmp	.+320    	; 0x3252 <f_getfree+0x214>
					if (stat == 0) n++;
    3112:	00 97       	sbiw	r24, 0x00	; 0
    3114:	a1 05       	cpc	r26, r1
    3116:	b1 05       	cpc	r27, r1
    3118:	29 f4       	brne	.+10     	; 0x3124 <f_getfree+0xe6>
    311a:	08 94       	sec
    311c:	81 1c       	adc	r8, r1
    311e:	91 1c       	adc	r9, r1
    3120:	a1 1c       	adc	r10, r1
    3122:	b1 1c       	adc	r11, r1
				} while (++clst < (*fatfs)->n_fatent);
    3124:	08 94       	sec
    3126:	c1 1c       	adc	r12, r1
    3128:	d1 1c       	adc	r13, r1
    312a:	e1 1c       	adc	r14, r1
    312c:	f1 1c       	adc	r15, r1
    312e:	d3 01       	movw	r26, r6
    3130:	ed 91       	ld	r30, X+
    3132:	fc 91       	ld	r31, X
    3134:	86 89       	ldd	r24, Z+22	; 0x16
    3136:	97 89       	ldd	r25, Z+23	; 0x17
    3138:	a0 8d       	ldd	r26, Z+24	; 0x18
    313a:	b1 8d       	ldd	r27, Z+25	; 0x19
    313c:	c8 16       	cp	r12, r24
    313e:	d9 06       	cpc	r13, r25
    3140:	ea 06       	cpc	r14, r26
    3142:	fb 06       	cpc	r15, r27
    3144:	70 f2       	brcs	.-100    	; 0x30e2 <f_getfree+0xa4>
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			(*fatfs)->free_clust = n;
    3146:	86 86       	std	Z+14, r8	; 0x0e
    3148:	97 86       	std	Z+15, r9	; 0x0f
    314a:	a0 8a       	std	Z+16, r10	; 0x10
    314c:	b1 8a       	std	Z+17, r11	; 0x11
    314e:	95 c0       	rjmp	.+298    	; 0x327a <f_getfree+0x23c>
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) n++;
				} while (++clst < (*fatfs)->n_fatent);
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
    3150:	26 8c       	ldd	r2, Z+30	; 0x1e
    3152:	37 8c       	ldd	r3, Z+31	; 0x1f
    3154:	40 a0       	lds	r20, 0x00
    3156:	51 a0       	lds	r21, 0x81
				i = 0; p = 0;
    3158:	e0 e0       	ldi	r30, 0x00	; 0
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
			*nclst = (*fatfs)->free_clust;
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
			n = 0;
    3160:	88 24       	eor	r8, r8
    3162:	99 24       	eor	r9, r9
    3164:	54 01       	movw	r10, r8
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
						if (res != FR_OK) break;
						p = (*fatfs)->win;
						i = SS(*fatfs);
    3166:	7e 82       	std	Y+6, r7	; 0x06
    3168:	6d 82       	std	Y+5, r6	; 0x05
    316a:	32 01       	movw	r6, r4
    316c:	21 01       	movw	r4, r2
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
    316e:	21 15       	cp	r18, r1
    3170:	31 05       	cpc	r19, r1
    3172:	c1 f4       	brne	.+48     	; 0x31a4 <f_getfree+0x166>
						res = move_window(*fatfs, sect++);
    3174:	ed 81       	ldd	r30, Y+5	; 0x05
    3176:	fe 81       	ldd	r31, Y+6	; 0x06
    3178:	80 81       	ld	r24, Z
    317a:	91 81       	ldd	r25, Z+1	; 0x01
    317c:	b3 01       	movw	r22, r6
    317e:	a2 01       	movw	r20, r4
    3180:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
						if (res != FR_OK) break;
    3184:	88 23       	and	r24, r24
    3186:	09 f0       	breq	.+2      	; 0x318a <f_getfree+0x14c>
    3188:	66 c0       	rjmp	.+204    	; 0x3256 <f_getfree+0x218>
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
    318a:	08 94       	sec
    318c:	41 1c       	adc	r4, r1
    318e:	51 1c       	adc	r5, r1
    3190:	61 1c       	adc	r6, r1
    3192:	71 1c       	adc	r7, r1
						if (res != FR_OK) break;
						p = (*fatfs)->win;
    3194:	ad 81       	ldd	r26, Y+5	; 0x05
    3196:	be 81       	ldd	r27, Y+6	; 0x06
    3198:	ed 91       	ld	r30, X+
    319a:	fc 91       	ld	r31, X
    319c:	11 97       	sbiw	r26, 0x01	; 1
    319e:	be 96       	adiw	r30, 0x2e	; 46
						i = SS(*fatfs);
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	32 e0       	ldi	r19, 0x02	; 2
					}
					if (fat == FS_FAT16) {
    31a4:	02 30       	cpi	r16, 0x02	; 2
    31a6:	a1 f4       	brne	.+40     	; 0x31d0 <f_getfree+0x192>
						if (LD_WORD(p) == 0) n++;
    31a8:	b1 81       	ldd	r27, Z+1	; 0x01
    31aa:	b8 87       	std	Y+8, r27	; 0x08
    31ac:	1f 82       	std	Y+7, r1	; 0x07
    31ae:	80 81       	ld	r24, Z
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	4f 81       	ldd	r20, Y+7	; 0x07
    31b4:	58 85       	ldd	r21, Y+8	; 0x08
    31b6:	84 2b       	or	r24, r20
    31b8:	95 2b       	or	r25, r21
    31ba:	00 97       	sbiw	r24, 0x00	; 0
    31bc:	29 f4       	brne	.+10     	; 0x31c8 <f_getfree+0x18a>
    31be:	08 94       	sec
    31c0:	81 1c       	adc	r8, r1
    31c2:	91 1c       	adc	r9, r1
    31c4:	a1 1c       	adc	r10, r1
    31c6:	b1 1c       	adc	r11, r1
						p += 2; i -= 2;
    31c8:	32 96       	adiw	r30, 0x02	; 2
    31ca:	22 50       	subi	r18, 0x02	; 2
    31cc:	30 40       	sbci	r19, 0x00	; 0
    31ce:	31 c0       	rjmp	.+98     	; 0x3232 <f_getfree+0x1f4>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    31d0:	83 81       	ldd	r24, Z+3	; 0x03
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	a0 e0       	ldi	r26, 0x00	; 0
    31d6:	b0 e0       	ldi	r27, 0x00	; 0
    31d8:	78 2f       	mov	r23, r24
    31da:	66 27       	eor	r22, r22
    31dc:	55 27       	eor	r21, r21
    31de:	44 27       	eor	r20, r20
    31e0:	82 81       	ldd	r24, Z+2	; 0x02
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	a0 e0       	ldi	r26, 0x00	; 0
    31e6:	b0 e0       	ldi	r27, 0x00	; 0
    31e8:	dc 01       	movw	r26, r24
    31ea:	99 27       	eor	r25, r25
    31ec:	88 27       	eor	r24, r24
    31ee:	48 2b       	or	r20, r24
    31f0:	59 2b       	or	r21, r25
    31f2:	6a 2b       	or	r22, r26
    31f4:	7b 2b       	or	r23, r27
    31f6:	80 81       	ld	r24, Z
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	a0 e0       	ldi	r26, 0x00	; 0
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	84 2b       	or	r24, r20
    3200:	95 2b       	or	r25, r21
    3202:	a6 2b       	or	r26, r22
    3204:	b7 2b       	or	r27, r23
    3206:	31 80       	ldd	r3, Z+1	; 0x01
    3208:	22 24       	eor	r2, r2
    320a:	a1 01       	movw	r20, r2
    320c:	60 e0       	ldi	r22, 0x00	; 0
    320e:	70 e0       	ldi	r23, 0x00	; 0
    3210:	84 2b       	or	r24, r20
    3212:	95 2b       	or	r25, r21
    3214:	a6 2b       	or	r26, r22
    3216:	b7 2b       	or	r27, r23
    3218:	bf 70       	andi	r27, 0x0F	; 15
    321a:	00 97       	sbiw	r24, 0x00	; 0
    321c:	a1 05       	cpc	r26, r1
    321e:	b1 05       	cpc	r27, r1
    3220:	29 f4       	brne	.+10     	; 0x322c <f_getfree+0x1ee>
    3222:	08 94       	sec
    3224:	81 1c       	adc	r8, r1
    3226:	91 1c       	adc	r9, r1
    3228:	a1 1c       	adc	r10, r1
    322a:	b1 1c       	adc	r11, r1
						p += 4; i -= 4;
    322c:	34 96       	adiw	r30, 0x04	; 4
    322e:	24 50       	subi	r18, 0x04	; 4
    3230:	30 40       	sbci	r19, 0x00	; 0
					}
				} while (--clst);
    3232:	08 94       	sec
    3234:	c1 08       	sbc	r12, r1
    3236:	d1 08       	sbc	r13, r1
    3238:	e1 08       	sbc	r14, r1
    323a:	f1 08       	sbc	r15, r1
    323c:	c1 14       	cp	r12, r1
    323e:	d1 04       	cpc	r13, r1
    3240:	e1 04       	cpc	r14, r1
    3242:	f1 04       	cpc	r15, r1
    3244:	09 f0       	breq	.+2      	; 0x3248 <f_getfree+0x20a>
    3246:	93 cf       	rjmp	.-218    	; 0x316e <f_getfree+0x130>
    3248:	6d 80       	ldd	r6, Y+5	; 0x05
    324a:	7e 80       	ldd	r7, Y+6	; 0x06
    324c:	07 c0       	rjmp	.+14     	; 0x325c <f_getfree+0x21e>
			n = 0;
			if (fat == FS_FAT12) {
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    324e:	11 e0       	ldi	r17, 0x01	; 1
    3250:	05 c0       	rjmp	.+10     	; 0x325c <f_getfree+0x21e>
					if (stat == 1) { res = FR_INT_ERR; break; }
    3252:	12 e0       	ldi	r17, 0x02	; 2
    3254:	03 c0       	rjmp	.+6      	; 0x325c <f_getfree+0x21e>
    3256:	6d 80       	ldd	r6, Y+5	; 0x05
    3258:	7e 80       	ldd	r7, Y+6	; 0x06
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
    325a:	18 2f       	mov	r17, r24
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			(*fatfs)->free_clust = n;
    325c:	d3 01       	movw	r26, r6
    325e:	ed 91       	ld	r30, X+
    3260:	fc 91       	ld	r31, X
    3262:	11 97       	sbiw	r26, 0x01	; 1
    3264:	86 86       	std	Z+14, r8	; 0x0e
    3266:	97 86       	std	Z+15, r9	; 0x0f
    3268:	a0 8a       	std	Z+16, r10	; 0x10
    326a:	b1 8a       	std	Z+17, r11	; 0x11
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    326c:	03 30       	cpi	r16, 0x03	; 3
    326e:	29 f4       	brne	.+10     	; 0x327a <f_getfree+0x23c>
    3270:	ed 91       	ld	r30, X+
    3272:	fc 91       	ld	r31, X
    3274:	11 97       	sbiw	r26, 0x01	; 1
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	85 83       	std	Z+5, r24	; 0x05
			*nclst = n;
    327a:	eb 81       	ldd	r30, Y+3	; 0x03
    327c:	fc 81       	ldd	r31, Y+4	; 0x04
    327e:	80 82       	st	Z, r8
    3280:	91 82       	std	Z+1, r9	; 0x01
    3282:	a2 82       	std	Z+2, r10	; 0x02
    3284:	b3 82       	std	Z+3, r11	; 0x03
		}
	}
	LEAVE_FF(*fatfs, res);
}
    3286:	81 2f       	mov	r24, r17
    3288:	2a 96       	adiw	r28, 0x0a	; 10
    328a:	0f b6       	in	r0, 0x3f	; 63
    328c:	f8 94       	cli
    328e:	de bf       	out	0x3e, r29	; 62
    3290:	0f be       	out	0x3f, r0	; 63
    3292:	cd bf       	out	0x3d, r28	; 61
    3294:	df 91       	pop	r29
    3296:	cf 91       	pop	r28
    3298:	1f 91       	pop	r17
    329a:	0f 91       	pop	r16
    329c:	ff 90       	pop	r15
    329e:	ef 90       	pop	r14
    32a0:	df 90       	pop	r13
    32a2:	cf 90       	pop	r12
    32a4:	bf 90       	pop	r11
    32a6:	af 90       	pop	r10
    32a8:	9f 90       	pop	r9
    32aa:	8f 90       	pop	r8
    32ac:	7f 90       	pop	r7
    32ae:	6f 90       	pop	r6
    32b0:	5f 90       	pop	r5
    32b2:	4f 90       	pop	r4
    32b4:	3f 90       	pop	r3
    32b6:	2f 90       	pop	r2
    32b8:	08 95       	ret

000032ba <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    32ba:	cf 92       	push	r12
    32bc:	df 92       	push	r13
    32be:	ef 92       	push	r14
    32c0:	ff 92       	push	r15
    32c2:	0f 93       	push	r16
    32c4:	1f 93       	push	r17
    32c6:	cf 93       	push	r28
    32c8:	df 93       	push	r29
    32ca:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    32cc:	6a 81       	ldd	r22, Y+2	; 0x02
    32ce:	7b 81       	ldd	r23, Y+3	; 0x03
    32d0:	88 81       	ld	r24, Y
    32d2:	99 81       	ldd	r25, Y+1	; 0x01
    32d4:	0e 94 10 01 	call	0x220	; 0x220 <validate>
	if (res == FR_OK) {
    32d8:	88 23       	and	r24, r24
    32da:	09 f0       	breq	.+2      	; 0x32de <f_truncate+0x24>
    32dc:	63 c0       	rjmp	.+198    	; 0x33a4 <f_truncate+0xea>
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
    32de:	9c 81       	ldd	r25, Y+4	; 0x04
    32e0:	99 23       	and	r25, r25
    32e2:	24 f0       	brlt	.+8      	; 0x32ec <f_truncate+0x32>
			res = FR_INT_ERR;
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
    32e4:	91 fd       	sbrc	r25, 1
    32e6:	67 c0       	rjmp	.+206    	; 0x33b6 <f_truncate+0xfc>
				res = FR_DENIED;
    32e8:	87 e0       	ldi	r24, 0x07	; 7
    32ea:	5c c0       	rjmp	.+184    	; 0x33a4 <f_truncate+0xea>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
			res = FR_INT_ERR;
    32ec:	82 e0       	ldi	r24, 0x02	; 2
    32ee:	5a c0       	rjmp	.+180    	; 0x33a4 <f_truncate+0xea>
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    32f0:	4a 87       	std	Y+10, r20	; 0x0a
    32f2:	5b 87       	std	Y+11, r21	; 0x0b
    32f4:	6c 87       	std	Y+12, r22	; 0x0c
    32f6:	7d 87       	std	Y+13, r23	; 0x0d
			fp->flag |= FA__WRITTEN;
    32f8:	8c 81       	ldd	r24, Y+4	; 0x04
    32fa:	80 62       	ori	r24, 0x20	; 32
    32fc:	8c 83       	std	Y+4, r24	; 0x04
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    32fe:	41 15       	cp	r20, r1
    3300:	51 05       	cpc	r21, r1
    3302:	61 05       	cpc	r22, r1
    3304:	71 05       	cpc	r23, r1
    3306:	69 f4       	brne	.+26     	; 0x3322 <f_truncate+0x68>
				res = remove_chain(fp->fs, fp->sclust);
    3308:	4e 85       	ldd	r20, Y+14	; 0x0e
    330a:	5f 85       	ldd	r21, Y+15	; 0x0f
    330c:	68 89       	ldd	r22, Y+16	; 0x10
    330e:	79 89       	ldd	r23, Y+17	; 0x11
    3310:	88 81       	ld	r24, Y
    3312:	99 81       	ldd	r25, Y+1	; 0x01
    3314:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <remove_chain>
				fp->sclust = 0;
    3318:	1e 86       	std	Y+14, r1	; 0x0e
    331a:	1f 86       	std	Y+15, r1	; 0x0f
    331c:	18 8a       	std	Y+16, r1	; 0x10
    331e:	19 8a       	std	Y+17, r1	; 0x11
    3320:	3c c0       	rjmp	.+120    	; 0x339a <f_truncate+0xe0>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
    3322:	4a 89       	ldd	r20, Y+18	; 0x12
    3324:	5b 89       	ldd	r21, Y+19	; 0x13
    3326:	6c 89       	ldd	r22, Y+20	; 0x14
    3328:	7d 89       	ldd	r23, Y+21	; 0x15
    332a:	88 81       	ld	r24, Y
    332c:	99 81       	ldd	r25, Y+1	; 0x01
    332e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <get_fat>
    3332:	6b 01       	movw	r12, r22
    3334:	7c 01       	movw	r14, r24
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	c8 16       	cp	r12, r24
    333a:	d1 04       	cpc	r13, r1
    333c:	e1 04       	cpc	r14, r1
    333e:	f1 04       	cpc	r15, r1
    3340:	09 f4       	brne	.+2      	; 0x3344 <f_truncate+0x8a>
    3342:	48 c0       	rjmp	.+144    	; 0x33d4 <f_truncate+0x11a>
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
				res = remove_chain(fp->fs, fp->sclust);
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
				res = FR_OK;
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	9f ef       	ldi	r25, 0xFF	; 255
    3348:	c9 16       	cp	r12, r25
    334a:	9f ef       	ldi	r25, 0xFF	; 255
    334c:	d9 06       	cpc	r13, r25
    334e:	9f ef       	ldi	r25, 0xFF	; 255
    3350:	e9 06       	cpc	r14, r25
    3352:	9f ef       	ldi	r25, 0xFF	; 255
    3354:	f9 06       	cpc	r15, r25
    3356:	09 f0       	breq	.+2      	; 0x335a <f_truncate+0xa0>
    3358:	80 e0       	ldi	r24, 0x00	; 0
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
    335a:	88 23       	and	r24, r24
    335c:	01 f5       	brne	.+64     	; 0x339e <f_truncate+0xe4>
    335e:	e8 81       	ld	r30, Y
    3360:	f9 81       	ldd	r31, Y+1	; 0x01
    3362:	46 89       	ldd	r20, Z+22	; 0x16
    3364:	57 89       	ldd	r21, Z+23	; 0x17
    3366:	60 8d       	ldd	r22, Z+24	; 0x18
    3368:	71 8d       	ldd	r23, Z+25	; 0x19
    336a:	c4 16       	cp	r12, r20
    336c:	d5 06       	cpc	r13, r21
    336e:	e6 06       	cpc	r14, r22
    3370:	f7 06       	cpc	r15, r23
    3372:	c0 f4       	brcc	.+48     	; 0x33a4 <f_truncate+0xea>
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
    3374:	4a 89       	ldd	r20, Y+18	; 0x12
    3376:	5b 89       	ldd	r21, Y+19	; 0x13
    3378:	6c 89       	ldd	r22, Y+20	; 0x14
    337a:	7d 89       	ldd	r23, Y+21	; 0x15
    337c:	cf 01       	movw	r24, r30
    337e:	0f ef       	ldi	r16, 0xFF	; 255
    3380:	1f ef       	ldi	r17, 0xFF	; 255
    3382:	2f ef       	ldi	r18, 0xFF	; 255
    3384:	3f e0       	ldi	r19, 0x0F	; 15
    3386:	0e 94 3e 09 	call	0x127c	; 0x127c <put_fat>
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    338a:	88 23       	and	r24, r24
    338c:	41 f4       	brne	.+16     	; 0x339e <f_truncate+0xe4>
    338e:	88 81       	ld	r24, Y
    3390:	99 81       	ldd	r25, Y+1	; 0x01
    3392:	b7 01       	movw	r22, r14
    3394:	a6 01       	movw	r20, r12
    3396:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <remove_chain>
				}
			}
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
    339a:	88 23       	and	r24, r24
    339c:	19 f0       	breq	.+6      	; 0x33a4 <f_truncate+0xea>
    339e:	9c 81       	ldd	r25, Y+4	; 0x04
    33a0:	90 68       	ori	r25, 0x80	; 128
    33a2:	9c 83       	std	Y+4, r25	; 0x04
	}

	LEAVE_FF(fp->fs, res);
}
    33a4:	df 91       	pop	r29
    33a6:	cf 91       	pop	r28
    33a8:	1f 91       	pop	r17
    33aa:	0f 91       	pop	r16
    33ac:	ff 90       	pop	r15
    33ae:	ef 90       	pop	r14
    33b0:	df 90       	pop	r13
    33b2:	cf 90       	pop	r12
    33b4:	08 95       	ret
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
    33b6:	4e 81       	ldd	r20, Y+6	; 0x06
    33b8:	5f 81       	ldd	r21, Y+7	; 0x07
    33ba:	68 85       	ldd	r22, Y+8	; 0x08
    33bc:	79 85       	ldd	r23, Y+9	; 0x09
    33be:	0a 85       	ldd	r16, Y+10	; 0x0a
    33c0:	1b 85       	ldd	r17, Y+11	; 0x0b
    33c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    33c4:	3d 85       	ldd	r19, Y+13	; 0x0d
    33c6:	40 17       	cp	r20, r16
    33c8:	51 07       	cpc	r21, r17
    33ca:	62 07       	cpc	r22, r18
    33cc:	73 07       	cpc	r23, r19
    33ce:	08 f4       	brcc	.+2      	; 0x33d2 <f_truncate+0x118>
    33d0:	8f cf       	rjmp	.-226    	; 0x32f0 <f_truncate+0x36>
    33d2:	e8 cf       	rjmp	.-48     	; 0x33a4 <f_truncate+0xea>
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
    33d4:	82 e0       	ldi	r24, 0x02	; 2
    33d6:	e3 cf       	rjmp	.-58     	; 0x339e <f_truncate+0xe4>

000033d8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    33d8:	cf 92       	push	r12
    33da:	df 92       	push	r13
    33dc:	ef 92       	push	r14
    33de:	ff 92       	push	r15
    33e0:	cf 93       	push	r28
    33e2:	df 93       	push	r29
    33e4:	cd b7       	in	r28, 0x3d	; 61
    33e6:	de b7       	in	r29, 0x3e	; 62
    33e8:	ea 97       	sbiw	r28, 0x3a	; 58
    33ea:	0f b6       	in	r0, 0x3f	; 63
    33ec:	f8 94       	cli
    33ee:	de bf       	out	0x3e, r29	; 62
    33f0:	0f be       	out	0x3f, r0	; 63
    33f2:	cd bf       	out	0x3d, r28	; 61
    33f4:	9a af       	sts	0x7a, r25
    33f6:	89 af       	sts	0x79, r24
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    33f8:	ce 01       	movw	r24, r28
    33fa:	c9 96       	adiw	r24, 0x39	; 57
    33fc:	be 01       	movw	r22, r28
    33fe:	6f 5f       	subi	r22, 0xFF	; 255
    3400:	7f 4f       	sbci	r23, 0xFF	; 255
    3402:	41 e0       	ldi	r20, 0x01	; 1
    3404:	0e 94 c9 01 	call	0x392	; 0x392 <chk_mounted>
	if (res == FR_OK) {
    3408:	88 23       	and	r24, r24
    340a:	09 f0       	breq	.+2      	; 0x340e <f_unlink+0x36>
    340c:	4f c0       	rjmp	.+158    	; 0x34ac <f_unlink+0xd4>
		INIT_BUF(dj);
    340e:	ce 01       	movw	r24, r28
    3410:	8d 96       	adiw	r24, 0x2d	; 45
    3412:	9e 8b       	std	Y+22, r25	; 0x16
    3414:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the file path */
    3416:	69 ad       	sts	0x69, r22
    3418:	7a ad       	sts	0x6a, r23
    341a:	ce 01       	movw	r24, r28
    341c:	01 96       	adiw	r24, 0x01	; 1
    341e:	0e 94 96 0c 	call	0x192c	; 0x192c <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    3422:	88 23       	and	r24, r24
    3424:	09 f0       	breq	.+2      	; 0x3428 <f_unlink+0x50>
    3426:	42 c0       	rjmp	.+132    	; 0x34ac <f_unlink+0xd4>
			dir = dj.dir;
    3428:	eb 89       	ldd	r30, Y+19	; 0x13
    342a:	fc 89       	ldd	r31, Y+20	; 0x14
			if (!dir) {
    342c:	30 97       	sbiw	r30, 0x00	; 0
    342e:	29 f0       	breq	.+10     	; 0x343a <f_unlink+0x62>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    3430:	83 85       	ldd	r24, Z+11	; 0x0b
    3432:	80 ff       	sbrs	r24, 0
    3434:	51 c0       	rjmp	.+162    	; 0x34d8 <f_unlink+0x100>
					res = FR_DENIED;		/* Cannot remove R/O object */
    3436:	87 e0       	ldi	r24, 0x07	; 7
    3438:	39 c0       	rjmp	.+114    	; 0x34ac <f_unlink+0xd4>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    343a:	86 e0       	ldi	r24, 0x06	; 6
    343c:	37 c0       	rjmp	.+110    	; 0x34ac <f_unlink+0xd4>
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
				if (dclst < 2) {
    343e:	82 e0       	ldi	r24, 0x02	; 2
    3440:	c8 16       	cp	r12, r24
    3442:	d1 04       	cpc	r13, r1
    3444:	e1 04       	cpc	r14, r1
    3446:	f1 04       	cpc	r15, r1
    3448:	f0 f1       	brcs	.+124    	; 0x34c6 <f_unlink+0xee>
					res = FR_INT_ERR;
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIRS));	/* Check if the sub-dir is empty or not */
    344a:	ce 01       	movw	r24, r28
    344c:	47 96       	adiw	r24, 0x17	; 23
    344e:	be 01       	movw	r22, r28
    3450:	6f 5f       	subi	r22, 0xFF	; 255
    3452:	7f 4f       	sbci	r23, 0xFF	; 255
    3454:	46 e1       	ldi	r20, 0x16	; 22
    3456:	50 e0       	ldi	r21, 0x00	; 0
    3458:	0e 94 67 00 	call	0xce	; 0xce <mem_cpy>
					sdj.sclust = dclst;
    345c:	cd 8e       	std	Y+29, r12	; 0x1d
    345e:	de 8e       	std	Y+30, r13	; 0x1e
    3460:	ef 8e       	std	Y+31, r14	; 0x1f
    3462:	f8 a2       	lds	r31, 0x98
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    3464:	ce 01       	movw	r24, r28
    3466:	47 96       	adiw	r24, 0x17	; 23
    3468:	62 e0       	ldi	r22, 0x02	; 2
    346a:	70 e0       	ldi	r23, 0x00	; 0
    346c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <dir_sdi>
					if (res == FR_OK) {
    3470:	88 23       	and	r24, r24
    3472:	e1 f4       	brne	.+56     	; 0x34ac <f_unlink+0xd4>
						res = dir_read(&sdj);
    3474:	ce 01       	movw	r24, r28
    3476:	47 96       	adiw	r24, 0x17	; 23
    3478:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <dir_read>
						if (res == FR_OK			/* Not empty dir */
    347c:	88 23       	and	r24, r24
    347e:	19 f0       	breq	.+6      	; 0x3486 <f_unlink+0xae>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    3480:	84 30       	cpi	r24, 0x04	; 4
    3482:	19 f1       	breq	.+70     	; 0x34ca <f_unlink+0xf2>
    3484:	13 c0       	rjmp	.+38     	; 0x34ac <f_unlink+0xd4>
						res = dir_read(&sdj);
						if (res == FR_OK			/* Not empty dir */
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
    3486:	87 e0       	ldi	r24, 0x07	; 7
    3488:	11 c0       	rjmp	.+34     	; 0x34ac <f_unlink+0xd4>
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
    348a:	c1 14       	cp	r12, r1
    348c:	d1 04       	cpc	r13, r1
    348e:	e1 04       	cpc	r14, r1
    3490:	f1 04       	cpc	r15, r1
    3492:	41 f0       	breq	.+16     	; 0x34a4 <f_unlink+0xcc>
						res = remove_chain(dj.fs, dclst);
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	9a 81       	ldd	r25, Y+2	; 0x02
    3498:	b7 01       	movw	r22, r14
    349a:	a6 01       	movw	r20, r12
    349c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <remove_chain>
					if (res == FR_OK) res = sync(dj.fs);
    34a0:	88 23       	and	r24, r24
    34a2:	21 f4       	brne	.+8      	; 0x34ac <f_unlink+0xd4>
    34a4:	89 81       	ldd	r24, Y+1	; 0x01
    34a6:	9a 81       	ldd	r25, Y+2	; 0x02
    34a8:	0e 94 87 06 	call	0xd0e	; 0xd0e <sync>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
    34ac:	ea 96       	adiw	r28, 0x3a	; 58
    34ae:	0f b6       	in	r0, 0x3f	; 63
    34b0:	f8 94       	cli
    34b2:	de bf       	out	0x3e, r29	; 62
    34b4:	0f be       	out	0x3f, r0	; 63
    34b6:	cd bf       	out	0x3d, r28	; 61
    34b8:	df 91       	pop	r29
    34ba:	cf 91       	pop	r28
    34bc:	ff 90       	pop	r15
    34be:	ef 90       	pop	r14
    34c0:	df 90       	pop	r13
    34c2:	cf 90       	pop	r12
    34c4:	08 95       	ret
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
				if (dclst < 2) {
					res = FR_INT_ERR;
    34c6:	82 e0       	ldi	r24, 0x02	; 2
    34c8:	f1 cf       	rjmp	.-30     	; 0x34ac <f_unlink+0xd4>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
    34ca:	ce 01       	movw	r24, r28
    34cc:	01 96       	adiw	r24, 0x01	; 1
    34ce:	0e 94 20 09 	call	0x1240	; 0x1240 <dir_remove>
				if (res == FR_OK) {
    34d2:	88 23       	and	r24, r24
    34d4:	d1 f2       	breq	.-76     	; 0x348a <f_unlink+0xb2>
    34d6:	ea cf       	rjmp	.-44     	; 0x34ac <f_unlink+0xd4>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
    34d8:	95 89       	ldd	r25, Z+21	; 0x15
    34da:	80 e0       	ldi	r24, 0x00	; 0
    34dc:	44 89       	ldd	r20, Z+20	; 0x14
    34de:	50 e0       	ldi	r21, 0x00	; 0
    34e0:	84 2b       	or	r24, r20
    34e2:	95 2b       	or	r25, r21
    34e4:	ac 01       	movw	r20, r24
    34e6:	60 e0       	ldi	r22, 0x00	; 0
    34e8:	70 e0       	ldi	r23, 0x00	; 0
    34ea:	ba 01       	movw	r22, r20
    34ec:	55 27       	eor	r21, r21
    34ee:	44 27       	eor	r20, r20
    34f0:	93 8d       	ldd	r25, Z+27	; 0x1b
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	c2 8c       	ldd	r12, Z+26	; 0x1a
    34f6:	dd 24       	eor	r13, r13
    34f8:	8c 29       	or	r24, r12
    34fa:	9d 29       	or	r25, r13
    34fc:	6c 01       	movw	r12, r24
    34fe:	ee 24       	eor	r14, r14
    3500:	ff 24       	eor	r15, r15
    3502:	c4 2a       	or	r12, r20
    3504:	d5 2a       	or	r13, r21
    3506:	e6 2a       	or	r14, r22
    3508:	f7 2a       	or	r15, r23
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    350a:	83 85       	ldd	r24, Z+11	; 0x0b
    350c:	84 fd       	sbrc	r24, 4
    350e:	97 cf       	rjmp	.-210    	; 0x343e <f_unlink+0x66>
    3510:	dc cf       	rjmp	.-72     	; 0x34ca <f_unlink+0xf2>

00003512 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
    3512:	2f 92       	push	r2
    3514:	3f 92       	push	r3
    3516:	4f 92       	push	r4
    3518:	5f 92       	push	r5
    351a:	6f 92       	push	r6
    351c:	7f 92       	push	r7
    351e:	8f 92       	push	r8
    3520:	9f 92       	push	r9
    3522:	af 92       	push	r10
    3524:	bf 92       	push	r11
    3526:	cf 92       	push	r12
    3528:	df 92       	push	r13
    352a:	ef 92       	push	r14
    352c:	ff 92       	push	r15
    352e:	0f 93       	push	r16
    3530:	1f 93       	push	r17
    3532:	cf 93       	push	r28
    3534:	df 93       	push	r29
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62
    353a:	a9 97       	sbiw	r28, 0x29	; 41
    353c:	0f b6       	in	r0, 0x3f	; 63
    353e:	f8 94       	cli
    3540:	de bf       	out	0x3e, r29	; 62
    3542:	0f be       	out	0x3f, r0	; 63
    3544:	cd bf       	out	0x3d, r28	; 61
    3546:	9c a3       	lds	r25, 0x5c
    3548:	8b a3       	lds	r24, 0x5b
	FRESULT res;
	DIRS dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
    354a:	0e 94 14 07 	call	0xe28	; 0xe28 <get_fattime>
    354e:	6b 01       	movw	r12, r22
    3550:	7c 01       	movw	r14, r24
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    3552:	ce 01       	movw	r24, r28
    3554:	83 96       	adiw	r24, 0x23	; 35
    3556:	be 01       	movw	r22, r28
    3558:	6f 5f       	subi	r22, 0xFF	; 255
    355a:	7f 4f       	sbci	r23, 0xFF	; 255
    355c:	41 e0       	ldi	r20, 0x01	; 1
    355e:	0e 94 c9 01 	call	0x392	; 0x392 <chk_mounted>
    3562:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3564:	88 23       	and	r24, r24
    3566:	09 f0       	breq	.+2      	; 0x356a <f_mkdir+0x58>
    3568:	19 c1       	rjmp	.+562    	; 0x379c <f_mkdir+0x28a>
		INIT_BUF(dj);
    356a:	ce 01       	movw	r24, r28
    356c:	47 96       	adiw	r24, 0x17	; 23
    356e:	9e 8b       	std	Y+22, r25	; 0x16
    3570:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);			/* Follow the file path */
    3572:	6b a1       	lds	r22, 0x4b
    3574:	7c a1       	lds	r23, 0x4c
    3576:	ce 01       	movw	r24, r28
    3578:	01 96       	adiw	r24, 0x01	; 1
    357a:	0e 94 96 0c 	call	0x192c	; 0x192c <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    357e:	88 23       	and	r24, r24
    3580:	09 f4       	brne	.+2      	; 0x3584 <f_mkdir+0x72>
    3582:	09 c1       	rjmp	.+530    	; 0x3796 <f_mkdir+0x284>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
    3584:	84 30       	cpi	r24, 0x04	; 4
    3586:	09 f0       	breq	.+2      	; 0x358a <f_mkdir+0x78>
    3588:	08 c1       	rjmp	.+528    	; 0x379a <f_mkdir+0x288>
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	9a 81       	ldd	r25, Y+2	; 0x02
    358e:	40 e0       	ldi	r20, 0x00	; 0
    3590:	50 e0       	ldi	r21, 0x00	; 0
    3592:	ba 01       	movw	r22, r20
    3594:	0e 94 2f 0a 	call	0x145e	; 0x145e <create_chain>
    3598:	2b 01       	movw	r4, r22
    359a:	3c 01       	movw	r6, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    359c:	61 15       	cp	r22, r1
    359e:	71 05       	cpc	r23, r1
    35a0:	81 05       	cpc	r24, r1
    35a2:	91 05       	cpc	r25, r1
    35a4:	91 f0       	breq	.+36     	; 0x35ca <f_mkdir+0xb8>
			if (dcl == 1) res = FR_INT_ERR;
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	48 16       	cp	r4, r24
    35aa:	51 04       	cpc	r5, r1
    35ac:	61 04       	cpc	r6, r1
    35ae:	71 04       	cpc	r7, r1
    35b0:	09 f4       	brne	.+2      	; 0x35b4 <f_mkdir+0xa2>
    35b2:	0e c1       	rjmp	.+540    	; 0x37d0 <f_mkdir+0x2be>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    35b4:	ef ef       	ldi	r30, 0xFF	; 255
    35b6:	4e 16       	cp	r4, r30
    35b8:	ef ef       	ldi	r30, 0xFF	; 255
    35ba:	5e 06       	cpc	r5, r30
    35bc:	ef ef       	ldi	r30, 0xFF	; 255
    35be:	6e 06       	cpc	r6, r30
    35c0:	ef ef       	ldi	r30, 0xFF	; 255
    35c2:	7e 06       	cpc	r7, r30
    35c4:	09 f4       	brne	.+2      	; 0x35c8 <f_mkdir+0xb6>
    35c6:	06 c1       	rjmp	.+524    	; 0x37d4 <f_mkdir+0x2c2>
    35c8:	01 c0       	rjmp	.+2      	; 0x35cc <f_mkdir+0xba>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    35ca:	17 e0       	ldi	r17, 0x07	; 7
			if (dcl == 1) res = FR_INT_ERR;
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK)					/* Flush FAT */
    35cc:	11 23       	and	r17, r17
    35ce:	09 f0       	breq	.+2      	; 0x35d2 <f_mkdir+0xc0>
    35d0:	c1 c0       	rjmp	.+386    	; 0x3754 <f_mkdir+0x242>
				res = move_window(dj.fs, 0);
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	9a 81       	ldd	r25, Y+2	; 0x02
    35d6:	40 e0       	ldi	r20, 0x00	; 0
    35d8:	50 e0       	ldi	r21, 0x00	; 0
    35da:	ba 01       	movw	r22, r20
    35dc:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
    35e0:	18 2f       	mov	r17, r24
			if (res == FR_OK) {					/* Initialize the new directory table */
    35e2:	88 23       	and	r24, r24
    35e4:	09 f0       	breq	.+2      	; 0x35e8 <f_mkdir+0xd6>
    35e6:	b6 c0       	rjmp	.+364    	; 0x3754 <f_mkdir+0x242>
				dsc = clust2sect(dj.fs, dcl);
    35e8:	09 81       	ldd	r16, Y+1	; 0x01
    35ea:	1a 81       	ldd	r17, Y+2	; 0x02
    35ec:	c8 01       	movw	r24, r16
    35ee:	b3 01       	movw	r22, r6
    35f0:	a2 01       	movw	r20, r4
    35f2:	0e 94 19 07 	call	0xe32	; 0xe32 <clust2sect>
    35f6:	4b 01       	movw	r8, r22
    35f8:	5c 01       	movw	r10, r24
				dir = dj.fs->win;
    35fa:	0f 2e       	mov	r0, r31
    35fc:	fe e2       	ldi	r31, 0x2E	; 46
    35fe:	2f 2e       	mov	r2, r31
    3600:	33 24       	eor	r3, r3
    3602:	f0 2d       	mov	r31, r0
    3604:	20 0e       	add	r2, r16
    3606:	31 1e       	adc	r3, r17
				mem_set(dir, 0, SS(dj.fs));
    3608:	c1 01       	movw	r24, r2
    360a:	60 e0       	ldi	r22, 0x00	; 0
    360c:	70 e0       	ldi	r23, 0x00	; 0
    360e:	40 e0       	ldi	r20, 0x00	; 0
    3610:	52 e0       	ldi	r21, 0x02	; 2
    3612:	0e 94 74 00 	call	0xe8	; 0xe8 <mem_set>
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
    3616:	c1 01       	movw	r24, r2
    3618:	60 e2       	ldi	r22, 0x20	; 32
    361a:	70 e0       	ldi	r23, 0x00	; 0
    361c:	4b e0       	ldi	r20, 0x0B	; 11
    361e:	50 e0       	ldi	r21, 0x00	; 0
    3620:	0e 94 74 00 	call	0xe8	; 0xe8 <mem_set>
				dir[DIR_Name] = '.';
    3624:	8e e2       	ldi	r24, 0x2E	; 46
    3626:	f8 01       	movw	r30, r16
    3628:	86 a7       	lds	r24, 0x76
				dir[DIR_Attr] = AM_DIR;
    362a:	80 e1       	ldi	r24, 0x10	; 16
    362c:	81 af       	sts	0x71, r24
				ST_DWORD(dir+DIR_WrtTime, tim);
    362e:	cd a2       	lds	r28, 0x9d
    3630:	ec 5b       	subi	r30, 0xBC	; 188
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	c0 82       	st	Z, r12
    3636:	8d 2d       	mov	r24, r13
    3638:	99 27       	eor	r25, r25
    363a:	8e a3       	lds	r24, 0x5e
    363c:	f8 01       	movw	r30, r16
    363e:	eb 5b       	subi	r30, 0xBB	; 187
    3640:	ff 4f       	sbci	r31, 0xFF	; 255
    3642:	80 83       	st	Z, r24
    3644:	c7 01       	movw	r24, r14
    3646:	aa 27       	eor	r26, r26
    3648:	bb 27       	eor	r27, r27
    364a:	8f a3       	lds	r24, 0x5f
    364c:	f8 01       	movw	r30, r16
    364e:	ea 5b       	subi	r30, 0xBA	; 186
    3650:	ff 4f       	sbci	r31, 0xFF	; 255
    3652:	80 83       	st	Z, r24
    3654:	cf 2c       	mov	r12, r15
    3656:	dd 24       	eor	r13, r13
    3658:	ee 24       	eor	r14, r14
    365a:	ff 24       	eor	r15, r15
    365c:	c8 a6       	lds	r28, 0xb8
    365e:	f8 01       	movw	r30, r16
    3660:	e9 5b       	subi	r30, 0xB9	; 185
    3662:	ff 4f       	sbci	r31, 0xFF	; 255
    3664:	c0 82       	st	Z, r12
				ST_CLUST(dir, dcl);
    3666:	49 a6       	lds	r20, 0xb9
    3668:	f8 01       	movw	r30, r16
    366a:	e8 5b       	subi	r30, 0xB8	; 184
    366c:	ff 4f       	sbci	r31, 0xFF	; 255
    366e:	40 82       	st	Z, r4
    3670:	85 2d       	mov	r24, r5
    3672:	99 27       	eor	r25, r25
    3674:	d8 2e       	mov	r13, r24
    3676:	f8 01       	movw	r30, r16
    3678:	e7 5b       	subi	r30, 0xB7	; 183
    367a:	ff 4f       	sbci	r31, 0xFF	; 255
    367c:	80 83       	st	Z, r24
    367e:	c3 01       	movw	r24, r6
    3680:	aa 27       	eor	r26, r26
    3682:	bb 27       	eor	r27, r27
    3684:	e8 2e       	mov	r14, r24
    3686:	f8 01       	movw	r30, r16
    3688:	ee 5b       	subi	r30, 0xBE	; 190
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	80 83       	st	Z, r24
    368e:	89 2f       	mov	r24, r25
    3690:	99 27       	eor	r25, r25
    3692:	f8 2e       	mov	r15, r24
    3694:	f8 01       	movw	r30, r16
    3696:	ed 5b       	subi	r30, 0xBD	; 189
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	80 83       	st	Z, r24
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
    369c:	c8 01       	movw	r24, r16
    369e:	82 5b       	subi	r24, 0xB2	; 178
    36a0:	9f 4f       	sbci	r25, 0xFF	; 255
    36a2:	b1 01       	movw	r22, r2
    36a4:	40 e2       	ldi	r20, 0x20	; 32
    36a6:	50 e0       	ldi	r21, 0x00	; 0
    36a8:	0e 94 67 00 	call	0xce	; 0xce <mem_cpy>
				dir[33] = '.'; pcl = dj.sclust;
    36ac:	f8 01       	movw	r30, r16
    36ae:	e1 5b       	subi	r30, 0xB1	; 177
    36b0:	ff 4f       	sbci	r31, 0xFF	; 255
    36b2:	8e e2       	ldi	r24, 0x2E	; 46
    36b4:	80 83       	st	Z, r24
    36b6:	4f 81       	ldd	r20, Y+7	; 0x07
    36b8:	58 85       	ldd	r21, Y+8	; 0x08
    36ba:	69 85       	ldd	r22, Y+9	; 0x09
    36bc:	7a 85       	ldd	r23, Y+10	; 0x0a
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
    36be:	29 81       	ldd	r18, Y+1	; 0x01
    36c0:	3a 81       	ldd	r19, Y+2	; 0x02
    36c2:	f9 01       	movw	r30, r18
    36c4:	80 81       	ld	r24, Z
    36c6:	83 30       	cpi	r24, 0x03	; 3
    36c8:	61 f4       	brne	.+24     	; 0x36e2 <f_mkdir+0x1d0>
    36ca:	82 a1       	lds	r24, 0x42
    36cc:	93 a1       	lds	r25, 0x43
    36ce:	a4 a1       	lds	r26, 0x44
    36d0:	b5 a1       	lds	r27, 0x45
    36d2:	84 17       	cp	r24, r20
    36d4:	95 07       	cpc	r25, r21
    36d6:	a6 07       	cpc	r26, r22
    36d8:	b7 07       	cpc	r27, r23
    36da:	19 f4       	brne	.+6      	; 0x36e2 <f_mkdir+0x1d0>
					pcl = 0;
    36dc:	40 e0       	ldi	r20, 0x00	; 0
    36de:	50 e0       	ldi	r21, 0x00	; 0
    36e0:	ba 01       	movw	r22, r20
				ST_CLUST(dir+SZ_DIR, pcl);
    36e2:	f8 01       	movw	r30, r16
    36e4:	e8 59       	subi	r30, 0x98	; 152
    36e6:	ff 4f       	sbci	r31, 0xFF	; 255
    36e8:	40 83       	st	Z, r20
    36ea:	f8 01       	movw	r30, r16
    36ec:	e7 59       	subi	r30, 0x97	; 151
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	50 83       	st	Z, r21
    36f2:	ab 01       	movw	r20, r22
    36f4:	66 27       	eor	r22, r22
    36f6:	77 27       	eor	r23, r23
    36f8:	f8 01       	movw	r30, r16
    36fa:	ee 59       	subi	r30, 0x9E	; 158
    36fc:	ff 4f       	sbci	r31, 0xFF	; 255
    36fe:	40 83       	st	Z, r20
    3700:	f8 01       	movw	r30, r16
    3702:	ed 59       	subi	r30, 0x9D	; 157
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	50 83       	st	Z, r21
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    3708:	f9 01       	movw	r30, r18
    370a:	02 81       	ldd	r16, Z+2	; 0x02
    370c:	00 23       	and	r16, r16
    370e:	09 f4       	brne	.+2      	; 0x3712 <f_mkdir+0x200>
    3710:	63 c0       	rjmp	.+198    	; 0x37d8 <f_mkdir+0x2c6>
					dj.fs->winsect = dsc++;
					dj.fs->wflag = 1;
    3712:	cc 24       	eor	r12, r12
    3714:	c3 94       	inc	r12
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
    3716:	89 81       	ldd	r24, Y+1	; 0x01
    3718:	9a 81       	ldd	r25, Y+2	; 0x02
    371a:	fc 01       	movw	r30, r24
    371c:	82 a6       	lds	r24, 0xb2
    371e:	93 a6       	lds	r25, 0xb3
    3720:	a4 a6       	lds	r26, 0xb4
    3722:	b5 a6       	lds	r27, 0xb5
    3724:	08 94       	sec
    3726:	81 1c       	adc	r8, r1
    3728:	91 1c       	adc	r9, r1
    372a:	a1 1c       	adc	r10, r1
    372c:	b1 1c       	adc	r11, r1
					dj.fs->wflag = 1;
    372e:	c4 82       	std	Z+4, r12	; 0x04
					res = move_window(dj.fs, 0);
    3730:	40 e0       	ldi	r20, 0x00	; 0
    3732:	50 e0       	ldi	r21, 0x00	; 0
    3734:	ba 01       	movw	r22, r20
    3736:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
    373a:	18 2f       	mov	r17, r24
					if (res != FR_OK) break;
    373c:	88 23       	and	r24, r24
    373e:	51 f4       	brne	.+20     	; 0x3754 <f_mkdir+0x242>
					mem_set(dir, 0, SS(dj.fs));
    3740:	c1 01       	movw	r24, r2
    3742:	60 e0       	ldi	r22, 0x00	; 0
    3744:	70 e0       	ldi	r23, 0x00	; 0
    3746:	40 e0       	ldi	r20, 0x00	; 0
    3748:	52 e0       	ldi	r21, 0x02	; 2
    374a:	0e 94 74 00 	call	0xe8	; 0xe8 <mem_set>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    374e:	01 50       	subi	r16, 0x01	; 1
    3750:	11 f7       	brne	.-60     	; 0x3716 <f_mkdir+0x204>
    3752:	42 c0       	rjmp	.+132    	; 0x37d8 <f_mkdir+0x2c6>
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
			if (res != FR_OK) {
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
    3754:	89 81       	ldd	r24, Y+1	; 0x01
    3756:	9a 81       	ldd	r25, Y+2	; 0x02
    3758:	b3 01       	movw	r22, r6
    375a:	a2 01       	movw	r20, r4
    375c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <remove_chain>
    3760:	1d c0       	rjmp	.+58     	; 0x379c <f_mkdir+0x28a>
			} else {
				dir = dj.dir;
    3762:	eb 89       	ldd	r30, Y+19	; 0x13
    3764:	fc 89       	ldd	r31, Y+20	; 0x14
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
    3766:	80 e1       	ldi	r24, 0x10	; 16
    3768:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
    376a:	8d a1       	lds	r24, 0x4d
    376c:	86 8b       	std	Z+22, r24	; 0x16
    376e:	8e a1       	lds	r24, 0x4e
    3770:	87 8b       	std	Z+23, r24	; 0x17
    3772:	8f a1       	lds	r24, 0x4f
    3774:	80 8f       	std	Z+24, r24	; 0x18
    3776:	88 a5       	lds	r24, 0x68
    3778:	81 8f       	std	Z+25, r24	; 0x19
				ST_CLUST(dir, dcl);					/* Table start cluster */
    377a:	89 a5       	lds	r24, 0x69
    377c:	82 8f       	std	Z+26, r24	; 0x1a
    377e:	d3 8e       	std	Z+27, r13	; 0x1b
    3780:	e4 8a       	std	Z+20, r14	; 0x14
    3782:	f5 8a       	std	Z+21, r15	; 0x15
				dj.fs->wflag = 1;
    3784:	89 81       	ldd	r24, Y+1	; 0x01
    3786:	9a 81       	ldd	r25, Y+2	; 0x02
    3788:	21 e0       	ldi	r18, 0x01	; 1
    378a:	fc 01       	movw	r30, r24
    378c:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    378e:	0e 94 87 06 	call	0xd0e	; 0xd0e <sync>
    3792:	18 2f       	mov	r17, r24
    3794:	03 c0       	rjmp	.+6      	; 0x379c <f_mkdir+0x28a>

	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    3796:	18 e0       	ldi	r17, 0x08	; 8
    3798:	01 c0       	rjmp	.+2      	; 0x379c <f_mkdir+0x28a>


	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);			/* Follow the file path */
    379a:	18 2f       	mov	r17, r24
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    379c:	81 2f       	mov	r24, r17
    379e:	a9 96       	adiw	r28, 0x29	; 41
    37a0:	0f b6       	in	r0, 0x3f	; 63
    37a2:	f8 94       	cli
    37a4:	de bf       	out	0x3e, r29	; 62
    37a6:	0f be       	out	0x3f, r0	; 63
    37a8:	cd bf       	out	0x3d, r28	; 61
    37aa:	df 91       	pop	r29
    37ac:	cf 91       	pop	r28
    37ae:	1f 91       	pop	r17
    37b0:	0f 91       	pop	r16
    37b2:	ff 90       	pop	r15
    37b4:	ef 90       	pop	r14
    37b6:	df 90       	pop	r13
    37b8:	cf 90       	pop	r12
    37ba:	bf 90       	pop	r11
    37bc:	af 90       	pop	r10
    37be:	9f 90       	pop	r9
    37c0:	8f 90       	pop	r8
    37c2:	7f 90       	pop	r7
    37c4:	6f 90       	pop	r6
    37c6:	5f 90       	pop	r5
    37c8:	4f 90       	pop	r4
    37ca:	3f 90       	pop	r3
    37cc:	2f 90       	pop	r2
    37ce:	08 95       	ret
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
    37d0:	12 e0       	ldi	r17, 0x02	; 2
    37d2:	c0 cf       	rjmp	.-128    	; 0x3754 <f_mkdir+0x242>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    37d4:	11 e0       	ldi	r17, 0x01	; 1
    37d6:	be cf       	rjmp	.-132    	; 0x3754 <f_mkdir+0x242>
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
    37d8:	ce 01       	movw	r24, r28
    37da:	01 96       	adiw	r24, 0x01	; 1
    37dc:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <dir_register>
    37e0:	18 2f       	mov	r17, r24
			if (res != FR_OK) {
    37e2:	88 23       	and	r24, r24
    37e4:	09 f4       	brne	.+2      	; 0x37e8 <f_mkdir+0x2d6>
    37e6:	bd cf       	rjmp	.-134    	; 0x3762 <f_mkdir+0x250>
    37e8:	b5 cf       	rjmp	.-150    	; 0x3754 <f_mkdir+0x242>

000037ea <f_chmod>:
FRESULT f_chmod (
	const TCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    37ea:	0f 93       	push	r16
    37ec:	1f 93       	push	r17
    37ee:	cf 93       	push	r28
    37f0:	df 93       	push	r29
    37f2:	cd b7       	in	r28, 0x3d	; 61
    37f4:	de b7       	in	r29, 0x3e	; 62
    37f6:	a4 97       	sbiw	r28, 0x24	; 36
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	f8 94       	cli
    37fc:	de bf       	out	0x3e, r29	; 62
    37fe:	0f be       	out	0x3f, r0	; 63
    3800:	cd bf       	out	0x3d, r28	; 61
    3802:	9c a3       	lds	r25, 0x5c
    3804:	8b a3       	lds	r24, 0x5b
    3806:	06 2f       	mov	r16, r22
    3808:	14 2f       	mov	r17, r20
	DIRS dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    380a:	ce 01       	movw	r24, r28
    380c:	83 96       	adiw	r24, 0x23	; 35
    380e:	be 01       	movw	r22, r28
    3810:	6f 5f       	subi	r22, 0xFF	; 255
    3812:	7f 4f       	sbci	r23, 0xFF	; 255
    3814:	41 e0       	ldi	r20, 0x01	; 1
    3816:	0e 94 c9 01 	call	0x392	; 0x392 <chk_mounted>
	if (res == FR_OK) {
    381a:	88 23       	and	r24, r24
    381c:	11 f5       	brne	.+68     	; 0x3862 <f_chmod+0x78>
		INIT_BUF(dj);
    381e:	ce 01       	movw	r24, r28
    3820:	47 96       	adiw	r24, 0x17	; 23
    3822:	9e 8b       	std	Y+22, r25	; 0x16
    3824:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the file path */
    3826:	6b a1       	lds	r22, 0x4b
    3828:	7c a1       	lds	r23, 0x4c
    382a:	ce 01       	movw	r24, r28
    382c:	01 96       	adiw	r24, 0x01	; 1
    382e:	0e 94 96 0c 	call	0x192c	; 0x192c <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    3832:	88 23       	and	r24, r24
    3834:	b1 f4       	brne	.+44     	; 0x3862 <f_chmod+0x78>
			dir = dj.dir;
    3836:	eb 89       	ldd	r30, Y+19	; 0x13
    3838:	fc 89       	ldd	r31, Y+20	; 0x14
			if (!dir) {						/* Is it a root directory? */
    383a:	30 97       	sbiw	r30, 0x00	; 0
    383c:	89 f0       	breq	.+34     	; 0x3860 <f_chmod+0x76>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    383e:	17 72       	andi	r17, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    3840:	91 2f       	mov	r25, r17
    3842:	90 95       	com	r25
    3844:	83 85       	ldd	r24, Z+11	; 0x0b
    3846:	89 23       	and	r24, r25
    3848:	01 23       	and	r16, r17
    384a:	18 2f       	mov	r17, r24
    384c:	10 2b       	or	r17, r16
    384e:	13 87       	std	Z+11, r17	; 0x0b
				dj.fs->wflag = 1;
    3850:	89 81       	ldd	r24, Y+1	; 0x01
    3852:	9a 81       	ldd	r25, Y+2	; 0x02
    3854:	21 e0       	ldi	r18, 0x01	; 1
    3856:	fc 01       	movw	r30, r24
    3858:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    385a:	0e 94 87 06 	call	0xd0e	; 0xd0e <sync>
    385e:	01 c0       	rjmp	.+2      	; 0x3862 <f_chmod+0x78>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
    3860:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3862:	a4 96       	adiw	r28, 0x24	; 36
    3864:	0f b6       	in	r0, 0x3f	; 63
    3866:	f8 94       	cli
    3868:	de bf       	out	0x3e, r29	; 62
    386a:	0f be       	out	0x3f, r0	; 63
    386c:	cd bf       	out	0x3d, r28	; 61
    386e:	df 91       	pop	r29
    3870:	cf 91       	pop	r28
    3872:	1f 91       	pop	r17
    3874:	0f 91       	pop	r16
    3876:	08 95       	ret

00003878 <f_utime>:

FRESULT f_utime (
	const TCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the time stamp to be set */
)
{
    3878:	0f 93       	push	r16
    387a:	1f 93       	push	r17
    387c:	cf 93       	push	r28
    387e:	df 93       	push	r29
    3880:	cd b7       	in	r28, 0x3d	; 61
    3882:	de b7       	in	r29, 0x3e	; 62
    3884:	a4 97       	sbiw	r28, 0x24	; 36
    3886:	0f b6       	in	r0, 0x3f	; 63
    3888:	f8 94       	cli
    388a:	de bf       	out	0x3e, r29	; 62
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	cd bf       	out	0x3d, r28	; 61
    3890:	9c a3       	lds	r25, 0x5c
    3892:	8b a3       	lds	r24, 0x5b
    3894:	8b 01       	movw	r16, r22
	DIRS dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    3896:	ce 01       	movw	r24, r28
    3898:	83 96       	adiw	r24, 0x23	; 35
    389a:	be 01       	movw	r22, r28
    389c:	6f 5f       	subi	r22, 0xFF	; 255
    389e:	7f 4f       	sbci	r23, 0xFF	; 255
    38a0:	41 e0       	ldi	r20, 0x01	; 1
    38a2:	0e 94 c9 01 	call	0x392	; 0x392 <chk_mounted>
	if (res == FR_OK) {
    38a6:	88 23       	and	r24, r24
    38a8:	49 f5       	brne	.+82     	; 0x38fc <f_utime+0x84>
		INIT_BUF(dj);
    38aa:	ce 01       	movw	r24, r28
    38ac:	47 96       	adiw	r24, 0x17	; 23
    38ae:	9e 8b       	std	Y+22, r25	; 0x16
    38b0:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    38b2:	6b a1       	lds	r22, 0x4b
    38b4:	7c a1       	lds	r23, 0x4c
    38b6:	ce 01       	movw	r24, r28
    38b8:	01 96       	adiw	r24, 0x01	; 1
    38ba:	0e 94 96 0c 	call	0x192c	; 0x192c <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    38be:	88 23       	and	r24, r24
    38c0:	e9 f4       	brne	.+58     	; 0x38fc <f_utime+0x84>
			dir = dj.dir;
    38c2:	eb 89       	ldd	r30, Y+19	; 0x13
    38c4:	fc 89       	ldd	r31, Y+20	; 0x14
			if (!dir) {					/* Root directory */
    38c6:	30 97       	sbiw	r30, 0x00	; 0
    38c8:	c1 f0       	breq	.+48     	; 0x38fa <f_utime+0x82>
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    38ca:	d8 01       	movw	r26, r16
    38cc:	16 96       	adiw	r26, 0x06	; 6
    38ce:	8c 91       	ld	r24, X
    38d0:	16 97       	sbiw	r26, 0x06	; 6
    38d2:	86 8b       	std	Z+22, r24	; 0x16
    38d4:	17 96       	adiw	r26, 0x07	; 7
    38d6:	8c 91       	ld	r24, X
    38d8:	17 97       	sbiw	r26, 0x07	; 7
    38da:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    38dc:	14 96       	adiw	r26, 0x04	; 4
    38de:	8c 91       	ld	r24, X
    38e0:	14 97       	sbiw	r26, 0x04	; 4
    38e2:	80 8f       	std	Z+24, r24	; 0x18
    38e4:	15 96       	adiw	r26, 0x05	; 5
    38e6:	8c 91       	ld	r24, X
    38e8:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    38ea:	89 81       	ldd	r24, Y+1	; 0x01
    38ec:	9a 81       	ldd	r25, Y+2	; 0x02
    38ee:	21 e0       	ldi	r18, 0x01	; 1
    38f0:	fc 01       	movw	r30, r24
    38f2:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    38f4:	0e 94 87 06 	call	0xd0e	; 0xd0e <sync>
    38f8:	01 c0       	rjmp	.+2      	; 0x38fc <f_utime+0x84>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
    38fa:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    38fc:	a4 96       	adiw	r28, 0x24	; 36
    38fe:	0f b6       	in	r0, 0x3f	; 63
    3900:	f8 94       	cli
    3902:	de bf       	out	0x3e, r29	; 62
    3904:	0f be       	out	0x3f, r0	; 63
    3906:	cd bf       	out	0x3d, r28	; 61
    3908:	df 91       	pop	r29
    390a:	cf 91       	pop	r28
    390c:	1f 91       	pop	r17
    390e:	0f 91       	pop	r16
    3910:	08 95       	ret

00003912 <f_rename>:

FRESULT f_rename (
	const TCHAR *path_old,	/* Pointer to the old name */
	const TCHAR *path_new	/* Pointer to the new name */
)
{
    3912:	ef 92       	push	r14
    3914:	ff 92       	push	r15
    3916:	0f 93       	push	r16
    3918:	1f 93       	push	r17
    391a:	cf 93       	push	r28
    391c:	df 93       	push	r29
    391e:	cd b7       	in	r28, 0x3d	; 61
    3920:	de b7       	in	r29, 0x3e	; 62
    3922:	cf 54       	subi	r28, 0x4F	; 79
    3924:	d0 40       	sbci	r29, 0x00	; 0
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	f8 94       	cli
    392a:	de bf       	out	0x3e, r29	; 62
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	cd bf       	out	0x3d, r28	; 61
    3930:	60 96       	adiw	r28, 0x10	; 16
    3932:	9f af       	sts	0x7f, r25
    3934:	8e af       	sts	0x7e, r24
    3936:	60 97       	sbiw	r28, 0x10	; 16
    3938:	8b 01       	movw	r16, r22
	BYTE buf[21], *dir;
	DWORD dw;
	DEF_NAMEBUF;


	res = chk_mounted(&path_old, &djo.fs, 1);
    393a:	ce 01       	movw	r24, r28
    393c:	82 5b       	subi	r24, 0xB2	; 178
    393e:	9f 4f       	sbci	r25, 0xFF	; 255
    3940:	be 01       	movw	r22, r28
    3942:	6f 5f       	subi	r22, 0xFF	; 255
    3944:	7f 4f       	sbci	r23, 0xFF	; 255
    3946:	41 e0       	ldi	r20, 0x01	; 1
    3948:	0e 94 c9 01 	call	0x392	; 0x392 <chk_mounted>
	if (res == FR_OK) {
    394c:	88 23       	and	r24, r24
    394e:	09 f0       	breq	.+2      	; 0x3952 <f_rename+0x40>
    3950:	d0 c0       	rjmp	.+416    	; 0x3af2 <f_rename+0x1e0>
		djn.fs = djo.fs;
    3952:	89 81       	ldd	r24, Y+1	; 0x01
    3954:	9a 81       	ldd	r25, Y+2	; 0x02
    3956:	98 8f       	std	Y+24, r25	; 0x18
    3958:	8f 8b       	std	Y+23, r24	; 0x17
		INIT_BUF(djo);
    395a:	ce 01       	movw	r24, r28
    395c:	8e 5b       	subi	r24, 0xBE	; 190
    395e:	9f 4f       	sbci	r25, 0xFF	; 255
    3960:	9e 8b       	std	Y+22, r25	; 0x16
    3962:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&djo, path_old);		/* Check old object */
    3964:	60 96       	adiw	r28, 0x10	; 16
    3966:	6e ad       	sts	0x6e, r22
    3968:	7f ad       	sts	0x6f, r23
    396a:	60 97       	sbiw	r28, 0x10	; 16
    396c:	ce 01       	movw	r24, r28
    396e:	01 96       	adiw	r24, 0x01	; 1
    3970:	0e 94 96 0c 	call	0x192c	; 0x192c <follow_path>
		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
    3974:	88 23       	and	r24, r24
    3976:	09 f0       	breq	.+2      	; 0x397a <f_rename+0x68>
    3978:	bc c0       	rjmp	.+376    	; 0x3af2 <f_rename+0x1e0>
			if (!djo.dir) {						/* Is root dir? */
    397a:	6b 89       	ldd	r22, Y+19	; 0x13
    397c:	7c 89       	ldd	r23, Y+20	; 0x14
    397e:	61 15       	cp	r22, r1
    3980:	71 05       	cpc	r23, r1
    3982:	09 f4       	brne	.+2      	; 0x3986 <f_rename+0x74>
    3984:	b3 c0       	rjmp	.+358    	; 0x3aec <f_rename+0x1da>
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
    3986:	65 5f       	subi	r22, 0xF5	; 245
    3988:	7f 4f       	sbci	r23, 0xFF	; 255
    398a:	ce 01       	movw	r24, r28
    398c:	8d 96       	adiw	r24, 0x2d	; 45
    398e:	45 e1       	ldi	r20, 0x15	; 21
    3990:	50 e0       	ldi	r21, 0x00	; 0
    3992:	0e 94 67 00 	call	0xce	; 0xce <mem_cpy>
				mem_cpy(&djn, &djo, sizeof(DIRS));		/* Check new object */
    3996:	ce 01       	movw	r24, r28
    3998:	47 96       	adiw	r24, 0x17	; 23
    399a:	be 01       	movw	r22, r28
    399c:	6f 5f       	subi	r22, 0xFF	; 255
    399e:	7f 4f       	sbci	r23, 0xFF	; 255
    39a0:	46 e1       	ldi	r20, 0x16	; 22
    39a2:	50 e0       	ldi	r21, 0x00	; 0
    39a4:	0e 94 67 00 	call	0xce	; 0xce <mem_cpy>
				res = follow_path(&djn, path_new);
    39a8:	ce 01       	movw	r24, r28
    39aa:	47 96       	adiw	r24, 0x17	; 23
    39ac:	b8 01       	movw	r22, r16
    39ae:	0e 94 96 0c 	call	0x192c	; 0x192c <follow_path>
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    39b2:	88 23       	and	r24, r24
    39b4:	09 f4       	brne	.+2      	; 0x39b8 <f_rename+0xa6>
    39b6:	9c c0       	rjmp	.+312    	; 0x3af0 <f_rename+0x1de>
				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
    39b8:	84 30       	cpi	r24, 0x04	; 4
    39ba:	09 f0       	breq	.+2      	; 0x39be <f_rename+0xac>
    39bc:	9a c0       	rjmp	.+308    	; 0x3af2 <f_rename+0x1e0>
/* Start critical section that any interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
    39be:	ce 01       	movw	r24, r28
    39c0:	47 96       	adiw	r24, 0x17	; 23
    39c2:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <dir_register>
					if (res == FR_OK) {
    39c6:	88 23       	and	r24, r24
    39c8:	09 f0       	breq	.+2      	; 0x39cc <f_rename+0xba>
    39ca:	93 c0       	rjmp	.+294    	; 0x3af2 <f_rename+0x1e0>
						dir = djn.dir;					/* Copy object information except for name */
    39cc:	09 a5       	lds	r16, 0x69
    39ce:	1a a5       	lds	r17, 0x6a
						mem_cpy(dir+13, buf+2, 19);
    39d0:	c8 01       	movw	r24, r16
    39d2:	0d 96       	adiw	r24, 0x0d	; 13
    39d4:	be 01       	movw	r22, r28
    39d6:	61 5d       	subi	r22, 0xD1	; 209
    39d8:	7f 4f       	sbci	r23, 0xFF	; 255
    39da:	43 e1       	ldi	r20, 0x13	; 19
    39dc:	50 e0       	ldi	r21, 0x00	; 0
    39de:	0e 94 67 00 	call	0xce	; 0xce <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
    39e2:	8d a5       	lds	r24, 0x6d
    39e4:	80 62       	ori	r24, 0x20	; 32
    39e6:	f8 01       	movw	r30, r16
    39e8:	83 87       	std	Z+11, r24	; 0x0b
						djo.fs->wflag = 1;
    39ea:	e9 81       	ldd	r30, Y+1	; 0x01
    39ec:	fa 81       	ldd	r31, Y+2	; 0x02
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	84 83       	std	Z+4, r24	; 0x04
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
    39f2:	4f 81       	ldd	r20, Y+7	; 0x07
    39f4:	58 85       	ldd	r21, Y+8	; 0x08
    39f6:	69 85       	ldd	r22, Y+9	; 0x09
    39f8:	7a 85       	ldd	r23, Y+10	; 0x0a
    39fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39fe:	af 8d       	ldd	r26, Y+31	; 0x1f
    3a00:	b8 a1       	lds	r27, 0x48
    3a02:	48 17       	cp	r20, r24
    3a04:	59 07       	cpc	r21, r25
    3a06:	6a 07       	cpc	r22, r26
    3a08:	7b 07       	cpc	r23, r27
    3a0a:	09 f4       	brne	.+2      	; 0x3a0e <f_rename+0xfc>
    3a0c:	64 c0       	rjmp	.+200    	; 0x3ad6 <f_rename+0x1c4>
    3a0e:	f8 01       	movw	r30, r16
    3a10:	83 85       	ldd	r24, Z+11	; 0x0b
    3a12:	84 ff       	sbrs	r24, 4
    3a14:	60 c0       	rjmp	.+192    	; 0x3ad6 <f_rename+0x1c4>
							dw = clust2sect(djn.fs, LD_CLUST(dir));
    3a16:	ef 88       	ldd	r14, Y+23	; 0x17
    3a18:	f8 8c       	ldd	r15, Y+24	; 0x18
    3a1a:	35 89       	ldd	r19, Z+21	; 0x15
    3a1c:	20 e0       	ldi	r18, 0x00	; 0
    3a1e:	84 89       	ldd	r24, Z+20	; 0x14
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	82 2b       	or	r24, r18
    3a24:	93 2b       	or	r25, r19
    3a26:	ac 01       	movw	r20, r24
    3a28:	60 e0       	ldi	r22, 0x00	; 0
    3a2a:	70 e0       	ldi	r23, 0x00	; 0
    3a2c:	ba 01       	movw	r22, r20
    3a2e:	55 27       	eor	r21, r21
    3a30:	44 27       	eor	r20, r20
    3a32:	33 8d       	ldd	r19, Z+27	; 0x1b
    3a34:	20 e0       	ldi	r18, 0x00	; 0
    3a36:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	82 2b       	or	r24, r18
    3a3c:	93 2b       	or	r25, r19
    3a3e:	a0 e0       	ldi	r26, 0x00	; 0
    3a40:	b0 e0       	ldi	r27, 0x00	; 0
    3a42:	48 2b       	or	r20, r24
    3a44:	59 2b       	or	r21, r25
    3a46:	6a 2b       	or	r22, r26
    3a48:	7b 2b       	or	r23, r27
    3a4a:	c7 01       	movw	r24, r14
    3a4c:	0e 94 19 07 	call	0xe32	; 0xe32 <clust2sect>
    3a50:	ab 01       	movw	r20, r22
    3a52:	bc 01       	movw	r22, r24
							if (!dw) {
    3a54:	41 15       	cp	r20, r1
    3a56:	51 05       	cpc	r21, r1
    3a58:	61 05       	cpc	r22, r1
    3a5a:	71 05       	cpc	r23, r1
    3a5c:	09 f4       	brne	.+2      	; 0x3a60 <f_rename+0x14e>
    3a5e:	57 c0       	rjmp	.+174    	; 0x3b0e <f_rename+0x1fc>
								res = FR_INT_ERR;
							} else {
								res = move_window(djn.fs, dw);
    3a60:	c7 01       	movw	r24, r14
    3a62:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <move_window>
								dir = djn.fs->win+SZ_DIR;	/* .. entry */
    3a66:	ef 89       	ldd	r30, Y+23	; 0x17
    3a68:	f8 8d       	ldd	r31, Y+24	; 0x18
								if (res == FR_OK && dir[1] == '.') {
    3a6a:	88 23       	and	r24, r24
    3a6c:	09 f0       	breq	.+2      	; 0x3a70 <f_rename+0x15e>
    3a6e:	41 c0       	rjmp	.+130    	; 0x3af2 <f_rename+0x1e0>
    3a70:	df 01       	movw	r26, r30
    3a72:	a1 5b       	subi	r26, 0xB1	; 177
    3a74:	bf 4f       	sbci	r27, 0xFF	; 255
    3a76:	8c 91       	ld	r24, X
    3a78:	8e 32       	cpi	r24, 0x2E	; 46
    3a7a:	69 f5       	brne	.+90     	; 0x3ad6 <f_rename+0x1c4>
									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
    3a7c:	80 81       	ld	r24, Z
    3a7e:	83 30       	cpi	r24, 0x03	; 3
    3a80:	69 f4       	brne	.+26     	; 0x3a9c <f_rename+0x18a>
    3a82:	4d 8d       	ldd	r20, Y+29	; 0x1d
    3a84:	5e 8d       	ldd	r21, Y+30	; 0x1e
    3a86:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3a88:	78 a1       	lds	r23, 0x48
    3a8a:	82 a1       	lds	r24, 0x42
    3a8c:	93 a1       	lds	r25, 0x43
    3a8e:	a4 a1       	lds	r26, 0x44
    3a90:	b5 a1       	lds	r27, 0x45
    3a92:	48 17       	cp	r20, r24
    3a94:	59 07       	cpc	r21, r25
    3a96:	6a 07       	cpc	r22, r26
    3a98:	7b 07       	cpc	r23, r27
    3a9a:	29 f0       	breq	.+10     	; 0x3aa6 <f_rename+0x194>
    3a9c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    3a9e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    3aa0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3aa2:	78 a1       	lds	r23, 0x48
    3aa4:	03 c0       	rjmp	.+6      	; 0x3aac <f_rename+0x19a>
    3aa6:	40 e0       	ldi	r20, 0x00	; 0
    3aa8:	50 e0       	ldi	r21, 0x00	; 0
    3aaa:	ba 01       	movw	r22, r20
									ST_CLUST(dir, dw);
    3aac:	df 01       	movw	r26, r30
    3aae:	a8 59       	subi	r26, 0x98	; 152
    3ab0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ab2:	4c 93       	st	X, r20
    3ab4:	df 01       	movw	r26, r30
    3ab6:	a7 59       	subi	r26, 0x97	; 151
    3ab8:	bf 4f       	sbci	r27, 0xFF	; 255
    3aba:	5c 93       	st	X, r21
    3abc:	ab 01       	movw	r20, r22
    3abe:	66 27       	eor	r22, r22
    3ac0:	77 27       	eor	r23, r23
    3ac2:	df 01       	movw	r26, r30
    3ac4:	ae 59       	subi	r26, 0x9E	; 158
    3ac6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ac8:	4c 93       	st	X, r20
    3aca:	df 01       	movw	r26, r30
    3acc:	ad 59       	subi	r26, 0x9D	; 157
    3ace:	bf 4f       	sbci	r27, 0xFF	; 255
    3ad0:	5c 93       	st	X, r21
									djn.fs->wflag = 1;
    3ad2:	81 e0       	ldi	r24, 0x01	; 1
    3ad4:	84 83       	std	Z+4, r24	; 0x04
								}
							}
						}
						if (res == FR_OK) {
							res = dir_remove(&djo);		/* Remove old entry */
    3ad6:	ce 01       	movw	r24, r28
    3ad8:	01 96       	adiw	r24, 0x01	; 1
    3ada:	0e 94 20 09 	call	0x1240	; 0x1240 <dir_remove>
							if (res == FR_OK)
    3ade:	88 23       	and	r24, r24
    3ae0:	41 f4       	brne	.+16     	; 0x3af2 <f_rename+0x1e0>
								res = sync(djo.fs);
    3ae2:	89 81       	ldd	r24, Y+1	; 0x01
    3ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae6:	0e 94 87 06 	call	0xd0e	; 0xd0e <sync>
    3aea:	03 c0       	rjmp	.+6      	; 0x3af2 <f_rename+0x1e0>
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
    3aec:	84 e0       	ldi	r24, 0x04	; 4
    3aee:	01 c0       	rjmp	.+2      	; 0x3af2 <f_rename+0x1e0>
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
				mem_cpy(&djn, &djo, sizeof(DIRS));		/* Check new object */
				res = follow_path(&djn, path_new);
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    3af0:	88 e0       	ldi	r24, 0x08	; 8
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
    3af2:	c1 5b       	subi	r28, 0xB1	; 177
    3af4:	df 4f       	sbci	r29, 0xFF	; 255
    3af6:	0f b6       	in	r0, 0x3f	; 63
    3af8:	f8 94       	cli
    3afa:	de bf       	out	0x3e, r29	; 62
    3afc:	0f be       	out	0x3f, r0	; 63
    3afe:	cd bf       	out	0x3d, r28	; 61
    3b00:	df 91       	pop	r29
    3b02:	cf 91       	pop	r28
    3b04:	1f 91       	pop	r17
    3b06:	0f 91       	pop	r16
    3b08:	ff 90       	pop	r15
    3b0a:	ef 90       	pop	r14
    3b0c:	08 95       	ret
						dir[DIR_Attr] = buf[0] | AM_ARC;
						djo.fs->wflag = 1;
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
							dw = clust2sect(djn.fs, LD_CLUST(dir));
							if (!dw) {
								res = FR_INT_ERR;
    3b0e:	82 e0       	ldi	r24, 0x02	; 2
    3b10:	f0 cf       	rjmp	.-32     	; 0x3af2 <f_rename+0x1e0>

00003b12 <fat_init>:
int main(void)
{
    fat_init();
}

void fat_init(void){
    3b12:	af 92       	push	r10
    3b14:	bf 92       	push	r11
    3b16:	cf 92       	push	r12
    3b18:	df 92       	push	r13
    3b1a:	ef 92       	push	r14
    3b1c:	ff 92       	push	r15
    3b1e:	0f 93       	push	r16
    3b20:	1f 93       	push	r17
    3b22:	cf 93       	push	r28
    3b24:	df 93       	push	r29
	errCode = -1;
    3b26:	8f ef       	ldi	r24, 0xFF	; 255
    3b28:	80 93 2c 01 	sts	0x012C, r24

	while (errCode != FR_OK){                               //go until f_open returns FR_OK (function successful)
		errCode = f_mount(0, &fatfs);                       //mount drive number 0
    3b2c:	c7 e9       	ldi	r28, 0x97	; 151
    3b2e:	d1 e0       	ldi	r29, 0x01	; 1
		errCode = f_opendir(&dir, "/");                                 //root directory
    3b30:	0e e7       	ldi	r16, 0x7E	; 126
    3b32:	11 e0       	ldi	r17, 0x01	; 1
    3b34:	0f 2e       	mov	r0, r31
    3b36:	ff e0       	ldi	r31, 0x0F	; 15
    3b38:	ef 2e       	mov	r14, r31
    3b3a:	f1 e0       	ldi	r31, 0x01	; 1
    3b3c:	ff 2e       	mov	r15, r31
    3b3e:	f0 2d       	mov	r31, r0

		errCode = f_open(&file, "/data.txt", FA_CREATE_ALWAYS | FA_WRITE);
    3b40:	0f 2e       	mov	r0, r31
    3b42:	fd e2       	ldi	r31, 0x2D	; 45
    3b44:	cf 2e       	mov	r12, r31
    3b46:	f1 e0       	ldi	r31, 0x01	; 1
    3b48:	df 2e       	mov	r13, r31
    3b4a:	f0 2d       	mov	r31, r0
    3b4c:	0f 2e       	mov	r0, r31
    3b4e:	f1 e1       	ldi	r31, 0x11	; 17
    3b50:	af 2e       	mov	r10, r31
    3b52:	f1 e0       	ldi	r31, 0x01	; 1
    3b54:	bf 2e       	mov	r11, r31
    3b56:	f0 2d       	mov	r31, r0
}

void fat_init(void){
	errCode = -1;

	while (errCode != FR_OK){                               //go until f_open returns FR_OK (function successful)
    3b58:	19 c0       	rjmp	.+50     	; 0x3b8c <fat_init+0x7a>
		errCode = f_mount(0, &fatfs);                       //mount drive number 0
    3b5a:	80 e0       	ldi	r24, 0x00	; 0
    3b5c:	be 01       	movw	r22, r28
    3b5e:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <f_mount>
    3b62:	80 93 2c 01 	sts	0x012C, r24
		errCode = f_opendir(&dir, "/");                                 //root directory
    3b66:	c8 01       	movw	r24, r16
    3b68:	b7 01       	movw	r22, r14
    3b6a:	0e 94 18 17 	call	0x2e30	; 0x2e30 <f_opendir>
    3b6e:	80 93 2c 01 	sts	0x012C, r24

		errCode = f_open(&file, "/data.txt", FA_CREATE_ALWAYS | FA_WRITE);
    3b72:	c6 01       	movw	r24, r12
    3b74:	b5 01       	movw	r22, r10
    3b76:	4a e0       	ldi	r20, 0x0A	; 10
    3b78:	0e 94 67 0f 	call	0x1ece	; 0x1ece <f_open>
    3b7c:	80 93 2c 01 	sts	0x012C, r24
		if(errCode != FR_OK)
    3b80:	88 23       	and	r24, r24
    3b82:	21 f0       	breq	.+8      	; 0x3b8c <fat_init+0x7a>
		result=0;                                       //used as a debugging flag
    3b84:	10 92 1c 01 	sts	0x011C, r1
    3b88:	10 92 1b 01 	sts	0x011B, r1
}

void fat_init(void){
	errCode = -1;

	while (errCode != FR_OK){                               //go until f_open returns FR_OK (function successful)
    3b8c:	80 91 2c 01 	lds	r24, 0x012C
    3b90:	88 23       	and	r24, r24
    3b92:	19 f7       	brne	.-58     	; 0x3b5a <fat_init+0x48>

		errCode = f_open(&file, "/data.txt", FA_CREATE_ALWAYS | FA_WRITE);
		if(errCode != FR_OK)
		result=0;                                       //used as a debugging flag
	}
    3b94:	df 91       	pop	r29
    3b96:	cf 91       	pop	r28
    3b98:	1f 91       	pop	r17
    3b9a:	0f 91       	pop	r16
    3b9c:	ff 90       	pop	r15
    3b9e:	ef 90       	pop	r14
    3ba0:	df 90       	pop	r13
    3ba2:	cf 90       	pop	r12
    3ba4:	bf 90       	pop	r11
    3ba6:	af 90       	pop	r10
    3ba8:	08 95       	ret

00003baa <main>:
BYTE buffer[32];
int result=1;

int main(void)
{
    fat_init();
    3baa:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <fat_init>
}
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	08 95       	ret

00003bb4 <dly_us>:

static
void dly_us (UINT n)	/* Delay n microseconds (avr-gcc -Os) */
{
	do {
		PINB;
    3bb4:	23 b1       	in	r18, 0x03	; 3
		PINB; PINB;
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif
	} while (--n);
    3bb6:	01 97       	sbiw	r24, 0x01	; 1
    3bb8:	e9 f7       	brne	.-6      	; 0x3bb4 <dly_us>
}
    3bba:	08 95       	ret

00003bbc <xmit_mmc>:
static
void xmit_mmc (
	const BYTE* buff,	/* Data to be sent */
	UINT bc				/* Number of bytes to send */
)
{
    3bbc:	fc 01       	movw	r30, r24
	BYTE d;


	do {
		d = *buff++;	/* Get a byte to be sent */
    3bbe:	81 91       	ld	r24, Z+
		if (d & 0x80) DI_H(); else DI_L();	/* bit7 */
    3bc0:	88 23       	and	r24, r24
    3bc2:	14 f4       	brge	.+4      	; 0x3bc8 <xmit_mmc+0xc>
    3bc4:	2d 9a       	sbi	0x05, 5	; 5
    3bc6:	01 c0       	rjmp	.+2      	; 0x3bca <xmit_mmc+0xe>
    3bc8:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    3bca:	2f 9a       	sbi	0x05, 7	; 5
    3bcc:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x40) DI_H(); else DI_L();	/* bit6 */
    3bce:	86 ff       	sbrs	r24, 6
    3bd0:	02 c0       	rjmp	.+4      	; 0x3bd6 <xmit_mmc+0x1a>
    3bd2:	2d 9a       	sbi	0x05, 5	; 5
    3bd4:	01 c0       	rjmp	.+2      	; 0x3bd8 <xmit_mmc+0x1c>
    3bd6:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    3bd8:	2f 9a       	sbi	0x05, 7	; 5
    3bda:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x20) DI_H(); else DI_L();	/* bit5 */
    3bdc:	85 ff       	sbrs	r24, 5
    3bde:	02 c0       	rjmp	.+4      	; 0x3be4 <xmit_mmc+0x28>
    3be0:	2d 9a       	sbi	0x05, 5	; 5
    3be2:	01 c0       	rjmp	.+2      	; 0x3be6 <xmit_mmc+0x2a>
    3be4:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    3be6:	2f 9a       	sbi	0x05, 7	; 5
    3be8:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x10) DI_H(); else DI_L();	/* bit4 */
    3bea:	84 ff       	sbrs	r24, 4
    3bec:	02 c0       	rjmp	.+4      	; 0x3bf2 <xmit_mmc+0x36>
    3bee:	2d 9a       	sbi	0x05, 5	; 5
    3bf0:	01 c0       	rjmp	.+2      	; 0x3bf4 <xmit_mmc+0x38>
    3bf2:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    3bf4:	2f 9a       	sbi	0x05, 7	; 5
    3bf6:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x08) DI_H(); else DI_L();	/* bit3 */
    3bf8:	83 ff       	sbrs	r24, 3
    3bfa:	02 c0       	rjmp	.+4      	; 0x3c00 <xmit_mmc+0x44>
    3bfc:	2d 9a       	sbi	0x05, 5	; 5
    3bfe:	01 c0       	rjmp	.+2      	; 0x3c02 <xmit_mmc+0x46>
    3c00:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    3c02:	2f 9a       	sbi	0x05, 7	; 5
    3c04:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x04) DI_H(); else DI_L();	/* bit2 */
    3c06:	82 ff       	sbrs	r24, 2
    3c08:	02 c0       	rjmp	.+4      	; 0x3c0e <xmit_mmc+0x52>
    3c0a:	2d 9a       	sbi	0x05, 5	; 5
    3c0c:	01 c0       	rjmp	.+2      	; 0x3c10 <xmit_mmc+0x54>
    3c0e:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    3c10:	2f 9a       	sbi	0x05, 7	; 5
    3c12:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x02) DI_H(); else DI_L();	/* bit1 */
    3c14:	81 ff       	sbrs	r24, 1
    3c16:	02 c0       	rjmp	.+4      	; 0x3c1c <xmit_mmc+0x60>
    3c18:	2d 9a       	sbi	0x05, 5	; 5
    3c1a:	01 c0       	rjmp	.+2      	; 0x3c1e <xmit_mmc+0x62>
    3c1c:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    3c1e:	2f 9a       	sbi	0x05, 7	; 5
    3c20:	2f 98       	cbi	0x05, 7	; 5
		if (d & 0x01) DI_H(); else DI_L();	/* bit0 */
    3c22:	80 ff       	sbrs	r24, 0
    3c24:	02 c0       	rjmp	.+4      	; 0x3c2a <xmit_mmc+0x6e>
    3c26:	2d 9a       	sbi	0x05, 5	; 5
    3c28:	01 c0       	rjmp	.+2      	; 0x3c2c <xmit_mmc+0x70>
    3c2a:	2d 98       	cbi	0x05, 5	; 5
		CK_H(); CK_L();
    3c2c:	2f 9a       	sbi	0x05, 7	; 5
    3c2e:	2f 98       	cbi	0x05, 7	; 5
	} while (--bc);
    3c30:	61 50       	subi	r22, 0x01	; 1
    3c32:	70 40       	sbci	r23, 0x00	; 0
    3c34:	21 f6       	brne	.-120    	; 0x3bbe <xmit_mmc+0x2>
}
    3c36:	08 95       	ret

00003c38 <rcvr_mmc>:
static
void rcvr_mmc (
	BYTE *buff,	/* Pointer to read buffer */
	UINT bc		/* Number of bytes to receive */
)
{
    3c38:	fc 01       	movw	r30, r24
	BYTE r;


	DI_H();	/* Send 0xFF */
    3c3a:	2d 9a       	sbi	0x05, 5	; 5

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
    3c3c:	21 e0       	ldi	r18, 0x01	; 1
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	93 b1       	in	r25, 0x03	; 3
		CK_H(); CK_L();
    3c42:	2f 9a       	sbi	0x05, 7	; 5
    3c44:	2f 98       	cbi	0x05, 7	; 5


	DI_H();	/* Send 0xFF */

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
    3c46:	82 2f       	mov	r24, r18
    3c48:	96 ff       	sbrs	r25, 6
    3c4a:	83 2f       	mov	r24, r19
		CK_H(); CK_L();
		r <<= 1; if (DO) r++;	/* bit6 */
    3c4c:	88 0f       	add	r24, r24
    3c4e:	1e 99       	sbic	0x03, 6	; 3
    3c50:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    3c52:	2f 9a       	sbi	0x05, 7	; 5
    3c54:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit5 */
    3c56:	88 0f       	add	r24, r24
    3c58:	1e 99       	sbic	0x03, 6	; 3
    3c5a:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    3c5c:	2f 9a       	sbi	0x05, 7	; 5
    3c5e:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit4 */
    3c60:	88 0f       	add	r24, r24
    3c62:	1e 99       	sbic	0x03, 6	; 3
    3c64:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    3c66:	2f 9a       	sbi	0x05, 7	; 5
    3c68:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit3 */
    3c6a:	88 0f       	add	r24, r24
    3c6c:	1e 99       	sbic	0x03, 6	; 3
    3c6e:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    3c70:	2f 9a       	sbi	0x05, 7	; 5
    3c72:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit2 */
    3c74:	88 0f       	add	r24, r24
    3c76:	1e 99       	sbic	0x03, 6	; 3
    3c78:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    3c7a:	2f 9a       	sbi	0x05, 7	; 5
    3c7c:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit1 */
    3c7e:	88 0f       	add	r24, r24
    3c80:	1e 99       	sbic	0x03, 6	; 3
    3c82:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    3c84:	2f 9a       	sbi	0x05, 7	; 5
    3c86:	2f 98       	cbi	0x05, 7	; 5
		r <<= 1; if (DO) r++;	/* bit0 */
    3c88:	88 0f       	add	r24, r24
    3c8a:	1e 99       	sbic	0x03, 6	; 3
    3c8c:	8f 5f       	subi	r24, 0xFF	; 255
		CK_H(); CK_L();
    3c8e:	2f 9a       	sbi	0x05, 7	; 5
    3c90:	2f 98       	cbi	0x05, 7	; 5
		*buff++ = r;			/* Store a received byte */
    3c92:	81 93       	st	Z+, r24
	} while (--bc);
    3c94:	61 50       	subi	r22, 0x01	; 1
    3c96:	70 40       	sbci	r23, 0x00	; 0
    3c98:	99 f6       	brne	.-90     	; 0x3c40 <rcvr_mmc+0x8>
}
    3c9a:	08 95       	ret

00003c9c <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
    3c9c:	0f 93       	push	r16
    3c9e:	1f 93       	push	r17
    3ca0:	cf 93       	push	r28
    3ca2:	df 93       	push	r29
    3ca4:	0f 92       	push	r0
    3ca6:	cd b7       	in	r28, 0x3d	; 61
    3ca8:	de b7       	in	r29, 0x3e	; 62
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    3caa:	08 e8       	ldi	r16, 0x88	; 136
    3cac:	13 e1       	ldi	r17, 0x13	; 19
		rcvr_mmc(&d, 1);
    3cae:	ce 01       	movw	r24, r28
    3cb0:	01 96       	adiw	r24, 0x01	; 1
    3cb2:	61 e0       	ldi	r22, 0x01	; 1
    3cb4:	70 e0       	ldi	r23, 0x00	; 0
    3cb6:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <rcvr_mmc>
		if (d == 0xFF) break;
    3cba:	89 81       	ldd	r24, Y+1	; 0x01
    3cbc:	8f 3f       	cpi	r24, 0xFF	; 255
    3cbe:	39 f0       	breq	.+14     	; 0x3cce <wait_ready+0x32>
		dly_us(100);
    3cc0:	84 e6       	ldi	r24, 0x64	; 100
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <dly_us>
{
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    3cc8:	01 50       	subi	r16, 0x01	; 1
    3cca:	10 40       	sbci	r17, 0x00	; 0
    3ccc:	81 f7       	brne	.-32     	; 0x3cae <wait_ready+0x12>
		rcvr_mmc(&d, 1);
		if (d == 0xFF) break;
		dly_us(100);
	}

	return tmr ? 1 : 0;
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	01 15       	cp	r16, r1
    3cd4:	11 05       	cpc	r17, r1
    3cd6:	11 f4       	brne	.+4      	; 0x3cdc <wait_ready+0x40>
    3cd8:	80 e0       	ldi	r24, 0x00	; 0
    3cda:	90 e0       	ldi	r25, 0x00	; 0
}
    3cdc:	0f 90       	pop	r0
    3cde:	df 91       	pop	r29
    3ce0:	cf 91       	pop	r28
    3ce2:	1f 91       	pop	r17
    3ce4:	0f 91       	pop	r16
    3ce6:	08 95       	ret

00003ce8 <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
    3ce8:	cf 93       	push	r28
    3cea:	df 93       	push	r29
    3cec:	0f 92       	push	r0
    3cee:	cd b7       	in	r28, 0x3d	; 61
    3cf0:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_H();				/* Set CS# high */
    3cf2:	2c 9a       	sbi	0x05, 4	; 5
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    3cf4:	ce 01       	movw	r24, r28
    3cf6:	01 96       	adiw	r24, 0x01	; 1
    3cf8:	61 e0       	ldi	r22, 0x01	; 1
    3cfa:	70 e0       	ldi	r23, 0x00	; 0
    3cfc:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <rcvr_mmc>
}
    3d00:	0f 90       	pop	r0
    3d02:	df 91       	pop	r29
    3d04:	cf 91       	pop	r28
    3d06:	08 95       	ret

00003d08 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
    3d08:	cf 93       	push	r28
    3d0a:	df 93       	push	r29
    3d0c:	0f 92       	push	r0
    3d0e:	cd b7       	in	r28, 0x3d	; 61
    3d10:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_L();				/* Set CS# low */
    3d12:	2c 98       	cbi	0x05, 4	; 5
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
    3d14:	ce 01       	movw	r24, r28
    3d16:	01 96       	adiw	r24, 0x01	; 1
    3d18:	61 e0       	ldi	r22, 0x01	; 1
    3d1a:	70 e0       	ldi	r23, 0x00	; 0
    3d1c:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <rcvr_mmc>
	if (wait_ready()) return 1;	/* Wait for card ready */
    3d20:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <wait_ready>
    3d24:	00 97       	sbiw	r24, 0x00	; 0
    3d26:	29 f4       	brne	.+10     	; 0x3d32 <select+0x2a>

	deselect();
    3d28:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <deselect>
	return 0;			/* Failed */
    3d2c:	80 e0       	ldi	r24, 0x00	; 0
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	02 c0       	rjmp	.+4      	; 0x3d36 <select+0x2e>
{
	BYTE d;

	CS_L();				/* Set CS# low */
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
	if (wait_ready()) return 1;	/* Wait for card ready */
    3d32:	81 e0       	ldi	r24, 0x01	; 1
    3d34:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;			/* Failed */
}
    3d36:	0f 90       	pop	r0
    3d38:	df 91       	pop	r29
    3d3a:	cf 91       	pop	r28
    3d3c:	08 95       	ret

00003d3e <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count */
)
{
    3d3e:	cf 92       	push	r12
    3d40:	df 92       	push	r13
    3d42:	ef 92       	push	r14
    3d44:	ff 92       	push	r15
    3d46:	0f 93       	push	r16
    3d48:	1f 93       	push	r17
    3d4a:	cf 93       	push	r28
    3d4c:	df 93       	push	r29
    3d4e:	00 d0       	rcall	.+0      	; 0x3d50 <rcvr_datablock+0x12>
    3d50:	cd b7       	in	r28, 0x3d	; 61
    3d52:	de b7       	in	r29, 0x3e	; 62
    3d54:	7c 01       	movw	r14, r24
    3d56:	6b 01       	movw	r12, r22
    3d58:	08 ee       	ldi	r16, 0xE8	; 232
    3d5a:	13 e0       	ldi	r17, 0x03	; 3
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
    3d5c:	ce 01       	movw	r24, r28
    3d5e:	01 96       	adiw	r24, 0x01	; 1
    3d60:	61 e0       	ldi	r22, 0x01	; 1
    3d62:	70 e0       	ldi	r23, 0x00	; 0
    3d64:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <rcvr_mmc>
		if (d[0] != 0xFF) break;
    3d68:	89 81       	ldd	r24, Y+1	; 0x01
    3d6a:	8f 3f       	cpi	r24, 0xFF	; 255
    3d6c:	39 f4       	brne	.+14     	; 0x3d7c <rcvr_datablock+0x3e>
		dly_us(100);
    3d6e:	84 e6       	ldi	r24, 0x64	; 100
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <dly_us>
    3d76:	01 50       	subi	r16, 0x01	; 1
    3d78:	10 40       	sbci	r17, 0x00	; 0
{
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    3d7a:	81 f7       	brne	.-32     	; 0x3d5c <rcvr_datablock+0x1e>
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    3d7c:	89 81       	ldd	r24, Y+1	; 0x01
    3d7e:	8e 3f       	cpi	r24, 0xFE	; 254
    3d80:	69 f4       	brne	.+26     	; 0x3d9c <rcvr_datablock+0x5e>

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
    3d82:	c7 01       	movw	r24, r14
    3d84:	b6 01       	movw	r22, r12
    3d86:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
    3d8a:	ce 01       	movw	r24, r28
    3d8c:	01 96       	adiw	r24, 0x01	; 1
    3d8e:	62 e0       	ldi	r22, 0x02	; 2
    3d90:	70 e0       	ldi	r23, 0x00	; 0
    3d92:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <rcvr_mmc>

	return 1;						/* Return with success */
    3d96:	81 e0       	ldi	r24, 0x01	; 1
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	02 c0       	rjmp	.+4      	; 0x3da0 <rcvr_datablock+0x62>
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	90 e0       	ldi	r25, 0x00	; 0

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
	rcvr_mmc(d, 2);					/* Discard CRC */

	return 1;						/* Return with success */
}
    3da0:	0f 90       	pop	r0
    3da2:	0f 90       	pop	r0
    3da4:	df 91       	pop	r29
    3da6:	cf 91       	pop	r28
    3da8:	1f 91       	pop	r17
    3daa:	0f 91       	pop	r16
    3dac:	ff 90       	pop	r15
    3dae:	ef 90       	pop	r14
    3db0:	df 90       	pop	r13
    3db2:	cf 90       	pop	r12
    3db4:	08 95       	ret

00003db6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    3db6:	ef 92       	push	r14
    3db8:	ff 92       	push	r15
    3dba:	1f 93       	push	r17
    3dbc:	cf 93       	push	r28
    3dbe:	df 93       	push	r29
    3dc0:	00 d0       	rcall	.+0      	; 0x3dc2 <xmit_datablock+0xc>
    3dc2:	cd b7       	in	r28, 0x3d	; 61
    3dc4:	de b7       	in	r29, 0x3e	; 62
    3dc6:	7c 01       	movw	r14, r24
    3dc8:	16 2f       	mov	r17, r22
	BYTE d[2];


	if (!wait_ready()) return 0;
    3dca:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <wait_ready>
    3dce:	00 97       	sbiw	r24, 0x00	; 0
    3dd0:	19 f1       	breq	.+70     	; 0x3e18 <xmit_datablock+0x62>

	d[0] = token;
    3dd2:	19 83       	std	Y+1, r17	; 0x01
	xmit_mmc(d, 1);				/* Xmit a token */
    3dd4:	ce 01       	movw	r24, r28
    3dd6:	01 96       	adiw	r24, 0x01	; 1
    3dd8:	61 e0       	ldi	r22, 0x01	; 1
    3dda:	70 e0       	ldi	r23, 0x00	; 0
    3ddc:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
    3de0:	1d 3f       	cpi	r17, 0xFD	; 253
    3de2:	e9 f0       	breq	.+58     	; 0x3e1e <xmit_datablock+0x68>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
    3de4:	c7 01       	movw	r24, r14
    3de6:	60 e0       	ldi	r22, 0x00	; 0
    3de8:	72 e0       	ldi	r23, 0x02	; 2
    3dea:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
    3dee:	ce 01       	movw	r24, r28
    3df0:	01 96       	adiw	r24, 0x01	; 1
    3df2:	62 e0       	ldi	r22, 0x02	; 2
    3df4:	70 e0       	ldi	r23, 0x00	; 0
    3df6:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
    3dfa:	ce 01       	movw	r24, r28
    3dfc:	01 96       	adiw	r24, 0x01	; 1
    3dfe:	61 e0       	ldi	r22, 0x01	; 1
    3e00:	70 e0       	ldi	r23, 0x00	; 0
    3e02:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <rcvr_mmc>
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
    3e06:	29 81       	ldd	r18, Y+1	; 0x01
    3e08:	2f 71       	andi	r18, 0x1F	; 31
/*-----------------------------------------------------------------------*/
/* Send a data packet to the card                                        */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (	/* 1:OK, 0:Failed */
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	25 30       	cpi	r18, 0x05	; 5
    3e10:	41 f0       	breq	.+16     	; 0x3e22 <xmit_datablock+0x6c>
    3e12:	80 e0       	ldi	r24, 0x00	; 0
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	05 c0       	rjmp	.+10     	; 0x3e22 <xmit_datablock+0x6c>
)
{
	BYTE d[2];


	if (!wait_ready()) return 0;
    3e18:	80 e0       	ldi	r24, 0x00	; 0
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	02 c0       	rjmp	.+4      	; 0x3e22 <xmit_datablock+0x6c>
		rcvr_mmc(d, 1);			/* Receive data response */
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	90 e0       	ldi	r25, 0x00	; 0
}
    3e22:	0f 90       	pop	r0
    3e24:	0f 90       	pop	r0
    3e26:	df 91       	pop	r29
    3e28:	cf 91       	pop	r28
    3e2a:	1f 91       	pop	r17
    3e2c:	ff 90       	pop	r15
    3e2e:	ef 90       	pop	r14
    3e30:	08 95       	ret

00003e32 <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    3e32:	df 92       	push	r13
    3e34:	ef 92       	push	r14
    3e36:	ff 92       	push	r15
    3e38:	0f 93       	push	r16
    3e3a:	1f 93       	push	r17
    3e3c:	cf 93       	push	r28
    3e3e:	df 93       	push	r29
    3e40:	cd b7       	in	r28, 0x3d	; 61
    3e42:	de b7       	in	r29, 0x3e	; 62
    3e44:	27 97       	sbiw	r28, 0x07	; 7
    3e46:	0f b6       	in	r0, 0x3f	; 63
    3e48:	f8 94       	cli
    3e4a:	de bf       	out	0x3e, r29	; 62
    3e4c:	0f be       	out	0x3f, r0	; 63
    3e4e:	cd bf       	out	0x3d, r28	; 61
    3e50:	18 2f       	mov	r17, r24
    3e52:	d4 2e       	mov	r13, r20
    3e54:	05 2f       	mov	r16, r21
    3e56:	f6 2e       	mov	r15, r22
    3e58:	e7 2e       	mov	r14, r23
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    3e5a:	88 23       	and	r24, r24
    3e5c:	4c f4       	brge	.+18     	; 0x3e70 <send_cmd+0x3e>
		cmd &= 0x7F;
		n = send_cmd(CMD55, 0);
    3e5e:	87 e3       	ldi	r24, 0x37	; 55
    3e60:	40 e0       	ldi	r20, 0x00	; 0
    3e62:	50 e0       	ldi	r21, 0x00	; 0
    3e64:	ba 01       	movw	r22, r20
    3e66:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <send_cmd>
		if (n > 1) return n;
    3e6a:	82 30       	cpi	r24, 0x02	; 2
    3e6c:	98 f5       	brcc	.+102    	; 0x3ed4 <send_cmd+0xa2>
{
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    3e6e:	1f 77       	andi	r17, 0x7F	; 127
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    3e70:	1c 30       	cpi	r17, 0x0C	; 12
    3e72:	f1 f1       	breq	.+124    	; 0x3ef0 <send_cmd+0xbe>
		deselect();
    3e74:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <deselect>
		if (!select()) return 0xFF;
    3e78:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <select>
    3e7c:	00 97       	sbiw	r24, 0x00	; 0
    3e7e:	49 f1       	breq	.+82     	; 0x3ed2 <send_cmd+0xa0>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    3e80:	81 2f       	mov	r24, r17
    3e82:	80 64       	ori	r24, 0x40	; 64
    3e84:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    3e86:	eb 82       	std	Y+3, r14	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    3e88:	fc 82       	std	Y+4, r15	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    3e8a:	0d 83       	std	Y+5, r16	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    3e8c:	de 82       	std	Y+6, r13	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    3e8e:	11 23       	and	r17, r17
    3e90:	09 f4       	brne	.+2      	; 0x3e94 <send_cmd+0x62>
    3e92:	3e c0       	rjmp	.+124    	; 0x3f10 <send_cmd+0xde>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    3e94:	18 30       	cpi	r17, 0x08	; 8
    3e96:	99 f1       	breq	.+102    	; 0x3efe <send_cmd+0xcc>
	buf[5] = n;
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    3e9c:	ce 01       	movw	r24, r28
    3e9e:	02 96       	adiw	r24, 0x02	; 2
    3ea0:	66 e0       	ldi	r22, 0x06	; 6
    3ea2:	70 e0       	ldi	r23, 0x00	; 0
    3ea4:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    3ea8:	1c 30       	cpi	r17, 0x0C	; 12
    3eaa:	31 f4       	brne	.+12     	; 0x3eb8 <send_cmd+0x86>
    3eac:	ce 01       	movw	r24, r28
    3eae:	01 96       	adiw	r24, 0x01	; 1
    3eb0:	61 e0       	ldi	r22, 0x01	; 1
    3eb2:	70 e0       	ldi	r23, 0x00	; 0
    3eb4:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <rcvr_mmc>
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    3eb8:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		rcvr_mmc(&d, 1);
    3eba:	ce 01       	movw	r24, r28
    3ebc:	01 96       	adiw	r24, 0x01	; 1
    3ebe:	61 e0       	ldi	r22, 0x01	; 1
    3ec0:	70 e0       	ldi	r23, 0x00	; 0
    3ec2:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <rcvr_mmc>
	while ((d & 0x80) && --n);
    3ec6:	89 81       	ldd	r24, Y+1	; 0x01
    3ec8:	88 23       	and	r24, r24
    3eca:	24 f4       	brge	.+8      	; 0x3ed4 <send_cmd+0xa2>
    3ecc:	11 50       	subi	r17, 0x01	; 1
    3ece:	a9 f7       	brne	.-22     	; 0x3eba <send_cmd+0x88>
    3ed0:	01 c0       	rjmp	.+2      	; 0x3ed4 <send_cmd+0xa2>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    3ed2:	8f ef       	ldi	r24, 0xFF	; 255
	do
		rcvr_mmc(&d, 1);
	while ((d & 0x80) && --n);

	return d;			/* Return with the response value */
}
    3ed4:	27 96       	adiw	r28, 0x07	; 7
    3ed6:	0f b6       	in	r0, 0x3f	; 63
    3ed8:	f8 94       	cli
    3eda:	de bf       	out	0x3e, r29	; 62
    3edc:	0f be       	out	0x3f, r0	; 63
    3ede:	cd bf       	out	0x3d, r28	; 61
    3ee0:	df 91       	pop	r29
    3ee2:	cf 91       	pop	r28
    3ee4:	1f 91       	pop	r17
    3ee6:	0f 91       	pop	r16
    3ee8:	ff 90       	pop	r15
    3eea:	ef 90       	pop	r14
    3eec:	df 90       	pop	r13
    3eee:	08 95       	ret
		deselect();
		if (!select()) return 0xFF;
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    3ef0:	8c e4       	ldi	r24, 0x4C	; 76
    3ef2:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    3ef4:	eb 82       	std	Y+3, r14	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    3ef6:	fc 82       	std	Y+4, r15	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    3ef8:	0d 83       	std	Y+5, r16	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    3efa:	de 82       	std	Y+6, r13	; 0x06
    3efc:	cd cf       	rjmp	.-102    	; 0x3e98 <send_cmd+0x66>
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    3efe:	87 e8       	ldi	r24, 0x87	; 135
    3f00:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    3f02:	ce 01       	movw	r24, r28
    3f04:	02 96       	adiw	r24, 0x02	; 2
    3f06:	66 e0       	ldi	r22, 0x06	; 6
    3f08:	70 e0       	ldi	r23, 0x00	; 0
    3f0a:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <xmit_mmc>
    3f0e:	d4 cf       	rjmp	.-88     	; 0x3eb8 <send_cmd+0x86>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    3f10:	85 e9       	ldi	r24, 0x95	; 149
    3f12:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    3f14:	ce 01       	movw	r24, r28
    3f16:	02 96       	adiw	r24, 0x02	; 2
    3f18:	66 e0       	ldi	r22, 0x06	; 6
    3f1a:	70 e0       	ldi	r23, 0x00	; 0
    3f1c:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <xmit_mmc>
    3f20:	cb cf       	rjmp	.-106    	; 0x3eb8 <send_cmd+0x86>

00003f22 <disk_status>:

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    3f22:	88 23       	and	r24, r24
    3f24:	19 f4       	brne	.+6      	; 0x3f2c <disk_status+0xa>

	return Stat;
    3f26:	80 91 1d 01 	lds	r24, 0x011D
    3f2a:	08 95       	ret

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    3f2c:	81 e0       	ldi	r24, 0x01	; 1

	return Stat;
}
    3f2e:	08 95       	ret

00003f30 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    3f30:	ef 92       	push	r14
    3f32:	ff 92       	push	r15
    3f34:	0f 93       	push	r16
    3f36:	1f 93       	push	r17
    3f38:	cf 93       	push	r28
    3f3a:	df 93       	push	r29
    3f3c:	00 d0       	rcall	.+0      	; 0x3f3e <disk_initialize+0xe>
    3f3e:	00 d0       	rcall	.+0      	; 0x3f40 <disk_initialize+0x10>
    3f40:	cd b7       	in	r28, 0x3d	; 61
    3f42:	de b7       	in	r29, 0x3e	; 62
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    3f44:	88 23       	and	r24, r24
    3f46:	09 f0       	breq	.+2      	; 0x3f4a <disk_initialize+0x1a>
    3f48:	b1 c0       	rjmp	.+354    	; 0x40ac <disk_initialize+0x17c>

	dly_us(10000);			/* 10ms */
    3f4a:	80 e1       	ldi	r24, 0x10	; 16
    3f4c:	97 e2       	ldi	r25, 0x27	; 39
    3f4e:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <dly_us>
	CS_INIT(); CS_H();		/* Initialize port pin tied to CS */
    3f52:	24 9a       	sbi	0x04, 4	; 4
    3f54:	2c 9a       	sbi	0x05, 4	; 5
	CK_INIT(); CK_L();		/* Initialize port pin tied to SCLK */
    3f56:	27 9a       	sbi	0x04, 7	; 4
    3f58:	2f 98       	cbi	0x05, 7	; 5
	DI_INIT();				/* Initialize port pin tied to DI */
    3f5a:	25 9a       	sbi	0x04, 5	; 4
    3f5c:	0a e0       	ldi	r16, 0x0A	; 10
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
    3f5e:	ce 01       	movw	r24, r28
    3f60:	01 96       	adiw	r24, 0x01	; 1
    3f62:	61 e0       	ldi	r22, 0x01	; 1
    3f64:	70 e0       	ldi	r23, 0x00	; 0
    3f66:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <rcvr_mmc>
    3f6a:	01 50       	subi	r16, 0x01	; 1
    3f6c:	c1 f7       	brne	.-16     	; 0x3f5e <disk_initialize+0x2e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    3f6e:	80 e0       	ldi	r24, 0x00	; 0
    3f70:	40 e0       	ldi	r20, 0x00	; 0
    3f72:	50 e0       	ldi	r21, 0x00	; 0
    3f74:	ba 01       	movw	r22, r20
    3f76:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <send_cmd>
    3f7a:	81 30       	cpi	r24, 0x01	; 1
    3f7c:	09 f0       	breq	.+2      	; 0x3f80 <disk_initialize+0x50>
    3f7e:	7b c0       	rjmp	.+246    	; 0x4076 <disk_initialize+0x146>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    3f80:	88 e0       	ldi	r24, 0x08	; 8
    3f82:	4a ea       	ldi	r20, 0xAA	; 170
    3f84:	51 e0       	ldi	r21, 0x01	; 1
    3f86:	60 e0       	ldi	r22, 0x00	; 0
    3f88:	70 e0       	ldi	r23, 0x00	; 0
    3f8a:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <send_cmd>
    3f8e:	81 30       	cpi	r24, 0x01	; 1
    3f90:	09 f0       	breq	.+2      	; 0x3f94 <disk_initialize+0x64>
    3f92:	3d c0       	rjmp	.+122    	; 0x400e <disk_initialize+0xde>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
    3f94:	ce 01       	movw	r24, r28
    3f96:	01 96       	adiw	r24, 0x01	; 1
    3f98:	64 e0       	ldi	r22, 0x04	; 4
    3f9a:	70 e0       	ldi	r23, 0x00	; 0
    3f9c:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    3fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa2:	81 30       	cpi	r24, 0x01	; 1
    3fa4:	09 f0       	breq	.+2      	; 0x3fa8 <disk_initialize+0x78>
    3fa6:	69 c0       	rjmp	.+210    	; 0x407a <disk_initialize+0x14a>
    3fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    3faa:	8a 3a       	cpi	r24, 0xAA	; 170
    3fac:	09 f0       	breq	.+2      	; 0x3fb0 <disk_initialize+0x80>
    3fae:	67 c0       	rjmp	.+206    	; 0x407e <disk_initialize+0x14e>
    3fb0:	08 ee       	ldi	r16, 0xE8	; 232
    3fb2:	13 e0       	ldi	r17, 0x03	; 3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    3fb4:	89 ea       	ldi	r24, 0xA9	; 169
    3fb6:	40 e0       	ldi	r20, 0x00	; 0
    3fb8:	50 e0       	ldi	r21, 0x00	; 0
    3fba:	60 e0       	ldi	r22, 0x00	; 0
    3fbc:	70 e4       	ldi	r23, 0x40	; 64
    3fbe:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <send_cmd>
    3fc2:	88 23       	and	r24, r24
    3fc4:	49 f0       	breq	.+18     	; 0x3fd8 <disk_initialize+0xa8>
					dly_us(1000);
    3fc6:	88 ee       	ldi	r24, 0xE8	; 232
    3fc8:	93 e0       	ldi	r25, 0x03	; 3
    3fca:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <dly_us>
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    3fce:	01 50       	subi	r16, 0x01	; 1
    3fd0:	10 40       	sbci	r17, 0x00	; 0
    3fd2:	81 f7       	brne	.-32     	; 0x3fb4 <disk_initialize+0x84>
	DI_INIT();				/* Initialize port pin tied to DI */
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */

	ty = 0;
    3fd4:	ff 24       	eor	r15, r15
    3fd6:	60 c0       	rjmp	.+192    	; 0x4098 <disk_initialize+0x168>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
    3fd8:	01 15       	cp	r16, r1
    3fda:	11 05       	cpc	r17, r1
    3fdc:	09 f4       	brne	.+2      	; 0x3fe0 <disk_initialize+0xb0>
    3fde:	51 c0       	rjmp	.+162    	; 0x4082 <disk_initialize+0x152>
    3fe0:	8a e3       	ldi	r24, 0x3A	; 58
    3fe2:	40 e0       	ldi	r20, 0x00	; 0
    3fe4:	50 e0       	ldi	r21, 0x00	; 0
    3fe6:	ba 01       	movw	r22, r20
    3fe8:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <send_cmd>
    3fec:	88 23       	and	r24, r24
    3fee:	09 f0       	breq	.+2      	; 0x3ff2 <disk_initialize+0xc2>
    3ff0:	4a c0       	rjmp	.+148    	; 0x4086 <disk_initialize+0x156>
					rcvr_mmc(buf, 4);
    3ff2:	ce 01       	movw	r24, r28
    3ff4:	01 96       	adiw	r24, 0x01	; 1
    3ff6:	64 e0       	ldi	r22, 0x04	; 4
    3ff8:	70 e0       	ldi	r23, 0x00	; 0
    3ffa:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    3ffe:	89 81       	ldd	r24, Y+1	; 0x01
    4000:	86 ff       	sbrs	r24, 6
    4002:	43 c0       	rjmp	.+134    	; 0x408a <disk_initialize+0x15a>
    4004:	0f 2e       	mov	r0, r31
    4006:	fc e0       	ldi	r31, 0x0C	; 12
    4008:	ff 2e       	mov	r15, r31
    400a:	f0 2d       	mov	r31, r0
    400c:	45 c0       	rjmp	.+138    	; 0x4098 <disk_initialize+0x168>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    400e:	89 ea       	ldi	r24, 0xA9	; 169
    4010:	40 e0       	ldi	r20, 0x00	; 0
    4012:	50 e0       	ldi	r21, 0x00	; 0
    4014:	ba 01       	movw	r22, r20
    4016:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <send_cmd>
    401a:	82 30       	cpi	r24, 0x02	; 2
    401c:	40 f4       	brcc	.+16     	; 0x402e <disk_initialize+0xfe>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    401e:	0f 2e       	mov	r0, r31
    4020:	f9 ea       	ldi	r31, 0xA9	; 169
    4022:	ef 2e       	mov	r14, r31
    4024:	f0 2d       	mov	r31, r0
    4026:	ff 24       	eor	r15, r15
    4028:	68 94       	set
    402a:	f1 f8       	bld	r15, 1
    402c:	04 c0       	rjmp	.+8      	; 0x4036 <disk_initialize+0x106>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    402e:	ee 24       	eor	r14, r14
    4030:	e3 94       	inc	r14
    4032:	ff 24       	eor	r15, r15
    4034:	f3 94       	inc	r15
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    4036:	08 ee       	ldi	r16, 0xE8	; 232
    4038:	13 e0       	ldi	r17, 0x03	; 3
				if (send_cmd(cmd, 0) == 0) break;
    403a:	8e 2d       	mov	r24, r14
    403c:	40 e0       	ldi	r20, 0x00	; 0
    403e:	50 e0       	ldi	r21, 0x00	; 0
    4040:	ba 01       	movw	r22, r20
    4042:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <send_cmd>
    4046:	88 23       	and	r24, r24
    4048:	49 f0       	breq	.+18     	; 0x405c <disk_initialize+0x12c>
				dly_us(1000);
    404a:	88 ee       	ldi	r24, 0xE8	; 232
    404c:	93 e0       	ldi	r25, 0x03	; 3
    404e:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <dly_us>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    4052:	01 50       	subi	r16, 0x01	; 1
    4054:	10 40       	sbci	r17, 0x00	; 0
    4056:	89 f7       	brne	.-30     	; 0x403a <disk_initialize+0x10a>
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    4058:	ff 24       	eor	r15, r15
    405a:	1e c0       	rjmp	.+60     	; 0x4098 <disk_initialize+0x168>
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    405c:	01 15       	cp	r16, r1
    405e:	11 05       	cpc	r17, r1
    4060:	c1 f0       	breq	.+48     	; 0x4092 <disk_initialize+0x162>
    4062:	80 e1       	ldi	r24, 0x10	; 16
    4064:	40 e0       	ldi	r20, 0x00	; 0
    4066:	52 e0       	ldi	r21, 0x02	; 2
    4068:	60 e0       	ldi	r22, 0x00	; 0
    406a:	70 e0       	ldi	r23, 0x00	; 0
    406c:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <send_cmd>
    4070:	88 23       	and	r24, r24
    4072:	89 f4       	brne	.+34     	; 0x4096 <disk_initialize+0x166>
    4074:	11 c0       	rjmp	.+34     	; 0x4098 <disk_initialize+0x168>
	DI_INIT();				/* Initialize port pin tied to DI */
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */

	ty = 0;
    4076:	ff 24       	eor	r15, r15
    4078:	0f c0       	rjmp	.+30     	; 0x4098 <disk_initialize+0x168>
    407a:	ff 24       	eor	r15, r15
    407c:	0d c0       	rjmp	.+26     	; 0x4098 <disk_initialize+0x168>
    407e:	ff 24       	eor	r15, r15
    4080:	0b c0       	rjmp	.+22     	; 0x4098 <disk_initialize+0x168>
    4082:	ff 24       	eor	r15, r15
    4084:	09 c0       	rjmp	.+18     	; 0x4098 <disk_initialize+0x168>
    4086:	ff 24       	eor	r15, r15
    4088:	07 c0       	rjmp	.+14     	; 0x4098 <disk_initialize+0x168>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
					rcvr_mmc(buf, 4);
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    408a:	ff 24       	eor	r15, r15
    408c:	68 94       	set
    408e:	f2 f8       	bld	r15, 2
    4090:	03 c0       	rjmp	.+6      	; 0x4098 <disk_initialize+0x168>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    4092:	ff 24       	eor	r15, r15
    4094:	01 c0       	rjmp	.+2      	; 0x4098 <disk_initialize+0x168>
    4096:	ff 24       	eor	r15, r15
		}
	}
	CardType = ty;
    4098:	f0 92 22 01 	sts	0x0122, r15
	s = ty ? 0 : STA_NOINIT;
    409c:	01 e0       	ldi	r16, 0x01	; 1
    409e:	f1 10       	cpse	r15, r1
    40a0:	00 e0       	ldi	r16, 0x00	; 0
	Stat = s;
    40a2:	00 93 1d 01 	sts	0x011D, r16

	deselect();
    40a6:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <deselect>

	return s;
    40aa:	01 c0       	rjmp	.+2      	; 0x40ae <disk_initialize+0x17e>
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    40ac:	03 e0       	ldi	r16, 0x03	; 3
	Stat = s;

	deselect();

	return s;
}
    40ae:	80 2f       	mov	r24, r16
    40b0:	0f 90       	pop	r0
    40b2:	0f 90       	pop	r0
    40b4:	0f 90       	pop	r0
    40b6:	0f 90       	pop	r0
    40b8:	df 91       	pop	r29
    40ba:	cf 91       	pop	r28
    40bc:	1f 91       	pop	r17
    40be:	0f 91       	pop	r16
    40c0:	ff 90       	pop	r15
    40c2:	ef 90       	pop	r14
    40c4:	08 95       	ret

000040c6 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    40c6:	bf 92       	push	r11
    40c8:	cf 92       	push	r12
    40ca:	df 92       	push	r13
    40cc:	ef 92       	push	r14
    40ce:	ff 92       	push	r15
    40d0:	0f 93       	push	r16
    40d2:	1f 93       	push	r17
    40d4:	cf 93       	push	r28
    40d6:	df 93       	push	r29
    40d8:	eb 01       	movw	r28, r22
    40da:	69 01       	movw	r12, r18
    40dc:	7a 01       	movw	r14, r20
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    40de:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <disk_status>
    40e2:	80 fd       	sbrc	r24, 0
    40e4:	3d c0       	rjmp	.+122    	; 0x4160 <__stack+0x61>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    40e6:	80 91 22 01 	lds	r24, 0x0122
    40ea:	83 fd       	sbrc	r24, 3
    40ec:	09 c0       	rjmp	.+18     	; 0x4100 <__stack+0x1>
    40ee:	0b 2e       	mov	r0, r27
    40f0:	b9 e0       	ldi	r27, 0x09	; 9
    40f2:	cc 0c       	add	r12, r12
    40f4:	dd 1c       	adc	r13, r13
    40f6:	ee 1c       	adc	r14, r14
    40f8:	ff 1c       	adc	r15, r15
    40fa:	ba 95       	dec	r27
    40fc:	d1 f7       	brne	.-12     	; 0x40f2 <disk_read+0x2c>
    40fe:	b0 2d       	mov	r27, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    4100:	02 30       	cpi	r16, 0x02	; 2
    4102:	11 05       	cpc	r17, r1
    4104:	28 f0       	brcs	.+10     	; 0x4110 <__stack+0x11>
    4106:	0f 2e       	mov	r0, r31
    4108:	f2 e1       	ldi	r31, 0x12	; 18
    410a:	bf 2e       	mov	r11, r31
    410c:	f0 2d       	mov	r31, r0
    410e:	04 c0       	rjmp	.+8      	; 0x4118 <__stack+0x19>
    4110:	0f 2e       	mov	r0, r31
    4112:	f1 e1       	ldi	r31, 0x11	; 17
    4114:	bf 2e       	mov	r11, r31
    4116:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    4118:	8b 2d       	mov	r24, r11
    411a:	b7 01       	movw	r22, r14
    411c:	a6 01       	movw	r20, r12
    411e:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <send_cmd>
    4122:	88 23       	and	r24, r24
    4124:	a9 f4       	brne	.+42     	; 0x4150 <__stack+0x51>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    4126:	ce 01       	movw	r24, r28
    4128:	60 e0       	ldi	r22, 0x00	; 0
    412a:	72 e0       	ldi	r23, 0x02	; 2
    412c:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <rcvr_datablock>
    4130:	00 97       	sbiw	r24, 0x00	; 0
    4132:	29 f0       	breq	.+10     	; 0x413e <__stack+0x3f>
			buff += 512;
    4134:	c0 50       	subi	r28, 0x00	; 0
    4136:	de 4f       	sbci	r29, 0xFE	; 254
		} while (--count);
    4138:	01 50       	subi	r16, 0x01	; 1
    413a:	10 40       	sbci	r17, 0x00	; 0
    413c:	a1 f7       	brne	.-24     	; 0x4126 <__stack+0x27>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    413e:	82 e1       	ldi	r24, 0x12	; 18
    4140:	b8 16       	cp	r11, r24
    4142:	31 f4       	brne	.+12     	; 0x4150 <__stack+0x51>
    4144:	8c e0       	ldi	r24, 0x0C	; 12
    4146:	40 e0       	ldi	r20, 0x00	; 0
    4148:	50 e0       	ldi	r21, 0x00	; 0
    414a:	ba 01       	movw	r22, r20
    414c:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <send_cmd>
	}
	deselect();
    4150:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <deselect>

	return count ? RES_ERROR : RES_OK;
    4154:	81 e0       	ldi	r24, 0x01	; 1
    4156:	01 15       	cp	r16, r1
    4158:	11 05       	cpc	r17, r1
    415a:	19 f4       	brne	.+6      	; 0x4162 <__stack+0x63>
    415c:	80 e0       	ldi	r24, 0x00	; 0
    415e:	01 c0       	rjmp	.+2      	; 0x4162 <__stack+0x63>
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    4160:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    4162:	df 91       	pop	r29
    4164:	cf 91       	pop	r28
    4166:	1f 91       	pop	r17
    4168:	0f 91       	pop	r16
    416a:	ff 90       	pop	r15
    416c:	ef 90       	pop	r14
    416e:	df 90       	pop	r13
    4170:	cf 90       	pop	r12
    4172:	bf 90       	pop	r11
    4174:	08 95       	ret

00004176 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    4176:	cf 92       	push	r12
    4178:	df 92       	push	r13
    417a:	ef 92       	push	r14
    417c:	ff 92       	push	r15
    417e:	0f 93       	push	r16
    4180:	1f 93       	push	r17
    4182:	cf 93       	push	r28
    4184:	df 93       	push	r29
    4186:	eb 01       	movw	r28, r22
    4188:	69 01       	movw	r12, r18
    418a:	7a 01       	movw	r14, r20
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    418c:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <disk_status>
    4190:	80 fd       	sbrc	r24, 0
    4192:	50 c0       	rjmp	.+160    	; 0x4234 <disk_write+0xbe>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    4194:	80 91 22 01 	lds	r24, 0x0122
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	83 fd       	sbrc	r24, 3
    419c:	09 c0       	rjmp	.+18     	; 0x41b0 <disk_write+0x3a>
    419e:	0b 2e       	mov	r0, r27
    41a0:	b9 e0       	ldi	r27, 0x09	; 9
    41a2:	cc 0c       	add	r12, r12
    41a4:	dd 1c       	adc	r13, r13
    41a6:	ee 1c       	adc	r14, r14
    41a8:	ff 1c       	adc	r15, r15
    41aa:	ba 95       	dec	r27
    41ac:	d1 f7       	brne	.-12     	; 0x41a2 <disk_write+0x2c>
    41ae:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    41b0:	01 30       	cpi	r16, 0x01	; 1
    41b2:	11 05       	cpc	r17, r1
    41b4:	71 f4       	brne	.+28     	; 0x41d2 <disk_write+0x5c>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    41b6:	88 e1       	ldi	r24, 0x18	; 24
    41b8:	b7 01       	movw	r22, r14
    41ba:	a6 01       	movw	r20, r12
    41bc:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <send_cmd>
    41c0:	88 23       	and	r24, r24
    41c2:	81 f5       	brne	.+96     	; 0x4224 <disk_write+0xae>
			&& xmit_datablock(buff, 0xFE))
    41c4:	ce 01       	movw	r24, r28
    41c6:	6e ef       	ldi	r22, 0xFE	; 254
    41c8:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <xmit_datablock>
    41cc:	00 97       	sbiw	r24, 0x00	; 0
    41ce:	29 f5       	brne	.+74     	; 0x421a <disk_write+0xa4>
    41d0:	29 c0       	rjmp	.+82     	; 0x4224 <disk_write+0xae>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    41d2:	86 70       	andi	r24, 0x06	; 6
    41d4:	90 70       	andi	r25, 0x00	; 0
    41d6:	00 97       	sbiw	r24, 0x00	; 0
    41d8:	31 f0       	breq	.+12     	; 0x41e6 <disk_write+0x70>
    41da:	a8 01       	movw	r20, r16
    41dc:	60 e0       	ldi	r22, 0x00	; 0
    41de:	70 e0       	ldi	r23, 0x00	; 0
    41e0:	87 e9       	ldi	r24, 0x97	; 151
    41e2:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    41e6:	89 e1       	ldi	r24, 0x19	; 25
    41e8:	b7 01       	movw	r22, r14
    41ea:	a6 01       	movw	r20, r12
    41ec:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <send_cmd>
    41f0:	88 23       	and	r24, r24
    41f2:	c1 f4       	brne	.+48     	; 0x4224 <disk_write+0xae>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    41f4:	ce 01       	movw	r24, r28
    41f6:	6c ef       	ldi	r22, 0xFC	; 252
    41f8:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <xmit_datablock>
    41fc:	00 97       	sbiw	r24, 0x00	; 0
    41fe:	29 f0       	breq	.+10     	; 0x420a <disk_write+0x94>
				buff += 512;
    4200:	c0 50       	subi	r28, 0x00	; 0
    4202:	de 4f       	sbci	r29, 0xFE	; 254
			} while (--count);
    4204:	01 50       	subi	r16, 0x01	; 1
    4206:	10 40       	sbci	r17, 0x00	; 0
    4208:	a9 f7       	brne	.-22     	; 0x41f4 <disk_write+0x7e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	6d ef       	ldi	r22, 0xFD	; 253
    4210:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <xmit_datablock>
    4214:	00 97       	sbiw	r24, 0x00	; 0
    4216:	21 f0       	breq	.+8      	; 0x4220 <disk_write+0xaa>
    4218:	05 c0       	rjmp	.+10     	; 0x4224 <disk_write+0xae>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
    421a:	00 e0       	ldi	r16, 0x00	; 0
    421c:	10 e0       	ldi	r17, 0x00	; 0
    421e:	02 c0       	rjmp	.+4      	; 0x4224 <disk_write+0xae>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
    4220:	01 e0       	ldi	r16, 0x01	; 1
    4222:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    4224:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <deselect>

	return count ? RES_ERROR : RES_OK;
    4228:	81 e0       	ldi	r24, 0x01	; 1
    422a:	01 15       	cp	r16, r1
    422c:	11 05       	cpc	r17, r1
    422e:	19 f4       	brne	.+6      	; 0x4236 <disk_write+0xc0>
    4230:	80 e0       	ldi	r24, 0x00	; 0
    4232:	01 c0       	rjmp	.+2      	; 0x4236 <disk_write+0xc0>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    4234:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    4236:	df 91       	pop	r29
    4238:	cf 91       	pop	r28
    423a:	1f 91       	pop	r17
    423c:	0f 91       	pop	r16
    423e:	ff 90       	pop	r15
    4240:	ef 90       	pop	r14
    4242:	df 90       	pop	r13
    4244:	cf 90       	pop	r12
    4246:	08 95       	ret

00004248 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    4248:	ef 92       	push	r14
    424a:	ff 92       	push	r15
    424c:	0f 93       	push	r16
    424e:	1f 93       	push	r17
    4250:	cf 93       	push	r28
    4252:	df 93       	push	r29
    4254:	cd b7       	in	r28, 0x3d	; 61
    4256:	de b7       	in	r29, 0x3e	; 62
    4258:	60 97       	sbiw	r28, 0x10	; 16
    425a:	0f b6       	in	r0, 0x3f	; 63
    425c:	f8 94       	cli
    425e:	de bf       	out	0x3e, r29	; 62
    4260:	0f be       	out	0x3f, r0	; 63
    4262:	cd bf       	out	0x3d, r28	; 61
    4264:	16 2f       	mov	r17, r22
    4266:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    4268:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <disk_status>
    426c:	80 fd       	sbrc	r24, 0
    426e:	a2 c0       	rjmp	.+324    	; 0x43b4 <disk_ioctl+0x16c>

	res = RES_ERROR;
	switch (ctrl) {
    4270:	11 30       	cpi	r17, 0x01	; 1
    4272:	69 f0       	breq	.+26     	; 0x428e <disk_ioctl+0x46>
    4274:	11 30       	cpi	r17, 0x01	; 1
    4276:	20 f0       	brcs	.+8      	; 0x4280 <disk_ioctl+0x38>
    4278:	13 30       	cpi	r17, 0x03	; 3
    427a:	09 f0       	breq	.+2      	; 0x427e <disk_ioctl+0x36>
    427c:	91 c0       	rjmp	.+290    	; 0x43a0 <disk_ioctl+0x158>
    427e:	85 c0       	rjmp	.+266    	; 0x438a <disk_ioctl+0x142>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
    4280:	0e 94 84 1e 	call	0x3d08	; 0x3d08 <select>
    4284:	00 97       	sbiw	r24, 0x00	; 0
    4286:	09 f0       	breq	.+2      	; 0x428a <disk_ioctl+0x42>
    4288:	8d c0       	rjmp	.+282    	; 0x43a4 <disk_ioctl+0x15c>
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
    428a:	11 e0       	ldi	r17, 0x01	; 1
    428c:	90 c0       	rjmp	.+288    	; 0x43ae <disk_ioctl+0x166>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    428e:	89 e0       	ldi	r24, 0x09	; 9
    4290:	40 e0       	ldi	r20, 0x00	; 0
    4292:	50 e0       	ldi	r21, 0x00	; 0
    4294:	ba 01       	movw	r22, r20
    4296:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <send_cmd>
    429a:	88 23       	and	r24, r24
    429c:	09 f0       	breq	.+2      	; 0x42a0 <disk_ioctl+0x58>
    429e:	84 c0       	rjmp	.+264    	; 0x43a8 <disk_ioctl+0x160>
    42a0:	ce 01       	movw	r24, r28
    42a2:	01 96       	adiw	r24, 0x01	; 1
    42a4:	60 e1       	ldi	r22, 0x10	; 16
    42a6:	70 e0       	ldi	r23, 0x00	; 0
    42a8:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <rcvr_datablock>
    42ac:	00 97       	sbiw	r24, 0x00	; 0
    42ae:	09 f4       	brne	.+2      	; 0x42b2 <disk_ioctl+0x6a>
    42b0:	7d c0       	rjmp	.+250    	; 0x43ac <disk_ioctl+0x164>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    42b2:	89 81       	ldd	r24, Y+1	; 0x01
    42b4:	82 95       	swap	r24
    42b6:	86 95       	lsr	r24
    42b8:	86 95       	lsr	r24
    42ba:	83 70       	andi	r24, 0x03	; 3
    42bc:	81 30       	cpi	r24, 0x01	; 1
    42be:	61 f5       	brne	.+88     	; 0x4318 <disk_ioctl+0xd0>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    42c0:	48 85       	ldd	r20, Y+8	; 0x08
    42c2:	50 e0       	ldi	r21, 0x00	; 0
    42c4:	60 e0       	ldi	r22, 0x00	; 0
    42c6:	70 e0       	ldi	r23, 0x00	; 0
    42c8:	4f 73       	andi	r20, 0x3F	; 63
    42ca:	50 70       	andi	r21, 0x00	; 0
    42cc:	60 70       	andi	r22, 0x00	; 0
    42ce:	70 70       	andi	r23, 0x00	; 0
    42d0:	ba 01       	movw	r22, r20
    42d2:	55 27       	eor	r21, r21
    42d4:	44 27       	eor	r20, r20
    42d6:	4f 5f       	subi	r20, 0xFF	; 255
    42d8:	5f 4f       	sbci	r21, 0xFF	; 255
    42da:	6f 4f       	sbci	r22, 0xFF	; 255
    42dc:	7f 4f       	sbci	r23, 0xFF	; 255
    42de:	99 85       	ldd	r25, Y+9	; 0x09
    42e0:	80 e0       	ldi	r24, 0x00	; 0
    42e2:	2a 85       	ldd	r18, Y+10	; 0x0a
    42e4:	82 0f       	add	r24, r18
    42e6:	91 1d       	adc	r25, r1
    42e8:	a0 e0       	ldi	r26, 0x00	; 0
    42ea:	b0 e0       	ldi	r27, 0x00	; 0
    42ec:	48 0f       	add	r20, r24
    42ee:	59 1f       	adc	r21, r25
    42f0:	6a 1f       	adc	r22, r26
    42f2:	7b 1f       	adc	r23, r27
					*(DWORD*)buff = cs << 10;
    42f4:	db 01       	movw	r26, r22
    42f6:	ca 01       	movw	r24, r20
    42f8:	07 2e       	mov	r0, r23
    42fa:	7a e0       	ldi	r23, 0x0A	; 10
    42fc:	88 0f       	add	r24, r24
    42fe:	99 1f       	adc	r25, r25
    4300:	aa 1f       	adc	r26, r26
    4302:	bb 1f       	adc	r27, r27
    4304:	7a 95       	dec	r23
    4306:	d1 f7       	brne	.-12     	; 0x42fc <disk_ioctl+0xb4>
    4308:	70 2d       	mov	r23, r0
    430a:	f7 01       	movw	r30, r14
    430c:	80 83       	st	Z, r24
    430e:	91 83       	std	Z+1, r25	; 0x01
    4310:	a2 83       	std	Z+2, r26	; 0x02
    4312:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
				}
				res = RES_OK;
    4314:	10 e0       	ldi	r17, 0x00	; 0
    4316:	4b c0       	rjmp	.+150    	; 0x43ae <disk_ioctl+0x166>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    4318:	29 85       	ldd	r18, Y+9	; 0x09
    431a:	22 95       	swap	r18
    431c:	26 95       	lsr	r18
    431e:	26 95       	lsr	r18
    4320:	23 70       	andi	r18, 0x03	; 3
    4322:	88 85       	ldd	r24, Y+8	; 0x08
    4324:	90 e0       	ldi	r25, 0x00	; 0
    4326:	88 0f       	add	r24, r24
    4328:	99 1f       	adc	r25, r25
    432a:	88 0f       	add	r24, r24
    432c:	99 1f       	adc	r25, r25
    432e:	82 0f       	add	r24, r18
    4330:	91 1d       	adc	r25, r1
    4332:	01 96       	adiw	r24, 0x01	; 1
    4334:	4f 81       	ldd	r20, Y+7	; 0x07
    4336:	50 e0       	ldi	r21, 0x00	; 0
    4338:	43 70       	andi	r20, 0x03	; 3
    433a:	50 70       	andi	r21, 0x00	; 0
    433c:	54 2f       	mov	r21, r20
    433e:	44 27       	eor	r20, r20
    4340:	55 0f       	add	r21, r21
    4342:	55 0f       	add	r21, r21
    4344:	84 0f       	add	r24, r20
    4346:	95 1f       	adc	r25, r21
    4348:	ac 01       	movw	r20, r24
    434a:	60 e0       	ldi	r22, 0x00	; 0
    434c:	70 e0       	ldi	r23, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    434e:	9e 81       	ldd	r25, Y+6	; 0x06
    4350:	9f 70       	andi	r25, 0x0F	; 15
    4352:	8b 85       	ldd	r24, Y+11	; 0x0b
    4354:	88 1f       	adc	r24, r24
    4356:	88 27       	eor	r24, r24
    4358:	88 1f       	adc	r24, r24
    435a:	98 0f       	add	r25, r24
    435c:	9e 5f       	subi	r25, 0xFE	; 254
    435e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4360:	83 70       	andi	r24, 0x03	; 3
    4362:	88 0f       	add	r24, r24
    4364:	89 0f       	add	r24, r25
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	09 97       	sbiw	r24, 0x09	; 9
    436a:	8a 01       	movw	r16, r20
    436c:	9b 01       	movw	r18, r22
    436e:	04 c0       	rjmp	.+8      	; 0x4378 <disk_ioctl+0x130>
    4370:	00 0f       	add	r16, r16
    4372:	11 1f       	adc	r17, r17
    4374:	22 1f       	adc	r18, r18
    4376:	33 1f       	adc	r19, r19
    4378:	8a 95       	dec	r24
    437a:	d2 f7       	brpl	.-12     	; 0x4370 <disk_ioctl+0x128>
    437c:	f7 01       	movw	r30, r14
    437e:	00 83       	st	Z, r16
    4380:	11 83       	std	Z+1, r17	; 0x01
    4382:	22 83       	std	Z+2, r18	; 0x02
    4384:	33 83       	std	Z+3, r19	; 0x03
				}
				res = RES_OK;
    4386:	10 e0       	ldi	r17, 0x00	; 0
    4388:	12 c0       	rjmp	.+36     	; 0x43ae <disk_ioctl+0x166>
			}
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			*(DWORD*)buff = 128;
    438a:	80 e8       	ldi	r24, 0x80	; 128
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	a0 e0       	ldi	r26, 0x00	; 0
    4390:	b0 e0       	ldi	r27, 0x00	; 0
    4392:	f7 01       	movw	r30, r14
    4394:	80 83       	st	Z, r24
    4396:	91 83       	std	Z+1, r25	; 0x01
    4398:	a2 83       	std	Z+2, r26	; 0x02
    439a:	b3 83       	std	Z+3, r27	; 0x03
			res = RES_OK;
    439c:	10 e0       	ldi	r17, 0x00	; 0
			break;
    439e:	07 c0       	rjmp	.+14     	; 0x43ae <disk_ioctl+0x166>

		default:
			res = RES_PARERR;
    43a0:	14 e0       	ldi	r17, 0x04	; 4
    43a2:	05 c0       	rjmp	.+10     	; 0x43ae <disk_ioctl+0x166>
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
	switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
    43a4:	10 e0       	ldi	r17, 0x00	; 0
    43a6:	03 c0       	rjmp	.+6      	; 0x43ae <disk_ioctl+0x166>
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
    43a8:	11 e0       	ldi	r17, 0x01	; 1
    43aa:	01 c0       	rjmp	.+2      	; 0x43ae <disk_ioctl+0x166>
    43ac:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
	}

	deselect();
    43ae:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <deselect>

	return res;
    43b2:	01 c0       	rjmp	.+2      	; 0x43b6 <disk_ioctl+0x16e>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    43b4:	13 e0       	ldi	r17, 0x03	; 3
	}

	deselect();

	return res;
}
    43b6:	81 2f       	mov	r24, r17
    43b8:	60 96       	adiw	r28, 0x10	; 16
    43ba:	0f b6       	in	r0, 0x3f	; 63
    43bc:	f8 94       	cli
    43be:	de bf       	out	0x3e, r29	; 62
    43c0:	0f be       	out	0x3f, r0	; 63
    43c2:	cd bf       	out	0x3d, r28	; 61
    43c4:	df 91       	pop	r29
    43c6:	cf 91       	pop	r28
    43c8:	1f 91       	pop	r17
    43ca:	0f 91       	pop	r16
    43cc:	ff 90       	pop	r15
    43ce:	ef 90       	pop	r14
    43d0:	08 95       	ret

000043d2 <__mulsi3>:
    43d2:	62 9f       	mul	r22, r18
    43d4:	d0 01       	movw	r26, r0
    43d6:	73 9f       	mul	r23, r19
    43d8:	f0 01       	movw	r30, r0
    43da:	82 9f       	mul	r24, r18
    43dc:	e0 0d       	add	r30, r0
    43de:	f1 1d       	adc	r31, r1
    43e0:	64 9f       	mul	r22, r20
    43e2:	e0 0d       	add	r30, r0
    43e4:	f1 1d       	adc	r31, r1
    43e6:	92 9f       	mul	r25, r18
    43e8:	f0 0d       	add	r31, r0
    43ea:	83 9f       	mul	r24, r19
    43ec:	f0 0d       	add	r31, r0
    43ee:	74 9f       	mul	r23, r20
    43f0:	f0 0d       	add	r31, r0
    43f2:	65 9f       	mul	r22, r21
    43f4:	f0 0d       	add	r31, r0
    43f6:	99 27       	eor	r25, r25
    43f8:	72 9f       	mul	r23, r18
    43fa:	b0 0d       	add	r27, r0
    43fc:	e1 1d       	adc	r30, r1
    43fe:	f9 1f       	adc	r31, r25
    4400:	63 9f       	mul	r22, r19
    4402:	b0 0d       	add	r27, r0
    4404:	e1 1d       	adc	r30, r1
    4406:	f9 1f       	adc	r31, r25
    4408:	bd 01       	movw	r22, r26
    440a:	cf 01       	movw	r24, r30
    440c:	11 24       	eor	r1, r1
    440e:	08 95       	ret

00004410 <__udivmodsi4>:
    4410:	a1 e2       	ldi	r26, 0x21	; 33
    4412:	1a 2e       	mov	r1, r26
    4414:	aa 1b       	sub	r26, r26
    4416:	bb 1b       	sub	r27, r27
    4418:	fd 01       	movw	r30, r26
    441a:	0d c0       	rjmp	.+26     	; 0x4436 <__udivmodsi4_ep>

0000441c <__udivmodsi4_loop>:
    441c:	aa 1f       	adc	r26, r26
    441e:	bb 1f       	adc	r27, r27
    4420:	ee 1f       	adc	r30, r30
    4422:	ff 1f       	adc	r31, r31
    4424:	a2 17       	cp	r26, r18
    4426:	b3 07       	cpc	r27, r19
    4428:	e4 07       	cpc	r30, r20
    442a:	f5 07       	cpc	r31, r21
    442c:	20 f0       	brcs	.+8      	; 0x4436 <__udivmodsi4_ep>
    442e:	a2 1b       	sub	r26, r18
    4430:	b3 0b       	sbc	r27, r19
    4432:	e4 0b       	sbc	r30, r20
    4434:	f5 0b       	sbc	r31, r21

00004436 <__udivmodsi4_ep>:
    4436:	66 1f       	adc	r22, r22
    4438:	77 1f       	adc	r23, r23
    443a:	88 1f       	adc	r24, r24
    443c:	99 1f       	adc	r25, r25
    443e:	1a 94       	dec	r1
    4440:	69 f7       	brne	.-38     	; 0x441c <__udivmodsi4_loop>
    4442:	60 95       	com	r22
    4444:	70 95       	com	r23
    4446:	80 95       	com	r24
    4448:	90 95       	com	r25
    444a:	9b 01       	movw	r18, r22
    444c:	ac 01       	movw	r20, r24
    444e:	bd 01       	movw	r22, r26
    4450:	cf 01       	movw	r24, r30
    4452:	08 95       	ret

00004454 <_exit>:
    4454:	f8 94       	cli

00004456 <__stop_program>:
    4456:	ff cf       	rjmp	.-2      	; 0x4456 <__stop_program>
