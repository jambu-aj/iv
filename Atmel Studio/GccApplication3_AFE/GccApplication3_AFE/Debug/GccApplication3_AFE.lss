
GccApplication3_AFE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000530  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800100  00800100  000005a4  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000005a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004d5  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000181  00000000  00000000  0000124d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036f  00000000  00000000  000013ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018a  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  0000199e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e3       	ldi	r30, 0x30	; 48
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 30       	cpi	r26, 0x08	; 8
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 85 02 	call	0x50a	; 0x50a <main>
  c6:	0c 94 96 02 	jmp	0x52c	; 0x52c <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <SPI_MasterInit>:
}

void SPI_MasterInit(void){
	//Function modified from ATmega 1284P Datasheet
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<CS2)|(1<<CS1)|(1<<MOSI)|(1<<SCK);
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	84 6b       	ori	r24, 0xB4	; 180
  d2:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI, Master, set clock rate fck/4 -> 250kHz */
	SPCR = (1<<SPE)|(1<<MSTR);
  d4:	80 e5       	ldi	r24, 0x50	; 80
  d6:	8c bd       	out	0x2c, r24	; 44
}
  d8:	08 95       	ret

000000da <SPI_MasterTransmit>:

void SPI_MasterTransmit(unsigned char cData){
	//Function copied from ATmega 1284P Datasheet
	/* Start transmission */
	SPDR = cData;
  da:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
  dc:	0d b4       	in	r0, 0x2d	; 45
  de:	07 fe       	sbrs	r0, 7
  e0:	fd cf       	rjmp	.-6      	; 0xdc <SPI_MasterTransmit+0x2>
	;
}
  e2:	08 95       	ret

000000e4 <SPI_MasterReceive>:

unsigned char SPI_MasterReceive(unsigned char cdata){
	SPDR=cdata;
  e4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){
  e6:	0d b4       	in	r0, 0x2d	; 45
  e8:	07 fe       	sbrs	r0, 7
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <SPI_MasterReceive+0x2>
		//do nothing
	}
	/* Return Data Register */
	return SPDR;
  ec:	8e b5       	in	r24, 0x2e	; 46
}
  ee:	08 95       	ret

000000f0 <CS2up>:

void CS2up(){
	PORTB |= (1<<DDB2); //Assert PB2 HIGH
  f0:	2a 9a       	sbi	0x05, 2	; 5
}
  f2:	08 95       	ret

000000f4 <CS2down>:

void CS2down(){
	PORTB &= !(1<<DDB2); //Assert PB2 LOW
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	15 b8       	out	0x05, r1	; 5
}
  f8:	08 95       	ret

000000fa <AFE_Init_BCM_SS>:

void AFE_Init_BCM_SS(){
	CS2down();
  fa:	0e 94 7a 00 	call	0xf4	; 0xf4 <CS2down>
	
	//Config Code START
	SPI_MasterTransmit(0x02); // Misc Reg 1
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x03); // Misc Reg 2
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x09); // Dev Cont 1
 122:	89 e0       	ldi	r24, 0x09	; 9
 124:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x60);
 128:	80 e6       	ldi	r24, 0x60	; 96
 12a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x06);
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0A); // ISW Mux
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x40);
 13a:	80 e4       	ldi	r24, 0x40	; 64
 13c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x80);
 140:	80 e8       	ldi	r24, 0x80	; 128
 142:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0B); // VSense Mux
 146:	8b e0       	ldi	r24, 0x0B	; 11
 148:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x40);
 14c:	80 e4       	ldi	r24, 0x40	; 64
 14e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x80);
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0C); // IQ Mode Enable
 158:	8c e0       	ldi	r24, 0x0C	; 12
 15a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0D); // Weight Scale Control
 16a:	8d e0       	ldi	r24, 0x0D	; 13
 16c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0E); // BCM DAC Freq
 17c:	8e e0       	ldi	r24, 0x0E	; 14
 17e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x01);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0F); // Dev Cont 2
 18e:	8f e0       	ldi	r24, 0x0F	; 15
 190:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x10); // ADC Control Reg 2
 1a0:	80 e1       	ldi	r24, 0x10	; 16
 1a2:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x63);
 1ac:	83 e6       	ldi	r24, 0x63	; 99
 1ae:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x1A); // Misc Reg 3
 1b2:	8a e1       	ldi	r24, 0x1A	; 26
 1b4:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x30);
 1be:	80 e3       	ldi	r24, 0x30	; 48
 1c0:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	//Config Code END
	
	//Begin ADC Conversion
	SPI_MasterTransmit(0x01); // ADC Control Reg 1
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xC1);
 1ca:	81 ec       	ldi	r24, 0xC1	; 193
 1cc:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xD0);
 1d0:	80 ed       	ldi	r24, 0xD0	; 208
 1d2:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
			
	CS2up();
 1d6:	0e 94 78 00 	call	0xf0	; 0xf0 <CS2up>
}
 1da:	08 95       	ret

000001dc <AFE_Init_BCM_Cont>:

void AFE_Init_BCM_Cont(){
	CS2down();
 1dc:	0e 94 7a 00 	call	0xf4	; 0xf4 <CS2down>
	
	//Config Code START
	SPI_MasterTransmit(0x02); // Misc Reg 1
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x03); // Misc Reg 2
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x09); // Dev Cont 1
 204:	89 e0       	ldi	r24, 0x09	; 9
 206:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x60);
 20a:	80 e6       	ldi	r24, 0x60	; 96
 20c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x06);
 210:	86 e0       	ldi	r24, 0x06	; 6
 212:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0A); // ISW Mux
 216:	8a e0       	ldi	r24, 0x0A	; 10
 218:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x40);
 21c:	80 e4       	ldi	r24, 0x40	; 64
 21e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x80);
 222:	80 e8       	ldi	r24, 0x80	; 128
 224:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0B); // VSense Mux
 228:	8b e0       	ldi	r24, 0x0B	; 11
 22a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x40);
 22e:	80 e4       	ldi	r24, 0x40	; 64
 230:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x80);
 234:	80 e8       	ldi	r24, 0x80	; 128
 236:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0C); // IQ Mode Enable
 23a:	8c e0       	ldi	r24, 0x0C	; 12
 23c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0D); // Weight Scale Control
 24c:	8d e0       	ldi	r24, 0x0D	; 13
 24e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0E); // BCM DAC Freq
 25e:	8e e0       	ldi	r24, 0x0E	; 14
 260:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x01);
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0F); // Dev Cont 2
 270:	8f e0       	ldi	r24, 0x0F	; 15
 272:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x10); // ADC Control Reg 2
 282:	80 e1       	ldi	r24, 0x10	; 16
 284:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x63);
 28e:	83 e6       	ldi	r24, 0x63	; 99
 290:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x1A); // Misc Reg 3
 294:	8a e1       	ldi	r24, 0x1A	; 26
 296:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x30);
 2a0:	80 e3       	ldi	r24, 0x30	; 48
 2a2:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	//Config Code END
	
	//Begin ADC Conversion
	SPI_MasterTransmit(0x01); // ADC Control Reg 1
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x41); // Continuous Conversion w/ Differential Input
 2ac:	81 e4       	ldi	r24, 0x41	; 65
 2ae:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x50); //<-250 Samples/Sec
 2b2:	80 e5       	ldi	r24, 0x50	; 80
 2b4:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	CS2up();
 2b8:	0e 94 78 00 	call	0xf0	; 0xf0 <CS2up>
}
 2bc:	08 95       	ret

000002be <readBCM>:

uint16_t readBCM(){
		AFE_Init_BCM_SS(); //BCM Read Single Shot Mode
 2be:	0e 94 7d 00 	call	0xfa	; 0xfa <AFE_Init_BCM_SS>
			
		//Polling for RDY (PINB0 must transition 1>0)
		while(PINB & 0x01){}
 2c2:	18 99       	sbic	0x03, 0	; 3
 2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <readBCM+0x4>
		
		//Read Conversion Data
		CS2down();
 2c6:	0e 94 7a 00 	call	0xf4	; 0xf4 <CS2down>
		SPI_MasterTransmit(0x20);
 2ca:	80 e2       	ldi	r24, 0x20	; 32
 2cc:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
		msb=SPI_MasterReceive(0xff);
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	0e 94 72 00 	call	0xe4	; 0xe4 <SPI_MasterReceive>
 2d6:	80 93 03 01 	sts	0x0103, r24
		lsb=SPI_MasterReceive(0xff);
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	0e 94 72 00 	call	0xe4	; 0xe4 <SPI_MasterReceive>
 2e0:	80 93 00 01 	sts	0x0100, r24
		CS2up();
 2e4:	0e 94 78 00 	call	0xf0	; 0xf0 <CS2up>
		
		//Combine [MSB(8) LSB(8)] into 16bit Val
		msb_lsb_comb=((uint16_t) msb<<8)|lsb;
 2e8:	30 91 03 01 	lds	r19, 0x0103
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	80 91 00 01 	lds	r24, 0x0100
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	82 2b       	or	r24, r18
 2f6:	93 2b       	or	r25, r19
 2f8:	90 93 07 01 	sts	0x0107, r25
 2fc:	80 93 06 01 	sts	0x0106, r24
		return msb_lsb_comb;
	
}
 300:	08 95       	ret

00000302 <AFE_Init_WSM_SS>:

void AFE_Init_WSM_SS(){
	CS2down();
 302:	0e 94 7a 00 	call	0xf4	; 0xf4 <CS2down>
	
	//Config Code START
	SPI_MasterTransmit(0x02); // Misc Reg 1
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x03); // Misc Reg 2
 318:	83 e0       	ldi	r24, 0x03	; 3
 31a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
 31e:	8f ef       	ldi	r24, 0xFF	; 255
 320:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
 324:	8f ef       	ldi	r24, 0xFF	; 255
 326:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x09); // Dev Cont 1
 32a:	89 e0       	ldi	r24, 0x09	; 9
 32c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x60);
 330:	80 e6       	ldi	r24, 0x60	; 96
 332:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x05);
 336:	85 e0       	ldi	r24, 0x05	; 5
 338:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0A); // ISW Mux
 33c:	8a e0       	ldi	r24, 0x0A	; 10
 33e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0B); // VSense Mux
 34e:	8b e0       	ldi	r24, 0x0B	; 11
 350:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0C); // IQ Mode Enable
 360:	8c e0       	ldi	r24, 0x0C	; 12
 362:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0D); // Weight Scale Control
 372:	8d e0       	ldi	r24, 0x0D	; 13
 374:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00); // 2nd Stage Gain = 1, No Offset DAC Val
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0E); // BCM DAC Freq
 384:	8e e0       	ldi	r24, 0x0E	; 14
 386:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0F); // Dev Cont 2
 396:	8f e0       	ldi	r24, 0x0F	; 15
 398:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x10); // ADC Control Reg 2
 3a8:	80 e1       	ldi	r24, 0x10	; 16
 3aa:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x1A); // Misc Reg 3
 3ba:	8a e1       	ldi	r24, 0x1A	; 26
 3bc:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x30);
 3c6:	80 e3       	ldi	r24, 0x30	; 48
 3c8:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	//Config Code END
	
	//Begin ADC Conversion
	SPI_MasterTransmit(0x01); // ADC Control Reg 1
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xC1);
 3d2:	81 ec       	ldi	r24, 0xC1	; 193
 3d4:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xD0);
 3d8:	80 ed       	ldi	r24, 0xD0	; 208
 3da:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	CS2up();
 3de:	0e 94 78 00 	call	0xf0	; 0xf0 <CS2up>
}
 3e2:	08 95       	ret

000003e4 <AFE_Init_WSM_Cont>:

void AFE_Init_WSM_Cont(){
	CS2down();
 3e4:	0e 94 7a 00 	call	0xf4	; 0xf4 <CS2down>
	
	//Config Code START
	SPI_MasterTransmit(0x02); // Misc Reg 1
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x03); // Misc Reg 2
 3fa:	83 e0       	ldi	r24, 0x03	; 3
 3fc:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
 406:	8f ef       	ldi	r24, 0xFF	; 255
 408:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x09); // Dev Cont 1
 40c:	89 e0       	ldi	r24, 0x09	; 9
 40e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x60);
 412:	80 e6       	ldi	r24, 0x60	; 96
 414:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x05);
 418:	85 e0       	ldi	r24, 0x05	; 5
 41a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0A); // ISW Mux
 41e:	8a e0       	ldi	r24, 0x0A	; 10
 420:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0B); // VSense Mux
 430:	8b e0       	ldi	r24, 0x0B	; 11
 432:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0C); // IQ Mode Enable
 442:	8c e0       	ldi	r24, 0x0C	; 12
 444:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0D); // Weight Scale Control
 454:	8d e0       	ldi	r24, 0x0D	; 13
 456:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00); // 2nd Stage Gain = 1, No Offset DAC Val
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0E); // BCM DAC Freq
 466:	8e e0       	ldi	r24, 0x0E	; 14
 468:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0F); // Dev Cont 2
 478:	8f e0       	ldi	r24, 0x0F	; 15
 47a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x10); // ADC Control Reg 2
 48a:	80 e1       	ldi	r24, 0x10	; 16
 48c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x1A); // Misc Reg 3
 49c:	8a e1       	ldi	r24, 0x1A	; 26
 49e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x30);
 4a8:	80 e3       	ldi	r24, 0x30	; 48
 4aa:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	//Config Code END
	
	//Begin ADC Conversion
	SPI_MasterTransmit(0x01); // ADC Control Reg 1
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x41);
 4b4:	81 e4       	ldi	r24, 0x41	; 65
 4b6:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x50);
 4ba:	80 e5       	ldi	r24, 0x50	; 80
 4bc:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	CS2up();
 4c0:	0e 94 78 00 	call	0xf0	; 0xf0 <CS2up>
}
 4c4:	08 95       	ret

000004c6 <readWSM>:

uint16_t readWSM(){
		AFE_Init_WSM_SS();
 4c6:	0e 94 81 01 	call	0x302	; 0x302 <AFE_Init_WSM_SS>
		
		//Polling for RDY (PINB0 must transition 1>0)
		while(PINB & 0x01){}
 4ca:	18 99       	sbic	0x03, 0	; 3
 4cc:	fe cf       	rjmp	.-4      	; 0x4ca <readWSM+0x4>
			
		//Read Conversion Data
		CS2down();
 4ce:	0e 94 7a 00 	call	0xf4	; 0xf4 <CS2down>
		SPI_MasterTransmit(0x20);
 4d2:	80 e2       	ldi	r24, 0x20	; 32
 4d4:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
		msb=SPI_MasterReceive(0xff);
 4d8:	8f ef       	ldi	r24, 0xFF	; 255
 4da:	0e 94 72 00 	call	0xe4	; 0xe4 <SPI_MasterReceive>
 4de:	80 93 03 01 	sts	0x0103, r24
		lsb=SPI_MasterReceive(0xff);
 4e2:	8f ef       	ldi	r24, 0xFF	; 255
 4e4:	0e 94 72 00 	call	0xe4	; 0xe4 <SPI_MasterReceive>
 4e8:	80 93 00 01 	sts	0x0100, r24
		CS2up();
 4ec:	0e 94 78 00 	call	0xf0	; 0xf0 <CS2up>
		
		//Combine [MSB(8) LSB(8)] into 16bit Val
		msb_lsb_comb=((uint16_t) msb<<8)|lsb;
 4f0:	30 91 03 01 	lds	r19, 0x0103
 4f4:	20 e0       	ldi	r18, 0x00	; 0
 4f6:	80 91 00 01 	lds	r24, 0x0100
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	82 2b       	or	r24, r18
 4fe:	93 2b       	or	r25, r19
 500:	90 93 07 01 	sts	0x0107, r25
 504:	80 93 06 01 	sts	0x0106, r24
		return msb_lsb_comb;
}
 508:	08 95       	ret

0000050a <main>:


int main(void)
{
    while(1){
		SPI_MasterInit();
 50a:	0e 94 67 00 	call	0xce	; 0xce <SPI_MasterInit>
		CS2up();	
 50e:	0e 94 78 00 	call	0xf0	; 0xf0 <CS2up>
		
		while(1){
		DATA_BCM=readBCM();
 512:	0e 94 5f 01 	call	0x2be	; 0x2be <readBCM>
 516:	90 93 02 01 	sts	0x0102, r25
 51a:	80 93 01 01 	sts	0x0101, r24
		DATA_WSM=readWSM();
 51e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <readWSM>
 522:	90 93 05 01 	sts	0x0105, r25
 526:	80 93 04 01 	sts	0x0104, r24
 52a:	f3 cf       	rjmp	.-26     	; 0x512 <main+0x8>

0000052c <_exit>:
 52c:	f8 94       	cli

0000052e <__stop_program>:
 52e:	ff cf       	rjmp	.-2      	; 0x52e <__stop_program>
