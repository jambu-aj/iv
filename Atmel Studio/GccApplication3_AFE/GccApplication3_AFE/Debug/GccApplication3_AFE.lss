
GccApplication3_AFE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000053c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800100  00800100  000005b0  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000d08  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004c8  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000181  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036b  00000000  00000000  000013d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  0000173c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000193  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  000019a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e3       	ldi	r30, 0x3C	; 60
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 30       	cpi	r26, 0x08	; 8
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 8b 01 	call	0x316	; 0x316 <main>
  c6:	0c 94 9c 02 	jmp	0x538	; 0x538 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <SPI_MasterInit>:
}

void SPI_MasterInit(void){
	//Function modified from ATmega 1284P Datasheet
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<CS2)|(1<<CS1)|(1<<MOSI)|(1<<SCK);
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	84 6b       	ori	r24, 0xB4	; 180
  d2:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI, Master, set clock rate fck/4 -> 250kHz */
	SPCR = (1<<SPE)|(1<<MSTR);
  d4:	80 e5       	ldi	r24, 0x50	; 80
  d6:	8c bd       	out	0x2c, r24	; 44
}
  d8:	08 95       	ret

000000da <SPI_MasterTransmit>:

void SPI_MasterTransmit(unsigned char cData){
	//Function copied from ATmega 1284P Datasheet
	/* Start transmission */
	SPDR = cData;
  da:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
  dc:	0d b4       	in	r0, 0x2d	; 45
  de:	07 fe       	sbrs	r0, 7
  e0:	fd cf       	rjmp	.-6      	; 0xdc <SPI_MasterTransmit+0x2>
	;
}
  e2:	08 95       	ret

000000e4 <SPI_MasterReceive>:

unsigned char SPI_MasterReceive(unsigned char cdata){
	SPDR=cdata;
  e4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){
  e6:	0d b4       	in	r0, 0x2d	; 45
  e8:	07 fe       	sbrs	r0, 7
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <SPI_MasterReceive+0x2>
		//do nothing
	}
	/* Return Data Register */
	return SPDR;
  ec:	8e b5       	in	r24, 0x2e	; 46
}
  ee:	08 95       	ret

000000f0 <CS2up>:

void CS2up(){
	PORTB |= (1<<DDB2); //Assert PB2 HIGH
  f0:	2a 9a       	sbi	0x05, 2	; 5
}
  f2:	08 95       	ret

000000f4 <CS2down>:

void CS2down(){
	PORTB &= !(1<<DDB2); //Assert PB2 LOW
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	15 b8       	out	0x05, r1	; 5
}
  f8:	08 95       	ret

000000fa <AFE_Init_BCM_SS>:

void AFE_Init_BCM_SS(){
	CS2down();
  fa:	0e 94 7a 00 	call	0xf4	; 0xf4 <CS2down>
	
	//Config Code START
	SPI_MasterTransmit(0x02); // Misc Reg 1
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x03); // Misc Reg 2
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x09); // Dev Cont 1
 122:	89 e0       	ldi	r24, 0x09	; 9
 124:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x60);
 128:	80 e6       	ldi	r24, 0x60	; 96
 12a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x06);
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0A); // ISW Mux
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x40);
 13a:	80 e4       	ldi	r24, 0x40	; 64
 13c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x80);
 140:	80 e8       	ldi	r24, 0x80	; 128
 142:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0B); // VSense Mux
 146:	8b e0       	ldi	r24, 0x0B	; 11
 148:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x40);
 14c:	80 e4       	ldi	r24, 0x40	; 64
 14e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x80);
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0C); // IQ Mode Enable
 158:	8c e0       	ldi	r24, 0x0C	; 12
 15a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0D); // Weight Scale Control
 16a:	8d e0       	ldi	r24, 0x0D	; 13
 16c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0E); // BCM DAC Freq
 17c:	8e e0       	ldi	r24, 0x0E	; 14
 17e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x01);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0F); // Dev Cont 2
 18e:	8f e0       	ldi	r24, 0x0F	; 15
 190:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x10); // ADC Control Reg 2
 1a0:	80 e1       	ldi	r24, 0x10	; 16
 1a2:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x63);
 1ac:	83 e6       	ldi	r24, 0x63	; 99
 1ae:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x1A); // Misc Reg 3
 1b2:	8a e1       	ldi	r24, 0x1A	; 26
 1b4:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x30);
 1be:	80 e3       	ldi	r24, 0x30	; 48
 1c0:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	//Config Code END
	
	//Begin ADC Conversion
	SPI_MasterTransmit(0x01); // ADC Control Reg 1
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xC1);
 1ca:	81 ec       	ldi	r24, 0xC1	; 193
 1cc:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xD0);
 1d0:	80 ed       	ldi	r24, 0xD0	; 208
 1d2:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
			
	CS2up();
 1d6:	0e 94 78 00 	call	0xf0	; 0xf0 <CS2up>
	CS2down();
 1da:	0e 94 7a 00 	call	0xf4	; 0xf4 <CS2down>
	CS2up();
 1de:	0e 94 78 00 	call	0xf0	; 0xf0 <CS2up>
	CS2down();
 1e2:	0e 94 7a 00 	call	0xf4	; 0xf4 <CS2down>
	CS2up();
 1e6:	0e 94 78 00 	call	0xf0	; 0xf0 <CS2up>
	CS2down();
 1ea:	0e 94 7a 00 	call	0xf4	; 0xf4 <CS2down>
	CS2up();
 1ee:	0e 94 78 00 	call	0xf0	; 0xf0 <CS2up>
}
 1f2:	08 95       	ret

000001f4 <AFE_Init_BCM_Cont>:

void AFE_Init_BCM_Cont(){
	CS2down();
 1f4:	0e 94 7a 00 	call	0xf4	; 0xf4 <CS2down>
	
	//Config Code START
	SPI_MasterTransmit(0x02); // Misc Reg 1
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x03); // Misc Reg 2
 20a:	83 e0       	ldi	r24, 0x03	; 3
 20c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x09); // Dev Cont 1
 21c:	89 e0       	ldi	r24, 0x09	; 9
 21e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x60);
 222:	80 e6       	ldi	r24, 0x60	; 96
 224:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x06);
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0A); // ISW Mux
 22e:	8a e0       	ldi	r24, 0x0A	; 10
 230:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x40);
 234:	80 e4       	ldi	r24, 0x40	; 64
 236:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x80);
 23a:	80 e8       	ldi	r24, 0x80	; 128
 23c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0B); // VSense Mux
 240:	8b e0       	ldi	r24, 0x0B	; 11
 242:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x40);
 246:	80 e4       	ldi	r24, 0x40	; 64
 248:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x80);
 24c:	80 e8       	ldi	r24, 0x80	; 128
 24e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0C); // IQ Mode Enable
 252:	8c e0       	ldi	r24, 0x0C	; 12
 254:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0D); // Weight Scale Control
 264:	8d e0       	ldi	r24, 0x0D	; 13
 266:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0E); // BCM DAC Freq
 276:	8e e0       	ldi	r24, 0x0E	; 14
 278:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x01);
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0F); // Dev Cont 2
 288:	8f e0       	ldi	r24, 0x0F	; 15
 28a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x10); // ADC Control Reg 2
 29a:	80 e1       	ldi	r24, 0x10	; 16
 29c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x63);
 2a6:	83 e6       	ldi	r24, 0x63	; 99
 2a8:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x1A); // Misc Reg 3
 2ac:	8a e1       	ldi	r24, 0x1A	; 26
 2ae:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x30);
 2b8:	80 e3       	ldi	r24, 0x30	; 48
 2ba:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	//Config Code END
	
	//Begin ADC Conversion
	SPI_MasterTransmit(0x01); // ADC Control Reg 1
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x41); // Continuous Conversion w/ Differential Input
 2c4:	81 e4       	ldi	r24, 0x41	; 65
 2c6:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x50); //<-250 Samples/Sec
 2ca:	80 e5       	ldi	r24, 0x50	; 80
 2cc:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	CS2up();
 2d0:	0e 94 78 00 	call	0xf0	; 0xf0 <CS2up>
}
 2d4:	08 95       	ret

000002d6 <readBCM>:

uint16_t readBCM(){
		AFE_Init_BCM_SS(); //BCM Read Single Shot Mode
 2d6:	0e 94 7d 00 	call	0xfa	; 0xfa <AFE_Init_BCM_SS>
			
		//Polling for RDY (PINB0 must transition 1>0)
		//while(PINB & 0x01){}
		
		//Read Conversion Data
		CS2down();
 2da:	0e 94 7a 00 	call	0xf4	; 0xf4 <CS2down>
		SPI_MasterTransmit(0x20);
 2de:	80 e2       	ldi	r24, 0x20	; 32
 2e0:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
		msb=SPI_MasterReceive(0xff);
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	0e 94 72 00 	call	0xe4	; 0xe4 <SPI_MasterReceive>
 2ea:	80 93 03 01 	sts	0x0103, r24
		lsb=SPI_MasterReceive(0xff);
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	0e 94 72 00 	call	0xe4	; 0xe4 <SPI_MasterReceive>
 2f4:	80 93 00 01 	sts	0x0100, r24
		CS2up();
 2f8:	0e 94 78 00 	call	0xf0	; 0xf0 <CS2up>
		
		//Combine [MSB(8) LSB(8)] into 16bit Val
		msb_lsb_comb=((uint16_t) msb<<8)|lsb;
 2fc:	30 91 03 01 	lds	r19, 0x0103
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	80 91 00 01 	lds	r24, 0x0100
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	82 2b       	or	r24, r18
 30a:	93 2b       	or	r25, r19
 30c:	90 93 07 01 	sts	0x0107, r25
 310:	80 93 06 01 	sts	0x0106, r24
		return msb_lsb_comb;
	
}
 314:	08 95       	ret

00000316 <main>:
uint16_t DATA_WSM;


int main(void)
{
	SPI_MasterInit();
 316:	0e 94 67 00 	call	0xce	; 0xce <SPI_MasterInit>
	CS2up();	
 31a:	0e 94 78 00 	call	0xf0	; 0xf0 <CS2up>
	DATA_BCM=readBCM();
 31e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <readBCM>
 322:	90 93 02 01 	sts	0x0102, r25
 326:	80 93 01 01 	sts	0x0101, r24
	//DATA_WSM=readWSM();		
	
}
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	08 95       	ret

00000330 <AFE_Init_WSM_SS>:
		return msb_lsb_comb;
	
}

void AFE_Init_WSM_SS(){
	CS2down();
 330:	0e 94 7a 00 	call	0xf4	; 0xf4 <CS2down>
	
	//Config Code START
	SPI_MasterTransmit(0x02); // Misc Reg 1
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x03); // Misc Reg 2
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x09); // Dev Cont 1
 358:	89 e0       	ldi	r24, 0x09	; 9
 35a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x60);
 35e:	80 e6       	ldi	r24, 0x60	; 96
 360:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x05);
 364:	85 e0       	ldi	r24, 0x05	; 5
 366:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0A); // ISW Mux
 36a:	8a e0       	ldi	r24, 0x0A	; 10
 36c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0B); // VSense Mux
 37c:	8b e0       	ldi	r24, 0x0B	; 11
 37e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0C); // IQ Mode Enable
 38e:	8c e0       	ldi	r24, 0x0C	; 12
 390:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0D); // Weight Scale Control
 3a0:	8d e0       	ldi	r24, 0x0D	; 13
 3a2:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00); // 2nd Stage Gain = 1, No Offset DAC Val
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0E); // BCM DAC Freq
 3b2:	8e e0       	ldi	r24, 0x0E	; 14
 3b4:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0F); // Dev Cont 2
 3c4:	8f e0       	ldi	r24, 0x0F	; 15
 3c6:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x10); // ADC Control Reg 2
 3d6:	80 e1       	ldi	r24, 0x10	; 16
 3d8:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x1A); // Misc Reg 3
 3e8:	8a e1       	ldi	r24, 0x1A	; 26
 3ea:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x30);
 3f4:	80 e3       	ldi	r24, 0x30	; 48
 3f6:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	//Config Code END
	
	//Begin ADC Conversion
	SPI_MasterTransmit(0x01); // ADC Control Reg 1
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xC1);
 400:	81 ec       	ldi	r24, 0xC1	; 193
 402:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xD0);
 406:	80 ed       	ldi	r24, 0xD0	; 208
 408:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	CS2up();
 40c:	0e 94 78 00 	call	0xf0	; 0xf0 <CS2up>
}
 410:	08 95       	ret

00000412 <AFE_Init_WSM_Cont>:

void AFE_Init_WSM_Cont(){
	CS2down();
 412:	0e 94 7a 00 	call	0xf4	; 0xf4 <CS2down>
	
	//Config Code START
	SPI_MasterTransmit(0x02); // Misc Reg 1
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x03); // Misc Reg 2
 428:	83 e0       	ldi	r24, 0x03	; 3
 42a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
 42e:	8f ef       	ldi	r24, 0xFF	; 255
 430:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
 434:	8f ef       	ldi	r24, 0xFF	; 255
 436:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x09); // Dev Cont 1
 43a:	89 e0       	ldi	r24, 0x09	; 9
 43c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x60);
 440:	80 e6       	ldi	r24, 0x60	; 96
 442:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x05);
 446:	85 e0       	ldi	r24, 0x05	; 5
 448:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0A); // ISW Mux
 44c:	8a e0       	ldi	r24, 0x0A	; 10
 44e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0B); // VSense Mux
 45e:	8b e0       	ldi	r24, 0x0B	; 11
 460:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0C); // IQ Mode Enable
 470:	8c e0       	ldi	r24, 0x0C	; 12
 472:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0D); // Weight Scale Control
 482:	8d e0       	ldi	r24, 0x0D	; 13
 484:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00); // 2nd Stage Gain = 1, No Offset DAC Val
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0E); // BCM DAC Freq
 494:	8e e0       	ldi	r24, 0x0E	; 14
 496:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0F); // Dev Cont 2
 4a6:	8f e0       	ldi	r24, 0x0F	; 15
 4a8:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x10); // ADC Control Reg 2
 4b8:	80 e1       	ldi	r24, 0x10	; 16
 4ba:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x1A); // Misc Reg 3
 4ca:	8a e1       	ldi	r24, 0x1A	; 26
 4cc:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x30);
 4d6:	80 e3       	ldi	r24, 0x30	; 48
 4d8:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	//Config Code END
	
	//Begin ADC Conversion
	SPI_MasterTransmit(0x01); // ADC Control Reg 1
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x41);
 4e2:	81 e4       	ldi	r24, 0x41	; 65
 4e4:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	SPI_MasterTransmit(0x50);
 4e8:	80 e5       	ldi	r24, 0x50	; 80
 4ea:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
	
	CS2up();
 4ee:	0e 94 78 00 	call	0xf0	; 0xf0 <CS2up>
}
 4f2:	08 95       	ret

000004f4 <readWSM>:

uint16_t readWSM(){
		AFE_Init_WSM_SS();
 4f4:	0e 94 98 01 	call	0x330	; 0x330 <AFE_Init_WSM_SS>
		
		//Polling for RDY (PINB0 must transition 1>0)
		while(PINB & 0x01){}
 4f8:	18 99       	sbic	0x03, 0	; 3
 4fa:	fe cf       	rjmp	.-4      	; 0x4f8 <readWSM+0x4>
			
		//Read Conversion Data
		CS2down();
 4fc:	0e 94 7a 00 	call	0xf4	; 0xf4 <CS2down>
		SPI_MasterTransmit(0x20);
 500:	80 e2       	ldi	r24, 0x20	; 32
 502:	0e 94 6d 00 	call	0xda	; 0xda <SPI_MasterTransmit>
		msb=SPI_MasterReceive(0xff);
 506:	8f ef       	ldi	r24, 0xFF	; 255
 508:	0e 94 72 00 	call	0xe4	; 0xe4 <SPI_MasterReceive>
 50c:	80 93 03 01 	sts	0x0103, r24
		lsb=SPI_MasterReceive(0xff);
 510:	8f ef       	ldi	r24, 0xFF	; 255
 512:	0e 94 72 00 	call	0xe4	; 0xe4 <SPI_MasterReceive>
 516:	80 93 00 01 	sts	0x0100, r24
		CS2up();
 51a:	0e 94 78 00 	call	0xf0	; 0xf0 <CS2up>
		
		//Combine [MSB(8) LSB(8)] into 16bit Val
		msb_lsb_comb=((uint16_t) msb<<8)|lsb;
 51e:	30 91 03 01 	lds	r19, 0x0103
 522:	20 e0       	ldi	r18, 0x00	; 0
 524:	80 91 00 01 	lds	r24, 0x0100
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	82 2b       	or	r24, r18
 52c:	93 2b       	or	r25, r19
 52e:	90 93 07 01 	sts	0x0107, r25
 532:	80 93 06 01 	sts	0x0106, r24
		return msb_lsb_comb;
}
 536:	08 95       	ret

00000538 <_exit>:
 538:	f8 94       	cli

0000053a <__stop_program>:
 53a:	ff cf       	rjmp	.-2      	; 0x53a <__stop_program>
