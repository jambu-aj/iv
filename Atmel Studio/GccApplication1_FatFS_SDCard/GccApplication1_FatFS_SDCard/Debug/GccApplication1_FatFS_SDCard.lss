
GccApplication1_FatFS_SDCard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000048c2  00004956  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000048c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004fe  00800128  00800128  0000497e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00004980  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  000050d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002aac  00000000  00000000  000051f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000774  00000000  00000000  00007ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001063  00000000  00000000  00008418  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c38  00000000  00000000  0000947c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000733  00000000  00000000  0000a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005919  00000000  00000000  0000a7e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00010100  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 b5 23 	jmp	0x476a	; 0x476a <__vector_20>
      54:	0c 94 e3 23 	jmp	0x47c6	; 0x47c6 <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 ec       	ldi	r30, 0xC2	; 194
      a0:	f8 e4       	ldi	r31, 0x48	; 72
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 32       	cpi	r26, 0x28	; 40
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	16 e0       	ldi	r17, 0x06	; 6
      b4:	a8 e2       	ldi	r26, 0x28	; 40
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 32       	cpi	r26, 0x26	; 38
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 54 23 	call	0x46a8	; 0x46a8 <main>
      c6:	0c 94 5f 24 	jmp	0x48be	; 0x48be <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;	/* Disable SPI function */
      ce:	1c bc       	out	0x2c, r1	; 44
	DDRB  &= ~(SS);	// SS high /*NOTE: MUST PULL UP ANY OTHER CS GPIO BEING USED TO PREVENT CROSSTALK*/
      d0:	24 98       	cbi	0x04, 4	; 4
	PORTB &= ~(SS|MOSI|SCK); // !SS,SCK and MOSI outputs
      d2:	85 b1       	in	r24, 0x05	; 5
      d4:	8f 74       	andi	r24, 0x4F	; 79
      d6:	85 b9       	out	0x05, r24	; 5
	
// 	{	/* Remove this block if no socket power control */
// 		PORTE |= _BV(7);		/* Socket power off (PE7=high) */
// 		for (Timer1 = 20; Timer1; );	/* Wait for 20ms */
// 	}
}
      d8:	08 95       	ret

000000da <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
      da:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
      dc:	0d b4       	in	r0, 0x2d	; 45
      de:	07 fe       	sbrs	r0, 7
      e0:	fd cf       	rjmp	.-6      	; 0xdc <xchg_spi+0x2>
	return SPDR;
      e2:	8e b5       	in	r24, 0x2e	; 46
}
      e4:	08 95       	ret

000000e6 <wait_ready>:
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	BYTE d;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
      e6:	82 e3       	ldi	r24, 0x32	; 50
      e8:	80 93 28 01 	sts	0x0128, r24
	do
		d = xchg_spi(0xFF);
      ec:	8f ef       	ldi	r24, 0xFF	; 255
      ee:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
	while (d != 0xFF && Timer2);
      f2:	8f 3f       	cpi	r24, 0xFF	; 255
      f4:	21 f0       	breq	.+8      	; 0xfe <wait_ready+0x18>
      f6:	90 91 28 01 	lds	r25, 0x0128
      fa:	99 23       	and	r25, r25
      fc:	b9 f7       	brne	.-18     	; 0xec <wait_ready+0x6>

	return (d == 0xFF) ? 1 : 0;
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	8f 3f       	cpi	r24, 0xFF	; 255
     104:	11 f0       	breq	.+4      	; 0x10a <wait_ready+0x24>
     106:	20 e0       	ldi	r18, 0x00	; 0
     108:	30 e0       	ldi	r19, 0x00	; 0
}
     10a:	82 2f       	mov	r24, r18
     10c:	93 2f       	mov	r25, r19
     10e:	08 95       	ret

00000110 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     110:	2c 9a       	sbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
     112:	8f ef       	ldi	r24, 0xFF	; 255
     114:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
}
     118:	08 95       	ret

0000011a <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
     11a:	2c 98       	cbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
     11c:	8f ef       	ldi	r24, 0xFF	; 255
     11e:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>

	if (wait_ready()) return 1;	/* OK */
     122:	0e 94 73 00 	call	0xe6	; 0xe6 <wait_ready>
     126:	00 97       	sbiw	r24, 0x00	; 0
     128:	29 f4       	brne	.+10     	; 0x134 <select+0x1a>
	deselect();
     12a:	0e 94 88 00 	call	0x110	; 0x110 <deselect>
	return 0;	/* Timeout */
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	08 95       	ret
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready()) return 1;	/* OK */
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	90 e0       	ldi	r25, 0x00	; 0
	deselect();
	return 0;	/* Timeout */
}
     138:	08 95       	ret

0000013a <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     13a:	0f 93       	push	r16
     13c:	1f 93       	push	r17
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	ec 01       	movw	r28, r24
     144:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
     146:	84 e1       	ldi	r24, 0x14	; 20
     148:	80 93 29 01 	sts	0x0129, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
     14c:	8f ef       	ldi	r24, 0xFF	; 255
     14e:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
	} while ((token == 0xFF) && Timer1);
     152:	8f 3f       	cpi	r24, 0xFF	; 255
     154:	39 f4       	brne	.+14     	; 0x164 <rcvr_datablock+0x2a>
     156:	80 91 29 01 	lds	r24, 0x0129
     15a:	88 23       	and	r24, r24
     15c:	b9 f7       	brne	.-18     	; 0x14c <rcvr_datablock+0x12>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	1e c0       	rjmp	.+60     	; 0x1a0 <rcvr_datablock+0x66>
     164:	8e 3f       	cpi	r24, 0xFE	; 254
     166:	d1 f4       	brne	.+52     	; 0x19c <rcvr_datablock+0x62>
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block */
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     168:	8f ef       	ldi	r24, 0xFF	; 255
     16a:	8e bd       	out	0x2e, r24	; 46
     16c:	0d b4       	in	r0, 0x2d	; 45
     16e:	07 fe       	sbrs	r0, 7
     170:	fd cf       	rjmp	.-6      	; 0x16c <rcvr_datablock+0x32>
     172:	9e b5       	in	r25, 0x2e	; 46
     174:	98 83       	st	Y, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     176:	8e bd       	out	0x2e, r24	; 46
     178:	0d b4       	in	r0, 0x2d	; 45
     17a:	07 fe       	sbrs	r0, 7
     17c:	fd cf       	rjmp	.-6      	; 0x178 <rcvr_datablock+0x3e>
     17e:	9e b5       	in	r25, 0x2e	; 46
     180:	99 83       	std	Y+1, r25	; 0x01
/*-----------------------------------------------------------------------*/
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static
int rcvr_datablock (
     182:	22 96       	adiw	r28, 0x02	; 2
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
	} while (cnt -= 2);
     184:	02 50       	subi	r16, 0x02	; 2
     186:	10 40       	sbci	r17, 0x00	; 0
     188:	81 f7       	brne	.-32     	; 0x16a <rcvr_datablock+0x30>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
     18a:	8f ef       	ldi	r24, 0xFF	; 255
     18c:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
	xchg_spi(0xFF);
     190:	8f ef       	ldi	r24, 0xFF	; 255
     192:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>

	return 1;						/* Return with success */
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <rcvr_datablock+0x66>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
     1a0:	df 91       	pop	r29
     1a2:	cf 91       	pop	r28
     1a4:	1f 91       	pop	r17
     1a6:	0f 91       	pop	r16
     1a8:	08 95       	ret

000001aa <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     1aa:	1f 93       	push	r17
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	ec 01       	movw	r28, r24
     1b2:	16 2f       	mov	r17, r22
	BYTE resp;


	if (!wait_ready()) return 0;
     1b4:	0e 94 73 00 	call	0xe6	; 0xe6 <wait_ready>
     1b8:	00 97       	sbiw	r24, 0x00	; 0
     1ba:	41 f1       	breq	.+80     	; 0x20c <xmit_datablock+0x62>

	xchg_spi(token);					/* Xmit data token */
     1bc:	81 2f       	mov	r24, r17
     1be:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
     1c2:	1d 3f       	cpi	r17, 0xFD	; 253
     1c4:	31 f1       	breq	.+76     	; 0x212 <xmit_datablock+0x68>
/*-----------------------------------------------------------------------*/
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (
     1c6:	ce 01       	movw	r24, r28
     1c8:	80 50       	subi	r24, 0x00	; 0
     1ca:	9e 4f       	sbci	r25, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     1cc:	28 81       	ld	r18, Y
     1ce:	2e bd       	out	0x2e, r18	; 46
     1d0:	0d b4       	in	r0, 0x2d	; 45
     1d2:	07 fe       	sbrs	r0, 7
     1d4:	fd cf       	rjmp	.-6      	; 0x1d0 <xmit_datablock+0x26>
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     1d6:	29 81       	ldd	r18, Y+1	; 0x01
     1d8:	2e bd       	out	0x2e, r18	; 46
/*-----------------------------------------------------------------------*/
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (
     1da:	22 96       	adiw	r28, 0x02	; 2
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     1dc:	0d b4       	in	r0, 0x2d	; 45
     1de:	07 fe       	sbrs	r0, 7
     1e0:	fd cf       	rjmp	.-6      	; 0x1dc <xmit_datablock+0x32>
	} while (cnt -= 2);
     1e2:	8c 17       	cp	r24, r28
     1e4:	9d 07       	cpc	r25, r29
     1e6:	91 f7       	brne	.-28     	; 0x1cc <xmit_datablock+0x22>
	if (!wait_ready()) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
     1e8:	8f ef       	ldi	r24, 0xFF	; 255
     1ea:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
		xchg_spi(0xFF);
     1ee:	8f ef       	ldi	r24, 0xFF	; 255
     1f0:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
     1f4:	8f ef       	ldi	r24, 0xFF	; 255
     1f6:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
     1fa:	8f 71       	andi	r24, 0x1F	; 31
/*-----------------------------------------------------------------------*/
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (
     1fc:	21 e0       	ldi	r18, 0x01	; 1
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	85 30       	cpi	r24, 0x05	; 5
     202:	11 f0       	breq	.+4      	; 0x208 <xmit_datablock+0x5e>
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
)
{
	BYTE resp;


	if (!wait_ready()) return 0;
     208:	c9 01       	movw	r24, r18
     20a:	05 c0       	rjmp	.+10     	; 0x216 <xmit_datablock+0x6c>
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	02 c0       	rjmp	.+4      	; 0x216 <xmit_datablock+0x6c>
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	90 e0       	ldi	r25, 0x00	; 0
}
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	1f 91       	pop	r17
     21c:	08 95       	ret

0000021e <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	c8 2f       	mov	r28, r24
     22a:	d4 2f       	mov	r29, r20
     22c:	15 2f       	mov	r17, r21
     22e:	06 2f       	mov	r16, r22
     230:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     232:	88 23       	and	r24, r24
     234:	4c f4       	brge	.+18     	; 0x248 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     236:	87 e3       	ldi	r24, 0x37	; 55
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	ba 01       	movw	r22, r20
     23e:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
		if (res > 1) return res;
     242:	82 30       	cpi	r24, 0x02	; 2
     244:	68 f5       	brcc	.+90     	; 0x2a0 <send_cmd+0x82>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     246:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
     248:	0e 94 88 00 	call	0x110	; 0x110 <deselect>
 	if (!select()) return 0xFF;
     24c:	0e 94 8d 00 	call	0x11a	; 0x11a <select>
     250:	00 97       	sbiw	r24, 0x00	; 0
     252:	29 f1       	breq	.+74     	; 0x29e <send_cmd+0x80>

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     254:	8c 2f       	mov	r24, r28
     256:	80 64       	ori	r24, 0x40	; 64
     258:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     25c:	8f 2d       	mov	r24, r15
     25e:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     262:	80 2f       	mov	r24, r16
     264:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     268:	81 2f       	mov	r24, r17
     26a:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     26e:	8d 2f       	mov	r24, r29
     270:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
     274:	cc 23       	and	r28, r28
     276:	f1 f0       	breq	.+60     	; 0x2b4 <send_cmd+0x96>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
     278:	c8 30       	cpi	r28, 0x08	; 8
     27a:	c1 f0       	breq	.+48     	; 0x2ac <send_cmd+0x8e>
	xchg_spi(n);
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     282:	cc 30       	cpi	r28, 0x0C	; 12
     284:	19 f4       	brne	.+6      	; 0x28c <send_cmd+0x6e>
     286:	8f ef       	ldi	r24, 0xFF	; 255
     288:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     28c:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
     28e:	8f ef       	ldi	r24, 0xFF	; 255
     290:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
	while ((res & 0x80) && --n);
     294:	88 23       	and	r24, r24
     296:	24 f4       	brge	.+8      	; 0x2a0 <send_cmd+0x82>
     298:	c1 50       	subi	r28, 0x01	; 1
     29a:	c9 f7       	brne	.-14     	; 0x28e <send_cmd+0x70>
     29c:	01 c0       	rjmp	.+2      	; 0x2a0 <send_cmd+0x82>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
 	if (!select()) return 0xFF;
     29e:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	1f 91       	pop	r17
     2a6:	0f 91       	pop	r16
     2a8:	ff 90       	pop	r15
     2aa:	08 95       	ret
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
     2ac:	87 e8       	ldi	r24, 0x87	; 135
     2ae:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
     2b2:	ec cf       	rjmp	.-40     	; 0x28c <send_cmd+0x6e>
     2b4:	85 e9       	ldi	r24, 0x95	; 149
     2b6:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
     2ba:	e8 cf       	rjmp	.-48     	; 0x28c <send_cmd+0x6e>

000002bc <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     2bc:	cf 92       	push	r12
     2be:	df 92       	push	r13
     2c0:	ef 92       	push	r14
     2c2:	ff 92       	push	r15
     2c4:	0f 93       	push	r16
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <disk_initialize+0x12>
     2ce:	00 d0       	rcall	.+0      	; 0x2d0 <disk_initialize+0x14>
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
     2d4:	88 23       	and	r24, r24
     2d6:	09 f0       	breq	.+2      	; 0x2da <disk_initialize+0x1e>
     2d8:	aa c0       	rjmp	.+340    	; 0x42e <disk_initialize+0x172>
	power_off();						/* Turn off the socket power to reset the card */
     2da:	0e 94 67 00 	call	0xce	; 0xce <power_off>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     2de:	80 91 00 01 	lds	r24, 0x0100
     2e2:	81 ff       	sbrs	r24, 1
     2e4:	03 c0       	rjmp	.+6      	; 0x2ec <disk_initialize+0x30>
     2e6:	80 91 00 01 	lds	r24, 0x0100
     2ea:	a2 c0       	rjmp	.+324    	; 0x430 <disk_initialize+0x174>
// 		PORTE &= ~_BV(7);	/* Socket power on (PE7=low) */
// 		DDRE |= _BV(7);
// 		for (Timer1 = 2; Timer1; );	/* Wait for 20ms */
// 	}
	
	PORTB |= SS|MOSI|MISO; // SS, MOSI, MISO HIGH /*NOTE: MUST PULL UP ANY OTHER CS GPIO BEING USED TO PREVENT CROSSTALK*/
     2ec:	85 b1       	in	r24, 0x05	; 5
     2ee:	80 67       	ori	r24, 0x70	; 112
     2f0:	85 b9       	out	0x05, r24	; 5
	DDRB  |= SS|MOSI|SCK; /* Configure SCK/MOSI/CS as output */
     2f2:	84 b1       	in	r24, 0x04	; 4
     2f4:	80 6b       	ori	r24, 0xB0	; 176
     2f6:	84 b9       	out	0x04, r24	; 4

	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     2f8:	81 e5       	ldi	r24, 0x51	; 81
     2fa:	8c bd       	out	0x2c, r24	; 44

	if (drv) return STA_NOINIT;			/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
     2fc:	82 e5       	ldi	r24, 0x52	; 82
     2fe:	8c bd       	out	0x2c, r24	; 44
     300:	0a e0       	ldi	r16, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
     302:	8f ef       	ldi	r24, 0xFF	; 255
     304:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
     308:	01 50       	subi	r16, 0x01	; 1
     30a:	d9 f7       	brne	.-10     	; 0x302 <disk_initialize+0x46>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	ba 01       	movw	r22, r20
     314:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     318:	81 30       	cpi	r24, 0x01	; 1
     31a:	09 f0       	breq	.+2      	; 0x31e <disk_initialize+0x62>
     31c:	9c c0       	rjmp	.+312    	; 0x456 <disk_initialize+0x19a>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     31e:	84 e6       	ldi	r24, 0x64	; 100
     320:	80 93 29 01 	sts	0x0129, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
     324:	88 e0       	ldi	r24, 0x08	; 8
     326:	4a ea       	ldi	r20, 0xAA	; 170
     328:	51 e0       	ldi	r21, 0x01	; 1
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     332:	81 30       	cpi	r24, 0x01	; 1
     334:	09 f0       	breq	.+2      	; 0x338 <disk_initialize+0x7c>
     336:	42 c0       	rjmp	.+132    	; 0x3bc <disk_initialize+0x100>
     338:	6e 01       	movw	r12, r28
     33a:	08 94       	sec
     33c:	c1 1c       	adc	r12, r1
     33e:	d1 1c       	adc	r13, r1

/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
     340:	8e 01       	movw	r16, r28
     342:	0b 5f       	subi	r16, 0xFB	; 251
     344:	1f 4f       	sbci	r17, 0xFF	; 255
     346:	76 01       	movw	r14, r12

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
     34e:	f7 01       	movw	r30, r14
     350:	81 93       	st	Z+, r24
     352:	7f 01       	movw	r14, r30
     354:	e0 17       	cp	r30, r16
     356:	f1 07       	cpc	r31, r17
     358:	b9 f7       	brne	.-18     	; 0x348 <disk_initialize+0x8c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     35a:	8b 81       	ldd	r24, Y+3	; 0x03
     35c:	81 30       	cpi	r24, 0x01	; 1
     35e:	09 f0       	breq	.+2      	; 0x362 <disk_initialize+0xa6>
     360:	7a c0       	rjmp	.+244    	; 0x456 <disk_initialize+0x19a>
     362:	8c 81       	ldd	r24, Y+4	; 0x04
     364:	8a 3a       	cpi	r24, 0xAA	; 170
     366:	09 f0       	breq	.+2      	; 0x36a <disk_initialize+0xae>
     368:	76 c0       	rjmp	.+236    	; 0x456 <disk_initialize+0x19a>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     36a:	80 91 29 01 	lds	r24, 0x0129
     36e:	88 23       	and	r24, r24
     370:	49 f0       	breq	.+18     	; 0x384 <disk_initialize+0xc8>
     372:	89 ea       	ldi	r24, 0xA9	; 169
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	70 e4       	ldi	r23, 0x40	; 64
     37c:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     380:	88 23       	and	r24, r24
     382:	99 f7       	brne	.-26     	; 0x36a <disk_initialize+0xae>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     384:	80 91 29 01 	lds	r24, 0x0129
     388:	88 23       	and	r24, r24
     38a:	09 f4       	brne	.+2      	; 0x38e <disk_initialize+0xd2>
     38c:	64 c0       	rjmp	.+200    	; 0x456 <disk_initialize+0x19a>
     38e:	8a e3       	ldi	r24, 0x3A	; 58
     390:	40 e0       	ldi	r20, 0x00	; 0
     392:	50 e0       	ldi	r21, 0x00	; 0
     394:	ba 01       	movw	r22, r20
     396:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     39a:	88 23       	and	r24, r24
     39c:	09 f0       	breq	.+2      	; 0x3a0 <disk_initialize+0xe4>
     39e:	5b c0       	rjmp	.+182    	; 0x456 <disk_initialize+0x19a>
     3a0:	04 e0       	ldi	r16, 0x04	; 4
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
     3a2:	8f ef       	ldi	r24, 0xFF	; 255
     3a4:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
     3a8:	f6 01       	movw	r30, r12
     3aa:	81 93       	st	Z+, r24
     3ac:	6f 01       	movw	r12, r30
     3ae:	01 50       	subi	r16, 0x01	; 1
     3b0:	c1 f7       	brne	.-16     	; 0x3a2 <disk_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
     3b4:	86 fd       	sbrc	r24, 6
     3b6:	49 c0       	rjmp	.+146    	; 0x44a <disk_initialize+0x18e>
     3b8:	84 e0       	ldi	r24, 0x04	; 4
     3ba:	48 c0       	rjmp	.+144    	; 0x44c <disk_initialize+0x190>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     3bc:	89 ea       	ldi	r24, 0xA9	; 169
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	ba 01       	movw	r22, r20
     3c4:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     3c8:	82 30       	cpi	r24, 0x02	; 2
     3ca:	18 f4       	brcc	.+6      	; 0x3d2 <disk_initialize+0x116>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     3cc:	12 e0       	ldi	r17, 0x02	; 2
     3ce:	09 ea       	ldi	r16, 0xA9	; 169
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <disk_initialize+0x11a>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     3d2:	11 e0       	ldi	r17, 0x01	; 1
     3d4:	01 e0       	ldi	r16, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     3d6:	80 91 29 01 	lds	r24, 0x0129
     3da:	88 23       	and	r24, r24
     3dc:	41 f0       	breq	.+16     	; 0x3ee <disk_initialize+0x132>
     3de:	80 2f       	mov	r24, r16
     3e0:	40 e0       	ldi	r20, 0x00	; 0
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	ba 01       	movw	r22, r20
     3e6:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     3ea:	88 23       	and	r24, r24
     3ec:	a1 f7       	brne	.-24     	; 0x3d6 <disk_initialize+0x11a>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     3ee:	80 91 29 01 	lds	r24, 0x0129
     3f2:	88 23       	and	r24, r24
     3f4:	81 f1       	breq	.+96     	; 0x456 <disk_initialize+0x19a>
     3f6:	80 e1       	ldi	r24, 0x10	; 16
     3f8:	40 e0       	ldi	r20, 0x00	; 0
     3fa:	52 e0       	ldi	r21, 0x02	; 2
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     404:	88 23       	and	r24, r24
     406:	39 f5       	brne	.+78     	; 0x456 <disk_initialize+0x19a>
				ty = 0;
		}
	}
	CardType = ty;
     408:	10 93 2a 01 	sts	0x012A, r17
	deselect();
     40c:	0e 94 88 00 	call	0x110	; 0x110 <deselect>

	if (ty) {			/* Initialization succeded */
     410:	11 23       	and	r17, r17
     412:	41 f0       	breq	.+16     	; 0x424 <disk_initialize+0x168>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     414:	80 91 00 01 	lds	r24, 0x0100
     418:	8e 7f       	andi	r24, 0xFE	; 254
     41a:	80 93 00 01 	sts	0x0100, r24
		FCLK_FAST();
     41e:	80 e5       	ldi	r24, 0x50	; 80
     420:	8c bd       	out	0x2c, r24	; 44
     422:	02 c0       	rjmp	.+4      	; 0x428 <disk_initialize+0x16c>
	} else {			/* Initialization failed */
		power_off();
     424:	0e 94 67 00 	call	0xce	; 0xce <power_off>
	}

	return Stat;
     428:	80 91 00 01 	lds	r24, 0x0100
     42c:	01 c0       	rjmp	.+2      	; 0x430 <disk_initialize+0x174>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
     42e:	81 e0       	ldi	r24, 0x01	; 1
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	cf 90       	pop	r12
     448:	08 95       	ret
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     44a:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
     44c:	80 93 2a 01 	sts	0x012A, r24
	deselect();
     450:	0e 94 88 00 	call	0x110	; 0x110 <deselect>
     454:	df cf       	rjmp	.-66     	; 0x414 <disk_initialize+0x158>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
     456:	10 92 2a 01 	sts	0x012A, r1
	deselect();
     45a:	0e 94 88 00 	call	0x110	; 0x110 <deselect>
     45e:	e2 cf       	rjmp	.-60     	; 0x424 <disk_initialize+0x168>

00000460 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     460:	88 23       	and	r24, r24
     462:	19 f4       	brne	.+6      	; 0x46a <disk_status+0xa>
	return Stat;
     464:	80 91 00 01 	lds	r24, 0x0100
     468:	08 95       	ret

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     46a:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
     46c:	08 95       	ret

0000046e <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     46e:	0f 93       	push	r16
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     476:	88 23       	and	r24, r24
     478:	09 f0       	breq	.+2      	; 0x47c <disk_read+0xe>
     47a:	46 c0       	rjmp	.+140    	; 0x508 <disk_read+0x9a>
     47c:	00 23       	and	r16, r16
     47e:	09 f4       	brne	.+2      	; 0x482 <disk_read+0x14>
     480:	45 c0       	rjmp	.+138    	; 0x50c <disk_read+0x9e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     482:	80 91 00 01 	lds	r24, 0x0100
     486:	80 fd       	sbrc	r24, 0
     488:	43 c0       	rjmp	.+134    	; 0x510 <disk_read+0xa2>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     48a:	80 91 2a 01 	lds	r24, 0x012A
     48e:	83 fd       	sbrc	r24, 3
     490:	09 c0       	rjmp	.+18     	; 0x4a4 <disk_read+0x36>
     492:	01 2e       	mov	r0, r17
     494:	19 e0       	ldi	r17, 0x09	; 9
     496:	22 0f       	add	r18, r18
     498:	33 1f       	adc	r19, r19
     49a:	44 1f       	adc	r20, r20
     49c:	55 1f       	adc	r21, r21
     49e:	1a 95       	dec	r17
     4a0:	d1 f7       	brne	.-12     	; 0x496 <disk_read+0x28>
     4a2:	10 2d       	mov	r17, r0

	if (count == 1) {	/* Single block read */
     4a4:	01 30       	cpi	r16, 0x01	; 1
     4a6:	79 f4       	brne	.+30     	; 0x4c6 <disk_read+0x58>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     4a8:	81 e1       	ldi	r24, 0x11	; 17
     4aa:	ba 01       	movw	r22, r20
     4ac:	a9 01       	movw	r20, r18
     4ae:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     4b2:	88 23       	and	r24, r24
     4b4:	11 f5       	brne	.+68     	; 0x4fa <disk_read+0x8c>
			&& rcvr_datablock(buff, 512))
     4b6:	ce 01       	movw	r24, r28
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	72 e0       	ldi	r23, 0x02	; 2
     4bc:	0e 94 9d 00 	call	0x13a	; 0x13a <rcvr_datablock>
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	d1 f4       	brne	.+52     	; 0x4f8 <disk_read+0x8a>
     4c4:	1a c0       	rjmp	.+52     	; 0x4fa <disk_read+0x8c>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     4c6:	82 e1       	ldi	r24, 0x12	; 18
     4c8:	ba 01       	movw	r22, r20
     4ca:	a9 01       	movw	r20, r18
     4cc:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     4d0:	88 23       	and	r24, r24
     4d2:	99 f4       	brne	.+38     	; 0x4fa <disk_read+0x8c>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     4d4:	ce 01       	movw	r24, r28
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	72 e0       	ldi	r23, 0x02	; 2
     4da:	0e 94 9d 00 	call	0x13a	; 0x13a <rcvr_datablock>
     4de:	00 97       	sbiw	r24, 0x00	; 0
     4e0:	21 f0       	breq	.+8      	; 0x4ea <disk_read+0x7c>
				buff += 512;
     4e2:	c0 50       	subi	r28, 0x00	; 0
     4e4:	de 4f       	sbci	r29, 0xFE	; 254
			} while (--count);
     4e6:	01 50       	subi	r16, 0x01	; 1
     4e8:	a9 f7       	brne	.-22     	; 0x4d4 <disk_read+0x66>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     4ea:	8c e0       	ldi	r24, 0x0C	; 12
     4ec:	40 e0       	ldi	r20, 0x00	; 0
     4ee:	50 e0       	ldi	r21, 0x00	; 0
     4f0:	ba 01       	movw	r22, r20
     4f2:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <disk_read+0x8c>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block read */
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
			&& rcvr_datablock(buff, 512))
			count = 0;
     4f8:	00 e0       	ldi	r16, 0x00	; 0
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
     4fa:	0e 94 88 00 	call	0x110	; 0x110 <deselect>

	return count ? RES_ERROR : RES_OK;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	00 23       	and	r16, r16
     502:	39 f4       	brne	.+14     	; 0x512 <disk_read+0xa4>
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	05 c0       	rjmp	.+10     	; 0x512 <disk_read+0xa4>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
     508:	84 e0       	ldi	r24, 0x04	; 4
     50a:	03 c0       	rjmp	.+6      	; 0x512 <disk_read+0xa4>
     50c:	84 e0       	ldi	r24, 0x04	; 4
     50e:	01 c0       	rjmp	.+2      	; 0x512 <disk_read+0xa4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     510:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	0f 91       	pop	r16
     518:	08 95       	ret

0000051a <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     51a:	cf 92       	push	r12
     51c:	df 92       	push	r13
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	eb 01       	movw	r28, r22
     52a:	69 01       	movw	r12, r18
     52c:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     52e:	88 23       	and	r24, r24
     530:	09 f0       	breq	.+2      	; 0x534 <disk_write+0x1a>
     532:	57 c0       	rjmp	.+174    	; 0x5e2 <disk_write+0xc8>
     534:	00 23       	and	r16, r16
     536:	09 f4       	brne	.+2      	; 0x53a <disk_write+0x20>
     538:	56 c0       	rjmp	.+172    	; 0x5e6 <disk_write+0xcc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     53a:	80 91 00 01 	lds	r24, 0x0100
     53e:	80 fd       	sbrc	r24, 0
     540:	54 c0       	rjmp	.+168    	; 0x5ea <disk_write+0xd0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     542:	80 91 00 01 	lds	r24, 0x0100
     546:	82 fd       	sbrc	r24, 2
     548:	52 c0       	rjmp	.+164    	; 0x5ee <disk_write+0xd4>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     54a:	80 91 2a 01 	lds	r24, 0x012A
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	83 fd       	sbrc	r24, 3
     552:	09 c0       	rjmp	.+18     	; 0x566 <disk_write+0x4c>
     554:	0b 2e       	mov	r0, r27
     556:	b9 e0       	ldi	r27, 0x09	; 9
     558:	cc 0c       	add	r12, r12
     55a:	dd 1c       	adc	r13, r13
     55c:	ee 1c       	adc	r14, r14
     55e:	ff 1c       	adc	r15, r15
     560:	ba 95       	dec	r27
     562:	d1 f7       	brne	.-12     	; 0x558 <disk_write+0x3e>
     564:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
     566:	01 30       	cpi	r16, 0x01	; 1
     568:	71 f4       	brne	.+28     	; 0x586 <disk_write+0x6c>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     56a:	88 e1       	ldi	r24, 0x18	; 24
     56c:	b7 01       	movw	r22, r14
     56e:	a6 01       	movw	r20, r12
     570:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     574:	88 23       	and	r24, r24
     576:	71 f5       	brne	.+92     	; 0x5d4 <disk_write+0xba>
			&& xmit_datablock(buff, 0xFE))
     578:	ce 01       	movw	r24, r28
     57a:	6e ef       	ldi	r22, 0xFE	; 254
     57c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <xmit_datablock>
     580:	00 97       	sbiw	r24, 0x00	; 0
     582:	29 f5       	brne	.+74     	; 0x5ce <disk_write+0xb4>
     584:	27 c0       	rjmp	.+78     	; 0x5d4 <disk_write+0xba>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     586:	86 70       	andi	r24, 0x06	; 6
     588:	90 70       	andi	r25, 0x00	; 0
     58a:	00 97       	sbiw	r24, 0x00	; 0
     58c:	39 f0       	breq	.+14     	; 0x59c <disk_write+0x82>
     58e:	40 2f       	mov	r20, r16
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	87 e9       	ldi	r24, 0x97	; 151
     598:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     59c:	89 e1       	ldi	r24, 0x19	; 25
     59e:	b7 01       	movw	r22, r14
     5a0:	a6 01       	movw	r20, r12
     5a2:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     5a6:	88 23       	and	r24, r24
     5a8:	a9 f4       	brne	.+42     	; 0x5d4 <disk_write+0xba>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     5aa:	ce 01       	movw	r24, r28
     5ac:	6c ef       	ldi	r22, 0xFC	; 252
     5ae:	0e 94 d5 00 	call	0x1aa	; 0x1aa <xmit_datablock>
     5b2:	00 97       	sbiw	r24, 0x00	; 0
     5b4:	21 f0       	breq	.+8      	; 0x5be <disk_write+0xa4>
				buff += 512;
     5b6:	c0 50       	subi	r28, 0x00	; 0
     5b8:	de 4f       	sbci	r29, 0xFE	; 254
			} while (--count);
     5ba:	01 50       	subi	r16, 0x01	; 1
     5bc:	b1 f7       	brne	.-20     	; 0x5aa <disk_write+0x90>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	6d ef       	ldi	r22, 0xFD	; 253
     5c4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <xmit_datablock>
     5c8:	00 97       	sbiw	r24, 0x00	; 0
     5ca:	19 f0       	breq	.+6      	; 0x5d2 <disk_write+0xb8>
     5cc:	03 c0       	rjmp	.+6      	; 0x5d4 <disk_write+0xba>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
     5ce:	00 e0       	ldi	r16, 0x00	; 0
     5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <disk_write+0xba>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
     5d2:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
     5d4:	0e 94 88 00 	call	0x110	; 0x110 <deselect>

	return count ? RES_ERROR : RES_OK;
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	00 23       	and	r16, r16
     5dc:	49 f4       	brne	.+18     	; 0x5f0 <disk_write+0xd6>
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	07 c0       	rjmp	.+14     	; 0x5f0 <disk_write+0xd6>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
     5e2:	84 e0       	ldi	r24, 0x04	; 4
     5e4:	05 c0       	rjmp	.+10     	; 0x5f0 <disk_write+0xd6>
     5e6:	84 e0       	ldi	r24, 0x04	; 4
     5e8:	03 c0       	rjmp	.+6      	; 0x5f0 <disk_write+0xd6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     5ea:	83 e0       	ldi	r24, 0x03	; 3
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <disk_write+0xd6>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     5ee:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	08 95       	ret

00000600 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	60 97       	sbiw	r28, 0x10	; 16
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	de bf       	out	0x3e, r29	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	cd bf       	out	0x3d, r28	; 61
     61c:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (drv) return RES_PARERR;
     61e:	88 23       	and	r24, r24
     620:	09 f0       	breq	.+2      	; 0x624 <disk_ioctl+0x24>
     622:	ce c1       	rjmp	.+924    	; 0x9c0 <disk_ioctl+0x3c0>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     624:	65 30       	cpi	r22, 0x05	; 5
     626:	89 f4       	brne	.+34     	; 0x64a <disk_ioctl+0x4a>
		switch (ptr[0]) {
     628:	fa 01       	movw	r30, r20
     62a:	80 81       	ld	r24, Z
     62c:	88 23       	and	r24, r24
     62e:	21 f0       	breq	.+8      	; 0x638 <disk_ioctl+0x38>
     630:	81 30       	cpi	r24, 0x01	; 1
     632:	09 f0       	breq	.+2      	; 0x636 <disk_ioctl+0x36>
     634:	c7 c1       	rjmp	.+910    	; 0x9c4 <disk_ioctl+0x3c4>
     636:	04 c0       	rjmp	.+8      	; 0x640 <disk_ioctl+0x40>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
     638:	0e 94 67 00 	call	0xce	; 0xce <power_off>
			res = RES_OK;
     63c:	00 e0       	ldi	r16, 0x00	; 0
			break;
     63e:	c5 c1       	rjmp	.+906    	; 0x9ca <disk_ioctl+0x3ca>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	fa 01       	movw	r30, r20
     644:	81 83       	std	Z+1, r24	; 0x01
			res = RES_OK;
     646:	00 e0       	ldi	r16, 0x00	; 0
			break;
     648:	c0 c1       	rjmp	.+896    	; 0x9ca <disk_ioctl+0x3ca>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     64a:	80 91 00 01 	lds	r24, 0x0100
     64e:	80 fd       	sbrc	r24, 0
     650:	bb c1       	rjmp	.+886    	; 0x9c8 <disk_ioctl+0x3c8>

		switch (ctrl) {
     652:	6a 30       	cpi	r22, 0x0A	; 10
     654:	09 f4       	brne	.+2      	; 0x658 <disk_ioctl+0x58>
     656:	3e c1       	rjmp	.+636    	; 0x8d4 <disk_ioctl+0x2d4>
     658:	6b 30       	cpi	r22, 0x0B	; 11
     65a:	58 f4       	brcc	.+22     	; 0x672 <disk_ioctl+0x72>
     65c:	61 30       	cpi	r22, 0x01	; 1
     65e:	f9 f0       	breq	.+62     	; 0x69e <disk_ioctl+0x9e>
     660:	61 30       	cpi	r22, 0x01	; 1
     662:	a0 f0       	brcs	.+40     	; 0x68c <disk_ioctl+0x8c>
     664:	62 30       	cpi	r22, 0x02	; 2
     666:	09 f4       	brne	.+2      	; 0x66a <disk_ioctl+0x6a>
     668:	96 c0       	rjmp	.+300    	; 0x796 <disk_ioctl+0x196>
     66a:	63 30       	cpi	r22, 0x03	; 3
     66c:	09 f0       	breq	.+2      	; 0x670 <disk_ioctl+0x70>
     66e:	88 c1       	rjmp	.+784    	; 0x980 <disk_ioctl+0x380>
     670:	99 c0       	rjmp	.+306    	; 0x7a4 <disk_ioctl+0x1a4>
     672:	6c 30       	cpi	r22, 0x0C	; 12
     674:	09 f4       	brne	.+2      	; 0x678 <disk_ioctl+0x78>
     676:	47 c1       	rjmp	.+654    	; 0x906 <disk_ioctl+0x306>
     678:	6c 30       	cpi	r22, 0x0C	; 12
     67a:	08 f4       	brcc	.+2      	; 0x67e <disk_ioctl+0x7e>
     67c:	31 c1       	rjmp	.+610    	; 0x8e0 <disk_ioctl+0x2e0>
     67e:	6d 30       	cpi	r22, 0x0D	; 13
     680:	09 f4       	brne	.+2      	; 0x684 <disk_ioctl+0x84>
     682:	54 c1       	rjmp	.+680    	; 0x92c <disk_ioctl+0x32c>
     684:	6e 30       	cpi	r22, 0x0E	; 14
     686:	09 f0       	breq	.+2      	; 0x68a <disk_ioctl+0x8a>
     688:	7b c1       	rjmp	.+758    	; 0x980 <disk_ioctl+0x380>
     68a:	66 c1       	rjmp	.+716    	; 0x958 <disk_ioctl+0x358>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
     68c:	0e 94 8d 00 	call	0x11a	; 0x11a <select>
     690:	00 97       	sbiw	r24, 0x00	; 0
     692:	09 f4       	brne	.+2      	; 0x696 <disk_ioctl+0x96>
     694:	77 c1       	rjmp	.+750    	; 0x984 <disk_ioctl+0x384>
				deselect();
     696:	0e 94 88 00 	call	0x110	; 0x110 <deselect>
				res = RES_OK;
     69a:	00 e0       	ldi	r16, 0x00	; 0
     69c:	8e c1       	rjmp	.+796    	; 0x9ba <disk_ioctl+0x3ba>
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	ba 01       	movw	r22, r20
     6a6:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     6aa:	88 23       	and	r24, r24
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <disk_ioctl+0xb0>
     6ae:	6c c1       	rjmp	.+728    	; 0x988 <disk_ioctl+0x388>
     6b0:	ce 01       	movw	r24, r28
     6b2:	01 96       	adiw	r24, 0x01	; 1
     6b4:	60 e1       	ldi	r22, 0x10	; 16
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	0e 94 9d 00 	call	0x13a	; 0x13a <rcvr_datablock>
     6bc:	00 97       	sbiw	r24, 0x00	; 0
     6be:	09 f4       	brne	.+2      	; 0x6c2 <disk_ioctl+0xc2>
     6c0:	65 c1       	rjmp	.+714    	; 0x98c <disk_ioctl+0x38c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	82 95       	swap	r24
     6c6:	86 95       	lsr	r24
     6c8:	86 95       	lsr	r24
     6ca:	83 70       	andi	r24, 0x03	; 3
     6cc:	81 30       	cpi	r24, 0x01	; 1
     6ce:	51 f5       	brne	.+84     	; 0x724 <disk_ioctl+0x124>
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
     6d0:	48 85       	ldd	r20, Y+8	; 0x08
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	4f 73       	andi	r20, 0x3F	; 63
     6da:	50 70       	andi	r21, 0x00	; 0
     6dc:	60 70       	andi	r22, 0x00	; 0
     6de:	70 70       	andi	r23, 0x00	; 0
     6e0:	ba 01       	movw	r22, r20
     6e2:	55 27       	eor	r21, r21
     6e4:	44 27       	eor	r20, r20
     6e6:	4f 5f       	subi	r20, 0xFF	; 255
     6e8:	5f 4f       	sbci	r21, 0xFF	; 255
     6ea:	6f 4f       	sbci	r22, 0xFF	; 255
     6ec:	7f 4f       	sbci	r23, 0xFF	; 255
     6ee:	99 85       	ldd	r25, Y+9	; 0x09
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	2a 85       	ldd	r18, Y+10	; 0x0a
     6f4:	82 0f       	add	r24, r18
     6f6:	91 1d       	adc	r25, r1
     6f8:	a0 e0       	ldi	r26, 0x00	; 0
     6fa:	b0 e0       	ldi	r27, 0x00	; 0
     6fc:	84 0f       	add	r24, r20
     6fe:	95 1f       	adc	r25, r21
     700:	a6 1f       	adc	r26, r22
     702:	b7 1f       	adc	r27, r23
					*(DWORD*)buff = csize << 10;
     704:	07 2e       	mov	r0, r23
     706:	7a e0       	ldi	r23, 0x0A	; 10
     708:	88 0f       	add	r24, r24
     70a:	99 1f       	adc	r25, r25
     70c:	aa 1f       	adc	r26, r26
     70e:	bb 1f       	adc	r27, r27
     710:	7a 95       	dec	r23
     712:	d1 f7       	brne	.-12     	; 0x708 <disk_ioctl+0x108>
     714:	70 2d       	mov	r23, r0
     716:	f7 01       	movw	r30, r14
     718:	80 83       	st	Z, r24
     71a:	91 83       	std	Z+1, r25	; 0x01
     71c:	a2 83       	std	Z+2, r26	; 0x02
     71e:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = csize << (n - 9);
				}
				res = RES_OK;
     720:	00 e0       	ldi	r16, 0x00	; 0
     722:	4b c1       	rjmp	.+662    	; 0x9ba <disk_ioctl+0x3ba>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
     724:	29 85       	ldd	r18, Y+9	; 0x09
     726:	22 95       	swap	r18
     728:	26 95       	lsr	r18
     72a:	26 95       	lsr	r18
     72c:	23 70       	andi	r18, 0x03	; 3
     72e:	88 85       	ldd	r24, Y+8	; 0x08
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	88 0f       	add	r24, r24
     734:	99 1f       	adc	r25, r25
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	82 0f       	add	r24, r18
     73c:	91 1d       	adc	r25, r1
     73e:	01 96       	adiw	r24, 0x01	; 1
     740:	2f 81       	ldd	r18, Y+7	; 0x07
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	23 70       	andi	r18, 0x03	; 3
     746:	30 70       	andi	r19, 0x00	; 0
     748:	32 2f       	mov	r19, r18
     74a:	22 27       	eor	r18, r18
     74c:	33 0f       	add	r19, r19
     74e:	33 0f       	add	r19, r19
     750:	82 0f       	add	r24, r18
     752:	93 1f       	adc	r25, r19
     754:	ac 01       	movw	r20, r24
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	70 e0       	ldi	r23, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
     75a:	9e 81       	ldd	r25, Y+6	; 0x06
     75c:	9f 70       	andi	r25, 0x0F	; 15
     75e:	8b 85       	ldd	r24, Y+11	; 0x0b
     760:	88 1f       	adc	r24, r24
     762:	88 27       	eor	r24, r24
     764:	88 1f       	adc	r24, r24
     766:	98 0f       	add	r25, r24
     768:	9e 5f       	subi	r25, 0xFE	; 254
     76a:	8a 85       	ldd	r24, Y+10	; 0x0a
     76c:	83 70       	andi	r24, 0x03	; 3
     76e:	88 0f       	add	r24, r24
     770:	89 0f       	add	r24, r25
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = csize << (n - 9);
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	09 97       	sbiw	r24, 0x09	; 9
     776:	8a 01       	movw	r16, r20
     778:	9b 01       	movw	r18, r22
     77a:	04 c0       	rjmp	.+8      	; 0x784 <disk_ioctl+0x184>
     77c:	00 0f       	add	r16, r16
     77e:	11 1f       	adc	r17, r17
     780:	22 1f       	adc	r18, r18
     782:	33 1f       	adc	r19, r19
     784:	8a 95       	dec	r24
     786:	d2 f7       	brpl	.-12     	; 0x77c <disk_ioctl+0x17c>
     788:	f7 01       	movw	r30, r14
     78a:	00 83       	st	Z, r16
     78c:	11 83       	std	Z+1, r17	; 0x01
     78e:	22 83       	std	Z+2, r18	; 0x02
     790:	33 83       	std	Z+3, r19	; 0x03
				}
				res = RES_OK;
     792:	00 e0       	ldi	r16, 0x00	; 0
     794:	12 c1       	rjmp	.+548    	; 0x9ba <disk_ioctl+0x3ba>
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	92 e0       	ldi	r25, 0x02	; 2
     79a:	fa 01       	movw	r30, r20
     79c:	91 83       	std	Z+1, r25	; 0x01
     79e:	80 83       	st	Z, r24
			res = RES_OK;
     7a0:	00 e0       	ldi	r16, 0x00	; 0
			break;
     7a2:	0b c1       	rjmp	.+534    	; 0x9ba <disk_ioctl+0x3ba>

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
     7a4:	00 91 2a 01 	lds	r16, 0x012A
     7a8:	02 ff       	sbrs	r16, 2
     7aa:	2f c0       	rjmp	.+94     	; 0x80a <disk_ioctl+0x20a>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
     7ac:	8d e8       	ldi	r24, 0x8D	; 141
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	ba 01       	movw	r22, r20
     7b4:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     7b8:	88 23       	and	r24, r24
     7ba:	09 f0       	breq	.+2      	; 0x7be <disk_ioctl+0x1be>
     7bc:	e9 c0       	rjmp	.+466    	; 0x990 <disk_ioctl+0x390>
					xchg_spi(0xFF);
     7be:	8f ef       	ldi	r24, 0xFF	; 255
     7c0:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
     7c4:	ce 01       	movw	r24, r28
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	60 e1       	ldi	r22, 0x10	; 16
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	0e 94 9d 00 	call	0x13a	; 0x13a <rcvr_datablock>
     7d0:	00 97       	sbiw	r24, 0x00	; 0
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <disk_ioctl+0x1d6>
     7d4:	df c0       	rjmp	.+446    	; 0x994 <disk_ioctl+0x394>
     7d6:	00 e3       	ldi	r16, 0x30	; 48
						for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
     7d8:	8f ef       	ldi	r24, 0xFF	; 255
     7da:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
     7de:	01 50       	subi	r16, 0x01	; 1
     7e0:	d9 f7       	brne	.-10     	; 0x7d8 <disk_ioctl+0x1d8>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
     7e2:	2b 85       	ldd	r18, Y+11	; 0x0b
     7e4:	22 95       	swap	r18
     7e6:	2f 70       	andi	r18, 0x0F	; 15
     7e8:	80 e1       	ldi	r24, 0x10	; 16
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	a0 e0       	ldi	r26, 0x00	; 0
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	04 c0       	rjmp	.+8      	; 0x7fa <disk_ioctl+0x1fa>
     7f2:	88 0f       	add	r24, r24
     7f4:	99 1f       	adc	r25, r25
     7f6:	aa 1f       	adc	r26, r26
     7f8:	bb 1f       	adc	r27, r27
     7fa:	2a 95       	dec	r18
     7fc:	d2 f7       	brpl	.-12     	; 0x7f2 <disk_ioctl+0x1f2>
     7fe:	f7 01       	movw	r30, r14
     800:	80 83       	st	Z, r24
     802:	91 83       	std	Z+1, r25	; 0x01
     804:	a2 83       	std	Z+2, r26	; 0x02
     806:	b3 83       	std	Z+3, r27	; 0x03
     808:	d8 c0       	rjmp	.+432    	; 0x9ba <disk_ioctl+0x3ba>
						res = RES_OK;
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
     80a:	89 e0       	ldi	r24, 0x09	; 9
     80c:	40 e0       	ldi	r20, 0x00	; 0
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	ba 01       	movw	r22, r20
     812:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     816:	88 23       	and	r24, r24
     818:	09 f0       	breq	.+2      	; 0x81c <disk_ioctl+0x21c>
     81a:	be c0       	rjmp	.+380    	; 0x998 <disk_ioctl+0x398>
     81c:	ce 01       	movw	r24, r28
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	60 e1       	ldi	r22, 0x10	; 16
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	0e 94 9d 00 	call	0x13a	; 0x13a <rcvr_datablock>
     828:	00 97       	sbiw	r24, 0x00	; 0
     82a:	09 f4       	brne	.+2      	; 0x82e <disk_ioctl+0x22e>
     82c:	b7 c0       	rjmp	.+366    	; 0x99c <disk_ioctl+0x39c>
					if (CardType & CT_SD1) {	/* SDv1 */
     82e:	01 ff       	sbrs	r16, 1
     830:	25 c0       	rjmp	.+74     	; 0x87c <disk_ioctl+0x27c>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
     832:	8c 85       	ldd	r24, Y+12	; 0x0c
     834:	88 1f       	adc	r24, r24
     836:	88 27       	eor	r24, r24
     838:	88 1f       	adc	r24, r24
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	01 96       	adiw	r24, 0x01	; 1
     83e:	2b 85       	ldd	r18, Y+11	; 0x0b
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	2f 73       	andi	r18, 0x3F	; 63
     844:	30 70       	andi	r19, 0x00	; 0
     846:	22 0f       	add	r18, r18
     848:	33 1f       	adc	r19, r19
     84a:	28 0f       	add	r18, r24
     84c:	39 1f       	adc	r19, r25
     84e:	8e 85       	ldd	r24, Y+14	; 0x0e
     850:	82 95       	swap	r24
     852:	86 95       	lsr	r24
     854:	86 95       	lsr	r24
     856:	83 70       	andi	r24, 0x03	; 3
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	89 01       	movw	r16, r18
     85e:	02 c0       	rjmp	.+4      	; 0x864 <disk_ioctl+0x264>
     860:	00 0f       	add	r16, r16
     862:	11 1f       	adc	r17, r17
     864:	8a 95       	dec	r24
     866:	e2 f7       	brpl	.-8      	; 0x860 <disk_ioctl+0x260>
     868:	c8 01       	movw	r24, r16
     86a:	a0 e0       	ldi	r26, 0x00	; 0
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	f7 01       	movw	r30, r14
     870:	80 83       	st	Z, r24
     872:	91 83       	std	Z+1, r25	; 0x01
     874:	a2 83       	std	Z+2, r26	; 0x02
     876:	b3 83       	std	Z+3, r27	; 0x03
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
     878:	00 e0       	ldi	r16, 0x00	; 0
     87a:	9f c0       	rjmp	.+318    	; 0x9ba <disk_ioctl+0x3ba>
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDv1 */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
     87c:	8c 85       	ldd	r24, Y+12	; 0x0c
     87e:	48 2f       	mov	r20, r24
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	43 70       	andi	r20, 0x03	; 3
     884:	50 70       	andi	r21, 0x00	; 0
     886:	44 0f       	add	r20, r20
     888:	55 1f       	adc	r21, r21
     88a:	44 0f       	add	r20, r20
     88c:	55 1f       	adc	r21, r21
     88e:	44 0f       	add	r20, r20
     890:	55 1f       	adc	r21, r21
     892:	82 95       	swap	r24
     894:	86 95       	lsr	r24
     896:	87 70       	andi	r24, 0x07	; 7
     898:	48 0f       	add	r20, r24
     89a:	51 1d       	adc	r21, r1
     89c:	4f 5f       	subi	r20, 0xFF	; 255
     89e:	5f 4f       	sbci	r21, 0xFF	; 255
     8a0:	2b 85       	ldd	r18, Y+11	; 0x0b
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	2c 77       	andi	r18, 0x7C	; 124
     8a6:	30 70       	andi	r19, 0x00	; 0
     8a8:	35 95       	asr	r19
     8aa:	27 95       	ror	r18
     8ac:	35 95       	asr	r19
     8ae:	27 95       	ror	r18
     8b0:	2f 5f       	subi	r18, 0xFF	; 255
     8b2:	3f 4f       	sbci	r19, 0xFF	; 255
     8b4:	42 9f       	mul	r20, r18
     8b6:	c0 01       	movw	r24, r0
     8b8:	43 9f       	mul	r20, r19
     8ba:	90 0d       	add	r25, r0
     8bc:	52 9f       	mul	r21, r18
     8be:	90 0d       	add	r25, r0
     8c0:	11 24       	eor	r1, r1
     8c2:	a0 e0       	ldi	r26, 0x00	; 0
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
     8c6:	f7 01       	movw	r30, r14
     8c8:	80 83       	st	Z, r24
     8ca:	91 83       	std	Z+1, r25	; 0x01
     8cc:	a2 83       	std	Z+2, r26	; 0x02
     8ce:	b3 83       	std	Z+3, r27	; 0x03
					}
					res = RES_OK;
     8d0:	00 e0       	ldi	r16, 0x00	; 0
     8d2:	73 c0       	rjmp	.+230    	; 0x9ba <disk_ioctl+0x3ba>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
     8d4:	80 91 2a 01 	lds	r24, 0x012A
     8d8:	fa 01       	movw	r30, r20
     8da:	80 83       	st	Z, r24
			res = RES_OK;
     8dc:	00 e0       	ldi	r16, 0x00	; 0
			break;
     8de:	6d c0       	rjmp	.+218    	; 0x9ba <disk_ioctl+0x3ba>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
     8e0:	89 e0       	ldi	r24, 0x09	; 9
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	ba 01       	movw	r22, r20
     8e8:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     8ec:	88 23       	and	r24, r24
     8ee:	09 f0       	breq	.+2      	; 0x8f2 <disk_ioctl+0x2f2>
     8f0:	57 c0       	rjmp	.+174    	; 0x9a0 <disk_ioctl+0x3a0>
				&& rcvr_datablock(ptr, 16))
     8f2:	c7 01       	movw	r24, r14
     8f4:	60 e1       	ldi	r22, 0x10	; 16
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	0e 94 9d 00 	call	0x13a	; 0x13a <rcvr_datablock>
     8fc:	00 97       	sbiw	r24, 0x00	; 0
     8fe:	09 f0       	breq	.+2      	; 0x902 <disk_ioctl+0x302>
     900:	51 c0       	rjmp	.+162    	; 0x9a4 <disk_ioctl+0x3a4>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     902:	01 e0       	ldi	r16, 0x01	; 1
     904:	5a c0       	rjmp	.+180    	; 0x9ba <disk_ioctl+0x3ba>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
     906:	8a e0       	ldi	r24, 0x0A	; 10
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	ba 01       	movw	r22, r20
     90e:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     912:	88 23       	and	r24, r24
     914:	09 f0       	breq	.+2      	; 0x918 <disk_ioctl+0x318>
     916:	48 c0       	rjmp	.+144    	; 0x9a8 <disk_ioctl+0x3a8>
				&& rcvr_datablock(ptr, 16))
     918:	c7 01       	movw	r24, r14
     91a:	60 e1       	ldi	r22, 0x10	; 16
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	0e 94 9d 00 	call	0x13a	; 0x13a <rcvr_datablock>
     922:	00 97       	sbiw	r24, 0x00	; 0
     924:	09 f0       	breq	.+2      	; 0x928 <disk_ioctl+0x328>
     926:	42 c0       	rjmp	.+132    	; 0x9ac <disk_ioctl+0x3ac>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     928:	01 e0       	ldi	r16, 0x01	; 1
     92a:	47 c0       	rjmp	.+142    	; 0x9ba <disk_ioctl+0x3ba>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
     92c:	8a e3       	ldi	r24, 0x3A	; 58
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	ba 01       	movw	r22, r20
     934:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     938:	88 23       	and	r24, r24
     93a:	d1 f5       	brne	.+116    	; 0x9b0 <disk_ioctl+0x3b0>
/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

#if _USE_IOCTL
DRESULT disk_ioctl (
     93c:	87 01       	movw	r16, r14
     93e:	0c 5f       	subi	r16, 0xFC	; 252
     940:	1f 4f       	sbci	r17, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
     942:	8f ef       	ldi	r24, 0xFF	; 255
     944:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
     948:	f7 01       	movw	r30, r14
     94a:	81 93       	st	Z+, r24
     94c:	7f 01       	movw	r14, r30
     94e:	e0 17       	cp	r30, r16
     950:	f1 07       	cpc	r31, r17
     952:	b9 f7       	brne	.-18     	; 0x942 <disk_ioctl+0x342>
				res = RES_OK;
     954:	00 e0       	ldi	r16, 0x00	; 0
     956:	31 c0       	rjmp	.+98     	; 0x9ba <disk_ioctl+0x3ba>
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
     958:	8d e8       	ldi	r24, 0x8D	; 141
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	ba 01       	movw	r22, r20
     960:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     964:	88 23       	and	r24, r24
     966:	31 f5       	brne	.+76     	; 0x9b4 <disk_ioctl+0x3b4>
				xchg_spi(0xFF);
     968:	8f ef       	ldi	r24, 0xFF	; 255
     96a:	0e 94 6d 00 	call	0xda	; 0xda <xchg_spi>
				if (rcvr_datablock(ptr, 64))
     96e:	c7 01       	movw	r24, r14
     970:	60 e4       	ldi	r22, 0x40	; 64
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	0e 94 9d 00 	call	0x13a	; 0x13a <rcvr_datablock>
     978:	00 97       	sbiw	r24, 0x00	; 0
     97a:	f1 f4       	brne	.+60     	; 0x9b8 <disk_ioctl+0x3b8>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     97c:	01 e0       	ldi	r16, 0x01	; 1
     97e:	1d c0       	rjmp	.+58     	; 0x9ba <disk_ioctl+0x3ba>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
     980:	04 e0       	ldi	r16, 0x04	; 4
     982:	1b c0       	rjmp	.+54     	; 0x9ba <disk_ioctl+0x3ba>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     984:	01 e0       	ldi	r16, 0x01	; 1
     986:	19 c0       	rjmp	.+50     	; 0x9ba <disk_ioctl+0x3ba>
     988:	01 e0       	ldi	r16, 0x01	; 1
     98a:	17 c0       	rjmp	.+46     	; 0x9ba <disk_ioctl+0x3ba>
     98c:	01 e0       	ldi	r16, 0x01	; 1
     98e:	15 c0       	rjmp	.+42     	; 0x9ba <disk_ioctl+0x3ba>
     990:	01 e0       	ldi	r16, 0x01	; 1
     992:	13 c0       	rjmp	.+38     	; 0x9ba <disk_ioctl+0x3ba>
     994:	01 e0       	ldi	r16, 0x01	; 1
     996:	11 c0       	rjmp	.+34     	; 0x9ba <disk_ioctl+0x3ba>
     998:	01 e0       	ldi	r16, 0x01	; 1
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <disk_ioctl+0x3ba>
     99c:	01 e0       	ldi	r16, 0x01	; 1
     99e:	0d c0       	rjmp	.+26     	; 0x9ba <disk_ioctl+0x3ba>
     9a0:	01 e0       	ldi	r16, 0x01	; 1
     9a2:	0b c0       	rjmp	.+22     	; 0x9ba <disk_ioctl+0x3ba>
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
     9a4:	00 e0       	ldi	r16, 0x00	; 0
     9a6:	09 c0       	rjmp	.+18     	; 0x9ba <disk_ioctl+0x3ba>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     9a8:	01 e0       	ldi	r16, 0x01	; 1
     9aa:	07 c0       	rjmp	.+14     	; 0x9ba <disk_ioctl+0x3ba>
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
     9ac:	00 e0       	ldi	r16, 0x00	; 0
     9ae:	05 c0       	rjmp	.+10     	; 0x9ba <disk_ioctl+0x3ba>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     9b0:	01 e0       	ldi	r16, 0x01	; 1
     9b2:	03 c0       	rjmp	.+6      	; 0x9ba <disk_ioctl+0x3ba>
     9b4:	01 e0       	ldi	r16, 0x01	; 1
     9b6:	01 c0       	rjmp	.+2      	; 0x9ba <disk_ioctl+0x3ba>

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				xchg_spi(0xFF);
				if (rcvr_datablock(ptr, 64))
					res = RES_OK;
     9b8:	00 e0       	ldi	r16, 0x00	; 0

		default:
			res = RES_PARERR;
		}

		deselect();
     9ba:	0e 94 88 00 	call	0x110	; 0x110 <deselect>
     9be:	05 c0       	rjmp	.+10     	; 0x9ca <disk_ioctl+0x3ca>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (drv) return RES_PARERR;
     9c0:	04 e0       	ldi	r16, 0x04	; 4
     9c2:	03 c0       	rjmp	.+6      	; 0x9ca <disk_ioctl+0x3ca>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
     9c4:	04 e0       	ldi	r16, 0x04	; 4
     9c6:	01 c0       	rjmp	.+2      	; 0x9ca <disk_ioctl+0x3ca>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     9c8:	03 e0       	ldi	r16, 0x03	; 3

		deselect();
	}

	return res;
}
     9ca:	80 2f       	mov	r24, r16
     9cc:	60 96       	adiw	r28, 0x10	; 16
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	de bf       	out	0x3e, r29	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	cd bf       	out	0x3d, r28	; 61
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	ff 90       	pop	r15
     9e2:	ef 90       	pop	r14
     9e4:	08 95       	ret

000009e6 <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
     9e6:	80 91 29 01 	lds	r24, 0x0129
	if (n) Timer1 = --n;
     9ea:	88 23       	and	r24, r24
     9ec:	19 f0       	breq	.+6      	; 0x9f4 <disk_timerproc+0xe>
     9ee:	81 50       	subi	r24, 0x01	; 1
     9f0:	80 93 29 01 	sts	0x0129, r24
	n = Timer2;
     9f4:	80 91 28 01 	lds	r24, 0x0128
	if (n) Timer2 = --n;
     9f8:	88 23       	and	r24, r24
     9fa:	19 f0       	breq	.+6      	; 0xa02 <disk_timerproc+0x1c>
     9fc:	81 50       	subi	r24, 0x01	; 1
     9fe:	80 93 28 01 	sts	0x0128, r24

	s = Stat;
     a02:	80 91 00 01 	lds	r24, 0x0100

	if (SOCKWP)				/* Write protected */
     a06:	18 9b       	sbis	0x03, 0	; 3
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <disk_timerproc+0x28>
		s |= STA_PROTECT;
     a0a:	84 60       	ori	r24, 0x04	; 4
     a0c:	01 c0       	rjmp	.+2      	; 0xa10 <disk_timerproc+0x2a>
	else					/* Write enabled */
		s &= ~STA_PROTECT;
     a0e:	8b 7f       	andi	r24, 0xFB	; 251

	if (SOCKINS)			/* Card inserted */
     a10:	19 99       	sbic	0x03, 1	; 3
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <disk_timerproc+0x32>
		s &= ~STA_NODISK;
     a14:	8d 7f       	andi	r24, 0xFD	; 253
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <disk_timerproc+0x34>
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
     a18:	83 60       	ori	r24, 0x03	; 3

	Stat = s;				/* Update MMC status */
     a1a:	80 93 00 01 	sts	0x0100, r24
}
     a1e:	08 95       	ret

00000a20 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
     a20:	41 15       	cp	r20, r1
     a22:	51 05       	cpc	r21, r1
     a24:	49 f0       	breq	.+18     	; 0xa38 <mem_cpy+0x18>
     a26:	a6 2f       	mov	r26, r22
     a28:	b7 2f       	mov	r27, r23
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
     a2a:	e8 2f       	mov	r30, r24
     a2c:	f9 2f       	mov	r31, r25
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
     a2e:	8d 91       	ld	r24, X+
     a30:	81 93       	st	Z+, r24
     a32:	41 50       	subi	r20, 0x01	; 1
     a34:	50 40       	sbci	r21, 0x00	; 0
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
     a36:	d9 f7       	brne	.-10     	; 0xa2e <mem_cpy+0xe>
     a38:	08 95       	ret

00000a3a <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     a3a:	41 15       	cp	r20, r1
     a3c:	51 05       	cpc	r21, r1
     a3e:	31 f0       	breq	.+12     	; 0xa4c <mem_set+0x12>
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
     a40:	e8 2f       	mov	r30, r24
     a42:	f9 2f       	mov	r31, r25

	while (cnt--)
		*d++ = (BYTE)val;
     a44:	61 93       	st	Z+, r22
     a46:	41 50       	subi	r20, 0x01	; 1
     a48:	50 40       	sbci	r21, 0x00	; 0
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <mem_set+0xa>
     a4c:	08 95       	ret

00000a4e <ld_clust>:
static
DWORD ld_clust (
	FATFS *fs,	/* Pointer to the fs object */
	BYTE *dir	/* Pointer to the directory entry */
)
{
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	dc 01       	movw	r26, r24
     a54:	fb 01       	movw	r30, r22
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
     a56:	93 8d       	ldd	r25, Z+27	; 0x1b
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	02 8d       	ldd	r16, Z+26	; 0x1a
     a5c:	10 e0       	ldi	r17, 0x00	; 0
     a5e:	08 2b       	or	r16, r24
     a60:	19 2b       	or	r17, r25
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
     a66:	8c 91       	ld	r24, X
     a68:	83 30       	cpi	r24, 0x03	; 3
     a6a:	79 f4       	brne	.+30     	; 0xa8a <ld_clust+0x3c>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
     a6c:	55 89       	ldd	r21, Z+21	; 0x15
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	84 89       	ldd	r24, Z+20	; 0x14
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	84 2b       	or	r24, r20
     a76:	95 2b       	or	r25, r21
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	dc 01       	movw	r26, r24
     a7e:	99 27       	eor	r25, r25
     a80:	88 27       	eor	r24, r24
     a82:	08 2b       	or	r16, r24
     a84:	19 2b       	or	r17, r25
     a86:	2a 2b       	or	r18, r26
     a88:	3b 2b       	or	r19, r27

	return cl;
}
     a8a:	60 2f       	mov	r22, r16
     a8c:	71 2f       	mov	r23, r17
     a8e:	82 2f       	mov	r24, r18
     a90:	93 2f       	mov	r25, r19
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	08 95       	ret

00000a98 <st_clust>:
static
void st_clust (
	BYTE *dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
     a98:	fc 01       	movw	r30, r24
	ST_WORD(dir+DIR_FstClusLO, cl);
     a9a:	42 8f       	std	Z+26, r20	; 0x1a
     a9c:	53 8f       	std	Z+27, r21	; 0x1b
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
     a9e:	ab 01       	movw	r20, r22
     aa0:	66 27       	eor	r22, r22
     aa2:	77 27       	eor	r23, r23
     aa4:	44 8b       	std	Z+20, r20	; 0x14
     aa6:	55 8b       	std	Z+21, r21	; 0x15
}
     aa8:	08 95       	ret

00000aaa <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	fc 01       	movw	r30, r24
     ab8:	7b 01       	movw	r14, r22
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
     aba:	8b 01       	movw	r16, r22
     abc:	07 5f       	subi	r16, 0xF7	; 247
     abe:	1f 4f       	sbci	r17, 0xFF	; 255
	if (dj->sect) {
     ac0:	86 85       	ldd	r24, Z+14	; 0x0e
     ac2:	97 85       	ldd	r25, Z+15	; 0x0f
     ac4:	a0 89       	ldd	r26, Z+16	; 0x10
     ac6:	b1 89       	ldd	r27, Z+17	; 0x11
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	a1 05       	cpc	r26, r1
     acc:	b1 05       	cpc	r27, r1
     ace:	09 f4       	brne	.+2      	; 0xad2 <get_fileinfo+0x28>
     ad0:	65 c0       	rjmp	.+202    	; 0xb9c <get_fileinfo+0xf2>
		dir = dj->dir;
     ad2:	c2 89       	ldd	r28, Z+18	; 0x12
     ad4:	d3 89       	ldd	r29, Z+19	; 0x13
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
     ad6:	28 81       	ld	r18, Y
			if (c == ' ') break;
     ad8:	20 32       	cpi	r18, 0x20	; 32
     ada:	99 f0       	breq	.+38     	; 0xb02 <get_fileinfo+0x58>
/*-----------------------------------------------------------------------*/
/* Get file information from directory entry                             */
/*-----------------------------------------------------------------------*/
#if _FS_MINIMIZE <= 1
static
void get_fileinfo (		/* No return code */
     adc:	de 01       	movw	r26, r28
     ade:	11 96       	adiw	r26, 0x01	; 1
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
     ae0:	f8 01       	movw	r30, r16

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
     ae6:	35 ee       	ldi	r19, 0xE5	; 229
     ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <get_fileinfo+0x46>
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
     aea:	2d 91       	ld	r18, X+
			if (c == ' ') break;
     aec:	20 32       	cpi	r18, 0x20	; 32
     aee:	49 f0       	breq	.+18     	; 0xb02 <get_fileinfo+0x58>
			if (c == NDDE) c = (TCHAR)DDE;
     af0:	25 30       	cpi	r18, 0x05	; 5
     af2:	09 f4       	brne	.+2      	; 0xaf6 <get_fileinfo+0x4c>
     af4:	23 2f       	mov	r18, r19
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
     af6:	21 93       	st	Z+, r18
     af8:	8f 01       	movw	r16, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	88 30       	cpi	r24, 0x08	; 8
     afe:	91 05       	cpc	r25, r1
     b00:	a1 f7       	brne	.-24     	; 0xaea <get_fileinfo+0x40>
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
     b02:	88 85       	ldd	r24, Y+8	; 0x08
     b04:	80 32       	cpi	r24, 0x20	; 32
     b06:	81 f0       	breq	.+32     	; 0xb28 <get_fileinfo+0x7e>
			*p++ = '.';
     b08:	8e e2       	ldi	r24, 0x2E	; 46
     b0a:	f8 01       	movw	r30, r16
     b0c:	80 83       	st	Z, r24
			for (i = 8; i < 11; i++) {
				c = dir[i];
     b0e:	88 85       	ldd	r24, Y+8	; 0x08
				if (c == ' ') break;
     b10:	80 32       	cpi	r24, 0x20	; 32
     b12:	09 f0       	breq	.+2      	; 0xb16 <get_fileinfo+0x6c>
     b14:	4c c0       	rjmp	.+152    	; 0xbae <get_fileinfo+0x104>
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
     b16:	0f 5f       	subi	r16, 0xFF	; 255
     b18:	1f 4f       	sbci	r17, 0xFF	; 255
     b1a:	06 c0       	rjmp	.+12     	; 0xb28 <get_fileinfo+0x7e>
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
     b1c:	8c 01       	movw	r16, r24
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <get_fileinfo+0x7e>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     b20:	f8 01       	movw	r30, r16
     b22:	23 83       	std	Z+3, r18	; 0x03
     b24:	0c 5f       	subi	r16, 0xFC	; 252
     b26:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     b28:	8b 85       	ldd	r24, Y+11	; 0x0b
     b2a:	f7 01       	movw	r30, r14
     b2c:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     b2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	b8 2f       	mov	r27, r24
     b38:	aa 27       	eor	r26, r26
     b3a:	99 27       	eor	r25, r25
     b3c:	88 27       	eor	r24, r24
     b3e:	4e 8d       	ldd	r20, Y+30	; 0x1e
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	ba 01       	movw	r22, r20
     b48:	55 27       	eor	r21, r21
     b4a:	44 27       	eor	r20, r20
     b4c:	48 2b       	or	r20, r24
     b4e:	59 2b       	or	r21, r25
     b50:	6a 2b       	or	r22, r26
     b52:	7b 2b       	or	r23, r27
     b54:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	a0 e0       	ldi	r26, 0x00	; 0
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	48 2b       	or	r20, r24
     b5e:	59 2b       	or	r21, r25
     b60:	6a 2b       	or	r22, r26
     b62:	7b 2b       	or	r23, r27
     b64:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	a0 e0       	ldi	r26, 0x00	; 0
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	84 2b       	or	r24, r20
     b6e:	95 2b       	or	r25, r21
     b70:	a6 2b       	or	r26, r22
     b72:	b7 2b       	or	r27, r23
     b74:	80 83       	st	Z, r24
     b76:	91 83       	std	Z+1, r25	; 0x01
     b78:	a2 83       	std	Z+2, r26	; 0x02
     b7a:	b3 83       	std	Z+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     b7c:	39 8d       	ldd	r19, Y+25	; 0x19
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	88 8d       	ldd	r24, Y+24	; 0x18
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	82 2b       	or	r24, r18
     b86:	93 2b       	or	r25, r19
     b88:	95 83       	std	Z+5, r25	; 0x05
     b8a:	84 83       	std	Z+4, r24	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     b8c:	9f 89       	ldd	r25, Y+23	; 0x17
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	2e 89       	ldd	r18, Y+22	; 0x16
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	82 2b       	or	r24, r18
     b96:	93 2b       	or	r25, r19
     b98:	97 83       	std	Z+7, r25	; 0x07
     b9a:	86 83       	std	Z+6, r24	; 0x06
	}
	*p = 0;		/* Terminate SFN str by a \0 */
     b9c:	f8 01       	movw	r30, r16
     b9e:	10 82       	st	Z, r1
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
	}
#endif
}
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	ff 90       	pop	r15
     baa:	ef 90       	pop	r14
     bac:	08 95       	ret
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     bae:	f8 01       	movw	r30, r16
     bb0:	81 83       	std	Z+1, r24	; 0x01
     bb2:	c8 01       	movw	r24, r16
     bb4:	02 96       	adiw	r24, 0x02	; 2
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
     bb6:	29 85       	ldd	r18, Y+9	; 0x09
				if (c == ' ') break;
     bb8:	20 32       	cpi	r18, 0x20	; 32
     bba:	09 f4       	brne	.+2      	; 0xbbe <get_fileinfo+0x114>
     bbc:	af cf       	rjmp	.-162    	; 0xb1c <get_fileinfo+0x72>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     bbe:	22 83       	std	Z+2, r18	; 0x02
     bc0:	c8 01       	movw	r24, r16
     bc2:	03 96       	adiw	r24, 0x03	; 3
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
     bc4:	2a 85       	ldd	r18, Y+10	; 0x0a
				if (c == ' ') break;
     bc6:	20 32       	cpi	r18, 0x20	; 32
     bc8:	09 f0       	breq	.+2      	; 0xbcc <get_fileinfo+0x122>
     bca:	aa cf       	rjmp	.-172    	; 0xb20 <get_fileinfo+0x76>
     bcc:	a7 cf       	rjmp	.-178    	; 0xb1c <get_fileinfo+0x72>

00000bce <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
     bce:	dc 01       	movw	r26, r24
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
     bd0:	ed 91       	ld	r30, X+
     bd2:	fc 91       	ld	r31, X
     bd4:	11 97       	sbiw	r26, 0x01	; 1
     bd6:	30 97       	sbiw	r30, 0x00	; 0
     bd8:	99 f0       	breq	.+38     	; 0xc00 <validate+0x32>
     bda:	80 81       	ld	r24, Z
     bdc:	88 23       	and	r24, r24
     bde:	91 f0       	breq	.+36     	; 0xc04 <validate+0x36>
     be0:	26 81       	ldd	r18, Z+6	; 0x06
     be2:	37 81       	ldd	r19, Z+7	; 0x07
     be4:	12 96       	adiw	r26, 0x02	; 2
     be6:	8d 91       	ld	r24, X+
     be8:	9c 91       	ld	r25, X
     bea:	13 97       	sbiw	r26, 0x03	; 3
     bec:	28 17       	cp	r18, r24
     bee:	39 07       	cpc	r19, r25
     bf0:	59 f4       	brne	.+22     	; 0xc08 <validate+0x3a>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
     bf2:	81 81       	ldd	r24, Z+1	; 0x01
     bf4:	0e 94 30 02 	call	0x460	; 0x460 <disk_status>
     bf8:	80 ff       	sbrs	r24, 0
     bfa:	08 c0       	rjmp	.+16     	; 0xc0c <validate+0x3e>
		return FR_NOT_READY;
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	08 95       	ret
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
     c00:	89 e0       	ldi	r24, 0x09	; 9
     c02:	08 95       	ret
     c04:	89 e0       	ldi	r24, 0x09	; 9
     c06:	08 95       	ret
     c08:	89 e0       	ldi	r24, 0x09	; 9
     c0a:	08 95       	ret
	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
     c0c:	80 e0       	ldi	r24, 0x00	; 0
}
     c0e:	08 95       	ret

00000c10 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     c10:	0f 93       	push	r16
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	ec 01       	movw	r28, r24
     c18:	9a 01       	movw	r18, r20
     c1a:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
     c1c:	bc 01       	movw	r22, r24
     c1e:	6e 5c       	subi	r22, 0xCE	; 206
     c20:	7f 4f       	sbci	r23, 0xFF	; 255
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	01 e0       	ldi	r16, 0x01	; 1
     c26:	0e 94 37 02 	call	0x46e	; 0x46e <disk_read>
     c2a:	88 23       	and	r24, r24
     c2c:	09 f0       	breq	.+2      	; 0xc30 <check_fs+0x20>
     c2e:	83 c0       	rjmp	.+262    	; 0xd36 <check_fs+0x126>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
     c30:	fe 01       	movw	r30, r28
     c32:	ef 5c       	subi	r30, 0xCF	; 207
     c34:	fd 4f       	sbci	r31, 0xFD	; 253
     c36:	90 81       	ld	r25, Z
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	fe 01       	movw	r30, r28
     c3c:	e0 5d       	subi	r30, 0xD0	; 208
     c3e:	fd 4f       	sbci	r31, 0xFD	; 253
     c40:	20 81       	ld	r18, Z
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	82 2b       	or	r24, r18
     c46:	93 2b       	or	r25, r19
     c48:	2a ea       	ldi	r18, 0xAA	; 170
     c4a:	85 35       	cpi	r24, 0x55	; 85
     c4c:	92 07       	cpc	r25, r18
     c4e:	09 f0       	breq	.+2      	; 0xc52 <check_fs+0x42>
     c50:	74 c0       	rjmp	.+232    	; 0xd3a <check_fs+0x12a>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     c52:	fe 01       	movw	r30, r28
     c54:	e5 59       	subi	r30, 0x95	; 149
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	80 81       	ld	r24, Z
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	a0 e0       	ldi	r26, 0x00	; 0
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	b8 2f       	mov	r27, r24
     c62:	aa 27       	eor	r26, r26
     c64:	99 27       	eor	r25, r25
     c66:	88 27       	eor	r24, r24
     c68:	fe 01       	movw	r30, r28
     c6a:	e6 59       	subi	r30, 0x96	; 150
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	40 81       	ld	r20, Z
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	ba 01       	movw	r22, r20
     c78:	55 27       	eor	r21, r21
     c7a:	44 27       	eor	r20, r20
     c7c:	48 2b       	or	r20, r24
     c7e:	59 2b       	or	r21, r25
     c80:	6a 2b       	or	r22, r26
     c82:	7b 2b       	or	r23, r27
     c84:	fe 01       	movw	r30, r28
     c86:	e8 59       	subi	r30, 0x98	; 152
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	80 81       	ld	r24, Z
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	48 2b       	or	r20, r24
     c94:	59 2b       	or	r21, r25
     c96:	6a 2b       	or	r22, r26
     c98:	7b 2b       	or	r23, r27
     c9a:	fe 01       	movw	r30, r28
     c9c:	e7 59       	subi	r30, 0x97	; 151
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	90 81       	ld	r25, Z
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	a0 e0       	ldi	r26, 0x00	; 0
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	48 2b       	or	r20, r24
     caa:	59 2b       	or	r21, r25
     cac:	6a 2b       	or	r22, r26
     cae:	7b 2b       	or	r23, r27
     cb0:	70 70       	andi	r23, 0x00	; 0
     cb2:	46 34       	cpi	r20, 0x46	; 70
     cb4:	81 e4       	ldi	r24, 0x41	; 65
     cb6:	58 07       	cpc	r21, r24
     cb8:	84 e5       	ldi	r24, 0x54	; 84
     cba:	68 07       	cpc	r22, r24
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	78 07       	cpc	r23, r24
     cc0:	f1 f1       	breq	.+124    	; 0xd3e <check_fs+0x12e>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
     cc2:	fe 01       	movw	r30, r28
     cc4:	e9 57       	subi	r30, 0x79	; 121
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	80 81       	ld	r24, Z
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e0       	ldi	r26, 0x00	; 0
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	b8 2f       	mov	r27, r24
     cd2:	aa 27       	eor	r26, r26
     cd4:	99 27       	eor	r25, r25
     cd6:	88 27       	eor	r24, r24
     cd8:	fe 01       	movw	r30, r28
     cda:	ea 57       	subi	r30, 0x7A	; 122
     cdc:	ff 4f       	sbci	r31, 0xFF	; 255
     cde:	40 81       	ld	r20, Z
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	ba 01       	movw	r22, r20
     ce8:	55 27       	eor	r21, r21
     cea:	44 27       	eor	r20, r20
     cec:	48 2b       	or	r20, r24
     cee:	59 2b       	or	r21, r25
     cf0:	6a 2b       	or	r22, r26
     cf2:	7b 2b       	or	r23, r27
     cf4:	fe 01       	movw	r30, r28
     cf6:	ec 57       	subi	r30, 0x7C	; 124
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255
     cfa:	80 81       	ld	r24, Z
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	48 2b       	or	r20, r24
     d04:	59 2b       	or	r21, r25
     d06:	6a 2b       	or	r22, r26
     d08:	7b 2b       	or	r23, r27
     d0a:	cb 57       	subi	r28, 0x7B	; 123
     d0c:	df 4f       	sbci	r29, 0xFF	; 255
     d0e:	98 81       	ld	r25, Y
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	a0 e0       	ldi	r26, 0x00	; 0
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	48 2b       	or	r20, r24
     d18:	59 2b       	or	r21, r25
     d1a:	6a 2b       	or	r22, r26
     d1c:	7b 2b       	or	r23, r27
     d1e:	70 70       	andi	r23, 0x00	; 0
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	46 34       	cpi	r20, 0x46	; 70
     d24:	91 e4       	ldi	r25, 0x41	; 65
     d26:	59 07       	cpc	r21, r25
     d28:	94 e5       	ldi	r25, 0x54	; 84
     d2a:	69 07       	cpc	r22, r25
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	79 07       	cpc	r23, r25
     d30:	39 f4       	brne	.+14     	; 0xd40 <check_fs+0x130>
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	05 c0       	rjmp	.+10     	; 0xd40 <check_fs+0x130>
     d36:	83 e0       	ldi	r24, 0x03	; 3
     d38:	03 c0       	rjmp	.+6      	; 0xd40 <check_fs+0x130>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <check_fs+0x130>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
     d3e:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	0f 91       	pop	r16
     d46:	08 95       	ret

00000d48 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
     d48:	2f 92       	push	r2
     d4a:	3f 92       	push	r3
     d4c:	4f 92       	push	r4
     d4e:	5f 92       	push	r5
     d50:	6f 92       	push	r6
     d52:	7f 92       	push	r7
     d54:	8f 92       	push	r8
     d56:	9f 92       	push	r9
     d58:	af 92       	push	r10
     d5a:	bf 92       	push	r11
     d5c:	cf 92       	push	r12
     d5e:	df 92       	push	r13
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	2f 97       	sbiw	r28, 0x0f	; 15
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	14 2f       	mov	r17, r20
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
     d7e:	dc 01       	movw	r26, r24
     d80:	ed 91       	ld	r30, X+
     d82:	fc 91       	ld	r31, X
     d84:	11 97       	sbiw	r26, 0x01	; 1
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
     d86:	80 81       	ld	r24, Z
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	c0 97       	sbiw	r24, 0x30	; 48
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
     d8c:	8a 30       	cpi	r24, 0x0A	; 10
     d8e:	91 05       	cpc	r25, r1
     d90:	40 f4       	brcc	.+16     	; 0xda2 <chk_mounted+0x5a>
     d92:	21 81       	ldd	r18, Z+1	; 0x01
     d94:	2a 33       	cpi	r18, 0x3A	; 58
     d96:	29 f4       	brne	.+10     	; 0xda2 <chk_mounted+0x5a>
		p += 2; *path = p;				/* Return pointer to the path name */
     d98:	32 96       	adiw	r30, 0x02	; 2
     d9a:	11 96       	adiw	r26, 0x01	; 1
     d9c:	fc 93       	st	X, r31
     d9e:	ee 93       	st	-X, r30
     da0:	03 c0       	rjmp	.+6      	; 0xda8 <chk_mounted+0x60>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
     da2:	80 91 2d 01 	lds	r24, 0x012D
     da6:	90 e0       	ldi	r25, 0x00	; 0
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
     da8:	fb 01       	movw	r30, r22
     daa:	11 82       	std	Z+1, r1	; 0x01
     dac:	10 82       	st	Z, r1
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	09 f0       	breq	.+2      	; 0xdb4 <chk_mounted+0x6c>
     db2:	d2 c3       	rjmp	.+1956   	; 0x1558 <chk_mounted+0x810>
		return FR_INVALID_DRIVE;
	fs = FatFs[vol];					/* Get corresponding file system object */
     db4:	20 91 2b 01 	lds	r18, 0x012B
     db8:	30 91 2c 01 	lds	r19, 0x012C
     dbc:	3f 87       	std	Y+15, r19	; 0x0f
     dbe:	2e 87       	std	Y+14, r18	; 0x0e
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     dc0:	21 15       	cp	r18, r1
     dc2:	31 05       	cpc	r19, r1
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <chk_mounted+0x80>
     dc6:	ca c3       	rjmp	.+1940   	; 0x155c <chk_mounted+0x814>

	ENTER_FF(fs);						/* Lock file system */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
     dc8:	31 83       	std	Z+1, r19	; 0x01
     dca:	20 83       	st	Z, r18
	if (fs->fs_type) {					/* If the volume has been mounted */
     dcc:	d9 01       	movw	r26, r18
     dce:	8c 91       	ld	r24, X
     dd0:	88 23       	and	r24, r24
     dd2:	69 f0       	breq	.+26     	; 0xdee <chk_mounted+0xa6>
		stat = disk_status(fs->drv);
     dd4:	11 96       	adiw	r26, 0x01	; 1
     dd6:	8c 91       	ld	r24, X
     dd8:	0e 94 30 02 	call	0x460	; 0x460 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
     ddc:	80 fd       	sbrc	r24, 0
     dde:	07 c0       	rjmp	.+14     	; 0xdee <chk_mounted+0xa6>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
     de0:	11 23       	and	r17, r17
     de2:	09 f4       	brne	.+2      	; 0xde6 <chk_mounted+0x9e>
     de4:	bd c3       	rjmp	.+1914   	; 0x1560 <chk_mounted+0x818>
     de6:	82 fd       	sbrc	r24, 2
     de8:	bd c3       	rjmp	.+1914   	; 0x1564 <chk_mounted+0x81c>
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	dc c3       	rjmp	.+1976   	; 0x15a6 <chk_mounted+0x85e>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
     dee:	ee 85       	ldd	r30, Y+14	; 0x0e
     df0:	ff 85       	ldd	r31, Y+15	; 0x0f
     df2:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
     df4:	11 82       	std	Z+1, r1	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
     dfc:	80 fd       	sbrc	r24, 0
     dfe:	b4 c3       	rjmp	.+1896   	; 0x1568 <chk_mounted+0x820>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
     e00:	11 23       	and	r17, r17
     e02:	11 f0       	breq	.+4      	; 0xe08 <chk_mounted+0xc0>
     e04:	82 fd       	sbrc	r24, 2
     e06:	b2 c3       	rjmp	.+1892   	; 0x156c <chk_mounted+0x824>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
     e08:	8e 85       	ldd	r24, Y+14	; 0x0e
     e0a:	9f 85       	ldd	r25, Y+15	; 0x0f
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	50 e0       	ldi	r21, 0x00	; 0
     e10:	ba 01       	movw	r22, r20
     e12:	0e 94 08 06 	call	0xc10	; 0xc10 <check_fs>
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	09 f0       	breq	.+2      	; 0xe1c <chk_mounted+0xd4>
     e1a:	43 c0       	rjmp	.+134    	; 0xea2 <chk_mounted+0x15a>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
     e1c:	ee 85       	ldd	r30, Y+14	; 0x0e
     e1e:	ff 85       	ldd	r31, Y+15	; 0x0f
     e20:	ec 50       	subi	r30, 0x0C	; 12
     e22:	fe 4f       	sbci	r31, 0xFE	; 254
     e24:	80 81       	ld	r24, Z
     e26:	88 23       	and	r24, r24
     e28:	09 f4       	brne	.+2      	; 0xe2c <chk_mounted+0xe4>
     e2a:	a2 c3       	rjmp	.+1860   	; 0x1570 <chk_mounted+0x828>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
     e2c:	ee 85       	ldd	r30, Y+14	; 0x0e
     e2e:	ff 85       	ldd	r31, Y+15	; 0x0f
     e30:	e5 50       	subi	r30, 0x05	; 5
     e32:	fe 4f       	sbci	r31, 0xFE	; 254
     e34:	80 81       	ld	r24, Z
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	a0 e0       	ldi	r26, 0x00	; 0
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	b8 2f       	mov	r27, r24
     e3e:	aa 27       	eor	r26, r26
     e40:	99 27       	eor	r25, r25
     e42:	88 27       	eor	r24, r24
     e44:	ee 85       	ldd	r30, Y+14	; 0x0e
     e46:	ff 85       	ldd	r31, Y+15	; 0x0f
     e48:	e6 50       	subi	r30, 0x06	; 6
     e4a:	fe 4f       	sbci	r31, 0xFE	; 254
     e4c:	40 81       	ld	r20, Z
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	ba 01       	movw	r22, r20
     e56:	55 27       	eor	r21, r21
     e58:	44 27       	eor	r20, r20
     e5a:	84 2b       	or	r24, r20
     e5c:	95 2b       	or	r25, r21
     e5e:	a6 2b       	or	r26, r22
     e60:	b7 2b       	or	r27, r23
     e62:	ee 85       	ldd	r30, Y+14	; 0x0e
     e64:	ff 85       	ldd	r31, Y+15	; 0x0f
     e66:	e8 50       	subi	r30, 0x08	; 8
     e68:	fe 4f       	sbci	r31, 0xFE	; 254
     e6a:	40 81       	ld	r20, Z
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	48 2b       	or	r20, r24
     e74:	59 2b       	or	r21, r25
     e76:	6a 2b       	or	r22, r26
     e78:	7b 2b       	or	r23, r27
     e7a:	ee 85       	ldd	r30, Y+14	; 0x0e
     e7c:	ff 85       	ldd	r31, Y+15	; 0x0f
     e7e:	e7 50       	subi	r30, 0x07	; 7
     e80:	fe 4f       	sbci	r31, 0xFE	; 254
     e82:	90 81       	ld	r25, Z
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	6c 01       	movw	r12, r24
     e88:	ee 24       	eor	r14, r14
     e8a:	ff 24       	eor	r15, r15
     e8c:	c4 2a       	or	r12, r20
     e8e:	d5 2a       	or	r13, r21
     e90:	e6 2a       	or	r14, r22
     e92:	f7 2a       	or	r15, r23
			fmt = check_fs(fs, bsect);		/* Check the partition */
     e94:	8e 85       	ldd	r24, Y+14	; 0x0e
     e96:	9f 85       	ldd	r25, Y+15	; 0x0f
     e98:	b7 01       	movw	r22, r14
     e9a:	a6 01       	movw	r20, r12
     e9c:	0e 94 08 06 	call	0xc10	; 0xc10 <check_fs>
     ea0:	03 c0       	rjmp	.+6      	; 0xea8 <chk_mounted+0x160>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
     ea2:	cc 24       	eor	r12, r12
     ea4:	dd 24       	eor	r13, r13
     ea6:	76 01       	movw	r14, r12
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     ea8:	83 30       	cpi	r24, 0x03	; 3
     eaa:	09 f4       	brne	.+2      	; 0xeae <chk_mounted+0x166>
     eac:	63 c3       	rjmp	.+1734   	; 0x1574 <chk_mounted+0x82c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
     eae:	88 23       	and	r24, r24
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <chk_mounted+0x16c>
     eb2:	62 c3       	rjmp	.+1732   	; 0x1578 <chk_mounted+0x830>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
     eb4:	ae 85       	ldd	r26, Y+14	; 0x0e
     eb6:	bf 85       	ldd	r27, Y+15	; 0x0f
     eb8:	de 96       	adiw	r26, 0x3e	; 62
     eba:	9c 91       	ld	r25, X
     ebc:	de 97       	sbiw	r26, 0x3e	; 62
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	dd 96       	adiw	r26, 0x3d	; 61
     ec2:	2c 91       	ld	r18, X
     ec4:	dd 97       	sbiw	r26, 0x3d	; 61
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	82 2b       	or	r24, r18
     eca:	93 2b       	or	r25, r19
     ecc:	b2 e0       	ldi	r27, 0x02	; 2
     ece:	80 30       	cpi	r24, 0x00	; 0
     ed0:	9b 07       	cpc	r25, r27
     ed2:	09 f0       	breq	.+2      	; 0xed6 <chk_mounted+0x18e>
     ed4:	53 c3       	rjmp	.+1702   	; 0x157c <chk_mounted+0x834>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
     ed6:	ee 85       	ldd	r30, Y+14	; 0x0e
     ed8:	ff 85       	ldd	r31, Y+15	; 0x0f
     eda:	e7 5b       	subi	r30, 0xB7	; 183
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	30 81       	ld	r19, Z
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	ee 85       	ldd	r30, Y+14	; 0x0e
     ee4:	ff 85       	ldd	r31, Y+15	; 0x0f
     ee6:	e8 5b       	subi	r30, 0xB8	; 184
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	80 81       	ld	r24, Z
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	82 2b       	or	r24, r18
     ef0:	93 2b       	or	r25, r19
     ef2:	4c 01       	movw	r8, r24
     ef4:	aa 24       	eor	r10, r10
     ef6:	bb 24       	eor	r11, r11
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
     ef8:	81 14       	cp	r8, r1
     efa:	91 04       	cpc	r9, r1
     efc:	a1 04       	cpc	r10, r1
     efe:	b1 04       	cpc	r11, r1
     f00:	a9 f5       	brne	.+106    	; 0xf6c <chk_mounted+0x224>
     f02:	ee 85       	ldd	r30, Y+14	; 0x0e
     f04:	ff 85       	ldd	r31, Y+15	; 0x0f
     f06:	e7 5a       	subi	r30, 0xA7	; 167
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	40 81       	ld	r20, Z
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	74 2f       	mov	r23, r20
     f14:	66 27       	eor	r22, r22
     f16:	55 27       	eor	r21, r21
     f18:	44 27       	eor	r20, r20
     f1a:	ee 85       	ldd	r30, Y+14	; 0x0e
     f1c:	ff 85       	ldd	r31, Y+15	; 0x0f
     f1e:	e8 5a       	subi	r30, 0xA8	; 168
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	80 81       	ld	r24, Z
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	a0 e0       	ldi	r26, 0x00	; 0
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	dc 01       	movw	r26, r24
     f2c:	99 27       	eor	r25, r25
     f2e:	88 27       	eor	r24, r24
     f30:	48 2b       	or	r20, r24
     f32:	59 2b       	or	r21, r25
     f34:	6a 2b       	or	r22, r26
     f36:	7b 2b       	or	r23, r27
     f38:	ee 85       	ldd	r30, Y+14	; 0x0e
     f3a:	ff 85       	ldd	r31, Y+15	; 0x0f
     f3c:	ea 5a       	subi	r30, 0xAA	; 170
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	80 81       	ld	r24, Z
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	a0 e0       	ldi	r26, 0x00	; 0
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	48 2b       	or	r20, r24
     f4a:	59 2b       	or	r21, r25
     f4c:	6a 2b       	or	r22, r26
     f4e:	7b 2b       	or	r23, r27
     f50:	ee 85       	ldd	r30, Y+14	; 0x0e
     f52:	ff 85       	ldd	r31, Y+15	; 0x0f
     f54:	e9 5a       	subi	r30, 0xA9	; 169
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	90 81       	ld	r25, Z
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	a0 e0       	ldi	r26, 0x00	; 0
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	4a 01       	movw	r8, r20
     f62:	5b 01       	movw	r10, r22
     f64:	88 2a       	or	r8, r24
     f66:	99 2a       	or	r9, r25
     f68:	aa 2a       	or	r10, r26
     f6a:	bb 2a       	or	r11, r27
	fs->fsize = fasize;
     f6c:	ee 85       	ldd	r30, Y+14	; 0x0e
     f6e:	ff 85       	ldd	r31, Y+15	; 0x0f
     f70:	86 8e       	std	Z+30, r8	; 0x1e
     f72:	97 8e       	std	Z+31, r9	; 0x1f
     f74:	a0 a2       	lds	r26, 0x90
     f76:	b1 a2       	lds	r27, 0x91

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
     f78:	ee 5b       	subi	r30, 0xBE	; 190
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	00 81       	ld	r16, Z
     f7e:	09 83       	std	Y+1, r16	; 0x01
     f80:	ae 85       	ldd	r26, Y+14	; 0x0e
     f82:	bf 85       	ldd	r27, Y+15	; 0x0f
     f84:	13 96       	adiw	r26, 0x03	; 3
     f86:	0c 93       	st	X, r16
     f88:	13 97       	sbiw	r26, 0x03	; 3
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
     f8a:	80 2f       	mov	r24, r16
     f8c:	81 50       	subi	r24, 0x01	; 1
     f8e:	82 30       	cpi	r24, 0x02	; 2
     f90:	08 f0       	brcs	.+2      	; 0xf94 <chk_mounted+0x24c>
     f92:	f6 c2       	rjmp	.+1516   	; 0x1580 <chk_mounted+0x838>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
     f94:	df 96       	adiw	r26, 0x3f	; 63
     f96:	0c 91       	ld	r16, X
     f98:	df 97       	sbiw	r26, 0x3f	; 63
     f9a:	0d 83       	std	Y+5, r16	; 0x05
     f9c:	12 96       	adiw	r26, 0x02	; 2
     f9e:	0c 93       	st	X, r16
     fa0:	12 97       	sbiw	r26, 0x02	; 2
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
     fa2:	00 23       	and	r16, r16
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <chk_mounted+0x260>
     fa6:	ee c2       	rjmp	.+1500   	; 0x1584 <chk_mounted+0x83c>
     fa8:	80 2f       	mov	r24, r16
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	9c 01       	movw	r18, r24
     fae:	21 50       	subi	r18, 0x01	; 1
     fb0:	30 40       	sbci	r19, 0x00	; 0
     fb2:	82 23       	and	r24, r18
     fb4:	93 23       	and	r25, r19
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	09 f0       	breq	.+2      	; 0xfbc <chk_mounted+0x274>
     fba:	e6 c2       	rjmp	.+1484   	; 0x1588 <chk_mounted+0x840>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
     fbc:	fd 01       	movw	r30, r26
     fbe:	ec 5b       	subi	r30, 0xBC	; 188
     fc0:	ff 4f       	sbci	r31, 0xFF	; 255
     fc2:	30 81       	ld	r19, Z
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	fd 01       	movw	r30, r26
     fc8:	ed 5b       	subi	r30, 0xBD	; 189
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	80 81       	ld	r24, Z
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	19 01       	movw	r2, r18
     fd2:	28 2a       	or	r2, r24
     fd4:	39 2a       	or	r3, r25
     fd6:	19 96       	adiw	r26, 0x09	; 9
     fd8:	3c 92       	st	X, r3
     fda:	2e 92       	st	-X, r2
     fdc:	18 97       	sbiw	r26, 0x08	; 8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
     fde:	c1 01       	movw	r24, r2
     fe0:	8f 70       	andi	r24, 0x0F	; 15
     fe2:	90 70       	andi	r25, 0x00	; 0
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	09 f0       	breq	.+2      	; 0xfea <chk_mounted+0x2a2>
     fe8:	d1 c2       	rjmp	.+1442   	; 0x158c <chk_mounted+0x844>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
     fea:	fd 01       	movw	r30, r26
     fec:	ea 5b       	subi	r30, 0xBA	; 186
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	30 81       	ld	r19, Z
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	fd 01       	movw	r30, r26
     ff6:	eb 5b       	subi	r30, 0xBB	; 187
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	80 81       	ld	r24, Z
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	82 2b       	or	r24, r18
    1000:	93 2b       	or	r25, r19
    1002:	2c 01       	movw	r4, r24
    1004:	66 24       	eor	r6, r6
    1006:	77 24       	eor	r7, r7
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    1008:	41 14       	cp	r4, r1
    100a:	51 04       	cpc	r5, r1
    100c:	61 04       	cpc	r6, r1
    100e:	71 04       	cpc	r7, r1
    1010:	a1 f5       	brne	.+104    	; 0x107a <chk_mounted+0x332>
    1012:	fd 01       	movw	r30, r26
    1014:	eb 5a       	subi	r30, 0xAB	; 171
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	80 81       	ld	r24, Z
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	78 2f       	mov	r23, r24
    1022:	66 27       	eor	r22, r22
    1024:	55 27       	eor	r21, r21
    1026:	44 27       	eor	r20, r20
    1028:	ee 85       	ldd	r30, Y+14	; 0x0e
    102a:	ff 85       	ldd	r31, Y+15	; 0x0f
    102c:	ec 5a       	subi	r30, 0xAC	; 172
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	80 81       	ld	r24, Z
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	a0 e0       	ldi	r26, 0x00	; 0
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	dc 01       	movw	r26, r24
    103a:	99 27       	eor	r25, r25
    103c:	88 27       	eor	r24, r24
    103e:	48 2b       	or	r20, r24
    1040:	59 2b       	or	r21, r25
    1042:	6a 2b       	or	r22, r26
    1044:	7b 2b       	or	r23, r27
    1046:	ee 85       	ldd	r30, Y+14	; 0x0e
    1048:	ff 85       	ldd	r31, Y+15	; 0x0f
    104a:	ee 5a       	subi	r30, 0xAE	; 174
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	80 81       	ld	r24, Z
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a0 e0       	ldi	r26, 0x00	; 0
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	48 2b       	or	r20, r24
    1058:	59 2b       	or	r21, r25
    105a:	6a 2b       	or	r22, r26
    105c:	7b 2b       	or	r23, r27
    105e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1060:	ff 85       	ldd	r31, Y+15	; 0x0f
    1062:	ed 5a       	subi	r30, 0xAD	; 173
    1064:	ff 4f       	sbci	r31, 0xFF	; 255
    1066:	90 81       	ld	r25, Z
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	a0 e0       	ldi	r26, 0x00	; 0
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	2a 01       	movw	r4, r20
    1070:	3b 01       	movw	r6, r22
    1072:	48 2a       	or	r4, r24
    1074:	59 2a       	or	r5, r25
    1076:	6a 2a       	or	r6, r26
    1078:	7b 2a       	or	r7, r27

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    107a:	ee 85       	ldd	r30, Y+14	; 0x0e
    107c:	ff 85       	ldd	r31, Y+15	; 0x0f
    107e:	ef 5b       	subi	r30, 0xBF	; 191
    1080:	ff 4f       	sbci	r31, 0xFF	; 255
    1082:	30 81       	ld	r19, Z
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	ee 85       	ldd	r30, Y+14	; 0x0e
    1088:	ff 85       	ldd	r31, Y+15	; 0x0f
    108a:	e0 5c       	subi	r30, 0xC0	; 192
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	80 81       	ld	r24, Z
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	89 01       	movw	r16, r18
    1094:	08 2b       	or	r16, r24
    1096:	19 2b       	or	r17, r25
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    1098:	01 15       	cp	r16, r1
    109a:	11 05       	cpc	r17, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <chk_mounted+0x358>
    109e:	78 c2       	rjmp	.+1264   	; 0x1590 <chk_mounted+0x848>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	c5 01       	movw	r24, r10
    10ac:	b4 01       	movw	r22, r8
    10ae:	0e 94 1e 24 	call	0x483c	; 0x483c <__mulsi3>
    10b2:	6a 87       	std	Y+10, r22	; 0x0a
    10b4:	7b 87       	std	Y+11, r23	; 0x0b
    10b6:	8c 87       	std	Y+12, r24	; 0x0c
    10b8:	9d 87       	std	Y+13, r25	; 0x0d

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    10ba:	98 01       	movw	r18, r16
    10bc:	40 e0       	ldi	r20, 0x00	; 0
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	2e 83       	std	Y+6, r18	; 0x06
    10c2:	3f 83       	std	Y+7, r19	; 0x07
    10c4:	48 87       	std	Y+8, r20	; 0x08
    10c6:	59 87       	std	Y+9, r21	; 0x09
    10c8:	c1 01       	movw	r24, r2
    10ca:	92 95       	swap	r25
    10cc:	82 95       	swap	r24
    10ce:	8f 70       	andi	r24, 0x0F	; 15
    10d0:	89 27       	eor	r24, r25
    10d2:	9f 70       	andi	r25, 0x0F	; 15
    10d4:	89 27       	eor	r24, r25
    10d6:	a0 e0       	ldi	r26, 0x00	; 0
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	82 0f       	add	r24, r18
    10dc:	93 1f       	adc	r25, r19
    10de:	a4 1f       	adc	r26, r20
    10e0:	b5 1f       	adc	r27, r21
    10e2:	0a 85       	ldd	r16, Y+10	; 0x0a
    10e4:	1b 85       	ldd	r17, Y+11	; 0x0b
    10e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    10e8:	3d 85       	ldd	r19, Y+13	; 0x0d
    10ea:	08 0f       	add	r16, r24
    10ec:	19 1f       	adc	r17, r25
    10ee:	2a 1f       	adc	r18, r26
    10f0:	3b 1f       	adc	r19, r27
    10f2:	09 83       	std	Y+1, r16	; 0x01
    10f4:	1a 83       	std	Y+2, r17	; 0x02
    10f6:	2b 83       	std	Y+3, r18	; 0x03
    10f8:	3c 83       	std	Y+4, r19	; 0x04
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    10fa:	40 16       	cp	r4, r16
    10fc:	51 06       	cpc	r5, r17
    10fe:	62 06       	cpc	r6, r18
    1100:	73 06       	cpc	r7, r19
    1102:	08 f4       	brcc	.+2      	; 0x1106 <chk_mounted+0x3be>
    1104:	47 c2       	rjmp	.+1166   	; 0x1594 <chk_mounted+0x84c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    1106:	c3 01       	movw	r24, r6
    1108:	b2 01       	movw	r22, r4
    110a:	60 1b       	sub	r22, r16
    110c:	71 0b       	sbc	r23, r17
    110e:	82 0b       	sbc	r24, r18
    1110:	93 0b       	sbc	r25, r19
    1112:	1d 81       	ldd	r17, Y+5	; 0x05
    1114:	21 2f       	mov	r18, r17
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e0       	ldi	r20, 0x00	; 0
    111a:	50 e0       	ldi	r21, 0x00	; 0
    111c:	0e 94 3d 24 	call	0x487a	; 0x487a <__udivmodsi4>
    1120:	89 01       	movw	r16, r18
    1122:	9a 01       	movw	r18, r20
    1124:	d9 01       	movw	r26, r18
    1126:	c8 01       	movw	r24, r16
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    1128:	01 15       	cp	r16, r1
    112a:	11 05       	cpc	r17, r1
    112c:	21 05       	cpc	r18, r1
    112e:	31 05       	cpc	r19, r1
    1130:	09 f4       	brne	.+2      	; 0x1134 <chk_mounted+0x3ec>
    1132:	32 c2       	rjmp	.+1124   	; 0x1598 <chk_mounted+0x850>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    1134:	06 3f       	cpi	r16, 0xF6	; 246
    1136:	4f e0       	ldi	r20, 0x0F	; 15
    1138:	14 07       	cpc	r17, r20
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	24 07       	cpc	r18, r20
    113e:	40 e0       	ldi	r20, 0x00	; 0
    1140:	34 07       	cpc	r19, r20
    1142:	18 f4       	brcc	.+6      	; 0x114a <chk_mounted+0x402>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
    1144:	44 24       	eor	r4, r4
    1146:	43 94       	inc	r4
    1148:	03 c0       	rjmp	.+6      	; 0x1150 <chk_mounted+0x408>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    114a:	44 24       	eor	r4, r4
    114c:	68 94       	set
    114e:	41 f8       	bld	r4, 1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    1150:	86 3f       	cpi	r24, 0xF6	; 246
    1152:	5f ef       	ldi	r21, 0xFF	; 255
    1154:	95 07       	cpc	r25, r21
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	a5 07       	cpc	r26, r21
    115a:	50 e0       	ldi	r21, 0x00	; 0
    115c:	b5 07       	cpc	r27, r21
    115e:	08 f0       	brcs	.+2      	; 0x1162 <chk_mounted+0x41a>
    1160:	3b c2       	rjmp	.+1142   	; 0x15d8 <chk_mounted+0x890>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    1162:	b9 01       	movw	r22, r18
    1164:	a8 01       	movw	r20, r16
    1166:	4e 5f       	subi	r20, 0xFE	; 254
    1168:	5f 4f       	sbci	r21, 0xFF	; 255
    116a:	6f 4f       	sbci	r22, 0xFF	; 255
    116c:	7f 4f       	sbci	r23, 0xFF	; 255
    116e:	ae 85       	ldd	r26, Y+14	; 0x0e
    1170:	bf 85       	ldd	r27, Y+15	; 0x0f
    1172:	5a 96       	adiw	r26, 0x1a	; 26
    1174:	4d 93       	st	X+, r20
    1176:	5d 93       	st	X+, r21
    1178:	6d 93       	st	X+, r22
    117a:	7c 93       	st	X, r23
    117c:	5d 97       	sbiw	r26, 0x1d	; 29
	fs->database = bsect + sysect;						/* Data start sector */
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	9a 81       	ldd	r25, Y+2	; 0x02
    1182:	ab 81       	ldd	r26, Y+3	; 0x03
    1184:	bc 81       	ldd	r27, Y+4	; 0x04
    1186:	8c 0d       	add	r24, r12
    1188:	9d 1d       	adc	r25, r13
    118a:	ae 1d       	adc	r26, r14
    118c:	bf 1d       	adc	r27, r15
    118e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1190:	ff 85       	ldd	r31, Y+15	; 0x0f
    1192:	82 a7       	lds	r24, 0x72
    1194:	93 a7       	lds	r25, 0x73
    1196:	a4 a7       	lds	r26, 0x74
    1198:	b5 a7       	lds	r27, 0x75
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    119a:	8e 81       	ldd	r24, Y+6	; 0x06
    119c:	9f 81       	ldd	r25, Y+7	; 0x07
    119e:	a8 85       	ldd	r26, Y+8	; 0x08
    11a0:	b9 85       	ldd	r27, Y+9	; 0x09
    11a2:	8c 0d       	add	r24, r12
    11a4:	9d 1d       	adc	r25, r13
    11a6:	ae 1d       	adc	r26, r14
    11a8:	bf 1d       	adc	r27, r15
    11aa:	82 a3       	lds	r24, 0x52
    11ac:	93 a3       	lds	r25, 0x53
    11ae:	a4 a3       	lds	r26, 0x54
    11b0:	b5 a3       	lds	r27, 0x55
	if (fmt == FS_FAT32) {
    11b2:	f3 e0       	ldi	r31, 0x03	; 3
    11b4:	4f 16       	cp	r4, r31
    11b6:	09 f0       	breq	.+2      	; 0x11ba <chk_mounted+0x472>
    11b8:	46 c0       	rjmp	.+140    	; 0x1246 <chk_mounted+0x4fe>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    11ba:	21 14       	cp	r2, r1
    11bc:	31 04       	cpc	r3, r1
    11be:	09 f0       	breq	.+2      	; 0x11c2 <chk_mounted+0x47a>
    11c0:	ed c1       	rjmp	.+986    	; 0x159c <chk_mounted+0x854>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    11c2:	ee 85       	ldd	r30, Y+14	; 0x0e
    11c4:	ff 85       	ldd	r31, Y+15	; 0x0f
    11c6:	ef 59       	subi	r30, 0x9F	; 159
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	80 81       	ld	r24, Z
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	a0 e0       	ldi	r26, 0x00	; 0
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	38 2f       	mov	r19, r24
    11d4:	22 27       	eor	r18, r18
    11d6:	11 27       	eor	r17, r17
    11d8:	00 27       	eor	r16, r16
    11da:	ee 85       	ldd	r30, Y+14	; 0x0e
    11dc:	ff 85       	ldd	r31, Y+15	; 0x0f
    11de:	e0 5a       	subi	r30, 0xA0	; 160
    11e0:	ff 4f       	sbci	r31, 0xFF	; 255
    11e2:	80 81       	ld	r24, Z
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	a0 e0       	ldi	r26, 0x00	; 0
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	dc 01       	movw	r26, r24
    11ec:	99 27       	eor	r25, r25
    11ee:	88 27       	eor	r24, r24
    11f0:	08 2b       	or	r16, r24
    11f2:	19 2b       	or	r17, r25
    11f4:	2a 2b       	or	r18, r26
    11f6:	3b 2b       	or	r19, r27
    11f8:	ee 85       	ldd	r30, Y+14	; 0x0e
    11fa:	ff 85       	ldd	r31, Y+15	; 0x0f
    11fc:	e2 5a       	subi	r30, 0xA2	; 162
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	80 81       	ld	r24, Z
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	a0 e0       	ldi	r26, 0x00	; 0
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	08 2b       	or	r16, r24
    120a:	19 2b       	or	r17, r25
    120c:	2a 2b       	or	r18, r26
    120e:	3b 2b       	or	r19, r27
    1210:	ee 85       	ldd	r30, Y+14	; 0x0e
    1212:	ff 85       	ldd	r31, Y+15	; 0x0f
    1214:	e1 5a       	subi	r30, 0xA1	; 161
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	90 81       	ld	r25, Z
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	a0 e0       	ldi	r26, 0x00	; 0
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	80 2b       	or	r24, r16
    1222:	91 2b       	or	r25, r17
    1224:	a2 2b       	or	r26, r18
    1226:	b3 2b       	or	r27, r19
    1228:	ee 85       	ldd	r30, Y+14	; 0x0e
    122a:	ff 85       	ldd	r31, Y+15	; 0x0f
    122c:	86 a3       	lds	r24, 0x56
    122e:	97 a3       	lds	r25, 0x57
    1230:	a0 a7       	lds	r26, 0x70
    1232:	b1 a7       	lds	r27, 0x71
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    1234:	44 0f       	add	r20, r20
    1236:	55 1f       	adc	r21, r21
    1238:	66 1f       	adc	r22, r22
    123a:	77 1f       	adc	r23, r23
    123c:	44 0f       	add	r20, r20
    123e:	55 1f       	adc	r21, r21
    1240:	66 1f       	adc	r22, r22
    1242:	77 1f       	adc	r23, r23
    1244:	30 c0       	rjmp	.+96     	; 0x12a6 <chk_mounted+0x55e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    1246:	21 14       	cp	r2, r1
    1248:	31 04       	cpc	r3, r1
    124a:	09 f4       	brne	.+2      	; 0x124e <chk_mounted+0x506>
    124c:	a9 c1       	rjmp	.+850    	; 0x15a0 <chk_mounted+0x858>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    124e:	0a 85       	ldd	r16, Y+10	; 0x0a
    1250:	1b 85       	ldd	r17, Y+11	; 0x0b
    1252:	2c 85       	ldd	r18, Y+12	; 0x0c
    1254:	3d 85       	ldd	r19, Y+13	; 0x0d
    1256:	80 0f       	add	r24, r16
    1258:	91 1f       	adc	r25, r17
    125a:	a2 1f       	adc	r26, r18
    125c:	b3 1f       	adc	r27, r19
    125e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1260:	ff 85       	ldd	r31, Y+15	; 0x0f
    1262:	86 a3       	lds	r24, 0x56
    1264:	97 a3       	lds	r25, 0x57
    1266:	a0 a7       	lds	r26, 0x70
    1268:	b1 a7       	lds	r27, 0x71
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    126a:	f2 e0       	ldi	r31, 0x02	; 2
    126c:	4f 16       	cp	r4, r31
    126e:	29 f4       	brne	.+10     	; 0x127a <chk_mounted+0x532>
    1270:	44 0f       	add	r20, r20
    1272:	55 1f       	adc	r21, r21
    1274:	66 1f       	adc	r22, r22
    1276:	77 1f       	adc	r23, r23
    1278:	16 c0       	rjmp	.+44     	; 0x12a6 <chk_mounted+0x55e>
    127a:	db 01       	movw	r26, r22
    127c:	ca 01       	movw	r24, r20
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	aa 1f       	adc	r26, r26
    1284:	bb 1f       	adc	r27, r27
    1286:	84 0f       	add	r24, r20
    1288:	95 1f       	adc	r25, r21
    128a:	a6 1f       	adc	r26, r22
    128c:	b7 1f       	adc	r27, r23
    128e:	b6 95       	lsr	r27
    1290:	a7 95       	ror	r26
    1292:	97 95       	ror	r25
    1294:	87 95       	ror	r24
    1296:	41 70       	andi	r20, 0x01	; 1
    1298:	50 70       	andi	r21, 0x00	; 0
    129a:	60 70       	andi	r22, 0x00	; 0
    129c:	70 70       	andi	r23, 0x00	; 0
    129e:	48 0f       	add	r20, r24
    12a0:	59 1f       	adc	r21, r25
    12a2:	6a 1f       	adc	r22, r26
    12a4:	7b 1f       	adc	r23, r27
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    12a6:	db 01       	movw	r26, r22
    12a8:	ca 01       	movw	r24, r20
    12aa:	81 50       	subi	r24, 0x01	; 1
    12ac:	9e 4f       	sbci	r25, 0xFE	; 254
    12ae:	af 4f       	sbci	r26, 0xFF	; 255
    12b0:	bf 4f       	sbci	r27, 0xFF	; 255
    12b2:	07 2e       	mov	r0, r23
    12b4:	79 e0       	ldi	r23, 0x09	; 9
    12b6:	b6 95       	lsr	r27
    12b8:	a7 95       	ror	r26
    12ba:	97 95       	ror	r25
    12bc:	87 95       	ror	r24
    12be:	7a 95       	dec	r23
    12c0:	d1 f7       	brne	.-12     	; 0x12b6 <chk_mounted+0x56e>
    12c2:	70 2d       	mov	r23, r0
    12c4:	88 16       	cp	r8, r24
    12c6:	99 06       	cpc	r9, r25
    12c8:	aa 06       	cpc	r10, r26
    12ca:	bb 06       	cpc	r11, r27
    12cc:	08 f4       	brcc	.+2      	; 0x12d0 <chk_mounted+0x588>
    12ce:	6a c1       	rjmp	.+724    	; 0x15a4 <chk_mounted+0x85c>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    12d0:	8f ef       	ldi	r24, 0xFF	; 255
    12d2:	9f ef       	ldi	r25, 0xFF	; 255
    12d4:	dc 01       	movw	r26, r24
    12d6:	ee 85       	ldd	r30, Y+14	; 0x0e
    12d8:	ff 85       	ldd	r31, Y+15	; 0x0f
    12da:	86 87       	std	Z+14, r24	; 0x0e
    12dc:	97 87       	std	Z+15, r25	; 0x0f
    12de:	a0 8b       	std	Z+16, r26	; 0x10
    12e0:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    12e2:	12 86       	std	Z+10, r1	; 0x0a
    12e4:	13 86       	std	Z+11, r1	; 0x0b
    12e6:	14 86       	std	Z+12, r1	; 0x0c
    12e8:	15 86       	std	Z+13, r1	; 0x0d

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    12ea:	b3 e0       	ldi	r27, 0x03	; 3
    12ec:	4b 16       	cp	r4, r27
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <chk_mounted+0x5aa>
    12f0:	15 c1       	rjmp	.+554    	; 0x151c <chk_mounted+0x7d4>
	 	fs->fsi_flag = 0;
    12f2:	15 82       	std	Z+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    12f4:	ed 59       	subi	r30, 0x9D	; 157
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	30 81       	ld	r19, Z
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	ee 85       	ldd	r30, Y+14	; 0x0e
    12fe:	ff 85       	ldd	r31, Y+15	; 0x0f
    1300:	ee 59       	subi	r30, 0x9E	; 158
    1302:	ff 4f       	sbci	r31, 0xFF	; 255
    1304:	80 81       	ld	r24, Z
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	82 2b       	or	r24, r18
    130a:	93 2b       	or	r25, r19
    130c:	a0 e0       	ldi	r26, 0x00	; 0
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	a7 01       	movw	r20, r14
    1312:	96 01       	movw	r18, r12
    1314:	28 0f       	add	r18, r24
    1316:	39 1f       	adc	r19, r25
    1318:	4a 1f       	adc	r20, r26
    131a:	5b 1f       	adc	r21, r27
    131c:	ae 85       	ldd	r26, Y+14	; 0x0e
    131e:	bf 85       	ldd	r27, Y+15	; 0x0f
    1320:	52 96       	adiw	r26, 0x12	; 18
    1322:	2d 93       	st	X+, r18
    1324:	3d 93       	st	X+, r19
    1326:	4d 93       	st	X+, r20
    1328:	5c 93       	st	X, r21
    132a:	55 97       	sbiw	r26, 0x15	; 21
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    132c:	bd 01       	movw	r22, r26
    132e:	6e 5c       	subi	r22, 0xCE	; 206
    1330:	7f 4f       	sbci	r23, 0xFF	; 255
    1332:	11 96       	adiw	r26, 0x01	; 1
    1334:	8c 91       	ld	r24, X
    1336:	01 e0       	ldi	r16, 0x01	; 1
    1338:	0e 94 37 02 	call	0x46e	; 0x46e <disk_read>
    133c:	88 23       	and	r24, r24
    133e:	09 f0       	breq	.+2      	; 0x1342 <chk_mounted+0x5fa>
    1340:	ed c0       	rjmp	.+474    	; 0x151c <chk_mounted+0x7d4>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    1342:	ee 85       	ldd	r30, Y+14	; 0x0e
    1344:	ff 85       	ldd	r31, Y+15	; 0x0f
    1346:	ef 5c       	subi	r30, 0xCF	; 207
    1348:	fd 4f       	sbci	r31, 0xFD	; 253
    134a:	30 81       	ld	r19, Z
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1350:	ff 85       	ldd	r31, Y+15	; 0x0f
    1352:	e0 5d       	subi	r30, 0xD0	; 208
    1354:	fd 4f       	sbci	r31, 0xFD	; 253
    1356:	80 81       	ld	r24, Z
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	82 2b       	or	r24, r18
    135c:	93 2b       	or	r25, r19

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    135e:	ba ea       	ldi	r27, 0xAA	; 170
    1360:	85 35       	cpi	r24, 0x55	; 85
    1362:	9b 07       	cpc	r25, r27
    1364:	09 f0       	breq	.+2      	; 0x1368 <chk_mounted+0x620>
    1366:	da c0       	rjmp	.+436    	; 0x151c <chk_mounted+0x7d4>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    1368:	ee 85       	ldd	r30, Y+14	; 0x0e
    136a:	ff 85       	ldd	r31, Y+15	; 0x0f
    136c:	45 a9       	sts	0x45, r20
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	74 2f       	mov	r23, r20
    1376:	66 27       	eor	r22, r22
    1378:	55 27       	eor	r21, r21
    137a:	44 27       	eor	r20, r20
    137c:	84 a9       	sts	0x44, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a0 e0       	ldi	r26, 0x00	; 0
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	dc 01       	movw	r26, r24
    1386:	99 27       	eor	r25, r25
    1388:	88 27       	eor	r24, r24
    138a:	48 2b       	or	r20, r24
    138c:	59 2b       	or	r21, r25
    138e:	6a 2b       	or	r22, r26
    1390:	7b 2b       	or	r23, r27
    1392:	82 a9       	sts	0x42, r24
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	a0 e0       	ldi	r26, 0x00	; 0
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	48 2b       	or	r20, r24
    139c:	59 2b       	or	r21, r25
    139e:	6a 2b       	or	r22, r26
    13a0:	7b 2b       	or	r23, r27
    13a2:	93 a9       	sts	0x43, r25
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	a0 e0       	ldi	r26, 0x00	; 0
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	84 2b       	or	r24, r20
    13ac:	95 2b       	or	r25, r21
    13ae:	a6 2b       	or	r26, r22
    13b0:	b7 2b       	or	r27, r23
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    13b2:	82 35       	cpi	r24, 0x52	; 82
    13b4:	f2 e5       	ldi	r31, 0x52	; 82
    13b6:	9f 07       	cpc	r25, r31
    13b8:	f1 e6       	ldi	r31, 0x61	; 97
    13ba:	af 07       	cpc	r26, r31
    13bc:	f1 e4       	ldi	r31, 0x41	; 65
    13be:	bf 07       	cpc	r27, r31
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <chk_mounted+0x67c>
    13c2:	ac c0       	rjmp	.+344    	; 0x151c <chk_mounted+0x7d4>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    13c4:	ee 85       	ldd	r30, Y+14	; 0x0e
    13c6:	ff 85       	ldd	r31, Y+15	; 0x0f
    13c8:	e7 5e       	subi	r30, 0xE7	; 231
    13ca:	fd 4f       	sbci	r31, 0xFD	; 253
    13cc:	80 81       	ld	r24, Z
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	a0 e0       	ldi	r26, 0x00	; 0
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	b8 2f       	mov	r27, r24
    13d6:	aa 27       	eor	r26, r26
    13d8:	99 27       	eor	r25, r25
    13da:	88 27       	eor	r24, r24
    13dc:	ee 85       	ldd	r30, Y+14	; 0x0e
    13de:	ff 85       	ldd	r31, Y+15	; 0x0f
    13e0:	e8 5e       	subi	r30, 0xE8	; 232
    13e2:	fd 4f       	sbci	r31, 0xFD	; 253
    13e4:	40 81       	ld	r20, Z
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	ba 01       	movw	r22, r20
    13ee:	55 27       	eor	r21, r21
    13f0:	44 27       	eor	r20, r20
    13f2:	84 2b       	or	r24, r20
    13f4:	95 2b       	or	r25, r21
    13f6:	a6 2b       	or	r26, r22
    13f8:	b7 2b       	or	r27, r23
    13fa:	ee 85       	ldd	r30, Y+14	; 0x0e
    13fc:	ff 85       	ldd	r31, Y+15	; 0x0f
    13fe:	ea 5e       	subi	r30, 0xEA	; 234
    1400:	fd 4f       	sbci	r31, 0xFD	; 253
    1402:	40 81       	ld	r20, Z
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	48 2b       	or	r20, r24
    140c:	59 2b       	or	r21, r25
    140e:	6a 2b       	or	r22, r26
    1410:	7b 2b       	or	r23, r27
    1412:	ee 85       	ldd	r30, Y+14	; 0x0e
    1414:	ff 85       	ldd	r31, Y+15	; 0x0f
    1416:	e9 5e       	subi	r30, 0xE9	; 233
    1418:	fd 4f       	sbci	r31, 0xFD	; 253
    141a:	90 81       	ld	r25, Z
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	a0 e0       	ldi	r26, 0x00	; 0
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	84 2b       	or	r24, r20
    1424:	95 2b       	or	r25, r21
    1426:	a6 2b       	or	r26, r22
    1428:	b7 2b       	or	r27, r23
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    142a:	82 37       	cpi	r24, 0x72	; 114
    142c:	02 e7       	ldi	r16, 0x72	; 114
    142e:	90 07       	cpc	r25, r16
    1430:	01 e4       	ldi	r16, 0x41	; 65
    1432:	a0 07       	cpc	r26, r16
    1434:	01 e6       	ldi	r16, 0x61	; 97
    1436:	b0 07       	cpc	r27, r16
    1438:	09 f0       	breq	.+2      	; 0x143c <chk_mounted+0x6f4>
    143a:	70 c0       	rjmp	.+224    	; 0x151c <chk_mounted+0x7d4>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    143c:	ee 85       	ldd	r30, Y+14	; 0x0e
    143e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1440:	ef 5d       	subi	r30, 0xDF	; 223
    1442:	fd 4f       	sbci	r31, 0xFD	; 253
    1444:	80 81       	ld	r24, Z
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	a0 e0       	ldi	r26, 0x00	; 0
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	b8 2f       	mov	r27, r24
    144e:	aa 27       	eor	r26, r26
    1450:	99 27       	eor	r25, r25
    1452:	88 27       	eor	r24, r24
    1454:	ee 85       	ldd	r30, Y+14	; 0x0e
    1456:	ff 85       	ldd	r31, Y+15	; 0x0f
    1458:	e0 5e       	subi	r30, 0xE0	; 224
    145a:	fd 4f       	sbci	r31, 0xFD	; 253
    145c:	40 81       	ld	r20, Z
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	ba 01       	movw	r22, r20
    1466:	55 27       	eor	r21, r21
    1468:	44 27       	eor	r20, r20
    146a:	84 2b       	or	r24, r20
    146c:	95 2b       	or	r25, r21
    146e:	a6 2b       	or	r26, r22
    1470:	b7 2b       	or	r27, r23
    1472:	ee 85       	ldd	r30, Y+14	; 0x0e
    1474:	ff 85       	ldd	r31, Y+15	; 0x0f
    1476:	e2 5e       	subi	r30, 0xE2	; 226
    1478:	fd 4f       	sbci	r31, 0xFD	; 253
    147a:	40 81       	ld	r20, Z
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	48 2b       	or	r20, r24
    1484:	59 2b       	or	r21, r25
    1486:	6a 2b       	or	r22, r26
    1488:	7b 2b       	or	r23, r27
    148a:	ee 85       	ldd	r30, Y+14	; 0x0e
    148c:	ff 85       	ldd	r31, Y+15	; 0x0f
    148e:	e1 5e       	subi	r30, 0xE1	; 225
    1490:	fd 4f       	sbci	r31, 0xFD	; 253
    1492:	90 81       	ld	r25, Z
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	a0 e0       	ldi	r26, 0x00	; 0
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	84 2b       	or	r24, r20
    149c:	95 2b       	or	r25, r21
    149e:	a6 2b       	or	r26, r22
    14a0:	b7 2b       	or	r27, r23
    14a2:	ee 85       	ldd	r30, Y+14	; 0x0e
    14a4:	ff 85       	ldd	r31, Y+15	; 0x0f
    14a6:	82 87       	std	Z+10, r24	; 0x0a
    14a8:	93 87       	std	Z+11, r25	; 0x0b
    14aa:	a4 87       	std	Z+12, r26	; 0x0c
    14ac:	b5 87       	std	Z+13, r27	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    14ae:	e3 5e       	subi	r30, 0xE3	; 227
    14b0:	fd 4f       	sbci	r31, 0xFD	; 253
    14b2:	80 81       	ld	r24, Z
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a0 e0       	ldi	r26, 0x00	; 0
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	b8 2f       	mov	r27, r24
    14bc:	aa 27       	eor	r26, r26
    14be:	99 27       	eor	r25, r25
    14c0:	88 27       	eor	r24, r24
    14c2:	ee 85       	ldd	r30, Y+14	; 0x0e
    14c4:	ff 85       	ldd	r31, Y+15	; 0x0f
    14c6:	e4 5e       	subi	r30, 0xE4	; 228
    14c8:	fd 4f       	sbci	r31, 0xFD	; 253
    14ca:	40 81       	ld	r20, Z
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	ba 01       	movw	r22, r20
    14d4:	55 27       	eor	r21, r21
    14d6:	44 27       	eor	r20, r20
    14d8:	84 2b       	or	r24, r20
    14da:	95 2b       	or	r25, r21
    14dc:	a6 2b       	or	r26, r22
    14de:	b7 2b       	or	r27, r23
    14e0:	ee 85       	ldd	r30, Y+14	; 0x0e
    14e2:	ff 85       	ldd	r31, Y+15	; 0x0f
    14e4:	e6 5e       	subi	r30, 0xE6	; 230
    14e6:	fd 4f       	sbci	r31, 0xFD	; 253
    14e8:	40 81       	ld	r20, Z
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	48 2b       	or	r20, r24
    14f2:	59 2b       	or	r21, r25
    14f4:	6a 2b       	or	r22, r26
    14f6:	7b 2b       	or	r23, r27
    14f8:	ee 85       	ldd	r30, Y+14	; 0x0e
    14fa:	ff 85       	ldd	r31, Y+15	; 0x0f
    14fc:	e5 5e       	subi	r30, 0xE5	; 229
    14fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1500:	90 81       	ld	r25, Z
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	a0 e0       	ldi	r26, 0x00	; 0
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	84 2b       	or	r24, r20
    150a:	95 2b       	or	r25, r21
    150c:	a6 2b       	or	r26, r22
    150e:	b7 2b       	or	r27, r23
    1510:	ee 85       	ldd	r30, Y+14	; 0x0e
    1512:	ff 85       	ldd	r31, Y+15	; 0x0f
    1514:	86 87       	std	Z+14, r24	; 0x0e
    1516:	97 87       	std	Z+15, r25	; 0x0f
    1518:	a0 8b       	std	Z+16, r26	; 0x10
    151a:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    151c:	ae 85       	ldd	r26, Y+14	; 0x0e
    151e:	bf 85       	ldd	r27, Y+15	; 0x0f
    1520:	4c 92       	st	X, r4
	fs->id = ++Fsid;		/* File system mount ID */
    1522:	80 91 2e 01 	lds	r24, 0x012E
    1526:	90 91 2f 01 	lds	r25, 0x012F
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	90 93 2f 01 	sts	0x012F, r25
    1530:	80 93 2e 01 	sts	0x012E, r24
    1534:	17 96       	adiw	r26, 0x07	; 7
    1536:	9c 93       	st	X, r25
    1538:	8e 93       	st	-X, r24
    153a:	16 97       	sbiw	r26, 0x06	; 6
	fs->winsect = 0;		/* Invalidate sector cache */
    153c:	fd 01       	movw	r30, r26
    153e:	16 a6       	lds	r17, 0xb6
    1540:	17 a6       	lds	r17, 0xb7
    1542:	10 aa       	sts	0x90, r17
    1544:	11 aa       	sts	0x91, r17
	fs->wflag = 0;
    1546:	14 82       	std	Z+4, r1	; 0x04
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    1548:	56 96       	adiw	r26, 0x16	; 22
    154a:	1d 92       	st	X+, r1
    154c:	1d 92       	st	X+, r1
    154e:	1d 92       	st	X+, r1
    1550:	1c 92       	st	X, r1
    1552:	59 97       	sbiw	r26, 0x19	; 25
#endif
#if _FS_LOCK				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	27 c0       	rjmp	.+78     	; 0x15a6 <chk_mounted+0x85e>
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
    1558:	8b e0       	ldi	r24, 0x0B	; 11
    155a:	25 c0       	rjmp	.+74     	; 0x15a6 <chk_mounted+0x85e>
	fs = FatFs[vol];					/* Get corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    155c:	8c e0       	ldi	r24, 0x0C	; 12
    155e:	23 c0       	rjmp	.+70     	; 0x15a6 <chk_mounted+0x85e>
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	21 c0       	rjmp	.+66     	; 0x15a6 <chk_mounted+0x85e>
	*rfs = fs;							/* Return pointer to the corresponding file system object */
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
    1564:	8a e0       	ldi	r24, 0x0A	; 10
    1566:	1f c0       	rjmp	.+62     	; 0x15a6 <chk_mounted+0x85e>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    1568:	83 e0       	ldi	r24, 0x03	; 3
    156a:	1d c0       	rjmp	.+58     	; 0x15a6 <chk_mounted+0x85e>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    156c:	8a e0       	ldi	r24, 0x0A	; 10
    156e:	1b c0       	rjmp	.+54     	; 0x15a6 <chk_mounted+0x85e>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    1570:	8d e0       	ldi	r24, 0x0D	; 13
    1572:	19 c0       	rjmp	.+50     	; 0x15a6 <chk_mounted+0x85e>
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	17 c0       	rjmp	.+46     	; 0x15a6 <chk_mounted+0x85e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    1578:	8d e0       	ldi	r24, 0x0D	; 13
    157a:	15 c0       	rjmp	.+42     	; 0x15a6 <chk_mounted+0x85e>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
    157c:	8d e0       	ldi	r24, 0x0D	; 13
    157e:	13 c0       	rjmp	.+38     	; 0x15a6 <chk_mounted+0x85e>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    1580:	8d e0       	ldi	r24, 0x0D	; 13
    1582:	11 c0       	rjmp	.+34     	; 0x15a6 <chk_mounted+0x85e>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    1584:	8d e0       	ldi	r24, 0x0D	; 13
    1586:	0f c0       	rjmp	.+30     	; 0x15a6 <chk_mounted+0x85e>
    1588:	8d e0       	ldi	r24, 0x0D	; 13
    158a:	0d c0       	rjmp	.+26     	; 0x15a6 <chk_mounted+0x85e>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    158c:	8d e0       	ldi	r24, 0x0D	; 13
    158e:	0b c0       	rjmp	.+22     	; 0x15a6 <chk_mounted+0x85e>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    1590:	8d e0       	ldi	r24, 0x0D	; 13
    1592:	09 c0       	rjmp	.+18     	; 0x15a6 <chk_mounted+0x85e>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    1594:	8d e0       	ldi	r24, 0x0D	; 13
    1596:	07 c0       	rjmp	.+14     	; 0x15a6 <chk_mounted+0x85e>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    1598:	8d e0       	ldi	r24, 0x0D	; 13
    159a:	05 c0       	rjmp	.+10     	; 0x15a6 <chk_mounted+0x85e>
	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    159c:	8d e0       	ldi	r24, 0x0D	; 13
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <chk_mounted+0x85e>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    15a0:	8d e0       	ldi	r24, 0x0D	; 13
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <chk_mounted+0x85e>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;
    15a4:	8d e0       	ldi	r24, 0x0D	; 13
#if _FS_LOCK				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
    15a6:	2f 96       	adiw	r28, 0x0f	; 15
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	ff 90       	pop	r15
    15bc:	ef 90       	pop	r14
    15be:	df 90       	pop	r13
    15c0:	cf 90       	pop	r12
    15c2:	bf 90       	pop	r11
    15c4:	af 90       	pop	r10
    15c6:	9f 90       	pop	r9
    15c8:	8f 90       	pop	r8
    15ca:	7f 90       	pop	r7
    15cc:	6f 90       	pop	r6
    15ce:	5f 90       	pop	r5
    15d0:	4f 90       	pop	r4
    15d2:	3f 90       	pop	r3
    15d4:	2f 90       	pop	r2
    15d6:	08 95       	ret
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    15d8:	b9 01       	movw	r22, r18
    15da:	a8 01       	movw	r20, r16
    15dc:	4e 5f       	subi	r20, 0xFE	; 254
    15de:	5f 4f       	sbci	r21, 0xFF	; 255
    15e0:	6f 4f       	sbci	r22, 0xFF	; 255
    15e2:	7f 4f       	sbci	r23, 0xFF	; 255
    15e4:	ee 85       	ldd	r30, Y+14	; 0x0e
    15e6:	ff 85       	ldd	r31, Y+15	; 0x0f
    15e8:	42 8f       	std	Z+26, r20	; 0x1a
    15ea:	53 8f       	std	Z+27, r21	; 0x1b
    15ec:	64 8f       	std	Z+28, r22	; 0x1c
    15ee:	75 8f       	std	Z+29, r23	; 0x1d
	fs->database = bsect + sysect;						/* Data start sector */
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	ab 81       	ldd	r26, Y+3	; 0x03
    15f6:	bc 81       	ldd	r27, Y+4	; 0x04
    15f8:	8c 0d       	add	r24, r12
    15fa:	9d 1d       	adc	r25, r13
    15fc:	ae 1d       	adc	r26, r14
    15fe:	bf 1d       	adc	r27, r15
    1600:	82 a7       	lds	r24, 0x72
    1602:	93 a7       	lds	r25, 0x73
    1604:	a4 a7       	lds	r26, 0x74
    1606:	b5 a7       	lds	r27, 0x75
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    1608:	8e 81       	ldd	r24, Y+6	; 0x06
    160a:	9f 81       	ldd	r25, Y+7	; 0x07
    160c:	a8 85       	ldd	r26, Y+8	; 0x08
    160e:	b9 85       	ldd	r27, Y+9	; 0x09
    1610:	8c 0d       	add	r24, r12
    1612:	9d 1d       	adc	r25, r13
    1614:	ae 1d       	adc	r26, r14
    1616:	bf 1d       	adc	r27, r15
    1618:	82 a3       	lds	r24, 0x52
    161a:	93 a3       	lds	r25, 0x53
    161c:	a4 a3       	lds	r26, 0x54
    161e:	b5 a3       	lds	r27, 0x55
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    1620:	0f 2e       	mov	r0, r31
    1622:	f3 e0       	ldi	r31, 0x03	; 3
    1624:	4f 2e       	mov	r4, r31
    1626:	f0 2d       	mov	r31, r0
    1628:	c8 cd       	rjmp	.-1136   	; 0x11ba <chk_mounted+0x472>

0000162a <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    162a:	4f 92       	push	r4
    162c:	5f 92       	push	r5
    162e:	6f 92       	push	r6
    1630:	7f 92       	push	r7
    1632:	8f 92       	push	r8
    1634:	9f 92       	push	r9
    1636:	af 92       	push	r10
    1638:	bf 92       	push	r11
    163a:	cf 92       	push	r12
    163c:	df 92       	push	r13
    163e:	ef 92       	push	r14
    1640:	ff 92       	push	r15
    1642:	0f 93       	push	r16
    1644:	cf 93       	push	r28
    1646:	5c 01       	movw	r10, r24
    1648:	2a 01       	movw	r4, r20
    164a:	3b 01       	movw	r6, r22
	DWORD wsect;


	wsect = fs->winsect;
    164c:	fc 01       	movw	r30, r24
    164e:	c6 a4       	lds	r28, 0xa6
    1650:	d7 a4       	lds	r29, 0xa7
    1652:	e0 a8       	sts	0x00, r30
    1654:	f1 a8       	sts	0x81, r31
	if (wsect != sector) {	/* Changed current window */
    1656:	c4 16       	cp	r12, r20
    1658:	d5 06       	cpc	r13, r21
    165a:	e6 06       	cpc	r14, r22
    165c:	f7 06       	cpc	r15, r23
    165e:	09 f4       	brne	.+2      	; 0x1662 <move_window+0x38>
    1660:	54 c0       	rjmp	.+168    	; 0x170a <move_window+0xe0>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    1662:	84 81       	ldd	r24, Z+4	; 0x04
    1664:	88 23       	and	r24, r24
    1666:	d1 f1       	breq	.+116    	; 0x16dc <move_window+0xb2>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    1668:	0f 2e       	mov	r0, r31
    166a:	f2 e3       	ldi	r31, 0x32	; 50
    166c:	8f 2e       	mov	r8, r31
    166e:	99 24       	eor	r9, r9
    1670:	f0 2d       	mov	r31, r0
    1672:	8a 0c       	add	r8, r10
    1674:	9b 1c       	adc	r9, r11
    1676:	81 81       	ldd	r24, Z+1	; 0x01
    1678:	b4 01       	movw	r22, r8
    167a:	a7 01       	movw	r20, r14
    167c:	96 01       	movw	r18, r12
    167e:	01 e0       	ldi	r16, 0x01	; 1
    1680:	0e 94 8d 02 	call	0x51a	; 0x51a <disk_write>
    1684:	88 23       	and	r24, r24
    1686:	09 f0       	breq	.+2      	; 0x168a <move_window+0x60>
    1688:	42 c0       	rjmp	.+132    	; 0x170e <move_window+0xe4>
				return FR_DISK_ERR;
			fs->wflag = 0;
    168a:	f5 01       	movw	r30, r10
    168c:	14 82       	std	Z+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    168e:	46 8d       	ldd	r20, Z+30	; 0x1e
    1690:	57 8d       	ldd	r21, Z+31	; 0x1f
    1692:	60 a1       	lds	r22, 0x40
    1694:	71 a1       	lds	r23, 0x41
    1696:	82 a1       	lds	r24, 0x42
    1698:	93 a1       	lds	r25, 0x43
    169a:	a4 a1       	lds	r26, 0x44
    169c:	b5 a1       	lds	r27, 0x45
    169e:	84 0f       	add	r24, r20
    16a0:	95 1f       	adc	r25, r21
    16a2:	a6 1f       	adc	r26, r22
    16a4:	b7 1f       	adc	r27, r23
    16a6:	c8 16       	cp	r12, r24
    16a8:	d9 06       	cpc	r13, r25
    16aa:	ea 06       	cpc	r14, r26
    16ac:	fb 06       	cpc	r15, r27
    16ae:	b0 f4       	brcc	.+44     	; 0x16dc <move_window+0xb2>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    16b0:	c3 81       	ldd	r28, Z+3	; 0x03
    16b2:	c2 30       	cpi	r28, 0x02	; 2
    16b4:	98 f0       	brcs	.+38     	; 0x16dc <move_window+0xb2>
					wsect += fs->fsize;
    16b6:	f5 01       	movw	r30, r10
    16b8:	86 8d       	ldd	r24, Z+30	; 0x1e
    16ba:	97 8d       	ldd	r25, Z+31	; 0x1f
    16bc:	a0 a1       	lds	r26, 0x40
    16be:	b1 a1       	lds	r27, 0x41
    16c0:	c8 0e       	add	r12, r24
    16c2:	d9 1e       	adc	r13, r25
    16c4:	ea 1e       	adc	r14, r26
    16c6:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    16c8:	81 81       	ldd	r24, Z+1	; 0x01
    16ca:	b4 01       	movw	r22, r8
    16cc:	a7 01       	movw	r20, r14
    16ce:	96 01       	movw	r18, r12
    16d0:	01 e0       	ldi	r16, 0x01	; 1
    16d2:	0e 94 8d 02 	call	0x51a	; 0x51a <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    16d6:	c1 50       	subi	r28, 0x01	; 1
    16d8:	c1 30       	cpi	r28, 0x01	; 1
    16da:	69 f7       	brne	.-38     	; 0x16b6 <move_window+0x8c>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    16dc:	41 14       	cp	r4, r1
    16de:	51 04       	cpc	r5, r1
    16e0:	61 04       	cpc	r6, r1
    16e2:	71 04       	cpc	r7, r1
    16e4:	b1 f0       	breq	.+44     	; 0x1712 <move_window+0xe8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    16e6:	b5 01       	movw	r22, r10
    16e8:	6e 5c       	subi	r22, 0xCE	; 206
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	f5 01       	movw	r30, r10
    16ee:	81 81       	ldd	r24, Z+1	; 0x01
    16f0:	a3 01       	movw	r20, r6
    16f2:	92 01       	movw	r18, r4
    16f4:	01 e0       	ldi	r16, 0x01	; 1
    16f6:	0e 94 37 02 	call	0x46e	; 0x46e <disk_read>
    16fa:	88 23       	and	r24, r24
    16fc:	61 f4       	brne	.+24     	; 0x1716 <move_window+0xec>
				return FR_DISK_ERR;
			fs->winsect = sector;
    16fe:	f5 01       	movw	r30, r10
    1700:	46 a6       	lds	r20, 0xb6
    1702:	57 a6       	lds	r21, 0xb7
    1704:	60 aa       	sts	0x90, r22
    1706:	71 aa       	sts	0x91, r23
    1708:	07 c0       	rjmp	.+14     	; 0x1718 <move_window+0xee>
		}
	}

	return FR_OK;
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	05 c0       	rjmp	.+10     	; 0x1718 <move_window+0xee>
	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <move_window+0xee>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	01 c0       	rjmp	.+2      	; 0x1718 <move_window+0xee>
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
    1716:	81 e0       	ldi	r24, 0x01	; 1
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
    1718:	cf 91       	pop	r28
    171a:	0f 91       	pop	r16
    171c:	ff 90       	pop	r15
    171e:	ef 90       	pop	r14
    1720:	df 90       	pop	r13
    1722:	cf 90       	pop	r12
    1724:	bf 90       	pop	r11
    1726:	af 90       	pop	r10
    1728:	9f 90       	pop	r9
    172a:	8f 90       	pop	r8
    172c:	7f 90       	pop	r7
    172e:	6f 90       	pop	r6
    1730:	5f 90       	pop	r5
    1732:	4f 90       	pop	r4
    1734:	08 95       	ret

00001736 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	cf 93       	push	r28
    1740:	7c 01       	movw	r14, r24
	FRESULT res;


	res = move_window(fs, 0);
    1742:	40 e0       	ldi	r20, 0x00	; 0
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	ba 01       	movw	r22, r20
    1748:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
    174c:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
    174e:	88 23       	and	r24, r24
    1750:	09 f0       	breq	.+2      	; 0x1754 <sync+0x1e>
    1752:	76 c0       	rjmp	.+236    	; 0x1840 <sync+0x10a>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    1754:	f7 01       	movw	r30, r14
    1756:	80 81       	ld	r24, Z
    1758:	83 30       	cpi	r24, 0x03	; 3
    175a:	09 f0       	breq	.+2      	; 0x175e <sync+0x28>
    175c:	68 c0       	rjmp	.+208    	; 0x182e <sync+0xf8>
    175e:	85 81       	ldd	r24, Z+5	; 0x05
    1760:	88 23       	and	r24, r24
    1762:	09 f4       	brne	.+2      	; 0x1766 <sync+0x30>
    1764:	64 c0       	rjmp	.+200    	; 0x182e <sync+0xf8>
			fs->winsect = 0;
    1766:	16 a6       	lds	r17, 0xb6
    1768:	17 a6       	lds	r17, 0xb7
    176a:	10 aa       	sts	0x90, r17
    176c:	11 aa       	sts	0x91, r17
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    176e:	87 01       	movw	r16, r14
    1770:	0e 5c       	subi	r16, 0xCE	; 206
    1772:	1f 4f       	sbci	r17, 0xFF	; 255
    1774:	c8 01       	movw	r24, r16
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	52 e0       	ldi	r21, 0x02	; 2
    177e:	0e 94 1d 05 	call	0xa3a	; 0xa3a <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    1782:	f7 01       	movw	r30, r14
    1784:	e0 5d       	subi	r30, 0xD0	; 208
    1786:	fd 4f       	sbci	r31, 0xFD	; 253
    1788:	85 e5       	ldi	r24, 0x55	; 85
    178a:	80 83       	st	Z, r24
    178c:	f7 01       	movw	r30, r14
    178e:	ef 5c       	subi	r30, 0xCF	; 207
    1790:	fd 4f       	sbci	r31, 0xFD	; 253
    1792:	8a ea       	ldi	r24, 0xAA	; 170
    1794:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    1796:	82 e5       	ldi	r24, 0x52	; 82
    1798:	f7 01       	movw	r30, r14
    179a:	82 ab       	sts	0x52, r24
    179c:	83 ab       	sts	0x53, r24
    179e:	81 e6       	ldi	r24, 0x61	; 97
    17a0:	84 ab       	sts	0x54, r24
    17a2:	91 e4       	ldi	r25, 0x41	; 65
    17a4:	95 ab       	sts	0x55, r25
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    17a6:	ea 5e       	subi	r30, 0xEA	; 234
    17a8:	fd 4f       	sbci	r31, 0xFD	; 253
    17aa:	22 e7       	ldi	r18, 0x72	; 114
    17ac:	20 83       	st	Z, r18
    17ae:	f7 01       	movw	r30, r14
    17b0:	e9 5e       	subi	r30, 0xE9	; 233
    17b2:	fd 4f       	sbci	r31, 0xFD	; 253
    17b4:	20 83       	st	Z, r18
    17b6:	f7 01       	movw	r30, r14
    17b8:	e8 5e       	subi	r30, 0xE8	; 232
    17ba:	fd 4f       	sbci	r31, 0xFD	; 253
    17bc:	90 83       	st	Z, r25
    17be:	f7 01       	movw	r30, r14
    17c0:	e7 5e       	subi	r30, 0xE7	; 231
    17c2:	fd 4f       	sbci	r31, 0xFD	; 253
    17c4:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    17c6:	f7 01       	movw	r30, r14
    17c8:	36 85       	ldd	r19, Z+14	; 0x0e
    17ca:	27 85       	ldd	r18, Z+15	; 0x0f
    17cc:	90 89       	ldd	r25, Z+16	; 0x10
    17ce:	81 89       	ldd	r24, Z+17	; 0x11
    17d0:	e6 5e       	subi	r30, 0xE6	; 230
    17d2:	fd 4f       	sbci	r31, 0xFD	; 253
    17d4:	30 83       	st	Z, r19
    17d6:	f7 01       	movw	r30, r14
    17d8:	e5 5e       	subi	r30, 0xE5	; 229
    17da:	fd 4f       	sbci	r31, 0xFD	; 253
    17dc:	20 83       	st	Z, r18
    17de:	f7 01       	movw	r30, r14
    17e0:	e4 5e       	subi	r30, 0xE4	; 228
    17e2:	fd 4f       	sbci	r31, 0xFD	; 253
    17e4:	90 83       	st	Z, r25
    17e6:	f7 01       	movw	r30, r14
    17e8:	e3 5e       	subi	r30, 0xE3	; 227
    17ea:	fd 4f       	sbci	r31, 0xFD	; 253
    17ec:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    17ee:	f7 01       	movw	r30, r14
    17f0:	32 85       	ldd	r19, Z+10	; 0x0a
    17f2:	23 85       	ldd	r18, Z+11	; 0x0b
    17f4:	94 85       	ldd	r25, Z+12	; 0x0c
    17f6:	85 85       	ldd	r24, Z+13	; 0x0d
    17f8:	e2 5e       	subi	r30, 0xE2	; 226
    17fa:	fd 4f       	sbci	r31, 0xFD	; 253
    17fc:	30 83       	st	Z, r19
    17fe:	f7 01       	movw	r30, r14
    1800:	e1 5e       	subi	r30, 0xE1	; 225
    1802:	fd 4f       	sbci	r31, 0xFD	; 253
    1804:	20 83       	st	Z, r18
    1806:	f7 01       	movw	r30, r14
    1808:	e0 5e       	subi	r30, 0xE0	; 224
    180a:	fd 4f       	sbci	r31, 0xFD	; 253
    180c:	90 83       	st	Z, r25
    180e:	f7 01       	movw	r30, r14
    1810:	ef 5d       	subi	r30, 0xDF	; 223
    1812:	fd 4f       	sbci	r31, 0xFD	; 253
    1814:	80 83       	st	Z, r24
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    1816:	f7 01       	movw	r30, r14
    1818:	22 89       	ldd	r18, Z+18	; 0x12
    181a:	33 89       	ldd	r19, Z+19	; 0x13
    181c:	44 89       	ldd	r20, Z+20	; 0x14
    181e:	55 89       	ldd	r21, Z+21	; 0x15
    1820:	81 81       	ldd	r24, Z+1	; 0x01
    1822:	b8 01       	movw	r22, r16
    1824:	01 e0       	ldi	r16, 0x01	; 1
    1826:	0e 94 8d 02 	call	0x51a	; 0x51a <disk_write>
			fs->fsi_flag = 0;
    182a:	f7 01       	movw	r30, r14
    182c:	15 82       	std	Z+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    182e:	f7 01       	movw	r30, r14
    1830:	81 81       	ldd	r24, Z+1	; 0x01
    1832:	60 e0       	ldi	r22, 0x00	; 0
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	50 e0       	ldi	r21, 0x00	; 0
    1838:	0e 94 00 03 	call	0x600	; 0x600 <disk_ioctl>
    183c:	81 11       	cpse	r24, r1
			res = FR_DISK_ERR;
    183e:	c1 e0       	ldi	r28, 0x01	; 1
	}

	return res;
}
    1840:	8c 2f       	mov	r24, r28
    1842:	cf 91       	pop	r28
    1844:	1f 91       	pop	r17
    1846:	0f 91       	pop	r16
    1848:	ff 90       	pop	r15
    184a:	ef 90       	pop	r14
    184c:	08 95       	ret

0000184e <get_fattime>:
#include "diskio.h"		/* Declarations of low level disk I/O functions */

DWORD get_fattime( void )
{
	return 0;
}
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	cb 01       	movw	r24, r22
    1854:	08 95       	ret

00001856 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    1856:	0f 93       	push	r16
    1858:	1f 93       	push	r17
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	ec 01       	movw	r28, r24
    1860:	db 01       	movw	r26, r22
    1862:	ca 01       	movw	r24, r20
	clst -= 2;
    1864:	02 97       	sbiw	r24, 0x02	; 2
    1866:	a1 09       	sbc	r26, r1
    1868:	b1 09       	sbc	r27, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    186a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    186c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    186e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1870:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1872:	42 50       	subi	r20, 0x02	; 2
    1874:	50 40       	sbci	r21, 0x00	; 0
    1876:	60 40       	sbci	r22, 0x00	; 0
    1878:	70 40       	sbci	r23, 0x00	; 0
    187a:	84 17       	cp	r24, r20
    187c:	95 07       	cpc	r25, r21
    187e:	a6 07       	cpc	r26, r22
    1880:	b7 07       	cpc	r27, r23
    1882:	98 f4       	brcc	.+38     	; 0x18aa <clust2sect+0x54>
	return clst * fs->csize + fs->database;
    1884:	2a 81       	ldd	r18, Y+2	; 0x02
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	bc 01       	movw	r22, r24
    188e:	cd 01       	movw	r24, r26
    1890:	0e 94 1e 24 	call	0x483c	; 0x483c <__mulsi3>
    1894:	8b 01       	movw	r16, r22
    1896:	9c 01       	movw	r18, r24
    1898:	8a a5       	lds	r24, 0x6a
    189a:	9b a5       	lds	r25, 0x6b
    189c:	ac a5       	lds	r26, 0x6c
    189e:	bd a5       	lds	r27, 0x6d
    18a0:	08 0f       	add	r16, r24
    18a2:	19 1f       	adc	r17, r25
    18a4:	2a 1f       	adc	r18, r26
    18a6:	3b 1f       	adc	r19, r27
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <clust2sect+0x5a>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    18aa:	00 e0       	ldi	r16, 0x00	; 0
    18ac:	10 e0       	ldi	r17, 0x00	; 0
    18ae:	98 01       	movw	r18, r16
	return clst * fs->csize + fs->database;
}
    18b0:	60 2f       	mov	r22, r16
    18b2:	71 2f       	mov	r23, r17
    18b4:	82 2f       	mov	r24, r18
    18b6:	93 2f       	mov	r25, r19
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	1f 91       	pop	r17
    18be:	0f 91       	pop	r16
    18c0:	08 95       	ret

000018c2 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    18c2:	bf 92       	push	r11
    18c4:	cf 92       	push	r12
    18c6:	df 92       	push	r13
    18c8:	ef 92       	push	r14
    18ca:	ff 92       	push	r15
    18cc:	0f 93       	push	r16
    18ce:	1f 93       	push	r17
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	ec 01       	movw	r28, r24
    18d6:	6a 01       	movw	r12, r20
    18d8:	7b 01       	movw	r14, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
    18da:	42 30       	cpi	r20, 0x02	; 2
    18dc:	51 05       	cpc	r21, r1
    18de:	61 05       	cpc	r22, r1
    18e0:	71 05       	cpc	r23, r1
    18e2:	08 f4       	brcc	.+2      	; 0x18e6 <get_fat+0x24>
    18e4:	cf c0       	rjmp	.+414    	; 0x1a84 <get_fat+0x1c2>
    18e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18ea:	ac 8d       	ldd	r26, Y+28	; 0x1c
    18ec:	bd 8d       	ldd	r27, Y+29	; 0x1d
    18ee:	48 17       	cp	r20, r24
    18f0:	59 07       	cpc	r21, r25
    18f2:	6a 07       	cpc	r22, r26
    18f4:	7b 07       	cpc	r23, r27
    18f6:	08 f0       	brcs	.+2      	; 0x18fa <get_fat+0x38>
    18f8:	ca c0       	rjmp	.+404    	; 0x1a8e <get_fat+0x1cc>
		return 1;

	switch (fs->fs_type) {
    18fa:	88 81       	ld	r24, Y
    18fc:	82 30       	cpi	r24, 0x02	; 2
    18fe:	09 f4       	brne	.+2      	; 0x1902 <get_fat+0x40>
    1900:	5c c0       	rjmp	.+184    	; 0x19ba <get_fat+0xf8>
    1902:	83 30       	cpi	r24, 0x03	; 3
    1904:	09 f4       	brne	.+2      	; 0x1908 <get_fat+0x46>
    1906:	7b c0       	rjmp	.+246    	; 0x19fe <get_fat+0x13c>
    1908:	81 30       	cpi	r24, 0x01	; 1
    190a:	09 f0       	breq	.+2      	; 0x190e <get_fat+0x4c>
    190c:	c5 c0       	rjmp	.+394    	; 0x1a98 <get_fat+0x1d6>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    190e:	9a 01       	movw	r18, r20
    1910:	36 95       	lsr	r19
    1912:	27 95       	ror	r18
    1914:	89 01       	movw	r16, r18
    1916:	04 0f       	add	r16, r20
    1918:	15 1f       	adc	r17, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    191a:	a8 01       	movw	r20, r16
    191c:	45 2f       	mov	r20, r21
    191e:	55 27       	eor	r21, r21
    1920:	46 95       	lsr	r20
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	70 e0       	ldi	r23, 0x00	; 0
    1926:	8a a1       	lds	r24, 0x4a
    1928:	9b a1       	lds	r25, 0x4b
    192a:	ac a1       	lds	r26, 0x4c
    192c:	bd a1       	lds	r27, 0x4d
    192e:	48 0f       	add	r20, r24
    1930:	59 1f       	adc	r21, r25
    1932:	6a 1f       	adc	r22, r26
    1934:	7b 1f       	adc	r23, r27
    1936:	ce 01       	movw	r24, r28
    1938:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
    193c:	88 23       	and	r24, r24
    193e:	09 f0       	breq	.+2      	; 0x1942 <get_fat+0x80>
    1940:	af c0       	rjmp	.+350    	; 0x1aa0 <get_fat+0x1de>
		wc = fs->win[bc % SS(fs)]; bc++;
    1942:	f8 01       	movw	r30, r16
    1944:	f1 70       	andi	r31, 0x01	; 1
    1946:	ec 0f       	add	r30, r28
    1948:	fd 1f       	adc	r31, r29
    194a:	b2 a8       	sts	0x82, r27
    194c:	0f 5f       	subi	r16, 0xFF	; 255
    194e:	1f 4f       	sbci	r17, 0xFF	; 255
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    1950:	a8 01       	movw	r20, r16
    1952:	45 2f       	mov	r20, r21
    1954:	55 27       	eor	r21, r21
    1956:	46 95       	lsr	r20
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	8a a1       	lds	r24, 0x4a
    195e:	9b a1       	lds	r25, 0x4b
    1960:	ac a1       	lds	r26, 0x4c
    1962:	bd a1       	lds	r27, 0x4d
    1964:	48 0f       	add	r20, r24
    1966:	59 1f       	adc	r21, r25
    1968:	6a 1f       	adc	r22, r26
    196a:	7b 1f       	adc	r23, r27
    196c:	ce 01       	movw	r24, r28
    196e:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
    1972:	88 23       	and	r24, r24
    1974:	09 f0       	breq	.+2      	; 0x1978 <get_fat+0xb6>
    1976:	98 c0       	rjmp	.+304    	; 0x1aa8 <get_fat+0x1e6>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    1978:	2b 2d       	mov	r18, r11
    197a:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    197c:	f8 01       	movw	r30, r16
    197e:	f1 70       	andi	r31, 0x01	; 1
    1980:	ec 0f       	add	r30, r28
    1982:	fd 1f       	adc	r31, r29
    1984:	92 a9       	sts	0x42, r25
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	82 2b       	or	r24, r18
    198a:	93 2b       	or	r25, r19
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    198c:	21 e0       	ldi	r18, 0x01	; 1
    198e:	c2 22       	and	r12, r18
    1990:	dd 24       	eor	r13, r13
    1992:	c1 14       	cp	r12, r1
    1994:	d1 04       	cpc	r13, r1
    1996:	51 f0       	breq	.+20     	; 0x19ac <get_fat+0xea>
    1998:	92 95       	swap	r25
    199a:	82 95       	swap	r24
    199c:	8f 70       	andi	r24, 0x0F	; 15
    199e:	89 27       	eor	r24, r25
    19a0:	9f 70       	andi	r25, 0x0F	; 15
    19a2:	89 27       	eor	r24, r25
    19a4:	8c 01       	movw	r16, r24
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	89 c0       	rjmp	.+274    	; 0x1abe <get_fat+0x1fc>
    19ac:	8c 01       	movw	r16, r24
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	1f 70       	andi	r17, 0x0F	; 15
    19b4:	20 70       	andi	r18, 0x00	; 0
    19b6:	30 70       	andi	r19, 0x00	; 0
    19b8:	82 c0       	rjmp	.+260    	; 0x1abe <get_fat+0x1fc>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    19ba:	45 2f       	mov	r20, r21
    19bc:	56 2f       	mov	r21, r22
    19be:	67 2f       	mov	r22, r23
    19c0:	77 27       	eor	r23, r23
    19c2:	8a a1       	lds	r24, 0x4a
    19c4:	9b a1       	lds	r25, 0x4b
    19c6:	ac a1       	lds	r26, 0x4c
    19c8:	bd a1       	lds	r27, 0x4d
    19ca:	48 0f       	add	r20, r24
    19cc:	59 1f       	adc	r21, r25
    19ce:	6a 1f       	adc	r22, r26
    19d0:	7b 1f       	adc	r23, r27
    19d2:	ce 01       	movw	r24, r28
    19d4:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
    19d8:	88 23       	and	r24, r24
    19da:	09 f0       	breq	.+2      	; 0x19de <get_fat+0x11c>
    19dc:	69 c0       	rjmp	.+210    	; 0x1ab0 <get_fat+0x1ee>
		p = &fs->win[clst * 2 % SS(fs)];
    19de:	f6 01       	movw	r30, r12
    19e0:	ee 0f       	add	r30, r30
    19e2:	ff 1f       	adc	r31, r31
    19e4:	f1 70       	andi	r31, 0x01	; 1
		return LD_WORD(p);
    19e6:	ce 0f       	add	r28, r30
    19e8:	df 1f       	adc	r29, r31
    19ea:	9b a9       	sts	0x4b, r25
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	0a a9       	sts	0x4a, r16
    19f0:	10 e0       	ldi	r17, 0x00	; 0
    19f2:	80 2b       	or	r24, r16
    19f4:	91 2b       	or	r25, r17
    19f6:	8c 01       	movw	r16, r24
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	60 c0       	rjmp	.+192    	; 0x1abe <get_fat+0x1fc>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    19fe:	68 94       	set
    1a00:	16 f8       	bld	r1, 6
    1a02:	76 95       	lsr	r23
    1a04:	67 95       	ror	r22
    1a06:	57 95       	ror	r21
    1a08:	47 95       	ror	r20
    1a0a:	16 94       	lsr	r1
    1a0c:	d1 f7       	brne	.-12     	; 0x1a02 <get_fat+0x140>
    1a0e:	8a a1       	lds	r24, 0x4a
    1a10:	9b a1       	lds	r25, 0x4b
    1a12:	ac a1       	lds	r26, 0x4c
    1a14:	bd a1       	lds	r27, 0x4d
    1a16:	48 0f       	add	r20, r24
    1a18:	59 1f       	adc	r21, r25
    1a1a:	6a 1f       	adc	r22, r26
    1a1c:	7b 1f       	adc	r23, r27
    1a1e:	ce 01       	movw	r24, r28
    1a20:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
    1a24:	88 23       	and	r24, r24
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <get_fat+0x168>
    1a28:	47 c0       	rjmp	.+142    	; 0x1ab8 <get_fat+0x1f6>
		p = &fs->win[clst * 4 % SS(fs)];
    1a2a:	f6 01       	movw	r30, r12
    1a2c:	ee 0f       	add	r30, r30
    1a2e:	ff 1f       	adc	r31, r31
    1a30:	ee 0f       	add	r30, r30
    1a32:	ff 1f       	adc	r31, r31
    1a34:	f1 70       	andi	r31, 0x01	; 1
		return LD_DWORD(p) & 0x0FFFFFFF;
    1a36:	ce 0f       	add	r28, r30
    1a38:	df 1f       	adc	r29, r31
    1a3a:	0d a9       	sts	0x4d, r16
    1a3c:	10 e0       	ldi	r17, 0x00	; 0
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	30 2f       	mov	r19, r16
    1a44:	22 27       	eor	r18, r18
    1a46:	11 27       	eor	r17, r17
    1a48:	00 27       	eor	r16, r16
    1a4a:	8c a9       	sts	0x4c, r24
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	a0 e0       	ldi	r26, 0x00	; 0
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	dc 01       	movw	r26, r24
    1a54:	99 27       	eor	r25, r25
    1a56:	88 27       	eor	r24, r24
    1a58:	08 2b       	or	r16, r24
    1a5a:	19 2b       	or	r17, r25
    1a5c:	2a 2b       	or	r18, r26
    1a5e:	3b 2b       	or	r19, r27
    1a60:	8a a9       	sts	0x4a, r24
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a0 e0       	ldi	r26, 0x00	; 0
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	08 2b       	or	r16, r24
    1a6a:	19 2b       	or	r17, r25
    1a6c:	2a 2b       	or	r18, r26
    1a6e:	3b 2b       	or	r19, r27
    1a70:	9b a9       	sts	0x4b, r25
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	a0 e0       	ldi	r26, 0x00	; 0
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	08 2b       	or	r16, r24
    1a7a:	19 2b       	or	r17, r25
    1a7c:	2a 2b       	or	r18, r26
    1a7e:	3b 2b       	or	r19, r27
    1a80:	3f 70       	andi	r19, 0x0F	; 15
    1a82:	1d c0       	rjmp	.+58     	; 0x1abe <get_fat+0x1fc>
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
		return 1;
    1a84:	01 e0       	ldi	r16, 0x01	; 1
    1a86:	10 e0       	ldi	r17, 0x00	; 0
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	18 c0       	rjmp	.+48     	; 0x1abe <get_fat+0x1fc>
    1a8e:	01 e0       	ldi	r16, 0x01	; 1
    1a90:	10 e0       	ldi	r17, 0x00	; 0
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	13 c0       	rjmp	.+38     	; 0x1abe <get_fat+0x1fc>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    1a98:	0f ef       	ldi	r16, 0xFF	; 255
    1a9a:	1f ef       	ldi	r17, 0xFF	; 255
    1a9c:	98 01       	movw	r18, r16
    1a9e:	0f c0       	rjmp	.+30     	; 0x1abe <get_fat+0x1fc>
    1aa0:	0f ef       	ldi	r16, 0xFF	; 255
    1aa2:	1f ef       	ldi	r17, 0xFF	; 255
    1aa4:	98 01       	movw	r18, r16
    1aa6:	0b c0       	rjmp	.+22     	; 0x1abe <get_fat+0x1fc>
    1aa8:	0f ef       	ldi	r16, 0xFF	; 255
    1aaa:	1f ef       	ldi	r17, 0xFF	; 255
    1aac:	98 01       	movw	r18, r16
    1aae:	07 c0       	rjmp	.+14     	; 0x1abe <get_fat+0x1fc>
    1ab0:	0f ef       	ldi	r16, 0xFF	; 255
    1ab2:	1f ef       	ldi	r17, 0xFF	; 255
    1ab4:	98 01       	movw	r18, r16
    1ab6:	03 c0       	rjmp	.+6      	; 0x1abe <get_fat+0x1fc>
    1ab8:	0f ef       	ldi	r16, 0xFF	; 255
    1aba:	1f ef       	ldi	r17, 0xFF	; 255
    1abc:	98 01       	movw	r18, r16
}
    1abe:	60 2f       	mov	r22, r16
    1ac0:	71 2f       	mov	r23, r17
    1ac2:	82 2f       	mov	r24, r18
    1ac4:	93 2f       	mov	r25, r19
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	ff 90       	pop	r15
    1ad0:	ef 90       	pop	r14
    1ad2:	df 90       	pop	r13
    1ad4:	cf 90       	pop	r12
    1ad6:	bf 90       	pop	r11
    1ad8:	08 95       	ret

00001ada <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Index of directory table */
)
{
    1ada:	ef 92       	push	r14
    1adc:	ff 92       	push	r15
    1ade:	0f 93       	push	r16
    1ae0:	1f 93       	push	r17
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	ec 01       	movw	r28, r24
    1ae8:	8b 01       	movw	r16, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1aea:	7d 83       	std	Y+5, r23	; 0x05
    1aec:	6c 83       	std	Y+4, r22	; 0x04
	clst = dj->sclust;
    1aee:	4e 81       	ldd	r20, Y+6	; 0x06
    1af0:	5f 81       	ldd	r21, Y+7	; 0x07
    1af2:	68 85       	ldd	r22, Y+8	; 0x08
    1af4:	79 85       	ldd	r23, Y+9	; 0x09
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    1af6:	41 30       	cpi	r20, 0x01	; 1
    1af8:	51 05       	cpc	r21, r1
    1afa:	61 05       	cpc	r22, r1
    1afc:	71 05       	cpc	r23, r1
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <dir_sdi+0x28>
    1b00:	9f c0       	rjmp	.+318    	; 0x1c40 <dir_sdi+0x166>
    1b02:	e8 81       	ld	r30, Y
    1b04:	f9 81       	ldd	r31, Y+1	; 0x01
    1b06:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b08:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b0a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1b0c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1b0e:	48 17       	cp	r20, r24
    1b10:	59 07       	cpc	r21, r25
    1b12:	6a 07       	cpc	r22, r26
    1b14:	7b 07       	cpc	r23, r27
    1b16:	08 f0       	brcs	.+2      	; 0x1b1a <dir_sdi+0x40>
    1b18:	95 c0       	rjmp	.+298    	; 0x1c44 <dir_sdi+0x16a>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1b1a:	41 15       	cp	r20, r1
    1b1c:	51 05       	cpc	r21, r1
    1b1e:	61 05       	cpc	r22, r1
    1b20:	71 05       	cpc	r23, r1
    1b22:	69 f5       	brne	.+90     	; 0x1b7e <dir_sdi+0xa4>
    1b24:	80 81       	ld	r24, Z
    1b26:	83 30       	cpi	r24, 0x03	; 3
    1b28:	49 f4       	brne	.+18     	; 0x1b3c <dir_sdi+0x62>
		clst = dj->fs->dirbase;
    1b2a:	46 a1       	lds	r20, 0x46
    1b2c:	57 a1       	lds	r21, 0x47
    1b2e:	60 a5       	lds	r22, 0x60
    1b30:	71 a5       	lds	r23, 0x61

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    1b32:	41 15       	cp	r20, r1
    1b34:	51 05       	cpc	r21, r1
    1b36:	61 05       	cpc	r22, r1
    1b38:	71 05       	cpc	r23, r1
    1b3a:	09 f5       	brne	.+66     	; 0x1b7e <dir_sdi+0xa4>
		dj->clust = clst;
    1b3c:	1a 86       	std	Y+10, r1	; 0x0a
    1b3e:	1b 86       	std	Y+11, r1	; 0x0b
    1b40:	1c 86       	std	Y+12, r1	; 0x0c
    1b42:	1d 86       	std	Y+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1b44:	80 85       	ldd	r24, Z+8	; 0x08
    1b46:	91 85       	ldd	r25, Z+9	; 0x09
    1b48:	08 17       	cp	r16, r24
    1b4a:	19 07       	cpc	r17, r25
    1b4c:	08 f0       	brcs	.+2      	; 0x1b50 <dir_sdi+0x76>
    1b4e:	7c c0       	rjmp	.+248    	; 0x1c48 <dir_sdi+0x16e>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1b50:	c8 01       	movw	r24, r16
    1b52:	92 95       	swap	r25
    1b54:	82 95       	swap	r24
    1b56:	8f 70       	andi	r24, 0x0F	; 15
    1b58:	89 27       	eor	r24, r25
    1b5a:	9f 70       	andi	r25, 0x0F	; 15
    1b5c:	89 27       	eor	r24, r25
    1b5e:	ac 01       	movw	r20, r24
    1b60:	60 e0       	ldi	r22, 0x00	; 0
    1b62:	70 e0       	ldi	r23, 0x00	; 0
    1b64:	86 a1       	lds	r24, 0x46
    1b66:	97 a1       	lds	r25, 0x47
    1b68:	a0 a5       	lds	r26, 0x60
    1b6a:	b1 a5       	lds	r27, 0x61
    1b6c:	84 0f       	add	r24, r20
    1b6e:	95 1f       	adc	r25, r21
    1b70:	a6 1f       	adc	r26, r22
    1b72:	b7 1f       	adc	r27, r23
    1b74:	8e 87       	std	Y+14, r24	; 0x0e
    1b76:	9f 87       	std	Y+15, r25	; 0x0f
    1b78:	a8 8b       	std	Y+16, r26	; 0x10
    1b7a:	b9 8b       	std	Y+17, r27	; 0x11
    1b7c:	4e c0       	rjmp	.+156    	; 0x1c1a <dir_sdi+0x140>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	7c 01       	movw	r14, r24
    1b84:	ee 0c       	add	r14, r14
    1b86:	ff 1c       	adc	r15, r15
    1b88:	ee 0c       	add	r14, r14
    1b8a:	ff 1c       	adc	r15, r15
    1b8c:	ee 0c       	add	r14, r14
    1b8e:	ff 1c       	adc	r15, r15
    1b90:	ee 0c       	add	r14, r14
    1b92:	ff 1c       	adc	r15, r15
		while (idx >= ic) {	/* Follow cluster chain */
    1b94:	0e 15       	cp	r16, r14
    1b96:	1f 05       	cpc	r17, r15
    1b98:	28 f1       	brcs	.+74     	; 0x1be4 <dir_sdi+0x10a>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1b9a:	88 81       	ld	r24, Y
    1b9c:	99 81       	ldd	r25, Y+1	; 0x01
    1b9e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <get_fat>
    1ba2:	ab 01       	movw	r20, r22
    1ba4:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1ba6:	4f 3f       	cpi	r20, 0xFF	; 255
    1ba8:	8f ef       	ldi	r24, 0xFF	; 255
    1baa:	58 07       	cpc	r21, r24
    1bac:	8f ef       	ldi	r24, 0xFF	; 255
    1bae:	68 07       	cpc	r22, r24
    1bb0:	8f ef       	ldi	r24, 0xFF	; 255
    1bb2:	78 07       	cpc	r23, r24
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <dir_sdi+0xde>
    1bb6:	4a c0       	rjmp	.+148    	; 0x1c4c <dir_sdi+0x172>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    1bb8:	42 30       	cpi	r20, 0x02	; 2
    1bba:	51 05       	cpc	r21, r1
    1bbc:	61 05       	cpc	r22, r1
    1bbe:	71 05       	cpc	r23, r1
    1bc0:	08 f4       	brcc	.+2      	; 0x1bc4 <dir_sdi+0xea>
    1bc2:	46 c0       	rjmp	.+140    	; 0x1c50 <dir_sdi+0x176>
    1bc4:	e8 81       	ld	r30, Y
    1bc6:	f9 81       	ldd	r31, Y+1	; 0x01
    1bc8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1bca:	93 8d       	ldd	r25, Z+27	; 0x1b
    1bcc:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1bce:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1bd0:	48 17       	cp	r20, r24
    1bd2:	59 07       	cpc	r21, r25
    1bd4:	6a 07       	cpc	r22, r26
    1bd6:	7b 07       	cpc	r23, r27
    1bd8:	e8 f5       	brcc	.+122    	; 0x1c54 <dir_sdi+0x17a>
				return FR_INT_ERR;
			idx -= ic;
    1bda:	0e 19       	sub	r16, r14
    1bdc:	1f 09       	sbc	r17, r15
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1bde:	0e 15       	cp	r16, r14
    1be0:	1f 05       	cpc	r17, r15
    1be2:	d8 f6       	brcc	.-74     	; 0x1b9a <dir_sdi+0xc0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1be4:	4a 87       	std	Y+10, r20	; 0x0a
    1be6:	5b 87       	std	Y+11, r21	; 0x0b
    1be8:	6c 87       	std	Y+12, r22	; 0x0c
    1bea:	7d 87       	std	Y+13, r23	; 0x0d
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1bec:	88 81       	ld	r24, Y
    1bee:	99 81       	ldd	r25, Y+1	; 0x01
    1bf0:	0e 94 2b 0c 	call	0x1856	; 0x1856 <clust2sect>
    1bf4:	ab 01       	movw	r20, r22
    1bf6:	bc 01       	movw	r22, r24
    1bf8:	c8 01       	movw	r24, r16
    1bfa:	92 95       	swap	r25
    1bfc:	82 95       	swap	r24
    1bfe:	8f 70       	andi	r24, 0x0F	; 15
    1c00:	89 27       	eor	r24, r25
    1c02:	9f 70       	andi	r25, 0x0F	; 15
    1c04:	89 27       	eor	r24, r25
    1c06:	a0 e0       	ldi	r26, 0x00	; 0
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	84 0f       	add	r24, r20
    1c0c:	95 1f       	adc	r25, r21
    1c0e:	a6 1f       	adc	r26, r22
    1c10:	b7 1f       	adc	r27, r23
    1c12:	8e 87       	std	Y+14, r24	; 0x0e
    1c14:	9f 87       	std	Y+15, r25	; 0x0f
    1c16:	a8 8b       	std	Y+16, r26	; 0x10
    1c18:	b9 8b       	std	Y+17, r27	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    1c1a:	88 81       	ld	r24, Y
    1c1c:	99 81       	ldd	r25, Y+1	; 0x01
    1c1e:	c2 96       	adiw	r24, 0x32	; 50
    1c20:	0f 70       	andi	r16, 0x0F	; 15
    1c22:	10 70       	andi	r17, 0x00	; 0
    1c24:	00 0f       	add	r16, r16
    1c26:	11 1f       	adc	r17, r17
    1c28:	02 95       	swap	r16
    1c2a:	12 95       	swap	r17
    1c2c:	10 7f       	andi	r17, 0xF0	; 240
    1c2e:	10 27       	eor	r17, r16
    1c30:	00 7f       	andi	r16, 0xF0	; 240
    1c32:	10 27       	eor	r17, r16
    1c34:	80 0f       	add	r24, r16
    1c36:	91 1f       	adc	r25, r17
    1c38:	9b 8b       	std	Y+19, r25	; 0x13
    1c3a:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;	/* Seek succeeded */
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	0b c0       	rjmp	.+22     	; 0x1c56 <dir_sdi+0x17c>


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
    1c40:	82 e0       	ldi	r24, 0x02	; 2
    1c42:	09 c0       	rjmp	.+18     	; 0x1c56 <dir_sdi+0x17c>
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	07 c0       	rjmp	.+14     	; 0x1c56 <dir_sdi+0x17c>
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
		dj->clust = clst;
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
			return FR_INT_ERR;
    1c48:	82 e0       	ldi	r24, 0x02	; 2
    1c4a:	05 c0       	rjmp	.+10     	; 0x1c56 <dir_sdi+0x17c>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	03 c0       	rjmp	.+6      	; 0x1c56 <dir_sdi+0x17c>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
    1c50:	82 e0       	ldi	r24, 0x02	; 2
    1c52:	01 c0       	rjmp	.+2      	; 0x1c56 <dir_sdi+0x17c>
    1c54:	82 e0       	ldi	r24, 0x02	; 2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	ff 90       	pop	r15
    1c60:	ef 90       	pop	r14
    1c62:	08 95       	ret

00001c64 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dj, dj->index);
    1c6a:	6c 81       	ldd	r22, Y+4	; 0x04
    1c6c:	7d 81       	ldd	r23, Y+5	; 0x05
    1c6e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <dir_sdi>
	if (res == FR_OK) {
    1c72:	88 23       	and	r24, r24
    1c74:	91 f4       	brne	.+36     	; 0x1c9a <dir_remove+0x36>
		res = move_window(dj->fs, dj->sect);
    1c76:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c78:	5f 85       	ldd	r21, Y+15	; 0x0f
    1c7a:	68 89       	ldd	r22, Y+16	; 0x10
    1c7c:	79 89       	ldd	r23, Y+17	; 0x11
    1c7e:	88 81       	ld	r24, Y
    1c80:	99 81       	ldd	r25, Y+1	; 0x01
    1c82:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
		if (res == FR_OK) {
    1c86:	88 23       	and	r24, r24
    1c88:	41 f4       	brne	.+16     	; 0x1c9a <dir_remove+0x36>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    1c8a:	ea 89       	ldd	r30, Y+18	; 0x12
    1c8c:	fb 89       	ldd	r31, Y+19	; 0x13
    1c8e:	95 ee       	ldi	r25, 0xE5	; 229
    1c90:	90 83       	st	Z, r25
			dj->fs->wflag = 1;
    1c92:	e8 81       	ld	r30, Y
    1c94:	f9 81       	ldd	r31, Y+1	; 0x01
    1c96:	91 e0       	ldi	r25, 0x01	; 1
    1c98:	94 83       	std	Z+4, r25	; 0x04
		}
	}
#endif

	return res;
}
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	08 95       	ret

00001ca0 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1ca0:	8f 92       	push	r8
    1ca2:	9f 92       	push	r9
    1ca4:	af 92       	push	r10
    1ca6:	bf 92       	push	r11
    1ca8:	cf 92       	push	r12
    1caa:	df 92       	push	r13
    1cac:	ef 92       	push	r14
    1cae:	ff 92       	push	r15
    1cb0:	0f 93       	push	r16
    1cb2:	1f 93       	push	r17
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	ec 01       	movw	r28, r24
    1cba:	6a 01       	movw	r12, r20
    1cbc:	7b 01       	movw	r14, r22
    1cbe:	48 01       	movw	r8, r16
    1cc0:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1cc2:	42 30       	cpi	r20, 0x02	; 2
    1cc4:	51 05       	cpc	r21, r1
    1cc6:	61 05       	cpc	r22, r1
    1cc8:	71 05       	cpc	r23, r1
    1cca:	08 f4       	brcc	.+2      	; 0x1cce <put_fat+0x2e>
    1ccc:	ca c0       	rjmp	.+404    	; 0x1e62 <put_fat+0x1c2>
    1cce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cd0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1cd2:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1cd4:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1cd6:	48 17       	cp	r20, r24
    1cd8:	59 07       	cpc	r21, r25
    1cda:	6a 07       	cpc	r22, r26
    1cdc:	7b 07       	cpc	r23, r27
    1cde:	08 f0       	brcs	.+2      	; 0x1ce2 <put_fat+0x42>
    1ce0:	c2 c0       	rjmp	.+388    	; 0x1e66 <put_fat+0x1c6>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    1ce2:	88 81       	ld	r24, Y
    1ce4:	82 30       	cpi	r24, 0x02	; 2
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <put_fat+0x4a>
    1ce8:	6a c0       	rjmp	.+212    	; 0x1dbe <put_fat+0x11e>
    1cea:	83 30       	cpi	r24, 0x03	; 3
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <put_fat+0x50>
    1cee:	82 c0       	rjmp	.+260    	; 0x1df4 <put_fat+0x154>
    1cf0:	81 30       	cpi	r24, 0x01	; 1
    1cf2:	09 f0       	breq	.+2      	; 0x1cf6 <put_fat+0x56>
    1cf4:	b2 c0       	rjmp	.+356    	; 0x1e5a <put_fat+0x1ba>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    1cf6:	9a 01       	movw	r18, r20
    1cf8:	36 95       	lsr	r19
    1cfa:	27 95       	ror	r18
    1cfc:	89 01       	movw	r16, r18
    1cfe:	04 0f       	add	r16, r20
    1d00:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1d02:	a8 01       	movw	r20, r16
    1d04:	45 2f       	mov	r20, r21
    1d06:	55 27       	eor	r21, r21
    1d08:	46 95       	lsr	r20
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	70 e0       	ldi	r23, 0x00	; 0
    1d0e:	8a a1       	lds	r24, 0x4a
    1d10:	9b a1       	lds	r25, 0x4b
    1d12:	ac a1       	lds	r26, 0x4c
    1d14:	bd a1       	lds	r27, 0x4d
    1d16:	48 0f       	add	r20, r24
    1d18:	59 1f       	adc	r21, r25
    1d1a:	6a 1f       	adc	r22, r26
    1d1c:	7b 1f       	adc	r23, r27
    1d1e:	ce 01       	movw	r24, r28
    1d20:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
			if (res != FR_OK) break;
    1d24:	88 23       	and	r24, r24
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <put_fat+0x8a>
    1d28:	99 c0       	rjmp	.+306    	; 0x1e5c <put_fat+0x1bc>
			p = &fs->win[bc % SS(fs)];
    1d2a:	c8 01       	movw	r24, r16
    1d2c:	91 70       	andi	r25, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1d2e:	e1 e0       	ldi	r30, 0x01	; 1
    1d30:	ce 22       	and	r12, r30
    1d32:	dd 24       	eor	r13, r13
    1d34:	c1 14       	cp	r12, r1
    1d36:	d1 04       	cpc	r13, r1
    1d38:	51 f0       	breq	.+20     	; 0x1d4e <put_fat+0xae>
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e8 0f       	add	r30, r24
    1d3e:	f9 1f       	adc	r31, r25
    1d40:	22 a9       	sts	0x42, r18
    1d42:	2f 70       	andi	r18, 0x0F	; 15
    1d44:	38 2d       	mov	r19, r8
    1d46:	32 95       	swap	r19
    1d48:	30 7f       	andi	r19, 0xF0	; 240
    1d4a:	23 2b       	or	r18, r19
    1d4c:	01 c0       	rjmp	.+2      	; 0x1d50 <put_fat+0xb0>
    1d4e:	28 2d       	mov	r18, r8
    1d50:	fe 01       	movw	r30, r28
    1d52:	e8 0f       	add	r30, r24
    1d54:	f9 1f       	adc	r31, r25
    1d56:	22 ab       	sts	0x52, r18
			bc++;
    1d58:	0f 5f       	subi	r16, 0xFF	; 255
    1d5a:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1d60:	a8 01       	movw	r20, r16
    1d62:	45 2f       	mov	r20, r21
    1d64:	55 27       	eor	r21, r21
    1d66:	46 95       	lsr	r20
    1d68:	60 e0       	ldi	r22, 0x00	; 0
    1d6a:	70 e0       	ldi	r23, 0x00	; 0
    1d6c:	8a a1       	lds	r24, 0x4a
    1d6e:	9b a1       	lds	r25, 0x4b
    1d70:	ac a1       	lds	r26, 0x4c
    1d72:	bd a1       	lds	r27, 0x4d
    1d74:	48 0f       	add	r20, r24
    1d76:	59 1f       	adc	r21, r25
    1d78:	6a 1f       	adc	r22, r26
    1d7a:	7b 1f       	adc	r23, r27
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
			if (res != FR_OK) break;
    1d82:	88 23       	and	r24, r24
    1d84:	09 f0       	breq	.+2      	; 0x1d88 <put_fat+0xe8>
    1d86:	6a c0       	rjmp	.+212    	; 0x1e5c <put_fat+0x1bc>
			p = &fs->win[bc % SS(fs)];
    1d88:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1d8a:	c1 14       	cp	r12, r1
    1d8c:	d1 04       	cpc	r13, r1
    1d8e:	49 f0       	breq	.+18     	; 0x1da2 <put_fat+0x102>
    1d90:	68 94       	set
    1d92:	13 f8       	bld	r1, 3
    1d94:	b6 94       	lsr	r11
    1d96:	a7 94       	ror	r10
    1d98:	97 94       	ror	r9
    1d9a:	87 94       	ror	r8
    1d9c:	16 94       	lsr	r1
    1d9e:	d1 f7       	brne	.-12     	; 0x1d94 <put_fat+0xf4>
    1da0:	09 c0       	rjmp	.+18     	; 0x1db4 <put_fat+0x114>
    1da2:	fe 01       	movw	r30, r28
    1da4:	e0 0f       	add	r30, r16
    1da6:	f1 1f       	adc	r31, r17
    1da8:	22 a9       	sts	0x42, r18
    1daa:	20 7f       	andi	r18, 0xF0	; 240
    1dac:	99 2d       	mov	r25, r9
    1dae:	9f 70       	andi	r25, 0x0F	; 15
    1db0:	82 2e       	mov	r8, r18
    1db2:	89 2a       	or	r8, r25
    1db4:	0c 0f       	add	r16, r28
    1db6:	1d 1f       	adc	r17, r29
    1db8:	f8 01       	movw	r30, r16
    1dba:	82 aa       	sts	0x92, r24
			break;
    1dbc:	4f c0       	rjmp	.+158    	; 0x1e5c <put_fat+0x1bc>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    1dbe:	45 2f       	mov	r20, r21
    1dc0:	56 2f       	mov	r21, r22
    1dc2:	67 2f       	mov	r22, r23
    1dc4:	77 27       	eor	r23, r23
    1dc6:	8a a1       	lds	r24, 0x4a
    1dc8:	9b a1       	lds	r25, 0x4b
    1dca:	ac a1       	lds	r26, 0x4c
    1dcc:	bd a1       	lds	r27, 0x4d
    1dce:	48 0f       	add	r20, r24
    1dd0:	59 1f       	adc	r21, r25
    1dd2:	6a 1f       	adc	r22, r26
    1dd4:	7b 1f       	adc	r23, r27
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
			if (res != FR_OK) break;
    1ddc:	88 23       	and	r24, r24
    1dde:	09 f0       	breq	.+2      	; 0x1de2 <put_fat+0x142>
    1de0:	3d c0       	rjmp	.+122    	; 0x1e5c <put_fat+0x1bc>
			p = &fs->win[clst * 2 % SS(fs)];
    1de2:	f6 01       	movw	r30, r12
    1de4:	ee 0f       	add	r30, r30
    1de6:	ff 1f       	adc	r31, r31
    1de8:	f1 70       	andi	r31, 0x01	; 1
			ST_WORD(p, (WORD)val);
    1dea:	ec 0f       	add	r30, r28
    1dec:	fd 1f       	adc	r31, r29
    1dee:	82 aa       	sts	0x92, r24
    1df0:	93 aa       	sts	0x93, r25
			break;
    1df2:	34 c0       	rjmp	.+104    	; 0x1e5c <put_fat+0x1bc>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    1df4:	68 94       	set
    1df6:	16 f8       	bld	r1, 6
    1df8:	76 95       	lsr	r23
    1dfa:	67 95       	ror	r22
    1dfc:	57 95       	ror	r21
    1dfe:	47 95       	ror	r20
    1e00:	16 94       	lsr	r1
    1e02:	d1 f7       	brne	.-12     	; 0x1df8 <put_fat+0x158>
    1e04:	8a a1       	lds	r24, 0x4a
    1e06:	9b a1       	lds	r25, 0x4b
    1e08:	ac a1       	lds	r26, 0x4c
    1e0a:	bd a1       	lds	r27, 0x4d
    1e0c:	48 0f       	add	r20, r24
    1e0e:	59 1f       	adc	r21, r25
    1e10:	6a 1f       	adc	r22, r26
    1e12:	7b 1f       	adc	r23, r27
    1e14:	ce 01       	movw	r24, r28
    1e16:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
			if (res != FR_OK) break;
    1e1a:	88 23       	and	r24, r24
    1e1c:	f9 f4       	brne	.+62     	; 0x1e5c <put_fat+0x1bc>
			p = &fs->win[clst * 4 % SS(fs)];
    1e1e:	96 01       	movw	r18, r12
    1e20:	22 0f       	add	r18, r18
    1e22:	33 1f       	adc	r19, r19
    1e24:	22 0f       	add	r18, r18
    1e26:	33 1f       	adc	r19, r19
    1e28:	31 70       	andi	r19, 0x01	; 1
			val |= LD_DWORD(p) & 0xF0000000;
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e2 0f       	add	r30, r18
    1e2e:	f3 1f       	adc	r31, r19
    1e30:	45 a9       	sts	0x45, r20
    1e32:	50 e0       	ldi	r21, 0x00	; 0
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	70 e0       	ldi	r23, 0x00	; 0
    1e38:	74 2f       	mov	r23, r20
    1e3a:	66 27       	eor	r22, r22
    1e3c:	55 27       	eor	r21, r21
    1e3e:	44 27       	eor	r20, r20
    1e40:	40 70       	andi	r20, 0x00	; 0
    1e42:	50 70       	andi	r21, 0x00	; 0
    1e44:	60 70       	andi	r22, 0x00	; 0
    1e46:	70 7f       	andi	r23, 0xF0	; 240
    1e48:	48 29       	or	r20, r8
    1e4a:	59 29       	or	r21, r9
    1e4c:	6a 29       	or	r22, r10
    1e4e:	7b 29       	or	r23, r11
			ST_DWORD(p, val);
    1e50:	42 ab       	sts	0x52, r20
    1e52:	53 ab       	sts	0x53, r21
    1e54:	64 ab       	sts	0x54, r22
    1e56:	75 ab       	sts	0x55, r23
			break;
    1e58:	01 c0       	rjmp	.+2      	; 0x1e5c <put_fat+0x1bc>

		default :
			res = FR_INT_ERR;
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
    1e5c:	91 e0       	ldi	r25, 0x01	; 1
    1e5e:	9c 83       	std	Y+4, r25	; 0x04
    1e60:	03 c0       	rjmp	.+6      	; 0x1e68 <put_fat+0x1c8>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1e62:	82 e0       	ldi	r24, 0x02	; 2
    1e64:	01 c0       	rjmp	.+2      	; 0x1e68 <put_fat+0x1c8>
    1e66:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
	}

	return res;
}
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	1f 91       	pop	r17
    1e6e:	0f 91       	pop	r16
    1e70:	ff 90       	pop	r15
    1e72:	ef 90       	pop	r14
    1e74:	df 90       	pop	r13
    1e76:	cf 90       	pop	r12
    1e78:	bf 90       	pop	r11
    1e7a:	af 90       	pop	r10
    1e7c:	9f 90       	pop	r9
    1e7e:	8f 90       	pop	r8
    1e80:	08 95       	ret

00001e82 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1e82:	2f 92       	push	r2
    1e84:	3f 92       	push	r3
    1e86:	4f 92       	push	r4
    1e88:	5f 92       	push	r5
    1e8a:	6f 92       	push	r6
    1e8c:	7f 92       	push	r7
    1e8e:	8f 92       	push	r8
    1e90:	9f 92       	push	r9
    1e92:	af 92       	push	r10
    1e94:	bf 92       	push	r11
    1e96:	cf 92       	push	r12
    1e98:	df 92       	push	r13
    1e9a:	ef 92       	push	r14
    1e9c:	ff 92       	push	r15
    1e9e:	0f 93       	push	r16
    1ea0:	1f 93       	push	r17
    1ea2:	cf 93       	push	r28
    1ea4:	df 93       	push	r29
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <create_chain+0x26>
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <create_chain+0x28>
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	1c 01       	movw	r2, r24
    1eb0:	49 83       	std	Y+1, r20	; 0x01
    1eb2:	5a 83       	std	Y+2, r21	; 0x02
    1eb4:	6b 83       	std	Y+3, r22	; 0x03
    1eb6:	7c 83       	std	Y+4, r23	; 0x04
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    1eb8:	41 15       	cp	r20, r1
    1eba:	51 05       	cpc	r21, r1
    1ebc:	61 05       	cpc	r22, r1
    1ebe:	71 05       	cpc	r23, r1
    1ec0:	c1 f4       	brne	.+48     	; 0x1ef2 <create_chain+0x70>
		scl = fs->last_clust;			/* Get suggested start point */
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	1a 96       	adiw	r26, 0x0a	; 10
    1ec6:	8d 90       	ld	r8, X+
    1ec8:	9d 90       	ld	r9, X+
    1eca:	ad 90       	ld	r10, X+
    1ecc:	bc 90       	ld	r11, X
    1ece:	1d 97       	sbiw	r26, 0x0d	; 13
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1ed0:	81 14       	cp	r8, r1
    1ed2:	91 04       	cpc	r9, r1
    1ed4:	a1 04       	cpc	r10, r1
    1ed6:	b1 04       	cpc	r11, r1
    1ed8:	51 f1       	breq	.+84     	; 0x1f2e <create_chain+0xac>
    1eda:	5a 96       	adiw	r26, 0x1a	; 26
    1edc:	8d 91       	ld	r24, X+
    1ede:	9d 91       	ld	r25, X+
    1ee0:	0d 90       	ld	r0, X+
    1ee2:	bc 91       	ld	r27, X
    1ee4:	a0 2d       	mov	r26, r0
    1ee6:	88 16       	cp	r8, r24
    1ee8:	99 06       	cpc	r9, r25
    1eea:	aa 06       	cpc	r10, r26
    1eec:	bb 06       	cpc	r11, r27
    1eee:	20 f5       	brcc	.+72     	; 0x1f38 <create_chain+0xb6>
    1ef0:	27 c0       	rjmp	.+78     	; 0x1f40 <create_chain+0xbe>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1ef2:	49 81       	ldd	r20, Y+1	; 0x01
    1ef4:	5a 81       	ldd	r21, Y+2	; 0x02
    1ef6:	6b 81       	ldd	r22, Y+3	; 0x03
    1ef8:	7c 81       	ldd	r23, Y+4	; 0x04
    1efa:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <get_fat>
    1efe:	8b 01       	movw	r16, r22
    1f00:	9c 01       	movw	r18, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1f02:	62 30       	cpi	r22, 0x02	; 2
    1f04:	71 05       	cpc	r23, r1
    1f06:	81 05       	cpc	r24, r1
    1f08:	91 05       	cpc	r25, r1
    1f0a:	08 f4       	brcc	.+2      	; 0x1f0e <create_chain+0x8c>
    1f0c:	ad c0       	rjmp	.+346    	; 0x2068 <create_chain+0x1e6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1f0e:	f1 01       	movw	r30, r2
    1f10:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f12:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f14:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1f16:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1f18:	08 17       	cp	r16, r24
    1f1a:	19 07       	cpc	r17, r25
    1f1c:	2a 07       	cpc	r18, r26
    1f1e:	3b 07       	cpc	r19, r27
    1f20:	08 f4       	brcc	.+2      	; 0x1f24 <create_chain+0xa2>
    1f22:	b6 c0       	rjmp	.+364    	; 0x2090 <create_chain+0x20e>
		scl = clst;
    1f24:	89 80       	ldd	r8, Y+1	; 0x01
    1f26:	9a 80       	ldd	r9, Y+2	; 0x02
    1f28:	ab 80       	ldd	r10, Y+3	; 0x03
    1f2a:	bc 80       	ldd	r11, Y+4	; 0x04
    1f2c:	09 c0       	rjmp	.+18     	; 0x1f40 <create_chain+0xbe>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1f2e:	88 24       	eor	r8, r8
    1f30:	99 24       	eor	r9, r9
    1f32:	54 01       	movw	r10, r8
    1f34:	83 94       	inc	r8
    1f36:	04 c0       	rjmp	.+8      	; 0x1f40 <create_chain+0xbe>
    1f38:	88 24       	eor	r8, r8
    1f3a:	99 24       	eor	r9, r9
    1f3c:	54 01       	movw	r10, r8
    1f3e:	83 94       	inc	r8
		if (cs < 2) return 1;			/* It is an invalid cluster */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
    1f40:	75 01       	movw	r14, r10
    1f42:	64 01       	movw	r12, r8
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    1f44:	44 24       	eor	r4, r4
    1f46:	55 24       	eor	r5, r5
    1f48:	32 01       	movw	r6, r4
    1f4a:	68 94       	set
    1f4c:	41 f8       	bld	r4, 1
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1f4e:	08 94       	sec
    1f50:	c1 1c       	adc	r12, r1
    1f52:	d1 1c       	adc	r13, r1
    1f54:	e1 1c       	adc	r14, r1
    1f56:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1f58:	f1 01       	movw	r30, r2
    1f5a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f5c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f5e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1f60:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1f62:	c8 16       	cp	r12, r24
    1f64:	d9 06       	cpc	r13, r25
    1f66:	ea 06       	cpc	r14, r26
    1f68:	fb 06       	cpc	r15, r27
    1f6a:	48 f0       	brcs	.+18     	; 0x1f7e <create_chain+0xfc>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1f6c:	f2 e0       	ldi	r31, 0x02	; 2
    1f6e:	8f 16       	cp	r8, r31
    1f70:	91 04       	cpc	r9, r1
    1f72:	a1 04       	cpc	r10, r1
    1f74:	b1 04       	cpc	r11, r1
    1f76:	08 f4       	brcc	.+2      	; 0x1f7a <create_chain+0xf8>
    1f78:	7c c0       	rjmp	.+248    	; 0x2072 <create_chain+0x1f0>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    1f7a:	73 01       	movw	r14, r6
    1f7c:	62 01       	movw	r12, r4
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1f7e:	c1 01       	movw	r24, r2
    1f80:	b7 01       	movw	r22, r14
    1f82:	a6 01       	movw	r20, r12
    1f84:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <get_fat>
    1f88:	8b 01       	movw	r16, r22
    1f8a:	9c 01       	movw	r18, r24
		if (cs == 0) break;				/* Found a free cluster */
    1f8c:	61 15       	cp	r22, r1
    1f8e:	71 05       	cpc	r23, r1
    1f90:	81 05       	cpc	r24, r1
    1f92:	91 05       	cpc	r25, r1
    1f94:	a9 f0       	breq	.+42     	; 0x1fc0 <create_chain+0x13e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1f96:	0f 3f       	cpi	r16, 0xFF	; 255
    1f98:	8f ef       	ldi	r24, 0xFF	; 255
    1f9a:	18 07       	cpc	r17, r24
    1f9c:	8f ef       	ldi	r24, 0xFF	; 255
    1f9e:	28 07       	cpc	r18, r24
    1fa0:	8f ef       	ldi	r24, 0xFF	; 255
    1fa2:	38 07       	cpc	r19, r24
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <create_chain+0x126>
    1fa6:	74 c0       	rjmp	.+232    	; 0x2090 <create_chain+0x20e>
    1fa8:	01 30       	cpi	r16, 0x01	; 1
    1faa:	11 05       	cpc	r17, r1
    1fac:	21 05       	cpc	r18, r1
    1fae:	31 05       	cpc	r19, r1
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <create_chain+0x132>
    1fb2:	6e c0       	rjmp	.+220    	; 0x2090 <create_chain+0x20e>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1fb4:	c8 14       	cp	r12, r8
    1fb6:	d9 04       	cpc	r13, r9
    1fb8:	ea 04       	cpc	r14, r10
    1fba:	fb 04       	cpc	r15, r11
    1fbc:	41 f6       	brne	.-112    	; 0x1f4e <create_chain+0xcc>
    1fbe:	5d c0       	rjmp	.+186    	; 0x207a <create_chain+0x1f8>
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
    1fc0:	8c 2c       	mov	r8, r12
    1fc2:	4d 2c       	mov	r4, r13
    1fc4:	be 2c       	mov	r11, r14
    1fc6:	af 2c       	mov	r10, r15
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    1fc8:	c1 01       	movw	r24, r2
    1fca:	4c 2d       	mov	r20, r12
    1fcc:	5d 2d       	mov	r21, r13
    1fce:	6e 2d       	mov	r22, r14
    1fd0:	7f 2d       	mov	r23, r15
    1fd2:	0f ef       	ldi	r16, 0xFF	; 255
    1fd4:	1f ef       	ldi	r17, 0xFF	; 255
    1fd6:	2f ef       	ldi	r18, 0xFF	; 255
    1fd8:	3f e0       	ldi	r19, 0x0F	; 15
    1fda:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <put_fat>
	if (res == FR_OK && clst != 0) {
    1fde:	88 23       	and	r24, r24
    1fe0:	e9 f5       	brne	.+122    	; 0x205c <create_chain+0x1da>
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe6:	ab 81       	ldd	r26, Y+3	; 0x03
    1fe8:	bc 81       	ldd	r27, Y+4	; 0x04
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	a1 05       	cpc	r26, r1
    1fee:	b1 05       	cpc	r27, r1
    1ff0:	69 f0       	breq	.+26     	; 0x200c <create_chain+0x18a>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    1ff2:	c1 01       	movw	r24, r2
    1ff4:	49 81       	ldd	r20, Y+1	; 0x01
    1ff6:	5a 81       	ldd	r21, Y+2	; 0x02
    1ff8:	6b 81       	ldd	r22, Y+3	; 0x03
    1ffa:	7c 81       	ldd	r23, Y+4	; 0x04
    1ffc:	0c 2d       	mov	r16, r12
    1ffe:	1d 2d       	mov	r17, r13
    2000:	2e 2d       	mov	r18, r14
    2002:	3f 2d       	mov	r19, r15
    2004:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <put_fat>
	}
	if (res == FR_OK) {
    2008:	88 23       	and	r24, r24
    200a:	41 f5       	brne	.+80     	; 0x205c <create_chain+0x1da>
		fs->last_clust = ncl;			/* Update FSINFO */
    200c:	d1 01       	movw	r26, r2
    200e:	1a 96       	adiw	r26, 0x0a	; 10
    2010:	8c 92       	st	X, r8
    2012:	1a 97       	sbiw	r26, 0x0a	; 10
    2014:	1b 96       	adiw	r26, 0x0b	; 11
    2016:	4c 92       	st	X, r4
    2018:	1b 97       	sbiw	r26, 0x0b	; 11
    201a:	1c 96       	adiw	r26, 0x0c	; 12
    201c:	bc 92       	st	X, r11
    201e:	1c 97       	sbiw	r26, 0x0c	; 12
    2020:	1d 96       	adiw	r26, 0x0d	; 13
    2022:	ac 92       	st	X, r10
    2024:	1d 97       	sbiw	r26, 0x0d	; 13
		if (fs->free_clust != 0xFFFFFFFF) {
    2026:	1e 96       	adiw	r26, 0x0e	; 14
    2028:	8d 91       	ld	r24, X+
    202a:	9d 91       	ld	r25, X+
    202c:	0d 90       	ld	r0, X+
    202e:	bc 91       	ld	r27, X
    2030:	a0 2d       	mov	r26, r0
    2032:	8f 3f       	cpi	r24, 0xFF	; 255
    2034:	ef ef       	ldi	r30, 0xFF	; 255
    2036:	9e 07       	cpc	r25, r30
    2038:	ef ef       	ldi	r30, 0xFF	; 255
    203a:	ae 07       	cpc	r26, r30
    203c:	ef ef       	ldi	r30, 0xFF	; 255
    203e:	be 07       	cpc	r27, r30
    2040:	01 f1       	breq	.+64     	; 0x2082 <create_chain+0x200>
			fs->free_clust--;
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	a1 09       	sbc	r26, r1
    2046:	b1 09       	sbc	r27, r1
    2048:	f1 01       	movw	r30, r2
    204a:	86 87       	std	Z+14, r24	; 0x0e
    204c:	97 87       	std	Z+15, r25	; 0x0f
    204e:	a0 8b       	std	Z+16, r26	; 0x10
    2050:	b1 8b       	std	Z+17, r27	; 0x11
			fs->fsi_flag = 1;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	85 83       	std	Z+5, r24	; 0x05
    2056:	97 01       	movw	r18, r14
    2058:	86 01       	movw	r16, r12
    205a:	1a c0       	rjmp	.+52     	; 0x2090 <create_chain+0x20e>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    205c:	81 30       	cpi	r24, 0x01	; 1
    205e:	a1 f4       	brne	.+40     	; 0x2088 <create_chain+0x206>
    2060:	0f ef       	ldi	r16, 0xFF	; 255
    2062:	1f ef       	ldi	r17, 0xFF	; 255
    2064:	98 01       	movw	r18, r16
    2066:	14 c0       	rjmp	.+40     	; 0x2090 <create_chain+0x20e>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
    2068:	01 e0       	ldi	r16, 0x01	; 1
    206a:	10 e0       	ldi	r17, 0x00	; 0
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	0f c0       	rjmp	.+30     	; 0x2090 <create_chain+0x20e>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    2072:	00 e0       	ldi	r16, 0x00	; 0
    2074:	10 e0       	ldi	r17, 0x00	; 0
    2076:	98 01       	movw	r18, r16
    2078:	0b c0       	rjmp	.+22     	; 0x2090 <create_chain+0x20e>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    207a:	00 e0       	ldi	r16, 0x00	; 0
    207c:	10 e0       	ldi	r17, 0x00	; 0
    207e:	98 01       	movw	r18, r16
    2080:	07 c0       	rjmp	.+14     	; 0x2090 <create_chain+0x20e>
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
    2082:	97 01       	movw	r18, r14
    2084:	86 01       	movw	r16, r12
    2086:	04 c0       	rjmp	.+8      	; 0x2090 <create_chain+0x20e>
			fs->free_clust--;
			fs->fsi_flag = 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    2088:	01 e0       	ldi	r16, 0x01	; 1
    208a:	10 e0       	ldi	r17, 0x00	; 0
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
    2090:	60 2f       	mov	r22, r16
    2092:	71 2f       	mov	r23, r17
    2094:	82 2f       	mov	r24, r18
    2096:	93 2f       	mov	r25, r19
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	1f 91       	pop	r17
    20a6:	0f 91       	pop	r16
    20a8:	ff 90       	pop	r15
    20aa:	ef 90       	pop	r14
    20ac:	df 90       	pop	r13
    20ae:	cf 90       	pop	r12
    20b0:	bf 90       	pop	r11
    20b2:	af 90       	pop	r10
    20b4:	9f 90       	pop	r9
    20b6:	8f 90       	pop	r8
    20b8:	7f 90       	pop	r7
    20ba:	6f 90       	pop	r6
    20bc:	5f 90       	pop	r5
    20be:	4f 90       	pop	r4
    20c0:	3f 90       	pop	r3
    20c2:	2f 90       	pop	r2
    20c4:	08 95       	ret

000020c6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    20c6:	8f 92       	push	r8
    20c8:	9f 92       	push	r9
    20ca:	af 92       	push	r10
    20cc:	bf 92       	push	r11
    20ce:	cf 92       	push	r12
    20d0:	df 92       	push	r13
    20d2:	ef 92       	push	r14
    20d4:	ff 92       	push	r15
    20d6:	0f 93       	push	r16
    20d8:	1f 93       	push	r17
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	8c 01       	movw	r16, r24
    20e0:	eb 01       	movw	r28, r22
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    20e2:	dc 01       	movw	r26, r24
    20e4:	14 96       	adiw	r26, 0x04	; 4
    20e6:	ed 90       	ld	r14, X+
    20e8:	fc 90       	ld	r15, X
    20ea:	15 97       	sbiw	r26, 0x05	; 5
    20ec:	08 94       	sec
    20ee:	e1 1c       	adc	r14, r1
    20f0:	f1 1c       	adc	r15, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    20f2:	e1 14       	cp	r14, r1
    20f4:	f1 04       	cpc	r15, r1
    20f6:	09 f4       	brne	.+2      	; 0x20fa <dir_next+0x34>
    20f8:	09 c1       	rjmp	.+530    	; 0x230c <dir_next+0x246>
    20fa:	1e 96       	adiw	r26, 0x0e	; 14
    20fc:	8d 91       	ld	r24, X+
    20fe:	9d 91       	ld	r25, X+
    2100:	0d 90       	ld	r0, X+
    2102:	bc 91       	ld	r27, X
    2104:	a0 2d       	mov	r26, r0
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	a1 05       	cpc	r26, r1
    210a:	b1 05       	cpc	r27, r1
    210c:	09 f4       	brne	.+2      	; 0x2110 <dir_next+0x4a>
    210e:	00 c1       	rjmp	.+512    	; 0x2310 <dir_next+0x24a>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    2110:	0f 2e       	mov	r0, r31
    2112:	ff e0       	ldi	r31, 0x0F	; 15
    2114:	cf 2e       	mov	r12, r31
    2116:	dd 24       	eor	r13, r13
    2118:	f0 2d       	mov	r31, r0
    211a:	ce 20       	and	r12, r14
    211c:	df 20       	and	r13, r15
    211e:	c1 14       	cp	r12, r1
    2120:	d1 04       	cpc	r13, r1
    2122:	09 f0       	breq	.+2      	; 0x2126 <dir_next+0x60>
    2124:	d8 c0       	rjmp	.+432    	; 0x22d6 <dir_next+0x210>
		dj->sect++;					/* Next sector */
    2126:	01 96       	adiw	r24, 0x01	; 1
    2128:	a1 1d       	adc	r26, r1
    212a:	b1 1d       	adc	r27, r1
    212c:	f8 01       	movw	r30, r16
    212e:	86 87       	std	Z+14, r24	; 0x0e
    2130:	97 87       	std	Z+15, r25	; 0x0f
    2132:	a0 8b       	std	Z+16, r26	; 0x10
    2134:	b1 8b       	std	Z+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    2136:	42 85       	ldd	r20, Z+10	; 0x0a
    2138:	53 85       	ldd	r21, Z+11	; 0x0b
    213a:	64 85       	ldd	r22, Z+12	; 0x0c
    213c:	75 85       	ldd	r23, Z+13	; 0x0d
    213e:	41 15       	cp	r20, r1
    2140:	51 05       	cpc	r21, r1
    2142:	61 05       	cpc	r22, r1
    2144:	71 05       	cpc	r23, r1
    2146:	51 f4       	brne	.+20     	; 0x215c <dir_next+0x96>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    2148:	01 90       	ld	r0, Z+
    214a:	f0 81       	ld	r31, Z
    214c:	e0 2d       	mov	r30, r0
    214e:	80 85       	ldd	r24, Z+8	; 0x08
    2150:	91 85       	ldd	r25, Z+9	; 0x09
    2152:	e8 16       	cp	r14, r24
    2154:	f9 06       	cpc	r15, r25
    2156:	08 f0       	brcs	.+2      	; 0x215a <dir_next+0x94>
    2158:	dd c0       	rjmp	.+442    	; 0x2314 <dir_next+0x24e>
    215a:	bd c0       	rjmp	.+378    	; 0x22d6 <dir_next+0x210>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    215c:	01 90       	ld	r0, Z+
    215e:	f0 81       	ld	r31, Z
    2160:	e0 2d       	mov	r30, r0
    2162:	82 81       	ldd	r24, Z+2	; 0x02
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	97 01       	movw	r18, r14
    216a:	32 95       	swap	r19
    216c:	22 95       	swap	r18
    216e:	2f 70       	andi	r18, 0x0F	; 15
    2170:	23 27       	eor	r18, r19
    2172:	3f 70       	andi	r19, 0x0F	; 15
    2174:	23 27       	eor	r18, r19
    2176:	82 23       	and	r24, r18
    2178:	93 23       	and	r25, r19
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	09 f0       	breq	.+2      	; 0x2180 <dir_next+0xba>
    217e:	ab c0       	rjmp	.+342    	; 0x22d6 <dir_next+0x210>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    2180:	cf 01       	movw	r24, r30
    2182:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <get_fat>
    2186:	4b 01       	movw	r8, r22
    2188:	5c 01       	movw	r10, r24
				if (clst <= 1) return FR_INT_ERR;
    218a:	62 30       	cpi	r22, 0x02	; 2
    218c:	71 05       	cpc	r23, r1
    218e:	81 05       	cpc	r24, r1
    2190:	91 05       	cpc	r25, r1
    2192:	08 f4       	brcc	.+2      	; 0x2196 <dir_next+0xd0>
    2194:	c1 c0       	rjmp	.+386    	; 0x2318 <dir_next+0x252>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2196:	6f 3f       	cpi	r22, 0xFF	; 255
    2198:	ef ef       	ldi	r30, 0xFF	; 255
    219a:	7e 07       	cpc	r23, r30
    219c:	ef ef       	ldi	r30, 0xFF	; 255
    219e:	8e 07       	cpc	r24, r30
    21a0:	ef ef       	ldi	r30, 0xFF	; 255
    21a2:	9e 07       	cpc	r25, r30
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <dir_next+0xe2>
    21a6:	ba c0       	rjmp	.+372    	; 0x231c <dir_next+0x256>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    21a8:	d8 01       	movw	r26, r16
    21aa:	ed 91       	ld	r30, X+
    21ac:	fc 91       	ld	r31, X
    21ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    21b0:	93 8d       	ldd	r25, Z+27	; 0x1b
    21b2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    21b4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    21b6:	88 16       	cp	r8, r24
    21b8:	99 06       	cpc	r9, r25
    21ba:	aa 06       	cpc	r10, r26
    21bc:	bb 06       	cpc	r11, r27
    21be:	08 f4       	brcc	.+2      	; 0x21c2 <dir_next+0xfc>
    21c0:	78 c0       	rjmp	.+240    	; 0x22b2 <dir_next+0x1ec>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    21c2:	20 97       	sbiw	r28, 0x00	; 0
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <dir_next+0x102>
    21c6:	ac c0       	rjmp	.+344    	; 0x2320 <dir_next+0x25a>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    21c8:	d8 01       	movw	r26, r16
    21ca:	1a 96       	adiw	r26, 0x0a	; 10
    21cc:	4d 91       	ld	r20, X+
    21ce:	5d 91       	ld	r21, X+
    21d0:	6d 91       	ld	r22, X+
    21d2:	7c 91       	ld	r23, X
    21d4:	1d 97       	sbiw	r26, 0x0d	; 13
    21d6:	cf 01       	movw	r24, r30
    21d8:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <create_chain>
    21dc:	4b 01       	movw	r8, r22
    21de:	5c 01       	movw	r10, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    21e0:	61 15       	cp	r22, r1
    21e2:	71 05       	cpc	r23, r1
    21e4:	81 05       	cpc	r24, r1
    21e6:	91 05       	cpc	r25, r1
    21e8:	09 f4       	brne	.+2      	; 0x21ec <dir_next+0x126>
    21ea:	9c c0       	rjmp	.+312    	; 0x2324 <dir_next+0x25e>
					if (clst == 1) return FR_INT_ERR;
    21ec:	61 30       	cpi	r22, 0x01	; 1
    21ee:	71 05       	cpc	r23, r1
    21f0:	81 05       	cpc	r24, r1
    21f2:	91 05       	cpc	r25, r1
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <dir_next+0x132>
    21f6:	98 c0       	rjmp	.+304    	; 0x2328 <dir_next+0x262>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    21f8:	6f 3f       	cpi	r22, 0xFF	; 255
    21fa:	ef ef       	ldi	r30, 0xFF	; 255
    21fc:	7e 07       	cpc	r23, r30
    21fe:	ef ef       	ldi	r30, 0xFF	; 255
    2200:	8e 07       	cpc	r24, r30
    2202:	ef ef       	ldi	r30, 0xFF	; 255
    2204:	9e 07       	cpc	r25, r30
    2206:	09 f4       	brne	.+2      	; 0x220a <dir_next+0x144>
    2208:	91 c0       	rjmp	.+290    	; 0x232c <dir_next+0x266>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    220a:	d8 01       	movw	r26, r16
    220c:	8d 91       	ld	r24, X+
    220e:	9c 91       	ld	r25, X
    2210:	40 e0       	ldi	r20, 0x00	; 0
    2212:	50 e0       	ldi	r21, 0x00	; 0
    2214:	ba 01       	movw	r22, r20
    2216:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
    221a:	88 23       	and	r24, r24
    221c:	09 f0       	breq	.+2      	; 0x2220 <dir_next+0x15a>
    221e:	88 c0       	rjmp	.+272    	; 0x2330 <dir_next+0x26a>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    2220:	f8 01       	movw	r30, r16
    2222:	80 81       	ld	r24, Z
    2224:	91 81       	ldd	r25, Z+1	; 0x01
    2226:	c2 96       	adiw	r24, 0x32	; 50
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	70 e0       	ldi	r23, 0x00	; 0
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	52 e0       	ldi	r21, 0x02	; 2
    2230:	0e 94 1d 05 	call	0xa3a	; 0xa3a <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    2234:	d8 01       	movw	r26, r16
    2236:	cd 91       	ld	r28, X+
    2238:	dc 91       	ld	r29, X
    223a:	ce 01       	movw	r24, r28
    223c:	b5 01       	movw	r22, r10
    223e:	a4 01       	movw	r20, r8
    2240:	0e 94 2b 0c 	call	0x1856	; 0x1856 <clust2sect>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	8e a7       	lds	r24, 0x7e
    224a:	9f a7       	lds	r25, 0x7f
    224c:	a8 ab       	sts	0x58, r26
    224e:	b9 ab       	sts	0x59, r27
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2250:	c0 e0       	ldi	r28, 0x00	; 0
						dj->fs->wflag = 1;
    2252:	d1 e0       	ldi	r29, 0x01	; 1
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2254:	1b c0       	rjmp	.+54     	; 0x228c <dir_next+0x1c6>
						dj->fs->wflag = 1;
    2256:	d4 83       	std	Z+4, r29	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    2258:	f8 01       	movw	r30, r16
    225a:	80 81       	ld	r24, Z
    225c:	91 81       	ldd	r25, Z+1	; 0x01
    225e:	40 e0       	ldi	r20, 0x00	; 0
    2260:	50 e0       	ldi	r21, 0x00	; 0
    2262:	ba 01       	movw	r22, r20
    2264:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
    2268:	88 23       	and	r24, r24
    226a:	09 f0       	breq	.+2      	; 0x226e <dir_next+0x1a8>
    226c:	63 c0       	rjmp	.+198    	; 0x2334 <dir_next+0x26e>
						dj->fs->winsect++;
    226e:	d8 01       	movw	r26, r16
    2270:	ed 91       	ld	r30, X+
    2272:	fc 91       	ld	r31, X
    2274:	86 a5       	lds	r24, 0x66
    2276:	97 a5       	lds	r25, 0x67
    2278:	a0 a9       	sts	0x40, r26
    227a:	b1 a9       	sts	0x41, r27
    227c:	01 96       	adiw	r24, 0x01	; 1
    227e:	a1 1d       	adc	r26, r1
    2280:	b1 1d       	adc	r27, r1
    2282:	86 a7       	lds	r24, 0x76
    2284:	97 a7       	lds	r25, 0x77
    2286:	a0 ab       	sts	0x50, r26
    2288:	b1 ab       	sts	0x51, r27
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    228a:	cf 5f       	subi	r28, 0xFF	; 255
    228c:	d8 01       	movw	r26, r16
    228e:	ed 91       	ld	r30, X+
    2290:	fc 91       	ld	r31, X
    2292:	11 97       	sbiw	r26, 0x01	; 1
    2294:	82 81       	ldd	r24, Z+2	; 0x02
    2296:	c8 17       	cp	r28, r24
    2298:	f0 f2       	brcs	.-68     	; 0x2256 <dir_next+0x190>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    229a:	86 a5       	lds	r24, 0x66
    229c:	97 a5       	lds	r25, 0x67
    229e:	a0 a9       	sts	0x40, r26
    22a0:	b1 a9       	sts	0x41, r27
    22a2:	8c 1b       	sub	r24, r28
    22a4:	91 09       	sbc	r25, r1
    22a6:	a1 09       	sbc	r26, r1
    22a8:	b1 09       	sbc	r27, r1
    22aa:	86 a7       	lds	r24, 0x76
    22ac:	97 a7       	lds	r25, 0x77
    22ae:	a0 ab       	sts	0x50, r26
    22b0:	b1 ab       	sts	0x51, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    22b2:	f8 01       	movw	r30, r16
    22b4:	82 86       	std	Z+10, r8	; 0x0a
    22b6:	93 86       	std	Z+11, r9	; 0x0b
    22b8:	a4 86       	std	Z+12, r10	; 0x0c
    22ba:	b5 86       	std	Z+13, r11	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    22bc:	80 81       	ld	r24, Z
    22be:	91 81       	ldd	r25, Z+1	; 0x01
    22c0:	b5 01       	movw	r22, r10
    22c2:	a4 01       	movw	r20, r8
    22c4:	0e 94 2b 0c 	call	0x1856	; 0x1856 <clust2sect>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	f8 01       	movw	r30, r16
    22ce:	86 87       	std	Z+14, r24	; 0x0e
    22d0:	97 87       	std	Z+15, r25	; 0x0f
    22d2:	a0 8b       	std	Z+16, r26	; 0x10
    22d4:	b1 8b       	std	Z+17, r27	; 0x11
			}
		}
	}

	dj->index = i;
    22d6:	d8 01       	movw	r26, r16
    22d8:	15 96       	adiw	r26, 0x05	; 5
    22da:	fc 92       	st	X, r15
    22dc:	ee 92       	st	-X, r14
    22de:	14 97       	sbiw	r26, 0x04	; 4
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    22e0:	8d 91       	ld	r24, X+
    22e2:	9c 91       	ld	r25, X
    22e4:	11 97       	sbiw	r26, 0x01	; 1
    22e6:	c2 96       	adiw	r24, 0x32	; 50
    22e8:	cc 0c       	add	r12, r12
    22ea:	dd 1c       	adc	r13, r13
    22ec:	cc 0c       	add	r12, r12
    22ee:	dd 1c       	adc	r13, r13
    22f0:	cc 0c       	add	r12, r12
    22f2:	dd 1c       	adc	r13, r13
    22f4:	cc 0c       	add	r12, r12
    22f6:	dd 1c       	adc	r13, r13
    22f8:	cc 0c       	add	r12, r12
    22fa:	dd 1c       	adc	r13, r13
    22fc:	8c 0d       	add	r24, r12
    22fe:	9d 1d       	adc	r25, r13
    2300:	53 96       	adiw	r26, 0x13	; 19
    2302:	9c 93       	st	X, r25
    2304:	8e 93       	st	-X, r24
    2306:	52 97       	sbiw	r26, 0x12	; 18

	return FR_OK;
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	15 c0       	rjmp	.+42     	; 0x2336 <dir_next+0x270>


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
    230c:	84 e0       	ldi	r24, 0x04	; 4
    230e:	13 c0       	rjmp	.+38     	; 0x2336 <dir_next+0x270>
    2310:	84 e0       	ldi	r24, 0x04	; 4
    2312:	11 c0       	rjmp	.+34     	; 0x2336 <dir_next+0x270>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
    2314:	84 e0       	ldi	r24, 0x04	; 4
    2316:	0f c0       	rjmp	.+30     	; 0x2336 <dir_next+0x270>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	0d c0       	rjmp	.+26     	; 0x2336 <dir_next+0x270>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	0b c0       	rjmp	.+22     	; 0x2336 <dir_next+0x270>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    2320:	84 e0       	ldi	r24, 0x04	; 4
    2322:	09 c0       	rjmp	.+18     	; 0x2336 <dir_next+0x270>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    2324:	87 e0       	ldi	r24, 0x07	; 7
    2326:	07 c0       	rjmp	.+14     	; 0x2336 <dir_next+0x270>
					if (clst == 1) return FR_INT_ERR;
    2328:	82 e0       	ldi	r24, 0x02	; 2
    232a:	05 c0       	rjmp	.+10     	; 0x2336 <dir_next+0x270>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	03 c0       	rjmp	.+6      	; 0x2336 <dir_next+0x270>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	01 c0       	rjmp	.+2      	; 0x2336 <dir_next+0x270>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    2334:	81 e0       	ldi	r24, 0x01	; 1

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	1f 91       	pop	r17
    233c:	0f 91       	pop	r16
    233e:	ff 90       	pop	r15
    2340:	ef 90       	pop	r14
    2342:	df 90       	pop	r13
    2344:	cf 90       	pop	r12
    2346:	bf 90       	pop	r11
    2348:	af 90       	pop	r10
    234a:	9f 90       	pop	r9
    234c:	8f 90       	pop	r8
    234e:	08 95       	ret

00002350 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    2350:	2f 92       	push	r2
    2352:	3f 92       	push	r3
    2354:	4f 92       	push	r4
    2356:	5f 92       	push	r5
    2358:	6f 92       	push	r6
    235a:	7f 92       	push	r7
    235c:	8f 92       	push	r8
    235e:	9f 92       	push	r9
    2360:	af 92       	push	r10
    2362:	bf 92       	push	r11
    2364:	cf 92       	push	r12
    2366:	df 92       	push	r13
    2368:	ef 92       	push	r14
    236a:	ff 92       	push	r15
    236c:	0f 93       	push	r16
    236e:	1f 93       	push	r17
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	00 d0       	rcall	.+0      	; 0x2376 <follow_path+0x26>
    2376:	00 d0       	rcall	.+0      	; 0x2378 <follow_path+0x28>
    2378:	00 d0       	rcall	.+0      	; 0x237a <follow_path+0x2a>
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
    237e:	8c 01       	movw	r16, r24
    2380:	5b 01       	movw	r10, r22
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    2382:	db 01       	movw	r26, r22
    2384:	8c 91       	ld	r24, X
    2386:	8f 32       	cpi	r24, 0x2F	; 47
    2388:	11 f0       	breq	.+4      	; 0x238e <follow_path+0x3e>
    238a:	8c 35       	cpi	r24, 0x5C	; 92
    238c:	49 f4       	brne	.+18     	; 0x23a0 <follow_path+0x50>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    238e:	08 94       	sec
    2390:	a1 1c       	adc	r10, r1
    2392:	b1 1c       	adc	r11, r1
    2394:	f8 01       	movw	r30, r16
    2396:	16 82       	std	Z+6, r1	; 0x06
    2398:	17 82       	std	Z+7, r1	; 0x07
    239a:	10 86       	std	Z+8, r1	; 0x08
    239c:	11 86       	std	Z+9, r1	; 0x09
    239e:	0c c0       	rjmp	.+24     	; 0x23b8 <follow_path+0x68>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    23a0:	d8 01       	movw	r26, r16
    23a2:	ed 91       	ld	r30, X+
    23a4:	fc 91       	ld	r31, X
    23a6:	86 89       	ldd	r24, Z+22	; 0x16
    23a8:	97 89       	ldd	r25, Z+23	; 0x17
    23aa:	a0 8d       	ldd	r26, Z+24	; 0x18
    23ac:	b1 8d       	ldd	r27, Z+25	; 0x19
    23ae:	f8 01       	movw	r30, r16
    23b0:	86 83       	std	Z+6, r24	; 0x06
    23b2:	97 83       	std	Z+7, r25	; 0x07
    23b4:	a0 87       	std	Z+8, r26	; 0x08
    23b6:	b1 87       	std	Z+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    23b8:	d5 01       	movw	r26, r10
    23ba:	8c 91       	ld	r24, X
    23bc:	80 32       	cpi	r24, 0x20	; 32
    23be:	50 f4       	brcc	.+20     	; 0x23d4 <follow_path+0x84>
		res = dir_sdi(dj, 0);
    23c0:	c8 01       	movw	r24, r16
    23c2:	60 e0       	ldi	r22, 0x00	; 0
    23c4:	70 e0       	ldi	r23, 0x00	; 0
    23c6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <dir_sdi>
    23ca:	48 2f       	mov	r20, r24
		dj->dir = 0;
    23cc:	f8 01       	movw	r30, r16
    23ce:	13 8a       	std	Z+19, r1	; 0x13
    23d0:	12 8a       	std	Z+18, r1	; 0x12
    23d2:	6b c1       	rjmp	.+726    	; 0x26aa <follow_path+0x35a>
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
    23d4:	0f 2e       	mov	r0, r31
    23d6:	fb e0       	ldi	r31, 0x0B	; 11
    23d8:	6f 2e       	mov	r6, r31
    23da:	77 24       	eor	r7, r7
    23dc:	f0 2d       	mov	r31, r0
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    23de:	ee 24       	eor	r14, r14
    23e0:	ff 24       	eor	r15, r15
    23e2:	44 24       	eor	r4, r4
    23e4:	55 24       	eor	r5, r5
    23e6:	68 94       	set
    23e8:	43 f8       	bld	r4, 3
    23ea:	88 24       	eor	r8, r8
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    23ec:	49 82       	std	Y+1, r4	; 0x01
    23ee:	5a 82       	std	Y+2, r5	; 0x02
    23f0:	6b 82       	std	Y+3, r6	; 0x03
    23f2:	7c 82       	std	Y+4, r7	; 0x04
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    23f4:	0f 2e       	mov	r0, r31
    23f6:	f3 e0       	ldi	r31, 0x03	; 3
    23f8:	2f 2e       	mov	r2, r31
    23fa:	33 24       	eor	r3, r3
    23fc:	f0 2d       	mov	r31, r0
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
		res = dir_sdi(dj, 0);
		dj->dir = 0;
    23fe:	f5 01       	movw	r30, r10
    2400:	9f 01       	movw	r18, r30
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    2402:	81 91       	ld	r24, Z+
    2404:	8f 32       	cpi	r24, 0x2F	; 47
    2406:	e1 f3       	breq	.-8      	; 0x2400 <follow_path+0xb0>
    2408:	8c 35       	cpi	r24, 0x5C	; 92
    240a:	d1 f3       	breq	.-12     	; 0x2400 <follow_path+0xb0>
    240c:	3e 83       	std	Y+6, r19	; 0x06
    240e:	2d 83       	std	Y+5, r18	; 0x05
	sfn = dj->fn;
    2410:	d8 01       	movw	r26, r16
    2412:	54 96       	adiw	r26, 0x14	; 20
    2414:	cd 90       	ld	r12, X+
    2416:	dc 90       	ld	r13, X
    2418:	55 97       	sbiw	r26, 0x15	; 21
	mem_set(sfn, ' ', 11);
    241a:	c6 01       	movw	r24, r12
    241c:	60 e2       	ldi	r22, 0x20	; 32
    241e:	70 e0       	ldi	r23, 0x00	; 0
    2420:	a3 01       	movw	r20, r6
    2422:	0e 94 1d 05 	call	0xa3a	; 0xa3a <mem_set>
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    2426:	ed 81       	ldd	r30, Y+5	; 0x05
    2428:	fe 81       	ldd	r31, Y+6	; 0x06
    242a:	80 81       	ld	r24, Z
    242c:	8e 32       	cpi	r24, 0x2E	; 46
    242e:	49 f5       	brne	.+82     	; 0x2482 <follow_path+0x132>
		for (;;) {
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
    2430:	ee e2       	ldi	r30, 0x2E	; 46
    2432:	d6 01       	movw	r26, r12
    2434:	ec 93       	st	X, r30
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    2436:	ad 81       	ldd	r26, Y+5	; 0x05
    2438:	be 81       	ldd	r27, Y+6	; 0x06
    243a:	11 96       	adiw	r26, 0x01	; 1
    243c:	2c 91       	ld	r18, X
    243e:	11 97       	sbiw	r26, 0x01	; 1
			if (c != '.' || si >= 3) break;
    2440:	2e 32       	cpi	r18, 0x2E	; 46
    2442:	49 f4       	brne	.+18     	; 0x2456 <follow_path+0x106>
			sfn[i++] = c;
    2444:	f6 01       	movw	r30, r12
    2446:	81 83       	std	Z+1, r24	; 0x01
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    2448:	12 96       	adiw	r26, 0x02	; 2
    244a:	2c 91       	ld	r18, X
    244c:	12 97       	sbiw	r26, 0x02	; 2
			if (c != '.' || si >= 3) break;
    244e:	2e 32       	cpi	r18, 0x2E	; 46
    2450:	49 f0       	breq	.+18     	; 0x2464 <follow_path+0x114>
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    2452:	c1 01       	movw	r24, r2
    2454:	02 c0       	rjmp	.+4      	; 0x245a <follow_path+0x10a>
    2456:	82 e0       	ldi	r24, 0x02	; 2
    2458:	90 e0       	ldi	r25, 0x00	; 0
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    245a:	2f 32       	cpi	r18, 0x2F	; 47
    245c:	41 f0       	breq	.+16     	; 0x246e <follow_path+0x11e>
    245e:	2c 35       	cpi	r18, 0x5C	; 92
    2460:	31 f0       	breq	.+12     	; 0x246e <follow_path+0x11e>
    2462:	01 c0       	rjmp	.+2      	; 0x2466 <follow_path+0x116>
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    2464:	c1 01       	movw	r24, r2
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    2466:	21 32       	cpi	r18, 0x21	; 33
    2468:	08 f0       	brcs	.+2      	; 0x246c <follow_path+0x11c>
    246a:	0e c1       	rjmp	.+540    	; 0x2688 <follow_path+0x338>
    246c:	38 c1       	rjmp	.+624    	; 0x26de <follow_path+0x38e>
		*path = &p[si];									/* Return pointer to the next segment */
    246e:	ad 80       	ldd	r10, Y+5	; 0x05
    2470:	be 80       	ldd	r11, Y+6	; 0x06
    2472:	a8 0e       	add	r10, r24
    2474:	b9 1e       	adc	r11, r25
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    2476:	80 e2       	ldi	r24, 0x20	; 32
    2478:	d6 01       	movw	r26, r12
    247a:	1b 96       	adiw	r26, 0x0b	; 11
    247c:	8c 93       	st	X, r24
    247e:	1b 97       	sbiw	r26, 0x0b	; 11
    2480:	3b c1       	rjmp	.+630    	; 0x26f8 <follow_path+0x3a8>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    2482:	b7 01       	movw	r22, r14
    2484:	a7 01       	movw	r20, r14
    2486:	d2 01       	movw	r26, r4
    2488:	98 2c       	mov	r9, r8
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    248a:	ed 81       	ldd	r30, Y+5	; 0x05
    248c:	fe 81       	ldd	r31, Y+6	; 0x06
    248e:	e4 0f       	add	r30, r20
    2490:	f5 1f       	adc	r31, r21
    2492:	20 81       	ld	r18, Z
    2494:	5a 01       	movw	r10, r20
    2496:	08 94       	sec
    2498:	a1 1c       	adc	r10, r1
    249a:	b1 1c       	adc	r11, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    249c:	21 32       	cpi	r18, 0x21	; 33
    249e:	08 f4       	brcc	.+2      	; 0x24a2 <follow_path+0x152>
    24a0:	69 c0       	rjmp	.+210    	; 0x2574 <follow_path+0x224>
    24a2:	2f 32       	cpi	r18, 0x2F	; 47
    24a4:	09 f4       	brne	.+2      	; 0x24a8 <follow_path+0x158>
    24a6:	21 c1       	rjmp	.+578    	; 0x26ea <follow_path+0x39a>
    24a8:	2c 35       	cpi	r18, 0x5C	; 92
    24aa:	09 f4       	brne	.+2      	; 0x24ae <follow_path+0x15e>
    24ac:	1e c1       	rjmp	.+572    	; 0x26ea <follow_path+0x39a>
		if (c == '.' || i >= ni) {
    24ae:	2e 32       	cpi	r18, 0x2E	; 46
    24b0:	19 f0       	breq	.+6      	; 0x24b8 <follow_path+0x168>
    24b2:	6a 17       	cp	r22, r26
    24b4:	7b 07       	cpc	r23, r27
    24b6:	78 f0       	brcs	.+30     	; 0x24d6 <follow_path+0x186>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    24b8:	a8 30       	cpi	r26, 0x08	; 8
    24ba:	b1 05       	cpc	r27, r1
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <follow_path+0x170>
    24be:	e6 c0       	rjmp	.+460    	; 0x268c <follow_path+0x33c>
    24c0:	2e 32       	cpi	r18, 0x2E	; 46
    24c2:	09 f0       	breq	.+2      	; 0x24c6 <follow_path+0x176>
    24c4:	e5 c0       	rjmp	.+458    	; 0x2690 <follow_path+0x340>
			i = 8; ni = 11;
			b <<= 2; continue;
    24c6:	99 0c       	add	r9, r9
    24c8:	99 0c       	add	r9, r9
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    24ca:	a5 01       	movw	r20, r10
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    24cc:	69 81       	ldd	r22, Y+1	; 0x01
    24ce:	7a 81       	ldd	r23, Y+2	; 0x02
    24d0:	ab 81       	ldd	r26, Y+3	; 0x03
    24d2:	bc 81       	ldd	r27, Y+4	; 0x04
    24d4:	da cf       	rjmp	.-76     	; 0x248a <follow_path+0x13a>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char? */
    24d6:	22 23       	and	r18, r18
    24d8:	14 f4       	brge	.+4      	; 0x24de <follow_path+0x18e>
			b |= 3;						/* Eliminate NT flag */
    24da:	f3 e0       	ldi	r31, 0x03	; 3
    24dc:	9f 2a       	or	r9, r31
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    24de:	82 2f       	mov	r24, r18
    24e0:	81 58       	subi	r24, 0x81	; 129
    24e2:	8f 31       	cpi	r24, 0x1F	; 31
    24e4:	18 f0       	brcs	.+6      	; 0x24ec <follow_path+0x19c>
    24e6:	8f 55       	subi	r24, 0x5F	; 95
    24e8:	8d 31       	cpi	r24, 0x1D	; 29
    24ea:	e8 f4       	brcc	.+58     	; 0x2526 <follow_path+0x1d6>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    24ec:	ed 81       	ldd	r30, Y+5	; 0x05
    24ee:	fe 81       	ldd	r31, Y+6	; 0x06
    24f0:	ea 0d       	add	r30, r10
    24f2:	fb 1d       	adc	r31, r11
    24f4:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    24f6:	83 2f       	mov	r24, r19
    24f8:	80 54       	subi	r24, 0x40	; 64
    24fa:	8f 33       	cpi	r24, 0x3F	; 63
    24fc:	20 f0       	brcs	.+8      	; 0x2506 <follow_path+0x1b6>
    24fe:	80 54       	subi	r24, 0x40	; 64
    2500:	8d 37       	cpi	r24, 0x7D	; 125
    2502:	08 f0       	brcs	.+2      	; 0x2506 <follow_path+0x1b6>
    2504:	c7 c0       	rjmp	.+398    	; 0x2694 <follow_path+0x344>
    2506:	cd 01       	movw	r24, r26
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	68 17       	cp	r22, r24
    250c:	79 07       	cpc	r23, r25
    250e:	08 f0       	brcs	.+2      	; 0x2512 <follow_path+0x1c2>
    2510:	c3 c0       	rjmp	.+390    	; 0x2698 <follow_path+0x348>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    2512:	4e 5f       	subi	r20, 0xFE	; 254
    2514:	5f 4f       	sbci	r21, 0xFF	; 255
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    2516:	f6 01       	movw	r30, r12
    2518:	e6 0f       	add	r30, r22
    251a:	f7 1f       	adc	r31, r23
    251c:	20 83       	st	Z, r18
			sfn[i++] = d;
    251e:	31 83       	std	Z+1, r19	; 0x01
    2520:	6e 5f       	subi	r22, 0xFE	; 254
    2522:	7f 4f       	sbci	r23, 0xFF	; 255
    2524:	b2 cf       	rjmp	.-156    	; 0x248a <follow_path+0x13a>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    2526:	42 2f       	mov	r20, r18
    2528:	50 e0       	ldi	r21, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    252a:	42 32       	cpi	r20, 0x22	; 34
    252c:	51 05       	cpc	r21, r1
    252e:	09 f4       	brne	.+2      	; 0x2532 <follow_path+0x1e2>
    2530:	b5 c0       	rjmp	.+362    	; 0x269c <follow_path+0x34c>
    2532:	e2 e0       	ldi	r30, 0x02	; 2
    2534:	f1 e0       	ldi	r31, 0x01	; 1
    2536:	81 91       	ld	r24, Z+
    2538:	88 23       	and	r24, r24
    253a:	31 f0       	breq	.+12     	; 0x2548 <follow_path+0x1f8>
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	48 17       	cp	r20, r24
    2540:	59 07       	cpc	r21, r25
    2542:	c9 f7       	brne	.-14     	; 0x2536 <follow_path+0x1e6>
    2544:	46 e0       	ldi	r20, 0x06	; 6
    2546:	b1 c0       	rjmp	.+354    	; 0x26aa <follow_path+0x35a>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    2548:	82 2f       	mov	r24, r18
    254a:	81 54       	subi	r24, 0x41	; 65
    254c:	8a 31       	cpi	r24, 0x1A	; 26
    254e:	18 f4       	brcc	.+6      	; 0x2556 <follow_path+0x206>
				b |= 2;
    2550:	f2 e0       	ldi	r31, 0x02	; 2
    2552:	9f 2a       	or	r9, r31
    2554:	07 c0       	rjmp	.+14     	; 0x2564 <follow_path+0x214>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    2556:	82 2f       	mov	r24, r18
    2558:	81 56       	subi	r24, 0x61	; 97
    255a:	8a 31       	cpi	r24, 0x1A	; 26
    255c:	18 f4       	brcc	.+6      	; 0x2564 <follow_path+0x214>
					b |= 1; c -= 0x20;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	98 2a       	or	r9, r24
    2562:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    2564:	f6 01       	movw	r30, r12
    2566:	e6 0f       	add	r30, r22
    2568:	f7 1f       	adc	r31, r23
    256a:	20 83       	st	Z, r18
    256c:	6f 5f       	subi	r22, 0xFF	; 255
    256e:	7f 4f       	sbci	r23, 0xFF	; 255
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    2570:	a5 01       	movw	r20, r10
    2572:	8b cf       	rjmp	.-234    	; 0x248a <follow_path+0x13a>
    2574:	ed 81       	ldd	r30, Y+5	; 0x05
    2576:	fe 81       	ldd	r31, Y+6	; 0x06
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    2578:	ae 0e       	add	r10, r30
    257a:	bf 1e       	adc	r11, r31
    257c:	89 2d       	mov	r24, r9
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    257e:	44 e0       	ldi	r20, 0x04	; 4

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    2580:	61 15       	cp	r22, r1
    2582:	71 05       	cpc	r23, r1
    2584:	09 f4       	brne	.+2      	; 0x2588 <follow_path+0x238>
    2586:	8c c0       	rjmp	.+280    	; 0x26a0 <follow_path+0x350>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    2588:	f6 01       	movw	r30, r12
    258a:	90 81       	ld	r25, Z
    258c:	95 3e       	cpi	r25, 0xE5	; 229
    258e:	11 f4       	brne	.+4      	; 0x2594 <follow_path+0x244>
    2590:	95 e0       	ldi	r25, 0x05	; 5
    2592:	90 83       	st	Z, r25

	if (ni == 8) b <<= 2;
    2594:	a8 30       	cpi	r26, 0x08	; 8
    2596:	b1 05       	cpc	r27, r1
    2598:	19 f4       	brne	.+6      	; 0x25a0 <follow_path+0x250>
    259a:	98 2e       	mov	r9, r24
    259c:	99 0c       	add	r9, r9
    259e:	99 0c       	add	r9, r9
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    25a0:	89 2d       	mov	r24, r9
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9c 01       	movw	r18, r24
    25a6:	23 70       	andi	r18, 0x03	; 3
    25a8:	30 70       	andi	r19, 0x00	; 0
    25aa:	21 30       	cpi	r18, 0x01	; 1
    25ac:	31 05       	cpc	r19, r1
    25ae:	09 f4       	brne	.+2      	; 0x25b2 <follow_path+0x262>
    25b0:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    25b2:	8c 70       	andi	r24, 0x0C	; 12
    25b4:	90 70       	andi	r25, 0x00	; 0
    25b6:	84 30       	cpi	r24, 0x04	; 4
    25b8:	91 05       	cpc	r25, r1
    25ba:	09 f4       	brne	.+2      	; 0x25be <follow_path+0x26e>
    25bc:	48 60       	ori	r20, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    25be:	d6 01       	movw	r26, r12
    25c0:	1b 96       	adiw	r26, 0x0b	; 11
    25c2:	4c 93       	st	X, r20
    25c4:	1b 97       	sbiw	r26, 0x0b	; 11
    25c6:	98 c0       	rjmp	.+304    	; 0x26f8 <follow_path+0x3a8>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    25c8:	f8 01       	movw	r30, r16
    25ca:	46 85       	ldd	r20, Z+14	; 0x0e
    25cc:	57 85       	ldd	r21, Z+15	; 0x0f
    25ce:	60 89       	ldd	r22, Z+16	; 0x10
    25d0:	71 89       	ldd	r23, Z+17	; 0x11
    25d2:	80 81       	ld	r24, Z
    25d4:	91 81       	ldd	r25, Z+1	; 0x01
    25d6:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
		if (res != FR_OK) break;
    25da:	88 23       	and	r24, r24
    25dc:	41 f5       	brne	.+80     	; 0x262e <follow_path+0x2de>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    25de:	d8 01       	movw	r26, r16
    25e0:	52 96       	adiw	r26, 0x12	; 18
    25e2:	4d 91       	ld	r20, X+
    25e4:	5c 91       	ld	r21, X
    25e6:	53 97       	sbiw	r26, 0x13	; 19
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    25e8:	fa 01       	movw	r30, r20
    25ea:	90 81       	ld	r25, Z
    25ec:	99 23       	and	r25, r25
    25ee:	09 f4       	brne	.+2      	; 0x25f2 <follow_path+0x2a2>
    25f0:	92 c0       	rjmp	.+292    	; 0x2716 <follow_path+0x3c6>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    25f2:	93 85       	ldd	r25, Z+11	; 0x0b
    25f4:	93 fd       	sbrc	r25, 3
    25f6:	13 c0       	rjmp	.+38     	; 0x261e <follow_path+0x2ce>
    25f8:	54 96       	adiw	r26, 0x14	; 20
    25fa:	6d 91       	ld	r22, X+
    25fc:	7c 91       	ld	r23, X
    25fe:	55 97       	sbiw	r26, 0x15	; 21
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    2600:	9a 01       	movw	r18, r20
    2602:	25 5f       	subi	r18, 0xF5	; 245
    2604:	3f 4f       	sbci	r19, 0xFF	; 255
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    2606:	db 01       	movw	r26, r22
    2608:	6a 01       	movw	r12, r20
    260a:	48 2f       	mov	r20, r24
    260c:	04 c0       	rjmp	.+8      	; 0x2616 <follow_path+0x2c6>
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    260e:	e2 17       	cp	r30, r18
    2610:	f3 07       	cpc	r31, r19
    2612:	09 f4       	brne	.+2      	; 0x2616 <follow_path+0x2c6>
    2614:	7a c0       	rjmp	.+244    	; 0x270a <follow_path+0x3ba>
    2616:	91 91       	ld	r25, Z+
    2618:	8d 91       	ld	r24, X+
    261a:	98 17       	cp	r25, r24
    261c:	c1 f3       	breq	.-16     	; 0x260e <follow_path+0x2be>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    261e:	c8 01       	movw	r24, r16
    2620:	b7 01       	movw	r22, r14
    2622:	0e 94 63 10 	call	0x20c6	; 0x20c6 <dir_next>
	} while (res == FR_OK);
    2626:	88 23       	and	r24, r24
    2628:	79 f2       	breq	.-98     	; 0x25c8 <follow_path+0x278>
    262a:	48 2f       	mov	r20, r24
    262c:	01 c0       	rjmp	.+2      	; 0x2630 <follow_path+0x2e0>
    262e:	48 2f       	mov	r20, r24
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    2630:	d8 01       	movw	r26, r16
    2632:	54 96       	adiw	r26, 0x14	; 20
    2634:	ed 91       	ld	r30, X+
    2636:	fc 91       	ld	r31, X
    2638:	55 97       	sbiw	r26, 0x15	; 21
    263a:	83 85       	ldd	r24, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
    263c:	44 30       	cpi	r20, 0x04	; 4
    263e:	a9 f5       	brne	.+106    	; 0x26aa <follow_path+0x35a>
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
    2640:	85 ff       	sbrs	r24, 5
    2642:	0b c0       	rjmp	.+22     	; 0x265a <follow_path+0x30a>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
    2644:	f8 01       	movw	r30, r16
    2646:	16 82       	std	Z+6, r1	; 0x06
    2648:	17 82       	std	Z+7, r1	; 0x07
    264a:	10 86       	std	Z+8, r1	; 0x08
    264c:	11 86       	std	Z+9, r1	; 0x09
    264e:	13 8a       	std	Z+19, r1	; 0x13
    2650:	12 8a       	std	Z+18, r1	; 0x12
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
    2652:	82 ff       	sbrs	r24, 2
    2654:	d4 ce       	rjmp	.-600    	; 0x23fe <follow_path+0xae>
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
    2656:	40 e0       	ldi	r20, 0x00	; 0
    2658:	28 c0       	rjmp	.+80     	; 0x26aa <follow_path+0x35a>
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    265a:	82 ff       	sbrs	r24, 2
    265c:	23 c0       	rjmp	.+70     	; 0x26a4 <follow_path+0x354>
		dj->dir = 0;
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
    265e:	44 e0       	ldi	r20, 0x04	; 4
    2660:	24 c0       	rjmp	.+72     	; 0x26aa <follow_path+0x35a>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    2662:	1b 96       	adiw	r26, 0x0b	; 11
    2664:	8c 91       	ld	r24, X
    2666:	1b 97       	sbiw	r26, 0x0b	; 11
    2668:	84 ff       	sbrs	r24, 4
    266a:	1e c0       	rjmp	.+60     	; 0x26a8 <follow_path+0x358>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ld_clust(dj->fs, dir);
    266c:	f8 01       	movw	r30, r16
    266e:	80 81       	ld	r24, Z
    2670:	91 81       	ldd	r25, Z+1	; 0x01
    2672:	bd 01       	movw	r22, r26
    2674:	0e 94 27 05 	call	0xa4e	; 0xa4e <ld_clust>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	f8 01       	movw	r30, r16
    267e:	86 83       	std	Z+6, r24	; 0x06
    2680:	97 83       	std	Z+7, r25	; 0x07
    2682:	a0 87       	std	Z+8, r26	; 0x08
    2684:	b1 87       	std	Z+9, r27	; 0x09
    2686:	bb ce       	rjmp	.-650    	; 0x23fe <follow_path+0xae>
		for (;;) {
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    2688:	46 e0       	ldi	r20, 0x06	; 6
    268a:	0f c0       	rjmp	.+30     	; 0x26aa <follow_path+0x35a>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    268c:	46 e0       	ldi	r20, 0x06	; 6
    268e:	0d c0       	rjmp	.+26     	; 0x26aa <follow_path+0x35a>
    2690:	46 e0       	ldi	r20, 0x06	; 6
    2692:	0b c0       	rjmp	.+22     	; 0x26aa <follow_path+0x35a>
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    2694:	46 e0       	ldi	r20, 0x06	; 6
    2696:	09 c0       	rjmp	.+18     	; 0x26aa <follow_path+0x35a>
    2698:	46 e0       	ldi	r20, 0x06	; 6
    269a:	07 c0       	rjmp	.+14     	; 0x26aa <follow_path+0x35a>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    269c:	46 e0       	ldi	r20, 0x06	; 6
    269e:	05 c0       	rjmp	.+10     	; 0x26aa <follow_path+0x35a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    26a0:	46 e0       	ldi	r20, 0x06	; 6
    26a2:	03 c0       	rjmp	.+6      	; 0x26aa <follow_path+0x35a>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    26a4:	45 e0       	ldi	r20, 0x05	; 5
    26a6:	01 c0       	rjmp	.+2      	; 0x26aa <follow_path+0x35a>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    26a8:	45 e0       	ldi	r20, 0x05	; 5
			dj->sclust = ld_clust(dj->fs, dir);
		}
	}

	return res;
}
    26aa:	84 2f       	mov	r24, r20
    26ac:	26 96       	adiw	r28, 0x06	; 6
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	1f 91       	pop	r17
    26be:	0f 91       	pop	r16
    26c0:	ff 90       	pop	r15
    26c2:	ef 90       	pop	r14
    26c4:	df 90       	pop	r13
    26c6:	cf 90       	pop	r12
    26c8:	bf 90       	pop	r11
    26ca:	af 90       	pop	r10
    26cc:	9f 90       	pop	r9
    26ce:	8f 90       	pop	r8
    26d0:	7f 90       	pop	r7
    26d2:	6f 90       	pop	r6
    26d4:	5f 90       	pop	r5
    26d6:	4f 90       	pop	r4
    26d8:	3f 90       	pop	r3
    26da:	2f 90       	pop	r2
    26dc:	08 95       	ret
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
		*path = &p[si];									/* Return pointer to the next segment */
    26de:	ad 80       	ldd	r10, Y+5	; 0x05
    26e0:	be 80       	ldd	r11, Y+6	; 0x06
    26e2:	a8 0e       	add	r10, r24
    26e4:	b9 1e       	adc	r11, r25
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    26e6:	84 e2       	ldi	r24, 0x24	; 36
    26e8:	c7 ce       	rjmp	.-626    	; 0x2478 <follow_path+0x128>
    26ea:	8d 81       	ldd	r24, Y+5	; 0x05
    26ec:	9e 81       	ldd	r25, Y+6	; 0x06
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    26ee:	a8 0e       	add	r10, r24
    26f0:	b9 1e       	adc	r11, r25
    26f2:	89 2d       	mov	r24, r9
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    26f4:	48 2d       	mov	r20, r8
    26f6:	44 cf       	rjmp	.-376    	; 0x2580 <follow_path+0x230>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    26f8:	c8 01       	movw	r24, r16
    26fa:	b7 01       	movw	r22, r14
    26fc:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <dir_sdi>
    2700:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    2702:	88 23       	and	r24, r24
    2704:	09 f4       	brne	.+2      	; 0x2708 <follow_path+0x3b8>
    2706:	60 cf       	rjmp	.-320    	; 0x25c8 <follow_path+0x278>
    2708:	93 cf       	rjmp	.-218    	; 0x2630 <follow_path+0x2e0>
    270a:	d6 01       	movw	r26, r12
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    270c:	fb 01       	movw	r30, r22
    270e:	83 85       	ldd	r24, Z+11	; 0x0b
    2710:	82 ff       	sbrs	r24, 2
    2712:	a7 cf       	rjmp	.-178    	; 0x2662 <follow_path+0x312>
    2714:	ca cf       	rjmp	.-108    	; 0x26aa <follow_path+0x35a>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    2716:	d8 01       	movw	r26, r16
    2718:	54 96       	adiw	r26, 0x14	; 20
    271a:	ed 91       	ld	r30, X+
    271c:	fc 91       	ld	r31, X
    271e:	55 97       	sbiw	r26, 0x15	; 21
    2720:	83 85       	ldd	r24, Z+11	; 0x0b
    2722:	8e cf       	rjmp	.-228    	; 0x2640 <follow_path+0x2f0>

00002724 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    2724:	ef 92       	push	r14
    2726:	ff 92       	push	r15
    2728:	0f 93       	push	r16
    272a:	1f 93       	push	r17
    272c:	cf 93       	push	r28
    272e:	8c 01       	movw	r16, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    2730:	60 e0       	ldi	r22, 0x00	; 0
    2732:	70 e0       	ldi	r23, 0x00	; 0
    2734:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <dir_sdi>
    2738:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
    273a:	88 23       	and	r24, r24
    273c:	d9 f5       	brne	.+118    	; 0x27b4 <dir_register+0x90>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    273e:	d8 01       	movw	r26, r16
    2740:	1e 96       	adiw	r26, 0x0e	; 14
    2742:	4d 91       	ld	r20, X+
    2744:	5d 91       	ld	r21, X+
    2746:	6d 91       	ld	r22, X+
    2748:	7c 91       	ld	r23, X
    274a:	51 97       	sbiw	r26, 0x11	; 17
    274c:	8d 91       	ld	r24, X+
    274e:	9c 91       	ld	r25, X
    2750:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
    2754:	c8 2f       	mov	r28, r24
			if (res != FR_OK) break;
    2756:	88 23       	and	r24, r24
    2758:	69 f5       	brne	.+90     	; 0x27b4 <dir_register+0x90>
			c = *dj->dir;
    275a:	d8 01       	movw	r26, r16
    275c:	52 96       	adiw	r26, 0x12	; 18
    275e:	ed 91       	ld	r30, X+
    2760:	fc 91       	ld	r31, X
    2762:	53 97       	sbiw	r26, 0x13	; 19
    2764:	80 81       	ld	r24, Z
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    2766:	85 3e       	cpi	r24, 0xE5	; 229
    2768:	61 f1       	breq	.+88     	; 0x27c2 <dir_register+0x9e>
    276a:	88 23       	and	r24, r24
    276c:	51 f1       	breq	.+84     	; 0x27c2 <dir_register+0x9e>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    276e:	c8 01       	movw	r24, r16
    2770:	61 e0       	ldi	r22, 0x01	; 1
    2772:	70 e0       	ldi	r23, 0x00	; 0
    2774:	0e 94 63 10 	call	0x20c6	; 0x20c6 <dir_next>
    2778:	c8 2f       	mov	r28, r24
		} while (res == FR_OK);
    277a:	88 23       	and	r24, r24
    277c:	01 f3       	breq	.-64     	; 0x273e <dir_register+0x1a>
    277e:	1a c0       	rjmp	.+52     	; 0x27b4 <dir_register+0x90>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    2780:	f8 01       	movw	r30, r16
    2782:	e2 88       	ldd	r14, Z+18	; 0x12
    2784:	f3 88       	ldd	r15, Z+19	; 0x13
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    2786:	c7 01       	movw	r24, r14
    2788:	60 e0       	ldi	r22, 0x00	; 0
    278a:	70 e0       	ldi	r23, 0x00	; 0
    278c:	40 e2       	ldi	r20, 0x20	; 32
    278e:	50 e0       	ldi	r21, 0x00	; 0
    2790:	0e 94 1d 05 	call	0xa3a	; 0xa3a <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    2794:	d8 01       	movw	r26, r16
    2796:	54 96       	adiw	r26, 0x14	; 20
    2798:	6d 91       	ld	r22, X+
    279a:	7c 91       	ld	r23, X
    279c:	55 97       	sbiw	r26, 0x15	; 21
    279e:	c7 01       	movw	r24, r14
    27a0:	4b e0       	ldi	r20, 0x0B	; 11
    27a2:	50 e0       	ldi	r21, 0x00	; 0
    27a4:	0e 94 10 05 	call	0xa20	; 0xa20 <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    27a8:	d8 01       	movw	r26, r16
    27aa:	ed 91       	ld	r30, X+
    27ac:	fc 91       	ld	r31, X
    27ae:	11 97       	sbiw	r26, 0x01	; 1
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    27b4:	8c 2f       	mov	r24, r28
    27b6:	cf 91       	pop	r28
    27b8:	1f 91       	pop	r17
    27ba:	0f 91       	pop	r16
    27bc:	ff 90       	pop	r15
    27be:	ef 90       	pop	r14
    27c0:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    27c2:	f8 01       	movw	r30, r16
    27c4:	46 85       	ldd	r20, Z+14	; 0x0e
    27c6:	57 85       	ldd	r21, Z+15	; 0x0f
    27c8:	60 89       	ldd	r22, Z+16	; 0x10
    27ca:	71 89       	ldd	r23, Z+17	; 0x11
    27cc:	80 81       	ld	r24, Z
    27ce:	91 81       	ldd	r25, Z+1	; 0x01
    27d0:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
    27d4:	c8 2f       	mov	r28, r24
		if (res == FR_OK) {
    27d6:	88 23       	and	r24, r24
    27d8:	69 f7       	brne	.-38     	; 0x27b4 <dir_register+0x90>
    27da:	d2 cf       	rjmp	.-92     	; 0x2780 <dir_register+0x5c>

000027dc <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    27dc:	cf 93       	push	r28
    27de:	df 93       	push	r29
    27e0:	ec 01       	movw	r28, r24
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
    27e2:	84 e0       	ldi	r24, 0x04	; 4
	while (dj->sect) {
    27e4:	17 c0       	rjmp	.+46     	; 0x2814 <dir_read+0x38>
		res = move_window(dj->fs, dj->sect);
    27e6:	88 81       	ld	r24, Y
    27e8:	99 81       	ldd	r25, Y+1	; 0x01
    27ea:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
		if (res != FR_OK) break;
    27ee:	88 23       	and	r24, r24
    27f0:	e1 f4       	brne	.+56     	; 0x282a <dir_read+0x4e>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    27f2:	ea 89       	ldd	r30, Y+18	; 0x12
    27f4:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    27f6:	90 81       	ld	r25, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    27f8:	99 23       	and	r25, r25
    27fa:	f1 f0       	breq	.+60     	; 0x2838 <dir_read+0x5c>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    27fc:	95 3e       	cpi	r25, 0xE5	; 229
    27fe:	19 f0       	breq	.+6      	; 0x2806 <dir_read+0x2a>
    2800:	93 85       	ldd	r25, Z+11	; 0x0b
    2802:	93 ff       	sbrs	r25, 3
    2804:	16 c0       	rjmp	.+44     	; 0x2832 <dir_read+0x56>
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    2806:	ce 01       	movw	r24, r28
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	70 e0       	ldi	r23, 0x00	; 0
    280c:	0e 94 63 10 	call	0x20c6	; 0x20c6 <dir_next>
		if (res != FR_OK) break;
    2810:	88 23       	and	r24, r24
    2812:	59 f4       	brne	.+22     	; 0x282a <dir_read+0x4e>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    2814:	4e 85       	ldd	r20, Y+14	; 0x0e
    2816:	5f 85       	ldd	r21, Y+15	; 0x0f
    2818:	68 89       	ldd	r22, Y+16	; 0x10
    281a:	79 89       	ldd	r23, Y+17	; 0x11
    281c:	41 15       	cp	r20, r1
    281e:	51 05       	cpc	r21, r1
    2820:	61 05       	cpc	r22, r1
    2822:	71 05       	cpc	r23, r1
    2824:	01 f7       	brne	.-64     	; 0x27e6 <dir_read+0xa>
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    2826:	88 23       	and	r24, r24
    2828:	21 f0       	breq	.+8      	; 0x2832 <dir_read+0x56>
    282a:	1e 86       	std	Y+14, r1	; 0x0e
    282c:	1f 86       	std	Y+15, r1	; 0x0f
    282e:	18 8a       	std	Y+16, r1	; 0x10
    2830:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    2832:	df 91       	pop	r29
    2834:	cf 91       	pop	r28
    2836:	08 95       	ret
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2838:	84 e0       	ldi	r24, 0x04	; 4
    283a:	f7 cf       	rjmp	.-18     	; 0x282a <dir_read+0x4e>

0000283c <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    283c:	7f 92       	push	r7
    283e:	8f 92       	push	r8
    2840:	9f 92       	push	r9
    2842:	af 92       	push	r10
    2844:	bf 92       	push	r11
    2846:	cf 92       	push	r12
    2848:	df 92       	push	r13
    284a:	ef 92       	push	r14
    284c:	ff 92       	push	r15
    284e:	0f 93       	push	r16
    2850:	1f 93       	push	r17
    2852:	cf 93       	push	r28
    2854:	df 93       	push	r29
    2856:	ec 01       	movw	r28, r24
    2858:	4a 01       	movw	r8, r20
    285a:	5b 01       	movw	r10, r22
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    285c:	42 30       	cpi	r20, 0x02	; 2
    285e:	51 05       	cpc	r21, r1
    2860:	61 05       	cpc	r22, r1
    2862:	71 05       	cpc	r23, r1
    2864:	08 f4       	brcc	.+2      	; 0x2868 <remove_chain+0x2c>
    2866:	55 c0       	rjmp	.+170    	; 0x2912 <remove_chain+0xd6>
    2868:	8a 8d       	ldd	r24, Y+26	; 0x1a
    286a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    286c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    286e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2870:	48 17       	cp	r20, r24
    2872:	59 07       	cpc	r21, r25
    2874:	6a 07       	cpc	r22, r26
    2876:	7b 07       	cpc	r23, r27
    2878:	08 f0       	brcs	.+2      	; 0x287c <remove_chain+0x40>
    287a:	4d c0       	rjmp	.+154    	; 0x2916 <remove_chain+0xda>
    287c:	03 c0       	rjmp	.+6      	; 0x2884 <remove_chain+0x48>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    287e:	46 01       	movw	r8, r12
    2880:	57 01       	movw	r10, r14
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <remove_chain+0x4c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
				fs->fsi_flag = 1;
    2884:	77 24       	eor	r7, r7
    2886:	73 94       	inc	r7
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    2888:	ce 01       	movw	r24, r28
    288a:	b5 01       	movw	r22, r10
    288c:	a4 01       	movw	r20, r8
    288e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <get_fat>
    2892:	6b 01       	movw	r12, r22
    2894:	7c 01       	movw	r14, r24
			if (nxt == 0) break;				/* Empty cluster? */
    2896:	61 15       	cp	r22, r1
    2898:	71 05       	cpc	r23, r1
    289a:	81 05       	cpc	r24, r1
    289c:	91 05       	cpc	r25, r1
    289e:	e9 f1       	breq	.+122    	; 0x291a <remove_chain+0xde>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    28a0:	91 e0       	ldi	r25, 0x01	; 1
    28a2:	c9 16       	cp	r12, r25
    28a4:	d1 04       	cpc	r13, r1
    28a6:	e1 04       	cpc	r14, r1
    28a8:	f1 04       	cpc	r15, r1
    28aa:	c9 f1       	breq	.+114    	; 0x291e <remove_chain+0xe2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    28ac:	8f ef       	ldi	r24, 0xFF	; 255
    28ae:	c8 16       	cp	r12, r24
    28b0:	8f ef       	ldi	r24, 0xFF	; 255
    28b2:	d8 06       	cpc	r13, r24
    28b4:	8f ef       	ldi	r24, 0xFF	; 255
    28b6:	e8 06       	cpc	r14, r24
    28b8:	8f ef       	ldi	r24, 0xFF	; 255
    28ba:	f8 06       	cpc	r15, r24
    28bc:	91 f1       	breq	.+100    	; 0x2922 <remove_chain+0xe6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    28be:	ce 01       	movw	r24, r28
    28c0:	b5 01       	movw	r22, r10
    28c2:	a4 01       	movw	r20, r8
    28c4:	00 e0       	ldi	r16, 0x00	; 0
    28c6:	10 e0       	ldi	r17, 0x00	; 0
    28c8:	98 01       	movw	r18, r16
    28ca:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <put_fat>
			if (res != FR_OK) break;
    28ce:	88 23       	and	r24, r24
    28d0:	49 f5       	brne	.+82     	; 0x2924 <remove_chain+0xe8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    28d2:	4e 85       	ldd	r20, Y+14	; 0x0e
    28d4:	5f 85       	ldd	r21, Y+15	; 0x0f
    28d6:	68 89       	ldd	r22, Y+16	; 0x10
    28d8:	79 89       	ldd	r23, Y+17	; 0x11
    28da:	4f 3f       	cpi	r20, 0xFF	; 255
    28dc:	9f ef       	ldi	r25, 0xFF	; 255
    28de:	59 07       	cpc	r21, r25
    28e0:	9f ef       	ldi	r25, 0xFF	; 255
    28e2:	69 07       	cpc	r22, r25
    28e4:	9f ef       	ldi	r25, 0xFF	; 255
    28e6:	79 07       	cpc	r23, r25
    28e8:	49 f0       	breq	.+18     	; 0x28fc <remove_chain+0xc0>
				fs->free_clust++;
    28ea:	4f 5f       	subi	r20, 0xFF	; 255
    28ec:	5f 4f       	sbci	r21, 0xFF	; 255
    28ee:	6f 4f       	sbci	r22, 0xFF	; 255
    28f0:	7f 4f       	sbci	r23, 0xFF	; 255
    28f2:	4e 87       	std	Y+14, r20	; 0x0e
    28f4:	5f 87       	std	Y+15, r21	; 0x0f
    28f6:	68 8b       	std	Y+16, r22	; 0x10
    28f8:	79 8b       	std	Y+17, r23	; 0x11
				fs->fsi_flag = 1;
    28fa:	7d 82       	std	Y+5, r7	; 0x05
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    28fc:	4a 8d       	ldd	r20, Y+26	; 0x1a
    28fe:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2900:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2902:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2904:	c4 16       	cp	r12, r20
    2906:	d5 06       	cpc	r13, r21
    2908:	e6 06       	cpc	r14, r22
    290a:	f7 06       	cpc	r15, r23
    290c:	08 f4       	brcc	.+2      	; 0x2910 <remove_chain+0xd4>
    290e:	b7 cf       	rjmp	.-146    	; 0x287e <remove_chain+0x42>
    2910:	09 c0       	rjmp	.+18     	; 0x2924 <remove_chain+0xe8>
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    2912:	82 e0       	ldi	r24, 0x02	; 2
    2914:	07 c0       	rjmp	.+14     	; 0x2924 <remove_chain+0xe8>
    2916:	82 e0       	ldi	r24, 0x02	; 2
    2918:	05 c0       	rjmp	.+10     	; 0x2924 <remove_chain+0xe8>

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	03 c0       	rjmp	.+6      	; 0x2924 <remove_chain+0xe8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    291e:	82 e0       	ldi	r24, 0x02	; 2
    2920:	01 c0       	rjmp	.+2      	; 0x2924 <remove_chain+0xe8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    2922:	81 e0       	ldi	r24, 0x01	; 1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	1f 91       	pop	r17
    292a:	0f 91       	pop	r16
    292c:	ff 90       	pop	r15
    292e:	ef 90       	pop	r14
    2930:	df 90       	pop	r13
    2932:	cf 90       	pop	r12
    2934:	bf 90       	pop	r11
    2936:	af 90       	pop	r10
    2938:	9f 90       	pop	r9
    293a:	8f 90       	pop	r8
    293c:	7f 90       	pop	r7
    293e:	08 95       	ret

00002940 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    2940:	88 23       	and	r24, r24
    2942:	91 f4       	brne	.+36     	; 0x2968 <f_mount+0x28>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
    2944:	e0 91 2b 01 	lds	r30, 0x012B
    2948:	f0 91 2c 01 	lds	r31, 0x012C

	if (rfs) {
    294c:	30 97       	sbiw	r30, 0x00	; 0
    294e:	09 f0       	breq	.+2      	; 0x2952 <f_mount+0x12>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    2950:	10 82       	st	Z, r1
	}

	if (fs) {
    2952:	61 15       	cp	r22, r1
    2954:	71 05       	cpc	r23, r1
    2956:	11 f0       	breq	.+4      	; 0x295c <f_mount+0x1c>
		fs->fs_type = 0;		/* Clear new fs object */
    2958:	fb 01       	movw	r30, r22
    295a:	10 82       	st	Z, r1
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    295c:	70 93 2c 01 	sts	0x012C, r23
    2960:	60 93 2b 01 	sts	0x012B, r22

	return FR_OK;
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	08 95       	ret
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    2968:	8b e0       	ldi	r24, 0x0B	; 11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    296a:	08 95       	ret

0000296c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    296c:	4f 92       	push	r4
    296e:	5f 92       	push	r5
    2970:	6f 92       	push	r6
    2972:	7f 92       	push	r7
    2974:	8f 92       	push	r8
    2976:	9f 92       	push	r9
    2978:	af 92       	push	r10
    297a:	bf 92       	push	r11
    297c:	cf 92       	push	r12
    297e:	df 92       	push	r13
    2980:	ef 92       	push	r14
    2982:	ff 92       	push	r15
    2984:	0f 93       	push	r16
    2986:	1f 93       	push	r17
    2988:	cf 93       	push	r28
    298a:	df 93       	push	r29
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
    2990:	a4 97       	sbiw	r28, 0x24	; 36
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	7c 01       	movw	r14, r24
    299e:	7c a3       	lds	r23, 0x5c
    29a0:	6b a3       	lds	r22, 0x5b
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    29a2:	00 97       	sbiw	r24, 0x00	; 0
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <f_open+0x3c>
    29a6:	ea c0       	rjmp	.+468    	; 0x2b7c <f_open+0x210>
	fp->fs = 0;			/* Clear file object */
    29a8:	fc 01       	movw	r30, r24
    29aa:	11 82       	std	Z+1, r1	; 0x01
    29ac:	10 82       	st	Z, r1

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    29ae:	04 2f       	mov	r16, r20
    29b0:	0f 71       	andi	r16, 0x1F	; 31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    29b2:	4e 71       	andi	r20, 0x1E	; 30
    29b4:	ce 01       	movw	r24, r28
    29b6:	83 96       	adiw	r24, 0x23	; 35
    29b8:	be 01       	movw	r22, r28
    29ba:	6f 5f       	subi	r22, 0xFF	; 255
    29bc:	7f 4f       	sbci	r23, 0xFF	; 255
    29be:	0e 94 a4 06 	call	0xd48	; 0xd48 <chk_mounted>
    29c2:	18 2f       	mov	r17, r24
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
    29c4:	88 23       	and	r24, r24
    29c6:	09 f0       	breq	.+2      	; 0x29ca <f_open+0x5e>
    29c8:	da c0       	rjmp	.+436    	; 0x2b7e <f_open+0x212>
		INIT_BUF(dj);
    29ca:	ce 01       	movw	r24, r28
    29cc:	47 96       	adiw	r24, 0x17	; 23
    29ce:	9e 8b       	std	Y+22, r25	; 0x16
    29d0:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    29d2:	6b a1       	lds	r22, 0x4b
    29d4:	7c a1       	lds	r23, 0x4c
    29d6:	ce 01       	movw	r24, r28
    29d8:	01 96       	adiw	r24, 0x01	; 1
    29da:	0e 94 a8 11 	call	0x2350	; 0x2350 <follow_path>
		dir = dj.dir;
    29de:	cb 88       	ldd	r12, Y+19	; 0x13
    29e0:	dc 88       	ldd	r13, Y+20	; 0x14
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    29e2:	88 23       	and	r24, r24
    29e4:	21 f4       	brne	.+8      	; 0x29ee <f_open+0x82>
			if (!dir)	/* Current dir itself */
    29e6:	c1 14       	cp	r12, r1
    29e8:	d1 04       	cpc	r13, r1
    29ea:	09 f4       	brne	.+2      	; 0x29ee <f_open+0x82>
				res = FR_INVALID_NAME;
    29ec:	86 e0       	ldi	r24, 0x06	; 6
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    29ee:	40 2f       	mov	r20, r16
    29f0:	50 e0       	ldi	r21, 0x00	; 0
    29f2:	9a 01       	movw	r18, r20
    29f4:	2c 71       	andi	r18, 0x1C	; 28
    29f6:	30 70       	andi	r19, 0x00	; 0
    29f8:	21 15       	cp	r18, r1
    29fa:	31 05       	cpc	r19, r1
    29fc:	09 f4       	brne	.+2      	; 0x2a00 <f_open+0x94>
    29fe:	5b c0       	rjmp	.+182    	; 0x2ab6 <f_open+0x14a>
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
    2a00:	88 23       	and	r24, r24
    2a02:	71 f0       	breq	.+28     	; 0x2a20 <f_open+0xb4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    2a04:	84 30       	cpi	r24, 0x04	; 4
    2a06:	09 f0       	breq	.+2      	; 0x2a0a <f_open+0x9e>
    2a08:	b7 c0       	rjmp	.+366    	; 0x2b78 <f_open+0x20c>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    2a0a:	ce 01       	movw	r24, r28
    2a0c:	01 96       	adiw	r24, 0x01	; 1
    2a0e:	0e 94 92 13 	call	0x2724	; 0x2724 <dir_register>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
    2a12:	cb 88       	ldd	r12, Y+19	; 0x13
    2a14:	dc 88       	ldd	r13, Y+20	; 0x14
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    2a16:	88 23       	and	r24, r24
    2a18:	09 f0       	breq	.+2      	; 0x2a1c <f_open+0xb0>
    2a1a:	ae c0       	rjmp	.+348    	; 0x2b78 <f_open+0x20c>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    2a1c:	08 60       	ori	r16, 0x08	; 8
    2a1e:	07 c0       	rjmp	.+14     	; 0x2a2e <f_open+0xc2>
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    2a20:	f6 01       	movw	r30, r12
    2a22:	83 85       	ldd	r24, Z+11	; 0x0b
    2a24:	81 71       	andi	r24, 0x11	; 17
    2a26:	09 f0       	breq	.+2      	; 0x2a2a <f_open+0xbe>
    2a28:	c2 c0       	rjmp	.+388    	; 0x2bae <f_open+0x242>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    2a2a:	02 fd       	sbrc	r16, 2
    2a2c:	c2 c0       	rjmp	.+388    	; 0x2bb2 <f_open+0x246>
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    2a2e:	03 ff       	sbrs	r16, 3
    2a30:	c6 c0       	rjmp	.+396    	; 0x2bbe <f_open+0x252>
				dw = get_fattime();					/* Created time */
    2a32:	0e 94 27 0c 	call	0x184e	; 0x184e <get_fattime>
				ST_DWORD(dir+DIR_CrtTime, dw);
    2a36:	f6 01       	movw	r30, r12
    2a38:	66 87       	std	Z+14, r22	; 0x0e
    2a3a:	77 87       	std	Z+15, r23	; 0x0f
    2a3c:	80 8b       	std	Z+16, r24	; 0x10
    2a3e:	91 8b       	std	Z+17, r25	; 0x11
				dir[DIR_Attr] = 0;					/* Reset attribute */
    2a40:	13 86       	std	Z+11, r1	; 0x0b
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    2a42:	14 8e       	std	Z+28, r1	; 0x1c
    2a44:	15 8e       	std	Z+29, r1	; 0x1d
    2a46:	16 8e       	std	Z+30, r1	; 0x1e
    2a48:	17 8e       	std	Z+31, r1	; 0x1f
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4e:	b6 01       	movw	r22, r12
    2a50:	0e 94 27 05 	call	0xa4e	; 0xa4e <ld_clust>
    2a54:	4b 01       	movw	r8, r22
    2a56:	5c 01       	movw	r10, r24
				st_clust(dir, 0);					/* cluster = 0 */
    2a58:	c6 01       	movw	r24, r12
    2a5a:	40 e0       	ldi	r20, 0x00	; 0
    2a5c:	50 e0       	ldi	r21, 0x00	; 0
    2a5e:	ba 01       	movw	r22, r20
    2a60:	0e 94 4c 05 	call	0xa98	; 0xa98 <st_clust>
				dj.fs->wflag = 1;
    2a64:	e9 81       	ldd	r30, Y+1	; 0x01
    2a66:	fa 81       	ldd	r31, Y+2	; 0x02
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	84 83       	std	Z+4, r24	; 0x04
				if (cl) {							/* Remove the cluster chain if exist */
    2a6c:	81 14       	cp	r8, r1
    2a6e:	91 04       	cpc	r9, r1
    2a70:	a1 04       	cpc	r10, r1
    2a72:	b1 04       	cpc	r11, r1
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <f_open+0x10c>
    2a76:	a3 c0       	rjmp	.+326    	; 0x2bbe <f_open+0x252>
					dw = dj.fs->winsect;
    2a78:	46 a4       	lds	r20, 0xa6
    2a7a:	57 a4       	lds	r21, 0xa7
    2a7c:	60 a8       	sts	0x00, r22
    2a7e:	71 a8       	sts	0x81, r23
					res = remove_chain(dj.fs, cl);
    2a80:	cf 01       	movw	r24, r30
    2a82:	b5 01       	movw	r22, r10
    2a84:	a4 01       	movw	r20, r8
    2a86:	0e 94 1e 14 	call	0x283c	; 0x283c <remove_chain>
					if (res == FR_OK) {
    2a8a:	88 23       	and	r24, r24
    2a8c:	09 f0       	breq	.+2      	; 0x2a90 <f_open+0x124>
    2a8e:	74 c0       	rjmp	.+232    	; 0x2b78 <f_open+0x20c>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2a90:	e9 81       	ldd	r30, Y+1	; 0x01
    2a92:	fa 81       	ldd	r31, Y+2	; 0x02
    2a94:	d5 01       	movw	r26, r10
    2a96:	c4 01       	movw	r24, r8
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	a1 09       	sbc	r26, r1
    2a9c:	b1 09       	sbc	r27, r1
    2a9e:	82 87       	std	Z+10, r24	; 0x0a
    2aa0:	93 87       	std	Z+11, r25	; 0x0b
    2aa2:	a4 87       	std	Z+12, r26	; 0x0c
    2aa4:	b5 87       	std	Z+13, r27	; 0x0d
						res = move_window(dj.fs, dw);
    2aa6:	cf 01       	movw	r24, r30
    2aa8:	b3 01       	movw	r22, r6
    2aaa:	a2 01       	movw	r20, r4
    2aac:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    2ab0:	88 23       	and	r24, r24
    2ab2:	69 f0       	breq	.+26     	; 0x2ace <f_open+0x162>
    2ab4:	61 c0       	rjmp	.+194    	; 0x2b78 <f_open+0x20c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
    2ab6:	88 23       	and	r24, r24
    2ab8:	09 f0       	breq	.+2      	; 0x2abc <f_open+0x150>
    2aba:	5e c0       	rjmp	.+188    	; 0x2b78 <f_open+0x20c>
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    2abc:	f6 01       	movw	r30, r12
    2abe:	83 85       	ldd	r24, Z+11	; 0x0b
    2ac0:	84 fd       	sbrc	r24, 4
    2ac2:	79 c0       	rjmp	.+242    	; 0x2bb6 <f_open+0x24a>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2ac4:	01 ff       	sbrs	r16, 1
    2ac6:	7b c0       	rjmp	.+246    	; 0x2bbe <f_open+0x252>
    2ac8:	80 fd       	sbrc	r24, 0
    2aca:	77 c0       	rjmp	.+238    	; 0x2bba <f_open+0x24e>
    2acc:	78 c0       	rjmp	.+240    	; 0x2bbe <f_open+0x252>
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
				mode |= FA__WRITTEN;
    2ace:	00 62       	ori	r16, 0x20	; 32
			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    2ad0:	a9 80       	ldd	r10, Y+1	; 0x01
    2ad2:	ba 80       	ldd	r11, Y+2	; 0x02
    2ad4:	f5 01       	movw	r30, r10
    2ad6:	86 a5       	lds	r24, 0x66
    2ad8:	97 a5       	lds	r25, 0x67
    2ada:	a0 a9       	sts	0x40, r26
    2adc:	b1 a9       	sts	0x41, r27
    2ade:	f7 01       	movw	r30, r14
    2ae0:	82 8f       	std	Z+26, r24	; 0x1a
    2ae2:	93 8f       	std	Z+27, r25	; 0x1b
    2ae4:	a4 8f       	std	Z+28, r26	; 0x1c
    2ae6:	b5 8f       	std	Z+29, r27	; 0x1d
			fp->dir_ptr = dir;
    2ae8:	d7 8e       	std	Z+31, r13	; 0x1f
    2aea:	c6 8e       	std	Z+30, r12	; 0x1e
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    2aec:	04 83       	std	Z+4, r16	; 0x04
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    2aee:	c5 01       	movw	r24, r10
    2af0:	b6 01       	movw	r22, r12
    2af2:	0e 94 27 05 	call	0xa4e	; 0xa4e <ld_clust>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	f7 01       	movw	r30, r14
    2afc:	86 87       	std	Z+14, r24	; 0x0e
    2afe:	97 87       	std	Z+15, r25	; 0x0f
    2b00:	a0 8b       	std	Z+16, r26	; 0x10
    2b02:	b1 8b       	std	Z+17, r27	; 0x11
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2b04:	f6 01       	movw	r30, r12
    2b06:	87 8d       	ldd	r24, Z+31	; 0x1f
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	a0 e0       	ldi	r26, 0x00	; 0
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	78 2f       	mov	r23, r24
    2b10:	66 27       	eor	r22, r22
    2b12:	55 27       	eor	r21, r21
    2b14:	44 27       	eor	r20, r20
    2b16:	86 8d       	ldd	r24, Z+30	; 0x1e
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	a0 e0       	ldi	r26, 0x00	; 0
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
    2b1e:	dc 01       	movw	r26, r24
    2b20:	99 27       	eor	r25, r25
    2b22:	88 27       	eor	r24, r24
    2b24:	48 2b       	or	r20, r24
    2b26:	59 2b       	or	r21, r25
    2b28:	6a 2b       	or	r22, r26
    2b2a:	7b 2b       	or	r23, r27
    2b2c:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	a0 e0       	ldi	r26, 0x00	; 0
    2b32:	b0 e0       	ldi	r27, 0x00	; 0
    2b34:	48 2b       	or	r20, r24
    2b36:	59 2b       	or	r21, r25
    2b38:	6a 2b       	or	r22, r26
    2b3a:	7b 2b       	or	r23, r27
    2b3c:	95 8d       	ldd	r25, Z+29	; 0x1d
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	a0 e0       	ldi	r26, 0x00	; 0
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	84 2b       	or	r24, r20
    2b46:	95 2b       	or	r25, r21
    2b48:	a6 2b       	or	r26, r22
    2b4a:	b7 2b       	or	r27, r23
    2b4c:	f7 01       	movw	r30, r14
    2b4e:	82 87       	std	Z+10, r24	; 0x0a
    2b50:	93 87       	std	Z+11, r25	; 0x0b
    2b52:	a4 87       	std	Z+12, r26	; 0x0c
    2b54:	b5 87       	std	Z+13, r27	; 0x0d
			fp->fptr = 0;						/* File pointer */
    2b56:	16 82       	std	Z+6, r1	; 0x06
    2b58:	17 82       	std	Z+7, r1	; 0x07
    2b5a:	10 86       	std	Z+8, r1	; 0x08
    2b5c:	11 86       	std	Z+9, r1	; 0x09
			fp->dsect = 0;
    2b5e:	16 8a       	std	Z+22, r1	; 0x16
    2b60:	17 8a       	std	Z+23, r1	; 0x17
    2b62:	10 8e       	std	Z+24, r1	; 0x18
    2b64:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    2b66:	b1 82       	std	Z+1, r11	; 0x01
    2b68:	a0 82       	st	Z, r10
    2b6a:	f5 01       	movw	r30, r10
    2b6c:	86 81       	ldd	r24, Z+6	; 0x06
    2b6e:	97 81       	ldd	r25, Z+7	; 0x07
    2b70:	f7 01       	movw	r30, r14
    2b72:	93 83       	std	Z+3, r25	; 0x03
    2b74:	82 83       	std	Z+2, r24	; 0x02
    2b76:	03 c0       	rjmp	.+6      	; 0x2b7e <f_open+0x212>
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    2b78:	18 2f       	mov	r17, r24
    2b7a:	01 c0       	rjmp	.+2      	; 0x2b7e <f_open+0x212>
    2b7c:	19 e0       	ldi	r17, 0x09	; 9
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
		}
	}

	LEAVE_FF(dj.fs, res);
}
    2b7e:	81 2f       	mov	r24, r17
    2b80:	a4 96       	adiw	r28, 0x24	; 36
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	f8 94       	cli
    2b86:	de bf       	out	0x3e, r29	; 62
    2b88:	0f be       	out	0x3f, r0	; 63
    2b8a:	cd bf       	out	0x3d, r28	; 61
    2b8c:	df 91       	pop	r29
    2b8e:	cf 91       	pop	r28
    2b90:	1f 91       	pop	r17
    2b92:	0f 91       	pop	r16
    2b94:	ff 90       	pop	r15
    2b96:	ef 90       	pop	r14
    2b98:	df 90       	pop	r13
    2b9a:	cf 90       	pop	r12
    2b9c:	bf 90       	pop	r11
    2b9e:	af 90       	pop	r10
    2ba0:	9f 90       	pop	r9
    2ba2:	8f 90       	pop	r8
    2ba4:	7f 90       	pop	r7
    2ba6:	6f 90       	pop	r6
    2ba8:	5f 90       	pop	r5
    2baa:	4f 90       	pop	r4
    2bac:	08 95       	ret
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
    2bae:	87 e0       	ldi	r24, 0x07	; 7
    2bb0:	e3 cf       	rjmp	.-58     	; 0x2b78 <f_open+0x20c>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
    2bb2:	88 e0       	ldi	r24, 0x08	; 8
    2bb4:	e1 cf       	rjmp	.-62     	; 0x2b78 <f_open+0x20c>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
    2bb6:	84 e0       	ldi	r24, 0x04	; 4
    2bb8:	df cf       	rjmp	.-66     	; 0x2b78 <f_open+0x20c>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
    2bba:	87 e0       	ldi	r24, 0x07	; 7
    2bbc:	dd cf       	rjmp	.-70     	; 0x2b78 <f_open+0x20c>
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    2bbe:	03 ff       	sbrs	r16, 3
    2bc0:	87 cf       	rjmp	.-242    	; 0x2ad0 <f_open+0x164>
    2bc2:	85 cf       	rjmp	.-246    	; 0x2ace <f_open+0x162>

00002bc4 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    2bc4:	2f 92       	push	r2
    2bc6:	3f 92       	push	r3
    2bc8:	4f 92       	push	r4
    2bca:	5f 92       	push	r5
    2bcc:	6f 92       	push	r6
    2bce:	7f 92       	push	r7
    2bd0:	8f 92       	push	r8
    2bd2:	9f 92       	push	r9
    2bd4:	af 92       	push	r10
    2bd6:	bf 92       	push	r11
    2bd8:	cf 92       	push	r12
    2bda:	df 92       	push	r13
    2bdc:	ff 92       	push	r15
    2bde:	0f 93       	push	r16
    2be0:	1f 93       	push	r17
    2be2:	cf 93       	push	r28
    2be4:	df 93       	push	r29
    2be6:	00 d0       	rcall	.+0      	; 0x2be8 <f_read+0x24>
    2be8:	00 d0       	rcall	.+0      	; 0x2bea <f_read+0x26>
    2bea:	00 d0       	rcall	.+0      	; 0x2bec <f_read+0x28>
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	9e 83       	std	Y+6, r25	; 0x06
    2bf2:	8d 83       	std	Y+5, r24	; 0x05
    2bf4:	06 2f       	mov	r16, r22
    2bf6:	17 2f       	mov	r17, r23
    2bf8:	6a 01       	movw	r12, r20
    2bfa:	19 01       	movw	r2, r18
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Clear read byte counter */
    2bfc:	d9 01       	movw	r26, r18
    2bfe:	1d 92       	st	X+, r1
    2c00:	1c 92       	st	X, r1

	res = validate(fp);							/* Check validity */
    2c02:	0e 94 e7 05 	call	0xbce	; 0xbce <validate>
    2c06:	f8 2e       	mov	r15, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2c08:	88 23       	and	r24, r24
    2c0a:	09 f0       	breq	.+2      	; 0x2c0e <f_read+0x4a>
    2c0c:	a0 c1       	rjmp	.+832    	; 0x2f4e <f_read+0x38a>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    2c0e:	ed 81       	ldd	r30, Y+5	; 0x05
    2c10:	fe 81       	ldd	r31, Y+6	; 0x06
    2c12:	84 81       	ldd	r24, Z+4	; 0x04
    2c14:	88 23       	and	r24, r24
    2c16:	0c f4       	brge	.+2      	; 0x2c1a <f_read+0x56>
    2c18:	92 c1       	rjmp	.+804    	; 0x2f3e <f_read+0x37a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    2c1a:	80 ff       	sbrs	r24, 0
    2c1c:	94 c1       	rjmp	.+808    	; 0x2f46 <f_read+0x382>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    2c1e:	82 85       	ldd	r24, Z+10	; 0x0a
    2c20:	93 85       	ldd	r25, Z+11	; 0x0b
    2c22:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c24:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c26:	46 81       	ldd	r20, Z+6	; 0x06
    2c28:	57 81       	ldd	r21, Z+7	; 0x07
    2c2a:	60 85       	ldd	r22, Z+8	; 0x08
    2c2c:	71 85       	ldd	r23, Z+9	; 0x09
    2c2e:	84 1b       	sub	r24, r20
    2c30:	95 0b       	sbc	r25, r21
    2c32:	a6 0b       	sbc	r26, r22
    2c34:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    2c36:	a6 01       	movw	r20, r12
    2c38:	60 e0       	ldi	r22, 0x00	; 0
    2c3a:	70 e0       	ldi	r23, 0x00	; 0
    2c3c:	84 17       	cp	r24, r20
    2c3e:	95 07       	cpc	r25, r21
    2c40:	a6 07       	cpc	r26, r22
    2c42:	b7 07       	cpc	r27, r23
    2c44:	08 f4       	brcc	.+2      	; 0x2c48 <f_read+0x84>
    2c46:	6c 01       	movw	r12, r24

	for ( ;  btr;								/* Repeat until all data read */
    2c48:	c1 14       	cp	r12, r1
    2c4a:	d1 04       	cpc	r13, r1
    2c4c:	09 f4       	brne	.+2      	; 0x2c50 <f_read+0x8c>
    2c4e:	7f c1       	rjmp	.+766    	; 0x2f4e <f_read+0x38a>
    2c50:	09 83       	std	Y+1, r16	; 0x01
    2c52:	1a 83       	std	Y+2, r17	; 0x02
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
					fp->flag &= ~FA__DIRTY;
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
    2c54:	2d 81       	ldd	r18, Y+5	; 0x05
    2c56:	3e 81       	ldd	r19, Y+6	; 0x06
    2c58:	20 5e       	subi	r18, 0xE0	; 224
    2c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5c:	3c 83       	std	Y+4, r19	; 0x04
    2c5e:	2b 83       	std	Y+3, r18	; 0x03
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    2c60:	ad 81       	ldd	r26, Y+5	; 0x05
    2c62:	be 81       	ldd	r27, Y+6	; 0x06
    2c64:	16 96       	adiw	r26, 0x06	; 6
    2c66:	4d 91       	ld	r20, X+
    2c68:	5d 91       	ld	r21, X+
    2c6a:	6d 91       	ld	r22, X+
    2c6c:	7c 91       	ld	r23, X
    2c6e:	19 97       	sbiw	r26, 0x09	; 9
    2c70:	db 01       	movw	r26, r22
    2c72:	ca 01       	movw	r24, r20
    2c74:	91 70       	andi	r25, 0x01	; 1
    2c76:	a0 70       	andi	r26, 0x00	; 0
    2c78:	b0 70       	andi	r27, 0x00	; 0
    2c7a:	00 97       	sbiw	r24, 0x00	; 0
    2c7c:	a1 05       	cpc	r26, r1
    2c7e:	b1 05       	cpc	r27, r1
    2c80:	09 f0       	breq	.+2      	; 0x2c84 <f_read+0xc0>
    2c82:	1a c1       	rjmp	.+564    	; 0x2eb8 <f_read+0x2f4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2c84:	ad 81       	ldd	r26, Y+5	; 0x05
    2c86:	be 81       	ldd	r27, Y+6	; 0x06
    2c88:	ed 91       	ld	r30, X+
    2c8a:	fc 91       	ld	r31, X
    2c8c:	db 01       	movw	r26, r22
    2c8e:	ca 01       	movw	r24, r20
    2c90:	07 2e       	mov	r0, r23
    2c92:	79 e0       	ldi	r23, 0x09	; 9
    2c94:	b6 95       	lsr	r27
    2c96:	a7 95       	ror	r26
    2c98:	97 95       	ror	r25
    2c9a:	87 95       	ror	r24
    2c9c:	7a 95       	dec	r23
    2c9e:	d1 f7       	brne	.-12     	; 0x2c94 <f_read+0xd0>
    2ca0:	70 2d       	mov	r23, r0
    2ca2:	12 81       	ldd	r17, Z+2	; 0x02
    2ca4:	11 50       	subi	r17, 0x01	; 1
    2ca6:	18 23       	and	r17, r24
			if (!csect) {						/* On the cluster boundary? */
    2ca8:	09 f0       	breq	.+2      	; 0x2cac <f_read+0xe8>
    2caa:	41 c0       	rjmp	.+130    	; 0x2d2e <f_read+0x16a>
				if (fp->fptr == 0) {			/* On the top of the file? */
    2cac:	41 15       	cp	r20, r1
    2cae:	51 05       	cpc	r21, r1
    2cb0:	61 05       	cpc	r22, r1
    2cb2:	71 05       	cpc	r23, r1
    2cb4:	39 f4       	brne	.+14     	; 0x2cc4 <f_read+0x100>
					clst = fp->sclust;			/* Follow from the origin */
    2cb6:	ed 81       	ldd	r30, Y+5	; 0x05
    2cb8:	fe 81       	ldd	r31, Y+6	; 0x06
    2cba:	86 85       	ldd	r24, Z+14	; 0x0e
    2cbc:	97 85       	ldd	r25, Z+15	; 0x0f
    2cbe:	a0 89       	ldd	r26, Z+16	; 0x10
    2cc0:	b1 89       	ldd	r27, Z+17	; 0x11
    2cc2:	0d c0       	rjmp	.+26     	; 0x2cde <f_read+0x11a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    2cc4:	ad 81       	ldd	r26, Y+5	; 0x05
    2cc6:	be 81       	ldd	r27, Y+6	; 0x06
    2cc8:	52 96       	adiw	r26, 0x12	; 18
    2cca:	4d 91       	ld	r20, X+
    2ccc:	5d 91       	ld	r21, X+
    2cce:	6d 91       	ld	r22, X+
    2cd0:	7c 91       	ld	r23, X
    2cd2:	55 97       	sbiw	r26, 0x15	; 21
    2cd4:	cf 01       	movw	r24, r30
    2cd6:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <get_fat>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    2cde:	82 30       	cpi	r24, 0x02	; 2
    2ce0:	91 05       	cpc	r25, r1
    2ce2:	a1 05       	cpc	r26, r1
    2ce4:	b1 05       	cpc	r27, r1
    2ce6:	48 f4       	brcc	.+18     	; 0x2cfa <f_read+0x136>
    2ce8:	ed 81       	ldd	r30, Y+5	; 0x05
    2cea:	fe 81       	ldd	r31, Y+6	; 0x06
    2cec:	84 81       	ldd	r24, Z+4	; 0x04
    2cee:	80 68       	ori	r24, 0x80	; 128
    2cf0:	84 83       	std	Z+4, r24	; 0x04
    2cf2:	ff 24       	eor	r15, r15
    2cf4:	68 94       	set
    2cf6:	f1 f8       	bld	r15, 1
    2cf8:	2a c1       	rjmp	.+596    	; 0x2f4e <f_read+0x38a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2cfa:	8f 3f       	cpi	r24, 0xFF	; 255
    2cfc:	ff ef       	ldi	r31, 0xFF	; 255
    2cfe:	9f 07       	cpc	r25, r31
    2d00:	ff ef       	ldi	r31, 0xFF	; 255
    2d02:	af 07       	cpc	r26, r31
    2d04:	ff ef       	ldi	r31, 0xFF	; 255
    2d06:	bf 07       	cpc	r27, r31
    2d08:	61 f4       	brne	.+24     	; 0x2d22 <f_read+0x15e>
    2d0a:	ad 81       	ldd	r26, Y+5	; 0x05
    2d0c:	be 81       	ldd	r27, Y+6	; 0x06
    2d0e:	14 96       	adiw	r26, 0x04	; 4
    2d10:	8c 91       	ld	r24, X
    2d12:	14 97       	sbiw	r26, 0x04	; 4
    2d14:	80 68       	ori	r24, 0x80	; 128
    2d16:	14 96       	adiw	r26, 0x04	; 4
    2d18:	8c 93       	st	X, r24
    2d1a:	14 97       	sbiw	r26, 0x04	; 4
    2d1c:	ff 24       	eor	r15, r15
    2d1e:	f3 94       	inc	r15
    2d20:	16 c1       	rjmp	.+556    	; 0x2f4e <f_read+0x38a>
				fp->clust = clst;				/* Update current cluster */
    2d22:	ed 81       	ldd	r30, Y+5	; 0x05
    2d24:	fe 81       	ldd	r31, Y+6	; 0x06
    2d26:	82 8b       	std	Z+18, r24	; 0x12
    2d28:	93 8b       	std	Z+19, r25	; 0x13
    2d2a:	a4 8b       	std	Z+20, r26	; 0x14
    2d2c:	b5 8b       	std	Z+21, r27	; 0x15
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    2d2e:	ad 81       	ldd	r26, Y+5	; 0x05
    2d30:	be 81       	ldd	r27, Y+6	; 0x06
    2d32:	4d 90       	ld	r4, X+
    2d34:	5c 90       	ld	r5, X
    2d36:	11 97       	sbiw	r26, 0x01	; 1
    2d38:	52 96       	adiw	r26, 0x12	; 18
    2d3a:	4d 91       	ld	r20, X+
    2d3c:	5d 91       	ld	r21, X+
    2d3e:	6d 91       	ld	r22, X+
    2d40:	7c 91       	ld	r23, X
    2d42:	55 97       	sbiw	r26, 0x15	; 21
    2d44:	c2 01       	movw	r24, r4
    2d46:	0e 94 2b 0c 	call	0x1856	; 0x1856 <clust2sect>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2d4e:	00 97       	sbiw	r24, 0x00	; 0
    2d50:	a1 05       	cpc	r26, r1
    2d52:	b1 05       	cpc	r27, r1
    2d54:	49 f4       	brne	.+18     	; 0x2d68 <f_read+0x1a4>
    2d56:	ed 81       	ldd	r30, Y+5	; 0x05
    2d58:	fe 81       	ldd	r31, Y+6	; 0x06
    2d5a:	84 81       	ldd	r24, Z+4	; 0x04
    2d5c:	80 68       	ori	r24, 0x80	; 128
    2d5e:	84 83       	std	Z+4, r24	; 0x04
    2d60:	ff 24       	eor	r15, r15
    2d62:	68 94       	set
    2d64:	f1 f8       	bld	r15, 1
    2d66:	f3 c0       	rjmp	.+486    	; 0x2f4e <f_read+0x38a>
			sect += csect;
    2d68:	4c 01       	movw	r8, r24
    2d6a:	5d 01       	movw	r10, r26
    2d6c:	81 0e       	add	r8, r17
    2d6e:	91 1c       	adc	r9, r1
    2d70:	a1 1c       	adc	r10, r1
    2d72:	b1 1c       	adc	r11, r1
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    2d74:	36 01       	movw	r6, r12
    2d76:	67 2c       	mov	r6, r7
    2d78:	77 24       	eor	r7, r7
    2d7a:	66 94       	lsr	r6
			if (cc) {							/* Read maximum contiguous sectors directly */
    2d7c:	61 14       	cp	r6, r1
    2d7e:	71 04       	cpc	r7, r1
    2d80:	09 f4       	brne	.+2      	; 0x2d84 <f_read+0x1c0>
    2d82:	4e c0       	rjmp	.+156    	; 0x2e20 <f_read+0x25c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2d84:	d2 01       	movw	r26, r4
    2d86:	12 96       	adiw	r26, 0x02	; 2
    2d88:	4c 91       	ld	r20, X
    2d8a:	12 97       	sbiw	r26, 0x02	; 2
    2d8c:	c3 01       	movw	r24, r6
    2d8e:	81 0f       	add	r24, r17
    2d90:	91 1d       	adc	r25, r1
    2d92:	24 2f       	mov	r18, r20
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	28 17       	cp	r18, r24
    2d98:	39 07       	cpc	r19, r25
    2d9a:	20 f4       	brcc	.+8      	; 0x2da4 <f_read+0x1e0>
					cc = fp->fs->csize - csect;
    2d9c:	c9 01       	movw	r24, r18
    2d9e:	3c 01       	movw	r6, r24
    2da0:	61 1a       	sub	r6, r17
    2da2:	71 08       	sbc	r7, r1
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    2da4:	f2 01       	movw	r30, r4
    2da6:	81 81       	ldd	r24, Z+1	; 0x01
    2da8:	69 81       	ldd	r22, Y+1	; 0x01
    2daa:	7a 81       	ldd	r23, Y+2	; 0x02
    2dac:	a5 01       	movw	r20, r10
    2dae:	94 01       	movw	r18, r8
    2db0:	06 2d       	mov	r16, r6
    2db2:	0e 94 37 02 	call	0x46e	; 0x46e <disk_read>
    2db6:	88 23       	and	r24, r24
    2db8:	61 f0       	breq	.+24     	; 0x2dd2 <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
    2dba:	ad 81       	ldd	r26, Y+5	; 0x05
    2dbc:	be 81       	ldd	r27, Y+6	; 0x06
    2dbe:	14 96       	adiw	r26, 0x04	; 4
    2dc0:	8c 91       	ld	r24, X
    2dc2:	14 97       	sbiw	r26, 0x04	; 4
    2dc4:	80 68       	ori	r24, 0x80	; 128
    2dc6:	14 96       	adiw	r26, 0x04	; 4
    2dc8:	8c 93       	st	X, r24
    2dca:	14 97       	sbiw	r26, 0x04	; 4
    2dcc:	ff 24       	eor	r15, r15
    2dce:	f3 94       	inc	r15
    2dd0:	be c0       	rjmp	.+380    	; 0x2f4e <f_read+0x38a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
    2dd2:	ed 81       	ldd	r30, Y+5	; 0x05
    2dd4:	fe 81       	ldd	r31, Y+6	; 0x06
    2dd6:	84 81       	ldd	r24, Z+4	; 0x04
    2dd8:	86 ff       	sbrs	r24, 6
    2dda:	1d c0       	rjmp	.+58     	; 0x2e16 <f_read+0x252>
    2ddc:	86 89       	ldd	r24, Z+22	; 0x16
    2dde:	97 89       	ldd	r25, Z+23	; 0x17
    2de0:	a0 8d       	ldd	r26, Z+24	; 0x18
    2de2:	b1 8d       	ldd	r27, Z+25	; 0x19
    2de4:	88 19       	sub	r24, r8
    2de6:	99 09       	sbc	r25, r9
    2de8:	aa 09       	sbc	r26, r10
    2dea:	bb 09       	sbc	r27, r11
    2dec:	a3 01       	movw	r20, r6
    2dee:	60 e0       	ldi	r22, 0x00	; 0
    2df0:	70 e0       	ldi	r23, 0x00	; 0
    2df2:	84 17       	cp	r24, r20
    2df4:	95 07       	cpc	r25, r21
    2df6:	a6 07       	cpc	r26, r22
    2df8:	b7 07       	cpc	r27, r23
    2dfa:	68 f4       	brcc	.+26     	; 0x2e16 <f_read+0x252>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
    2dfc:	98 2f       	mov	r25, r24
    2dfe:	88 27       	eor	r24, r24
    2e00:	99 0f       	add	r25, r25
    2e02:	29 81       	ldd	r18, Y+1	; 0x01
    2e04:	3a 81       	ldd	r19, Y+2	; 0x02
    2e06:	82 0f       	add	r24, r18
    2e08:	93 1f       	adc	r25, r19
    2e0a:	6b 81       	ldd	r22, Y+3	; 0x03
    2e0c:	7c 81       	ldd	r23, Y+4	; 0x04
    2e0e:	40 e0       	ldi	r20, 0x00	; 0
    2e10:	52 e0       	ldi	r21, 0x02	; 2
    2e12:	0e 94 10 05 	call	0xa20	; 0xa20 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    2e16:	83 01       	movw	r16, r6
    2e18:	10 2f       	mov	r17, r16
    2e1a:	00 27       	eor	r16, r16
    2e1c:	11 0f       	add	r17, r17
				continue;
    2e1e:	6a c0       	rjmp	.+212    	; 0x2ef4 <f_read+0x330>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
    2e20:	ad 81       	ldd	r26, Y+5	; 0x05
    2e22:	be 81       	ldd	r27, Y+6	; 0x06
    2e24:	56 96       	adiw	r26, 0x16	; 22
    2e26:	0d 91       	ld	r16, X+
    2e28:	1d 91       	ld	r17, X+
    2e2a:	2d 91       	ld	r18, X+
    2e2c:	3c 91       	ld	r19, X
    2e2e:	59 97       	sbiw	r26, 0x19	; 25
    2e30:	08 15       	cp	r16, r8
    2e32:	19 05       	cpc	r17, r9
    2e34:	2a 05       	cpc	r18, r10
    2e36:	3b 05       	cpc	r19, r11
    2e38:	b9 f1       	breq	.+110    	; 0x2ea8 <f_read+0x2e4>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
    2e3a:	14 96       	adiw	r26, 0x04	; 4
    2e3c:	8c 91       	ld	r24, X
    2e3e:	14 97       	sbiw	r26, 0x04	; 4
    2e40:	86 ff       	sbrs	r24, 6
    2e42:	1c c0       	rjmp	.+56     	; 0x2e7c <f_read+0x2b8>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    2e44:	f2 01       	movw	r30, r4
    2e46:	81 81       	ldd	r24, Z+1	; 0x01
    2e48:	6b 81       	ldd	r22, Y+3	; 0x03
    2e4a:	7c 81       	ldd	r23, Y+4	; 0x04
    2e4c:	a9 01       	movw	r20, r18
    2e4e:	98 01       	movw	r18, r16
    2e50:	01 e0       	ldi	r16, 0x01	; 1
    2e52:	0e 94 8d 02 	call	0x51a	; 0x51a <disk_write>
    2e56:	88 23       	and	r24, r24
    2e58:	61 f0       	breq	.+24     	; 0x2e72 <f_read+0x2ae>
						ABORT(fp->fs, FR_DISK_ERR);
    2e5a:	ad 81       	ldd	r26, Y+5	; 0x05
    2e5c:	be 81       	ldd	r27, Y+6	; 0x06
    2e5e:	14 96       	adiw	r26, 0x04	; 4
    2e60:	8c 91       	ld	r24, X
    2e62:	14 97       	sbiw	r26, 0x04	; 4
    2e64:	80 68       	ori	r24, 0x80	; 128
    2e66:	14 96       	adiw	r26, 0x04	; 4
    2e68:	8c 93       	st	X, r24
    2e6a:	14 97       	sbiw	r26, 0x04	; 4
    2e6c:	ff 24       	eor	r15, r15
    2e6e:	f3 94       	inc	r15
    2e70:	6e c0       	rjmp	.+220    	; 0x2f4e <f_read+0x38a>
					fp->flag &= ~FA__DIRTY;
    2e72:	ed 81       	ldd	r30, Y+5	; 0x05
    2e74:	fe 81       	ldd	r31, Y+6	; 0x06
    2e76:	84 81       	ldd	r24, Z+4	; 0x04
    2e78:	8f 7b       	andi	r24, 0xBF	; 191
    2e7a:	84 83       	std	Z+4, r24	; 0x04
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
    2e7c:	ad 81       	ldd	r26, Y+5	; 0x05
    2e7e:	be 81       	ldd	r27, Y+6	; 0x06
    2e80:	ed 91       	ld	r30, X+
    2e82:	fc 91       	ld	r31, X
    2e84:	81 81       	ldd	r24, Z+1	; 0x01
    2e86:	6b 81       	ldd	r22, Y+3	; 0x03
    2e88:	7c 81       	ldd	r23, Y+4	; 0x04
    2e8a:	a5 01       	movw	r20, r10
    2e8c:	94 01       	movw	r18, r8
    2e8e:	01 e0       	ldi	r16, 0x01	; 1
    2e90:	0e 94 37 02 	call	0x46e	; 0x46e <disk_read>
    2e94:	88 23       	and	r24, r24
    2e96:	41 f0       	breq	.+16     	; 0x2ea8 <f_read+0x2e4>
					ABORT(fp->fs, FR_DISK_ERR);
    2e98:	ed 81       	ldd	r30, Y+5	; 0x05
    2e9a:	fe 81       	ldd	r31, Y+6	; 0x06
    2e9c:	84 81       	ldd	r24, Z+4	; 0x04
    2e9e:	80 68       	ori	r24, 0x80	; 128
    2ea0:	84 83       	std	Z+4, r24	; 0x04
    2ea2:	ff 24       	eor	r15, r15
    2ea4:	f3 94       	inc	r15
    2ea6:	53 c0       	rjmp	.+166    	; 0x2f4e <f_read+0x38a>
			}
#endif
			fp->dsect = sect;
    2ea8:	ad 81       	ldd	r26, Y+5	; 0x05
    2eaa:	be 81       	ldd	r27, Y+6	; 0x06
    2eac:	56 96       	adiw	r26, 0x16	; 22
    2eae:	8d 92       	st	X+, r8
    2eb0:	9d 92       	st	X+, r9
    2eb2:	ad 92       	st	X+, r10
    2eb4:	bc 92       	st	X, r11
    2eb6:	59 97       	sbiw	r26, 0x19	; 25
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    2eb8:	ed 81       	ldd	r30, Y+5	; 0x05
    2eba:	fe 81       	ldd	r31, Y+6	; 0x06
    2ebc:	46 81       	ldd	r20, Z+6	; 0x06
    2ebe:	57 81       	ldd	r21, Z+7	; 0x07
    2ec0:	60 85       	ldd	r22, Z+8	; 0x08
    2ec2:	71 85       	ldd	r23, Z+9	; 0x09
    2ec4:	ca 01       	movw	r24, r20
    2ec6:	91 70       	andi	r25, 0x01	; 1
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	32 e0       	ldi	r19, 0x02	; 2
    2ecc:	28 1b       	sub	r18, r24
    2ece:	39 0b       	sbc	r19, r25
    2ed0:	86 01       	movw	r16, r12
    2ed2:	2c 15       	cp	r18, r12
    2ed4:	3d 05       	cpc	r19, r13
    2ed6:	08 f4       	brcc	.+2      	; 0x2eda <f_read+0x316>
    2ed8:	89 01       	movw	r16, r18
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    2eda:	ba 01       	movw	r22, r20
    2edc:	71 70       	andi	r23, 0x01	; 1
    2ede:	60 5e       	subi	r22, 0xE0	; 224
    2ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee6:	68 0f       	add	r22, r24
    2ee8:	79 1f       	adc	r23, r25
    2eea:	89 81       	ldd	r24, Y+1	; 0x01
    2eec:	9a 81       	ldd	r25, Y+2	; 0x02
    2eee:	a8 01       	movw	r20, r16
    2ef0:	0e 94 10 05 	call	0xa20	; 0xa20 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    2ef4:	a9 81       	ldd	r26, Y+1	; 0x01
    2ef6:	ba 81       	ldd	r27, Y+2	; 0x02
    2ef8:	a0 0f       	add	r26, r16
    2efa:	b1 1f       	adc	r27, r17
    2efc:	ba 83       	std	Y+2, r27	; 0x02
    2efe:	a9 83       	std	Y+1, r26	; 0x01
    2f00:	a8 01       	movw	r20, r16
    2f02:	60 e0       	ldi	r22, 0x00	; 0
    2f04:	70 e0       	ldi	r23, 0x00	; 0
    2f06:	ed 81       	ldd	r30, Y+5	; 0x05
    2f08:	fe 81       	ldd	r31, Y+6	; 0x06
    2f0a:	86 81       	ldd	r24, Z+6	; 0x06
    2f0c:	97 81       	ldd	r25, Z+7	; 0x07
    2f0e:	a0 85       	ldd	r26, Z+8	; 0x08
    2f10:	b1 85       	ldd	r27, Z+9	; 0x09
    2f12:	84 0f       	add	r24, r20
    2f14:	95 1f       	adc	r25, r21
    2f16:	a6 1f       	adc	r26, r22
    2f18:	b7 1f       	adc	r27, r23
    2f1a:	86 83       	std	Z+6, r24	; 0x06
    2f1c:	97 83       	std	Z+7, r25	; 0x07
    2f1e:	a0 87       	std	Z+8, r26	; 0x08
    2f20:	b1 87       	std	Z+9, r27	; 0x09
    2f22:	d1 01       	movw	r26, r2
    2f24:	8d 91       	ld	r24, X+
    2f26:	9c 91       	ld	r25, X
    2f28:	11 97       	sbiw	r26, 0x01	; 1
    2f2a:	80 0f       	add	r24, r16
    2f2c:	91 1f       	adc	r25, r17
    2f2e:	11 96       	adiw	r26, 0x01	; 1
    2f30:	9c 93       	st	X, r25
    2f32:	8e 93       	st	-X, r24
    2f34:	c0 1a       	sub	r12, r16
    2f36:	d1 0a       	sbc	r13, r17
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    2f38:	09 f0       	breq	.+2      	; 0x2f3c <f_read+0x378>
    2f3a:	92 ce       	rjmp	.-732    	; 0x2c60 <f_read+0x9c>
    2f3c:	08 c0       	rjmp	.+16     	; 0x2f4e <f_read+0x38a>
	*br = 0;	/* Clear read byte counter */

	res = validate(fp);							/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)					/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2f3e:	ff 24       	eor	r15, r15
    2f40:	68 94       	set
    2f42:	f1 f8       	bld	r15, 1
    2f44:	04 c0       	rjmp	.+8      	; 0x2f4e <f_read+0x38a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    2f46:	0f 2e       	mov	r0, r31
    2f48:	f7 e0       	ldi	r31, 0x07	; 7
    2f4a:	ff 2e       	mov	r15, r31
    2f4c:	f0 2d       	mov	r31, r0
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    2f4e:	8f 2d       	mov	r24, r15
    2f50:	26 96       	adiw	r28, 0x06	; 6
    2f52:	0f b6       	in	r0, 0x3f	; 63
    2f54:	f8 94       	cli
    2f56:	de bf       	out	0x3e, r29	; 62
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	cd bf       	out	0x3d, r28	; 61
    2f5c:	df 91       	pop	r29
    2f5e:	cf 91       	pop	r28
    2f60:	1f 91       	pop	r17
    2f62:	0f 91       	pop	r16
    2f64:	ff 90       	pop	r15
    2f66:	df 90       	pop	r13
    2f68:	cf 90       	pop	r12
    2f6a:	bf 90       	pop	r11
    2f6c:	af 90       	pop	r10
    2f6e:	9f 90       	pop	r9
    2f70:	8f 90       	pop	r8
    2f72:	7f 90       	pop	r7
    2f74:	6f 90       	pop	r6
    2f76:	5f 90       	pop	r5
    2f78:	4f 90       	pop	r4
    2f7a:	3f 90       	pop	r3
    2f7c:	2f 90       	pop	r2
    2f7e:	08 95       	ret

00002f80 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    2f80:	2f 92       	push	r2
    2f82:	3f 92       	push	r3
    2f84:	4f 92       	push	r4
    2f86:	5f 92       	push	r5
    2f88:	6f 92       	push	r6
    2f8a:	7f 92       	push	r7
    2f8c:	8f 92       	push	r8
    2f8e:	9f 92       	push	r9
    2f90:	af 92       	push	r10
    2f92:	bf 92       	push	r11
    2f94:	cf 92       	push	r12
    2f96:	df 92       	push	r13
    2f98:	ef 92       	push	r14
    2f9a:	ff 92       	push	r15
    2f9c:	0f 93       	push	r16
    2f9e:	1f 93       	push	r17
    2fa0:	cf 93       	push	r28
    2fa2:	df 93       	push	r29
    2fa4:	00 d0       	rcall	.+0      	; 0x2fa6 <f_write+0x26>
    2fa6:	00 d0       	rcall	.+0      	; 0x2fa8 <f_write+0x28>
    2fa8:	0f 92       	push	r0
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
    2fae:	7c 01       	movw	r14, r24
    2fb0:	86 2e       	mov	r8, r22
    2fb2:	67 2e       	mov	r6, r23
    2fb4:	6a 01       	movw	r12, r20
    2fb6:	29 01       	movw	r4, r18
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    2fb8:	d9 01       	movw	r26, r18
    2fba:	1d 92       	st	X+, r1
    2fbc:	1c 92       	st	X, r1

	res = validate(fp);						/* Check validity */
    2fbe:	0e 94 e7 05 	call	0xbce	; 0xbce <validate>
    2fc2:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2fc4:	88 23       	and	r24, r24
    2fc6:	09 f0       	breq	.+2      	; 0x2fca <f_write+0x4a>
    2fc8:	c6 c1       	rjmp	.+908    	; 0x3356 <f_write+0x3d6>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    2fca:	f7 01       	movw	r30, r14
    2fcc:	84 81       	ldd	r24, Z+4	; 0x04
    2fce:	88 23       	and	r24, r24
    2fd0:	0c f4       	brge	.+2      	; 0x2fd4 <f_write+0x54>
    2fd2:	be c1       	rjmp	.+892    	; 0x3350 <f_write+0x3d0>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    2fd4:	81 ff       	sbrs	r24, 1
    2fd6:	be c1       	rjmp	.+892    	; 0x3354 <f_write+0x3d4>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    2fd8:	42 85       	ldd	r20, Z+10	; 0x0a
    2fda:	53 85       	ldd	r21, Z+11	; 0x0b
    2fdc:	64 85       	ldd	r22, Z+12	; 0x0c
    2fde:	75 85       	ldd	r23, Z+13	; 0x0d
    2fe0:	c6 01       	movw	r24, r12
    2fe2:	a0 e0       	ldi	r26, 0x00	; 0
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	84 0f       	add	r24, r20
    2fe8:	95 1f       	adc	r25, r21
    2fea:	a6 1f       	adc	r26, r22
    2fec:	b7 1f       	adc	r27, r23
    2fee:	84 17       	cp	r24, r20
    2ff0:	95 07       	cpc	r25, r21
    2ff2:	a6 07       	cpc	r26, r22
    2ff4:	b7 07       	cpc	r27, r23
    2ff6:	08 f4       	brcc	.+2      	; 0x2ffa <f_write+0x7a>
    2ff8:	90 c1       	rjmp	.+800    	; 0x331a <f_write+0x39a>

	for ( ;  btw;							/* Repeat until all data written */
    2ffa:	c1 14       	cp	r12, r1
    2ffc:	d1 04       	cpc	r13, r1
    2ffe:	09 f4       	brne	.+2      	; 0x3002 <f_write+0x82>
    3000:	8c c1       	rjmp	.+792    	; 0x331a <f_write+0x39a>
    3002:	89 82       	std	Y+1, r8	; 0x01
    3004:	6a 82       	std	Y+2, r6	; 0x02
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    3006:	97 01       	movw	r18, r14
    3008:	20 5e       	subi	r18, 0xE0	; 224
    300a:	3f 4f       	sbci	r19, 0xFF	; 255
    300c:	3c 83       	std	Y+4, r19	; 0x04
    300e:	2b 83       	std	Y+3, r18	; 0x03
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    3010:	d7 01       	movw	r26, r14
    3012:	16 96       	adiw	r26, 0x06	; 6
    3014:	4d 91       	ld	r20, X+
    3016:	5d 91       	ld	r21, X+
    3018:	6d 91       	ld	r22, X+
    301a:	7c 91       	ld	r23, X
    301c:	19 97       	sbiw	r26, 0x09	; 9
    301e:	db 01       	movw	r26, r22
    3020:	ca 01       	movw	r24, r20
    3022:	91 70       	andi	r25, 0x01	; 1
    3024:	a0 70       	andi	r26, 0x00	; 0
    3026:	b0 70       	andi	r27, 0x00	; 0
    3028:	00 97       	sbiw	r24, 0x00	; 0
    302a:	a1 05       	cpc	r26, r1
    302c:	b1 05       	cpc	r27, r1
    302e:	09 f0       	breq	.+2      	; 0x3032 <f_write+0xb2>
    3030:	30 c1       	rjmp	.+608    	; 0x3292 <f_write+0x312>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    3032:	f7 01       	movw	r30, r14
    3034:	20 81       	ld	r18, Z
    3036:	31 81       	ldd	r19, Z+1	; 0x01
    3038:	db 01       	movw	r26, r22
    303a:	ca 01       	movw	r24, r20
    303c:	07 2e       	mov	r0, r23
    303e:	79 e0       	ldi	r23, 0x09	; 9
    3040:	b6 95       	lsr	r27
    3042:	a7 95       	ror	r26
    3044:	97 95       	ror	r25
    3046:	87 95       	ror	r24
    3048:	7a 95       	dec	r23
    304a:	d1 f7       	brne	.-12     	; 0x3040 <f_write+0xc0>
    304c:	70 2d       	mov	r23, r0
    304e:	f9 01       	movw	r30, r18
    3050:	82 80       	ldd	r8, Z+2	; 0x02
    3052:	e8 2d       	mov	r30, r8
    3054:	e1 50       	subi	r30, 0x01	; 1
    3056:	e8 23       	and	r30, r24
    3058:	ed 83       	std	Y+5, r30	; 0x05
			if (!csect) {					/* On the cluster boundary? */
    305a:	ee 23       	and	r30, r30
    305c:	09 f0       	breq	.+2      	; 0x3060 <f_write+0xe0>
    305e:	4f c0       	rjmp	.+158    	; 0x30fe <f_write+0x17e>
				if (fp->fptr == 0) {		/* On the top of the file? */
    3060:	41 15       	cp	r20, r1
    3062:	51 05       	cpc	r21, r1
    3064:	61 05       	cpc	r22, r1
    3066:	71 05       	cpc	r23, r1
    3068:	b9 f4       	brne	.+46     	; 0x3098 <f_write+0x118>
					clst = fp->sclust;		/* Follow from the origin */
    306a:	f7 01       	movw	r30, r14
    306c:	86 85       	ldd	r24, Z+14	; 0x0e
    306e:	97 85       	ldd	r25, Z+15	; 0x0f
    3070:	a0 89       	ldd	r26, Z+16	; 0x10
    3072:	b1 89       	ldd	r27, Z+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	a1 05       	cpc	r26, r1
    3078:	b1 05       	cpc	r27, r1
    307a:	f9 f4       	brne	.+62     	; 0x30ba <f_write+0x13a>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    307c:	c9 01       	movw	r24, r18
    307e:	40 e0       	ldi	r20, 0x00	; 0
    3080:	50 e0       	ldi	r21, 0x00	; 0
    3082:	ba 01       	movw	r22, r20
    3084:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <create_chain>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	f7 01       	movw	r30, r14
    308e:	86 87       	std	Z+14, r24	; 0x0e
    3090:	97 87       	std	Z+15, r25	; 0x0f
    3092:	a0 8b       	std	Z+16, r26	; 0x10
    3094:	b1 8b       	std	Z+17, r27	; 0x11
    3096:	0c c0       	rjmp	.+24     	; 0x30b0 <f_write+0x130>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    3098:	d7 01       	movw	r26, r14
    309a:	52 96       	adiw	r26, 0x12	; 18
    309c:	4d 91       	ld	r20, X+
    309e:	5d 91       	ld	r21, X+
    30a0:	6d 91       	ld	r22, X+
    30a2:	7c 91       	ld	r23, X
    30a4:	55 97       	sbiw	r26, 0x15	; 21
    30a6:	c9 01       	movw	r24, r18
    30a8:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <create_chain>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    30b0:	00 97       	sbiw	r24, 0x00	; 0
    30b2:	a1 05       	cpc	r26, r1
    30b4:	b1 05       	cpc	r27, r1
    30b6:	09 f4       	brne	.+2      	; 0x30ba <f_write+0x13a>
    30b8:	30 c1       	rjmp	.+608    	; 0x331a <f_write+0x39a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    30ba:	81 30       	cpi	r24, 0x01	; 1
    30bc:	91 05       	cpc	r25, r1
    30be:	a1 05       	cpc	r26, r1
    30c0:	b1 05       	cpc	r27, r1
    30c2:	31 f4       	brne	.+12     	; 0x30d0 <f_write+0x150>
    30c4:	f7 01       	movw	r30, r14
    30c6:	84 81       	ldd	r24, Z+4	; 0x04
    30c8:	80 68       	ori	r24, 0x80	; 128
    30ca:	84 83       	std	Z+4, r24	; 0x04
    30cc:	12 e0       	ldi	r17, 0x02	; 2
    30ce:	43 c1       	rjmp	.+646    	; 0x3356 <f_write+0x3d6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    30d0:	8f 3f       	cpi	r24, 0xFF	; 255
    30d2:	ff ef       	ldi	r31, 0xFF	; 255
    30d4:	9f 07       	cpc	r25, r31
    30d6:	ff ef       	ldi	r31, 0xFF	; 255
    30d8:	af 07       	cpc	r26, r31
    30da:	ff ef       	ldi	r31, 0xFF	; 255
    30dc:	bf 07       	cpc	r27, r31
    30de:	51 f4       	brne	.+20     	; 0x30f4 <f_write+0x174>
    30e0:	d7 01       	movw	r26, r14
    30e2:	14 96       	adiw	r26, 0x04	; 4
    30e4:	8c 91       	ld	r24, X
    30e6:	14 97       	sbiw	r26, 0x04	; 4
    30e8:	80 68       	ori	r24, 0x80	; 128
    30ea:	14 96       	adiw	r26, 0x04	; 4
    30ec:	8c 93       	st	X, r24
    30ee:	14 97       	sbiw	r26, 0x04	; 4
    30f0:	11 e0       	ldi	r17, 0x01	; 1
    30f2:	31 c1       	rjmp	.+610    	; 0x3356 <f_write+0x3d6>
				fp->clust = clst;			/* Update current cluster */
    30f4:	f7 01       	movw	r30, r14
    30f6:	82 8b       	std	Z+18, r24	; 0x12
    30f8:	93 8b       	std	Z+19, r25	; 0x13
    30fa:	a4 8b       	std	Z+20, r26	; 0x14
    30fc:	b5 8b       	std	Z+21, r27	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
    30fe:	d7 01       	movw	r26, r14
    3100:	14 96       	adiw	r26, 0x04	; 4
    3102:	8c 91       	ld	r24, X
    3104:	14 97       	sbiw	r26, 0x04	; 4
    3106:	86 ff       	sbrs	r24, 6
    3108:	1e c0       	rjmp	.+60     	; 0x3146 <f_write+0x1c6>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    310a:	ed 91       	ld	r30, X+
    310c:	fc 91       	ld	r31, X
    310e:	11 97       	sbiw	r26, 0x01	; 1
    3110:	56 96       	adiw	r26, 0x16	; 22
    3112:	2d 91       	ld	r18, X+
    3114:	3d 91       	ld	r19, X+
    3116:	4d 91       	ld	r20, X+
    3118:	5c 91       	ld	r21, X
    311a:	59 97       	sbiw	r26, 0x19	; 25
    311c:	81 81       	ldd	r24, Z+1	; 0x01
    311e:	6b 81       	ldd	r22, Y+3	; 0x03
    3120:	7c 81       	ldd	r23, Y+4	; 0x04
    3122:	01 e0       	ldi	r16, 0x01	; 1
    3124:	0e 94 8d 02 	call	0x51a	; 0x51a <disk_write>
    3128:	88 23       	and	r24, r24
    312a:	31 f0       	breq	.+12     	; 0x3138 <f_write+0x1b8>
					ABORT(fp->fs, FR_DISK_ERR);
    312c:	f7 01       	movw	r30, r14
    312e:	84 81       	ldd	r24, Z+4	; 0x04
    3130:	80 68       	ori	r24, 0x80	; 128
    3132:	84 83       	std	Z+4, r24	; 0x04
    3134:	11 e0       	ldi	r17, 0x01	; 1
    3136:	0f c1       	rjmp	.+542    	; 0x3356 <f_write+0x3d6>
				fp->flag &= ~FA__DIRTY;
    3138:	d7 01       	movw	r26, r14
    313a:	14 96       	adiw	r26, 0x04	; 4
    313c:	8c 91       	ld	r24, X
    313e:	14 97       	sbiw	r26, 0x04	; 4
    3140:	8f 7b       	andi	r24, 0xBF	; 191
    3142:	14 96       	adiw	r26, 0x04	; 4
    3144:	8c 93       	st	X, r24
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    3146:	f7 01       	movw	r30, r14
    3148:	20 80       	ld	r2, Z
    314a:	31 80       	ldd	r3, Z+1	; 0x01
    314c:	42 89       	ldd	r20, Z+18	; 0x12
    314e:	53 89       	ldd	r21, Z+19	; 0x13
    3150:	64 89       	ldd	r22, Z+20	; 0x14
    3152:	75 89       	ldd	r23, Z+21	; 0x15
    3154:	c1 01       	movw	r24, r2
    3156:	0e 94 2b 0c 	call	0x1856	; 0x1856 <clust2sect>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    315e:	00 97       	sbiw	r24, 0x00	; 0
    3160:	a1 05       	cpc	r26, r1
    3162:	b1 05       	cpc	r27, r1
    3164:	51 f4       	brne	.+20     	; 0x317a <f_write+0x1fa>
    3166:	d7 01       	movw	r26, r14
    3168:	14 96       	adiw	r26, 0x04	; 4
    316a:	8c 91       	ld	r24, X
    316c:	14 97       	sbiw	r26, 0x04	; 4
    316e:	80 68       	ori	r24, 0x80	; 128
    3170:	14 96       	adiw	r26, 0x04	; 4
    3172:	8c 93       	st	X, r24
    3174:	14 97       	sbiw	r26, 0x04	; 4
    3176:	12 e0       	ldi	r17, 0x02	; 2
    3178:	ee c0       	rjmp	.+476    	; 0x3356 <f_write+0x3d6>
			sect += csect;
    317a:	4c 01       	movw	r8, r24
    317c:	5d 01       	movw	r10, r26
    317e:	ed 81       	ldd	r30, Y+5	; 0x05
    3180:	8e 0e       	add	r8, r30
    3182:	91 1c       	adc	r9, r1
    3184:	a1 1c       	adc	r10, r1
    3186:	b1 1c       	adc	r11, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    3188:	36 01       	movw	r6, r12
    318a:	67 2c       	mov	r6, r7
    318c:	77 24       	eor	r7, r7
    318e:	66 94       	lsr	r6
			if (cc) {						/* Write maximum contiguous sectors directly */
    3190:	61 14       	cp	r6, r1
    3192:	71 04       	cpc	r7, r1
    3194:	09 f4       	brne	.+2      	; 0x3198 <f_write+0x218>
    3196:	4d c0       	rjmp	.+154    	; 0x3232 <f_write+0x2b2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    3198:	d1 01       	movw	r26, r2
    319a:	12 96       	adiw	r26, 0x02	; 2
    319c:	4c 91       	ld	r20, X
    319e:	12 97       	sbiw	r26, 0x02	; 2
    31a0:	c3 01       	movw	r24, r6
    31a2:	8e 0f       	add	r24, r30
    31a4:	91 1d       	adc	r25, r1
    31a6:	24 2f       	mov	r18, r20
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	28 17       	cp	r18, r24
    31ac:	39 07       	cpc	r19, r25
    31ae:	20 f4       	brcc	.+8      	; 0x31b8 <f_write+0x238>
					cc = fp->fs->csize - csect;
    31b0:	c9 01       	movw	r24, r18
    31b2:	3c 01       	movw	r6, r24
    31b4:	6e 1a       	sub	r6, r30
    31b6:	71 08       	sbc	r7, r1
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    31b8:	d1 01       	movw	r26, r2
    31ba:	11 96       	adiw	r26, 0x01	; 1
    31bc:	8c 91       	ld	r24, X
    31be:	69 81       	ldd	r22, Y+1	; 0x01
    31c0:	7a 81       	ldd	r23, Y+2	; 0x02
    31c2:	a5 01       	movw	r20, r10
    31c4:	94 01       	movw	r18, r8
    31c6:	06 2d       	mov	r16, r6
    31c8:	0e 94 8d 02 	call	0x51a	; 0x51a <disk_write>
    31cc:	88 23       	and	r24, r24
    31ce:	31 f0       	breq	.+12     	; 0x31dc <f_write+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
    31d0:	f7 01       	movw	r30, r14
    31d2:	84 81       	ldd	r24, Z+4	; 0x04
    31d4:	80 68       	ori	r24, 0x80	; 128
    31d6:	84 83       	std	Z+4, r24	; 0x04
    31d8:	11 e0       	ldi	r17, 0x01	; 1
    31da:	bd c0       	rjmp	.+378    	; 0x3356 <f_write+0x3d6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    31dc:	f7 01       	movw	r30, r14
    31de:	86 89       	ldd	r24, Z+22	; 0x16
    31e0:	97 89       	ldd	r25, Z+23	; 0x17
    31e2:	a0 8d       	ldd	r26, Z+24	; 0x18
    31e4:	b1 8d       	ldd	r27, Z+25	; 0x19
    31e6:	88 19       	sub	r24, r8
    31e8:	99 09       	sbc	r25, r9
    31ea:	aa 09       	sbc	r26, r10
    31ec:	bb 09       	sbc	r27, r11
    31ee:	a3 01       	movw	r20, r6
    31f0:	60 e0       	ldi	r22, 0x00	; 0
    31f2:	70 e0       	ldi	r23, 0x00	; 0
    31f4:	84 17       	cp	r24, r20
    31f6:	95 07       	cpc	r25, r21
    31f8:	a6 07       	cpc	r26, r22
    31fa:	b7 07       	cpc	r27, r23
    31fc:	b0 f4       	brcc	.+44     	; 0x322a <f_write+0x2aa>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    31fe:	bc 01       	movw	r22, r24
    3200:	76 2f       	mov	r23, r22
    3202:	66 27       	eor	r22, r22
    3204:	77 0f       	add	r23, r23
    3206:	29 81       	ldd	r18, Y+1	; 0x01
    3208:	3a 81       	ldd	r19, Y+2	; 0x02
    320a:	62 0f       	add	r22, r18
    320c:	73 1f       	adc	r23, r19
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	9c 81       	ldd	r25, Y+4	; 0x04
    3212:	40 e0       	ldi	r20, 0x00	; 0
    3214:	52 e0       	ldi	r21, 0x02	; 2
    3216:	0e 94 10 05 	call	0xa20	; 0xa20 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
    321a:	d7 01       	movw	r26, r14
    321c:	14 96       	adiw	r26, 0x04	; 4
    321e:	8c 91       	ld	r24, X
    3220:	14 97       	sbiw	r26, 0x04	; 4
    3222:	8f 7b       	andi	r24, 0xBF	; 191
    3224:	14 96       	adiw	r26, 0x04	; 4
    3226:	8c 93       	st	X, r24
    3228:	14 97       	sbiw	r26, 0x04	; 4
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    322a:	76 2c       	mov	r7, r6
    322c:	66 24       	eor	r6, r6
    322e:	77 0c       	add	r7, r7
				continue;
    3230:	51 c0       	rjmp	.+162    	; 0x32d4 <f_write+0x354>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
    3232:	f7 01       	movw	r30, r14
    3234:	86 89       	ldd	r24, Z+22	; 0x16
    3236:	97 89       	ldd	r25, Z+23	; 0x17
    3238:	a0 8d       	ldd	r26, Z+24	; 0x18
    323a:	b1 8d       	ldd	r27, Z+25	; 0x19
    323c:	88 15       	cp	r24, r8
    323e:	99 05       	cpc	r25, r9
    3240:	aa 05       	cpc	r26, r10
    3242:	bb 05       	cpc	r27, r11
    3244:	f9 f0       	breq	.+62     	; 0x3284 <f_write+0x304>
				if (fp->fptr < fp->fsize &&
    3246:	86 81       	ldd	r24, Z+6	; 0x06
    3248:	97 81       	ldd	r25, Z+7	; 0x07
    324a:	a0 85       	ldd	r26, Z+8	; 0x08
    324c:	b1 85       	ldd	r27, Z+9	; 0x09
    324e:	42 85       	ldd	r20, Z+10	; 0x0a
    3250:	53 85       	ldd	r21, Z+11	; 0x0b
    3252:	64 85       	ldd	r22, Z+12	; 0x0c
    3254:	75 85       	ldd	r23, Z+13	; 0x0d
    3256:	84 17       	cp	r24, r20
    3258:	95 07       	cpc	r25, r21
    325a:	a6 07       	cpc	r26, r22
    325c:	b7 07       	cpc	r27, r23
    325e:	90 f4       	brcc	.+36     	; 0x3284 <f_write+0x304>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    3260:	d1 01       	movw	r26, r2
    3262:	11 96       	adiw	r26, 0x01	; 1
    3264:	8c 91       	ld	r24, X
    3266:	6b 81       	ldd	r22, Y+3	; 0x03
    3268:	7c 81       	ldd	r23, Y+4	; 0x04
    326a:	a5 01       	movw	r20, r10
    326c:	94 01       	movw	r18, r8
    326e:	01 e0       	ldi	r16, 0x01	; 1
    3270:	0e 94 37 02 	call	0x46e	; 0x46e <disk_read>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
    3274:	88 23       	and	r24, r24
    3276:	31 f0       	breq	.+12     	; 0x3284 <f_write+0x304>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    3278:	f7 01       	movw	r30, r14
    327a:	84 81       	ldd	r24, Z+4	; 0x04
    327c:	80 68       	ori	r24, 0x80	; 128
    327e:	84 83       	std	Z+4, r24	; 0x04
    3280:	11 e0       	ldi	r17, 0x01	; 1
    3282:	69 c0       	rjmp	.+210    	; 0x3356 <f_write+0x3d6>
			}
#endif
			fp->dsect = sect;
    3284:	d7 01       	movw	r26, r14
    3286:	56 96       	adiw	r26, 0x16	; 22
    3288:	8d 92       	st	X+, r8
    328a:	9d 92       	st	X+, r9
    328c:	ad 92       	st	X+, r10
    328e:	bc 92       	st	X, r11
    3290:	59 97       	sbiw	r26, 0x19	; 25
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    3292:	f7 01       	movw	r30, r14
    3294:	46 81       	ldd	r20, Z+6	; 0x06
    3296:	57 81       	ldd	r21, Z+7	; 0x07
    3298:	60 85       	ldd	r22, Z+8	; 0x08
    329a:	71 85       	ldd	r23, Z+9	; 0x09
    329c:	ca 01       	movw	r24, r20
    329e:	91 70       	andi	r25, 0x01	; 1
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	32 e0       	ldi	r19, 0x02	; 2
    32a4:	28 1b       	sub	r18, r24
    32a6:	39 0b       	sbc	r19, r25
    32a8:	36 01       	movw	r6, r12
    32aa:	2c 15       	cp	r18, r12
    32ac:	3d 05       	cpc	r19, r13
    32ae:	08 f4       	brcc	.+2      	; 0x32b2 <f_write+0x332>
    32b0:	39 01       	movw	r6, r18
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    32b2:	ca 01       	movw	r24, r20
    32b4:	91 70       	andi	r25, 0x01	; 1
    32b6:	80 96       	adiw	r24, 0x20	; 32
    32b8:	8e 0d       	add	r24, r14
    32ba:	9f 1d       	adc	r25, r15
    32bc:	69 81       	ldd	r22, Y+1	; 0x01
    32be:	7a 81       	ldd	r23, Y+2	; 0x02
    32c0:	a3 01       	movw	r20, r6
    32c2:	0e 94 10 05 	call	0xa20	; 0xa20 <mem_cpy>
		fp->flag |= FA__DIRTY;
    32c6:	d7 01       	movw	r26, r14
    32c8:	14 96       	adiw	r26, 0x04	; 4
    32ca:	8c 91       	ld	r24, X
    32cc:	14 97       	sbiw	r26, 0x04	; 4
    32ce:	80 64       	ori	r24, 0x40	; 64
    32d0:	14 96       	adiw	r26, 0x04	; 4
    32d2:	8c 93       	st	X, r24
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    32d4:	e9 81       	ldd	r30, Y+1	; 0x01
    32d6:	fa 81       	ldd	r31, Y+2	; 0x02
    32d8:	e6 0d       	add	r30, r6
    32da:	f7 1d       	adc	r31, r7
    32dc:	fa 83       	std	Y+2, r31	; 0x02
    32de:	e9 83       	std	Y+1, r30	; 0x01
    32e0:	a3 01       	movw	r20, r6
    32e2:	60 e0       	ldi	r22, 0x00	; 0
    32e4:	70 e0       	ldi	r23, 0x00	; 0
    32e6:	f7 01       	movw	r30, r14
    32e8:	86 81       	ldd	r24, Z+6	; 0x06
    32ea:	97 81       	ldd	r25, Z+7	; 0x07
    32ec:	a0 85       	ldd	r26, Z+8	; 0x08
    32ee:	b1 85       	ldd	r27, Z+9	; 0x09
    32f0:	84 0f       	add	r24, r20
    32f2:	95 1f       	adc	r25, r21
    32f4:	a6 1f       	adc	r26, r22
    32f6:	b7 1f       	adc	r27, r23
    32f8:	86 83       	std	Z+6, r24	; 0x06
    32fa:	97 83       	std	Z+7, r25	; 0x07
    32fc:	a0 87       	std	Z+8, r26	; 0x08
    32fe:	b1 87       	std	Z+9, r27	; 0x09
    3300:	d2 01       	movw	r26, r4
    3302:	8d 91       	ld	r24, X+
    3304:	9c 91       	ld	r25, X
    3306:	11 97       	sbiw	r26, 0x01	; 1
    3308:	86 0d       	add	r24, r6
    330a:	97 1d       	adc	r25, r7
    330c:	11 96       	adiw	r26, 0x01	; 1
    330e:	9c 93       	st	X, r25
    3310:	8e 93       	st	-X, r24
    3312:	c6 18       	sub	r12, r6
    3314:	d7 08       	sbc	r13, r7
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    3316:	09 f0       	breq	.+2      	; 0x331a <f_write+0x39a>
    3318:	7b ce       	rjmp	.-778    	; 0x3010 <f_write+0x90>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    331a:	f7 01       	movw	r30, r14
    331c:	86 81       	ldd	r24, Z+6	; 0x06
    331e:	97 81       	ldd	r25, Z+7	; 0x07
    3320:	a0 85       	ldd	r26, Z+8	; 0x08
    3322:	b1 85       	ldd	r27, Z+9	; 0x09
    3324:	42 85       	ldd	r20, Z+10	; 0x0a
    3326:	53 85       	ldd	r21, Z+11	; 0x0b
    3328:	64 85       	ldd	r22, Z+12	; 0x0c
    332a:	75 85       	ldd	r23, Z+13	; 0x0d
    332c:	48 17       	cp	r20, r24
    332e:	59 07       	cpc	r21, r25
    3330:	6a 07       	cpc	r22, r26
    3332:	7b 07       	cpc	r23, r27
    3334:	20 f4       	brcc	.+8      	; 0x333e <f_write+0x3be>
    3336:	82 87       	std	Z+10, r24	; 0x0a
    3338:	93 87       	std	Z+11, r25	; 0x0b
    333a:	a4 87       	std	Z+12, r26	; 0x0c
    333c:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    333e:	d7 01       	movw	r26, r14
    3340:	14 96       	adiw	r26, 0x04	; 4
    3342:	8c 91       	ld	r24, X
    3344:	14 97       	sbiw	r26, 0x04	; 4
    3346:	80 62       	ori	r24, 0x20	; 32
    3348:	14 96       	adiw	r26, 0x04	; 4
    334a:	8c 93       	st	X, r24
    334c:	14 97       	sbiw	r26, 0x04	; 4

	LEAVE_FF(fp->fs, FR_OK);
    334e:	03 c0       	rjmp	.+6      	; 0x3356 <f_write+0x3d6>
	*bw = 0;	/* Clear write byte counter */

	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    3350:	12 e0       	ldi	r17, 0x02	; 2
    3352:	01 c0       	rjmp	.+2      	; 0x3356 <f_write+0x3d6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    3354:	17 e0       	ldi	r17, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    3356:	81 2f       	mov	r24, r17
    3358:	0f 90       	pop	r0
    335a:	0f 90       	pop	r0
    335c:	0f 90       	pop	r0
    335e:	0f 90       	pop	r0
    3360:	0f 90       	pop	r0
    3362:	df 91       	pop	r29
    3364:	cf 91       	pop	r28
    3366:	1f 91       	pop	r17
    3368:	0f 91       	pop	r16
    336a:	ff 90       	pop	r15
    336c:	ef 90       	pop	r14
    336e:	df 90       	pop	r13
    3370:	cf 90       	pop	r12
    3372:	bf 90       	pop	r11
    3374:	af 90       	pop	r10
    3376:	9f 90       	pop	r9
    3378:	8f 90       	pop	r8
    337a:	7f 90       	pop	r7
    337c:	6f 90       	pop	r6
    337e:	5f 90       	pop	r5
    3380:	4f 90       	pop	r4
    3382:	3f 90       	pop	r3
    3384:	2f 90       	pop	r2
    3386:	08 95       	ret

00003388 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    3388:	0f 93       	push	r16
    338a:	1f 93       	push	r17
    338c:	cf 93       	push	r28
    338e:	df 93       	push	r29
    3390:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    3392:	0e 94 e7 05 	call	0xbce	; 0xbce <validate>
	if (res == FR_OK) {
    3396:	88 23       	and	r24, r24
    3398:	09 f0       	breq	.+2      	; 0x339c <f_sync+0x14>
    339a:	4c c0       	rjmp	.+152    	; 0x3434 <f_sync+0xac>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    339c:	9c 81       	ldd	r25, Y+4	; 0x04
    339e:	95 ff       	sbrs	r25, 5
    33a0:	49 c0       	rjmp	.+146    	; 0x3434 <f_sync+0xac>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    33a2:	96 ff       	sbrs	r25, 6
    33a4:	12 c0       	rjmp	.+36     	; 0x33ca <f_sync+0x42>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    33a6:	e8 81       	ld	r30, Y
    33a8:	f9 81       	ldd	r31, Y+1	; 0x01
    33aa:	be 01       	movw	r22, r28
    33ac:	60 5e       	subi	r22, 0xE0	; 224
    33ae:	7f 4f       	sbci	r23, 0xFF	; 255
    33b0:	2e 89       	ldd	r18, Y+22	; 0x16
    33b2:	3f 89       	ldd	r19, Y+23	; 0x17
    33b4:	48 8d       	ldd	r20, Y+24	; 0x18
    33b6:	59 8d       	ldd	r21, Y+25	; 0x19
    33b8:	81 81       	ldd	r24, Z+1	; 0x01
    33ba:	01 e0       	ldi	r16, 0x01	; 1
    33bc:	0e 94 8d 02 	call	0x51a	; 0x51a <disk_write>
    33c0:	88 23       	and	r24, r24
    33c2:	b9 f5       	brne	.+110    	; 0x3432 <f_sync+0xaa>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    33c4:	8c 81       	ldd	r24, Y+4	; 0x04
    33c6:	8f 7b       	andi	r24, 0xBF	; 191
    33c8:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    33ca:	4a 8d       	ldd	r20, Y+26	; 0x1a
    33cc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    33ce:	6c 8d       	ldd	r22, Y+28	; 0x1c
    33d0:	7d 8d       	ldd	r23, Y+29	; 0x1d
    33d2:	88 81       	ld	r24, Y
    33d4:	99 81       	ldd	r25, Y+1	; 0x01
    33d6:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
			if (res == FR_OK) {
    33da:	88 23       	and	r24, r24
    33dc:	59 f5       	brne	.+86     	; 0x3434 <f_sync+0xac>
				dir = fp->dir_ptr;
    33de:	0e 8d       	ldd	r16, Y+30	; 0x1e
    33e0:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    33e2:	f8 01       	movw	r30, r16
    33e4:	83 85       	ldd	r24, Z+11	; 0x0b
    33e6:	80 62       	ori	r24, 0x20	; 32
    33e8:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    33ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    33ec:	84 8f       	std	Z+28, r24	; 0x1c
    33ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    33f0:	85 8f       	std	Z+29, r24	; 0x1d
    33f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    33f4:	86 8f       	std	Z+30, r24	; 0x1e
    33f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f8:	87 8f       	std	Z+31, r24	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    33fa:	4e 85       	ldd	r20, Y+14	; 0x0e
    33fc:	5f 85       	ldd	r21, Y+15	; 0x0f
    33fe:	68 89       	ldd	r22, Y+16	; 0x10
    3400:	79 89       	ldd	r23, Y+17	; 0x11
    3402:	c8 01       	movw	r24, r16
    3404:	0e 94 4c 05 	call	0xa98	; 0xa98 <st_clust>
				tim = get_fattime();						/* Update updated time */
    3408:	0e 94 27 0c 	call	0x184e	; 0x184e <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    340c:	f8 01       	movw	r30, r16
    340e:	66 8b       	std	Z+22, r22	; 0x16
    3410:	77 8b       	std	Z+23, r23	; 0x17
    3412:	80 8f       	std	Z+24, r24	; 0x18
    3414:	91 8f       	std	Z+25, r25	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    3416:	12 8a       	std	Z+18, r1	; 0x12
    3418:	13 8a       	std	Z+19, r1	; 0x13
				fp->flag &= ~FA__WRITTEN;
    341a:	8c 81       	ldd	r24, Y+4	; 0x04
    341c:	8f 7d       	andi	r24, 0xDF	; 223
    341e:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    3420:	e8 81       	ld	r30, Y
    3422:	f9 81       	ldd	r31, Y+1	; 0x01
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    3428:	88 81       	ld	r24, Y
    342a:	99 81       	ldd	r25, Y+1	; 0x01
    342c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <sync>
    3430:	01 c0       	rjmp	.+2      	; 0x3434 <f_sync+0xac>
	if (res == FR_OK) {
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					LEAVE_FF(fp->fs, FR_DISK_ERR);
    3432:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    3434:	df 91       	pop	r29
    3436:	cf 91       	pop	r28
    3438:	1f 91       	pop	r17
    343a:	0f 91       	pop	r16
    343c:	08 95       	ret

0000343e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    343e:	cf 93       	push	r28
    3440:	df 93       	push	r29
    3442:	ec 01       	movw	r28, r24
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
		LEAVE_FF(fs, res);
	}
#else
	res = f_sync(fp);		/* Flush cached data */
    3444:	0e 94 c4 19 	call	0x3388	; 0x3388 <f_sync>
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    3448:	88 23       	and	r24, r24
    344a:	11 f4       	brne	.+4      	; 0x3450 <f_close+0x12>
    344c:	19 82       	std	Y+1, r1	; 0x01
    344e:	18 82       	st	Y, r1
	return res;
#endif
}
    3450:	df 91       	pop	r29
    3452:	cf 91       	pop	r28
    3454:	08 95       	ret

00003456 <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
    3456:	88 23       	and	r24, r24
    3458:	19 f4       	brne	.+6      	; 0x3460 <f_chdrive+0xa>

	CurrVol = drv;
    345a:	10 92 2d 01 	sts	0x012D, r1

	return FR_OK;
    345e:	08 95       	ret

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
    3460:	8b e0       	ldi	r24, 0x0B	; 11

	CurrVol = drv;

	return FR_OK;
}
    3462:	08 95       	ret

00003464 <f_chdir>:


FRESULT f_chdir (
	const TCHAR *path	/* Pointer to the directory path */
)
{
    3464:	ef 92       	push	r14
    3466:	ff 92       	push	r15
    3468:	1f 93       	push	r17
    346a:	cf 93       	push	r28
    346c:	df 93       	push	r29
    346e:	cd b7       	in	r28, 0x3d	; 61
    3470:	de b7       	in	r29, 0x3e	; 62
    3472:	a4 97       	sbiw	r28, 0x24	; 36
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	f8 94       	cli
    3478:	de bf       	out	0x3e, r29	; 62
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	cd bf       	out	0x3d, r28	; 61
    347e:	9c a3       	lds	r25, 0x5c
    3480:	8b a3       	lds	r24, 0x5b
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    3482:	ce 01       	movw	r24, r28
    3484:	83 96       	adiw	r24, 0x23	; 35
    3486:	be 01       	movw	r22, r28
    3488:	6f 5f       	subi	r22, 0xFF	; 255
    348a:	7f 4f       	sbci	r23, 0xFF	; 255
    348c:	40 e0       	ldi	r20, 0x00	; 0
    348e:	0e 94 a4 06 	call	0xd48	; 0xd48 <chk_mounted>
    3492:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3494:	88 23       	and	r24, r24
    3496:	81 f5       	brne	.+96     	; 0x34f8 <f_chdir+0x94>
		INIT_BUF(dj);
    3498:	ce 01       	movw	r24, r28
    349a:	47 96       	adiw	r24, 0x17	; 23
    349c:	9e 8b       	std	Y+22, r25	; 0x16
    349e:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the path */
    34a0:	6b a1       	lds	r22, 0x4b
    34a2:	7c a1       	lds	r23, 0x4c
    34a4:	ce 01       	movw	r24, r28
    34a6:	01 96       	adiw	r24, 0x01	; 1
    34a8:	0e 94 a8 11 	call	0x2350	; 0x2350 <follow_path>
    34ac:	18 2f       	mov	r17, r24
		FREE_BUF();
		if (res == FR_OK) {					/* Follow completed */
    34ae:	88 23       	and	r24, r24
    34b0:	01 f5       	brne	.+64     	; 0x34f2 <f_chdir+0x8e>
			if (!dj.dir) {
    34b2:	eb 89       	ldd	r30, Y+19	; 0x13
    34b4:	fc 89       	ldd	r31, Y+20	; 0x14
    34b6:	30 97       	sbiw	r30, 0x00	; 0
    34b8:	59 f4       	brne	.+22     	; 0x34d0 <f_chdir+0x6c>
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
    34ba:	e9 81       	ldd	r30, Y+1	; 0x01
    34bc:	fa 81       	ldd	r31, Y+2	; 0x02
    34be:	8f 81       	ldd	r24, Y+7	; 0x07
    34c0:	98 85       	ldd	r25, Y+8	; 0x08
    34c2:	a9 85       	ldd	r26, Y+9	; 0x09
    34c4:	ba 85       	ldd	r27, Y+10	; 0x0a
    34c6:	86 8b       	std	Z+22, r24	; 0x16
    34c8:	97 8b       	std	Z+23, r25	; 0x17
    34ca:	a0 8f       	std	Z+24, r26	; 0x18
    34cc:	b1 8f       	std	Z+25, r27	; 0x19
    34ce:	14 c0       	rjmp	.+40     	; 0x34f8 <f_chdir+0x94>
			} else {
				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
    34d0:	83 85       	ldd	r24, Z+11	; 0x0b
    34d2:	84 ff       	sbrs	r24, 4
    34d4:	1e c0       	rjmp	.+60     	; 0x3512 <f_chdir+0xae>
					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
    34d6:	e9 80       	ldd	r14, Y+1	; 0x01
    34d8:	fa 80       	ldd	r15, Y+2	; 0x02
    34da:	c7 01       	movw	r24, r14
    34dc:	bf 01       	movw	r22, r30
    34de:	0e 94 27 05 	call	0xa4e	; 0xa4e <ld_clust>
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22
    34e6:	f7 01       	movw	r30, r14
    34e8:	86 8b       	std	Z+22, r24	; 0x16
    34ea:	97 8b       	std	Z+23, r25	; 0x17
    34ec:	a0 8f       	std	Z+24, r26	; 0x18
    34ee:	b1 8f       	std	Z+25, r27	; 0x19
    34f0:	03 c0       	rjmp	.+6      	; 0x34f8 <f_chdir+0x94>
				else
					res = FR_NO_PATH;		/* Reached but a file */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    34f2:	84 30       	cpi	r24, 0x04	; 4
    34f4:	09 f4       	brne	.+2      	; 0x34f8 <f_chdir+0x94>
    34f6:	15 e0       	ldi	r17, 0x05	; 5
	}

	LEAVE_FF(dj.fs, res);
}
    34f8:	81 2f       	mov	r24, r17
    34fa:	a4 96       	adiw	r28, 0x24	; 36
    34fc:	0f b6       	in	r0, 0x3f	; 63
    34fe:	f8 94       	cli
    3500:	de bf       	out	0x3e, r29	; 62
    3502:	0f be       	out	0x3f, r0	; 63
    3504:	cd bf       	out	0x3d, r28	; 61
    3506:	df 91       	pop	r29
    3508:	cf 91       	pop	r28
    350a:	1f 91       	pop	r17
    350c:	ff 90       	pop	r15
    350e:	ef 90       	pop	r14
    3510:	08 95       	ret
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
			} else {
				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
				else
					res = FR_NO_PATH;		/* Reached but a file */
    3512:	15 e0       	ldi	r17, 0x05	; 5
    3514:	f1 cf       	rjmp	.-30     	; 0x34f8 <f_chdir+0x94>

00003516 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    3516:	2f 92       	push	r2
    3518:	3f 92       	push	r3
    351a:	4f 92       	push	r4
    351c:	5f 92       	push	r5
    351e:	6f 92       	push	r6
    3520:	7f 92       	push	r7
    3522:	8f 92       	push	r8
    3524:	9f 92       	push	r9
    3526:	af 92       	push	r10
    3528:	bf 92       	push	r11
    352a:	cf 92       	push	r12
    352c:	df 92       	push	r13
    352e:	ef 92       	push	r14
    3530:	ff 92       	push	r15
    3532:	0f 93       	push	r16
    3534:	1f 93       	push	r17
    3536:	cf 93       	push	r28
    3538:	df 93       	push	r29
    353a:	00 d0       	rcall	.+0      	; 0x353c <f_lseek+0x26>
    353c:	00 d0       	rcall	.+0      	; 0x353e <f_lseek+0x28>
    353e:	00 d0       	rcall	.+0      	; 0x3540 <f_lseek+0x2a>
    3540:	cd b7       	in	r28, 0x3d	; 61
    3542:	de b7       	in	r29, 0x3e	; 62
    3544:	9e 83       	std	Y+6, r25	; 0x06
    3546:	8d 83       	std	Y+5, r24	; 0x05
    3548:	6a 01       	movw	r12, r20
    354a:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp);					/* Check validity of the object */
    354c:	0e 94 e7 05 	call	0xbce	; 0xbce <validate>
    3550:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3552:	88 23       	and	r24, r24
    3554:	09 f0       	breq	.+2      	; 0x3558 <f_lseek+0x42>
    3556:	e6 c1       	rjmp	.+972    	; 0x3924 <f_lseek+0x40e>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    3558:	ad 81       	ldd	r26, Y+5	; 0x05
    355a:	be 81       	ldd	r27, Y+6	; 0x06
    355c:	14 96       	adiw	r26, 0x04	; 4
    355e:	2c 91       	ld	r18, X
    3560:	14 97       	sbiw	r26, 0x04	; 4
    3562:	22 23       	and	r18, r18
    3564:	0c f4       	brge	.+2      	; 0x3568 <f_lseek+0x52>
    3566:	dd c1       	rjmp	.+954    	; 0x3922 <f_lseek+0x40c>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    3568:	1a 96       	adiw	r26, 0x0a	; 10
    356a:	8d 91       	ld	r24, X+
    356c:	9d 91       	ld	r25, X+
    356e:	0d 90       	ld	r0, X+
    3570:	bc 91       	ld	r27, X
    3572:	a0 2d       	mov	r26, r0
    3574:	8c 15       	cp	r24, r12
    3576:	9d 05       	cpc	r25, r13
    3578:	ae 05       	cpc	r26, r14
    357a:	bf 05       	cpc	r27, r15
    357c:	20 f4       	brcc	.+8      	; 0x3586 <f_lseek+0x70>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    357e:	21 fd       	sbrc	r18, 1
    3580:	02 c0       	rjmp	.+4      	; 0x3586 <f_lseek+0x70>
#endif
			) ofs = fp->fsize;
    3582:	6c 01       	movw	r12, r24
    3584:	7d 01       	movw	r14, r26

		ifptr = fp->fptr;
    3586:	ed 81       	ldd	r30, Y+5	; 0x05
    3588:	fe 81       	ldd	r31, Y+6	; 0x06
    358a:	46 81       	ldd	r20, Z+6	; 0x06
    358c:	57 81       	ldd	r21, Z+7	; 0x07
    358e:	60 85       	ldd	r22, Z+8	; 0x08
    3590:	71 85       	ldd	r23, Z+9	; 0x09
		fp->fptr = nsect = 0;
    3592:	16 82       	std	Z+6, r1	; 0x06
    3594:	17 82       	std	Z+7, r1	; 0x07
    3596:	10 86       	std	Z+8, r1	; 0x08
    3598:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    359a:	c1 14       	cp	r12, r1
    359c:	d1 04       	cpc	r13, r1
    359e:	e1 04       	cpc	r14, r1
    35a0:	f1 04       	cpc	r15, r1
    35a2:	09 f4       	brne	.+2      	; 0x35a6 <f_lseek+0x90>
    35a4:	bf c1       	rjmp	.+894    	; 0x3924 <f_lseek+0x40e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    35a6:	20 80       	ld	r2, Z
    35a8:	31 80       	ldd	r3, Z+1	; 0x01
    35aa:	f1 01       	movw	r30, r2
    35ac:	82 81       	ldd	r24, Z+2	; 0x02
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	a0 e0       	ldi	r26, 0x00	; 0
    35b2:	b0 e0       	ldi	r27, 0x00	; 0
    35b4:	4c 01       	movw	r8, r24
    35b6:	5d 01       	movw	r10, r26
    35b8:	07 2e       	mov	r0, r23
    35ba:	79 e0       	ldi	r23, 0x09	; 9
    35bc:	88 0c       	add	r8, r8
    35be:	99 1c       	adc	r9, r9
    35c0:	aa 1c       	adc	r10, r10
    35c2:	bb 1c       	adc	r11, r11
    35c4:	7a 95       	dec	r23
    35c6:	d1 f7       	brne	.-12     	; 0x35bc <f_lseek+0xa6>
    35c8:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    35ca:	41 15       	cp	r20, r1
    35cc:	51 05       	cpc	r21, r1
    35ce:	61 05       	cpc	r22, r1
    35d0:	71 05       	cpc	r23, r1
    35d2:	f1 f1       	breq	.+124    	; 0x3650 <f_lseek+0x13a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    35d4:	2a 01       	movw	r4, r20
    35d6:	3b 01       	movw	r6, r22
    35d8:	08 94       	sec
    35da:	41 08       	sbc	r4, r1
    35dc:	51 08       	sbc	r5, r1
    35de:	61 08       	sbc	r6, r1
    35e0:	71 08       	sbc	r7, r1
    35e2:	c7 01       	movw	r24, r14
    35e4:	b6 01       	movw	r22, r12
    35e6:	61 50       	subi	r22, 0x01	; 1
    35e8:	70 40       	sbci	r23, 0x00	; 0
    35ea:	80 40       	sbci	r24, 0x00	; 0
    35ec:	90 40       	sbci	r25, 0x00	; 0
    35ee:	a5 01       	movw	r20, r10
    35f0:	94 01       	movw	r18, r8
    35f2:	0e 94 3d 24 	call	0x487a	; 0x487a <__udivmodsi4>
    35f6:	29 83       	std	Y+1, r18	; 0x01
    35f8:	3a 83       	std	Y+2, r19	; 0x02
    35fa:	4b 83       	std	Y+3, r20	; 0x03
    35fc:	5c 83       	std	Y+4, r21	; 0x04
    35fe:	c3 01       	movw	r24, r6
    3600:	b2 01       	movw	r22, r4
    3602:	a5 01       	movw	r20, r10
    3604:	94 01       	movw	r18, r8
    3606:	0e 94 3d 24 	call	0x487a	; 0x487a <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    360a:	89 81       	ldd	r24, Y+1	; 0x01
    360c:	9a 81       	ldd	r25, Y+2	; 0x02
    360e:	ab 81       	ldd	r26, Y+3	; 0x03
    3610:	bc 81       	ldd	r27, Y+4	; 0x04
    3612:	82 17       	cp	r24, r18
    3614:	93 07       	cpc	r25, r19
    3616:	a4 07       	cpc	r26, r20
    3618:	b5 07       	cpc	r27, r21
    361a:	d0 f0       	brcs	.+52     	; 0x3650 <f_lseek+0x13a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    361c:	88 27       	eor	r24, r24
    361e:	99 27       	eor	r25, r25
    3620:	dc 01       	movw	r26, r24
    3622:	88 19       	sub	r24, r8
    3624:	99 09       	sbc	r25, r9
    3626:	aa 09       	sbc	r26, r10
    3628:	bb 09       	sbc	r27, r11
    362a:	84 21       	and	r24, r4
    362c:	95 21       	and	r25, r5
    362e:	a6 21       	and	r26, r6
    3630:	b7 21       	and	r27, r7
    3632:	ed 81       	ldd	r30, Y+5	; 0x05
    3634:	fe 81       	ldd	r31, Y+6	; 0x06
    3636:	86 83       	std	Z+6, r24	; 0x06
    3638:	97 83       	std	Z+7, r25	; 0x07
    363a:	a0 87       	std	Z+8, r26	; 0x08
    363c:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    363e:	c8 1a       	sub	r12, r24
    3640:	d9 0a       	sbc	r13, r25
    3642:	ea 0a       	sbc	r14, r26
    3644:	fb 0a       	sbc	r15, r27
				clst = fp->clust;
    3646:	42 89       	ldd	r20, Z+18	; 0x12
    3648:	53 89       	ldd	r21, Z+19	; 0x13
    364a:	64 89       	ldd	r22, Z+20	; 0x14
    364c:	75 89       	ldd	r23, Z+21	; 0x15
    364e:	42 c0       	rjmp	.+132    	; 0x36d4 <f_lseek+0x1be>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    3650:	ad 81       	ldd	r26, Y+5	; 0x05
    3652:	be 81       	ldd	r27, Y+6	; 0x06
    3654:	1e 96       	adiw	r26, 0x0e	; 14
    3656:	4d 91       	ld	r20, X+
    3658:	5d 91       	ld	r21, X+
    365a:	6d 91       	ld	r22, X+
    365c:	7c 91       	ld	r23, X
    365e:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    3660:	41 15       	cp	r20, r1
    3662:	51 05       	cpc	r21, r1
    3664:	61 05       	cpc	r22, r1
    3666:	71 05       	cpc	r23, r1
    3668:	69 f5       	brne	.+90     	; 0x36c4 <f_lseek+0x1ae>
					clst = create_chain(fp->fs, 0);
    366a:	c1 01       	movw	r24, r2
    366c:	40 e0       	ldi	r20, 0x00	; 0
    366e:	50 e0       	ldi	r21, 0x00	; 0
    3670:	ba 01       	movw	r22, r20
    3672:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <create_chain>
    3676:	ab 01       	movw	r20, r22
    3678:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    367a:	41 30       	cpi	r20, 0x01	; 1
    367c:	51 05       	cpc	r21, r1
    367e:	61 05       	cpc	r22, r1
    3680:	71 05       	cpc	r23, r1
    3682:	39 f4       	brne	.+14     	; 0x3692 <f_lseek+0x17c>
    3684:	ed 81       	ldd	r30, Y+5	; 0x05
    3686:	fe 81       	ldd	r31, Y+6	; 0x06
    3688:	84 81       	ldd	r24, Z+4	; 0x04
    368a:	80 68       	ori	r24, 0x80	; 128
    368c:	84 83       	std	Z+4, r24	; 0x04
    368e:	12 e0       	ldi	r17, 0x02	; 2
    3690:	49 c1       	rjmp	.+658    	; 0x3924 <f_lseek+0x40e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3692:	4f 3f       	cpi	r20, 0xFF	; 255
    3694:	ff ef       	ldi	r31, 0xFF	; 255
    3696:	5f 07       	cpc	r21, r31
    3698:	ff ef       	ldi	r31, 0xFF	; 255
    369a:	6f 07       	cpc	r22, r31
    369c:	ff ef       	ldi	r31, 0xFF	; 255
    369e:	7f 07       	cpc	r23, r31
    36a0:	59 f4       	brne	.+22     	; 0x36b8 <f_lseek+0x1a2>
    36a2:	ad 81       	ldd	r26, Y+5	; 0x05
    36a4:	be 81       	ldd	r27, Y+6	; 0x06
    36a6:	14 96       	adiw	r26, 0x04	; 4
    36a8:	8c 91       	ld	r24, X
    36aa:	14 97       	sbiw	r26, 0x04	; 4
    36ac:	80 68       	ori	r24, 0x80	; 128
    36ae:	14 96       	adiw	r26, 0x04	; 4
    36b0:	8c 93       	st	X, r24
    36b2:	14 97       	sbiw	r26, 0x04	; 4
    36b4:	11 e0       	ldi	r17, 0x01	; 1
    36b6:	36 c1       	rjmp	.+620    	; 0x3924 <f_lseek+0x40e>
					fp->sclust = clst;
    36b8:	ed 81       	ldd	r30, Y+5	; 0x05
    36ba:	fe 81       	ldd	r31, Y+6	; 0x06
    36bc:	46 87       	std	Z+14, r20	; 0x0e
    36be:	57 87       	std	Z+15, r21	; 0x0f
    36c0:	60 8b       	std	Z+16, r22	; 0x10
    36c2:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->clust = clst;
    36c4:	ad 81       	ldd	r26, Y+5	; 0x05
    36c6:	be 81       	ldd	r27, Y+6	; 0x06
    36c8:	52 96       	adiw	r26, 0x12	; 18
    36ca:	4d 93       	st	X+, r20
    36cc:	5d 93       	st	X+, r21
    36ce:	6d 93       	st	X+, r22
    36d0:	7c 93       	st	X, r23
    36d2:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    36d4:	41 15       	cp	r20, r1
    36d6:	51 05       	cpc	r21, r1
    36d8:	61 05       	cpc	r22, r1
    36da:	71 05       	cpc	r23, r1
    36dc:	09 f4       	brne	.+2      	; 0x36e0 <f_lseek+0x1ca>
    36de:	aa c0       	rjmp	.+340    	; 0x3834 <f_lseek+0x31e>
				while (ofs > bcs) {						/* Cluster following loop */
    36e0:	8c 14       	cp	r8, r12
    36e2:	9d 04       	cpc	r9, r13
    36e4:	ae 04       	cpc	r10, r14
    36e6:	bf 04       	cpc	r11, r15
    36e8:	08 f0       	brcs	.+2      	; 0x36ec <f_lseek+0x1d6>
    36ea:	68 c0       	rjmp	.+208    	; 0x37bc <f_lseek+0x2a6>
    36ec:	4d 80       	ldd	r4, Y+5	; 0x05
    36ee:	5e 80       	ldd	r5, Y+6	; 0x06
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    36f0:	f2 01       	movw	r30, r4
    36f2:	84 81       	ldd	r24, Z+4	; 0x04
    36f4:	81 ff       	sbrs	r24, 1
    36f6:	0c c0       	rjmp	.+24     	; 0x3710 <f_lseek+0x1fa>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    36f8:	80 81       	ld	r24, Z
    36fa:	91 81       	ldd	r25, Z+1	; 0x01
    36fc:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <create_chain>
    3700:	ab 01       	movw	r20, r22
    3702:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    3704:	41 15       	cp	r20, r1
    3706:	51 05       	cpc	r21, r1
    3708:	61 05       	cpc	r22, r1
    370a:	71 05       	cpc	r23, r1
    370c:	39 f4       	brne	.+14     	; 0x371c <f_lseek+0x206>
    370e:	52 c0       	rjmp	.+164    	; 0x37b4 <f_lseek+0x29e>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    3710:	80 81       	ld	r24, Z
    3712:	91 81       	ldd	r25, Z+1	; 0x01
    3714:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <get_fat>
    3718:	ab 01       	movw	r20, r22
    371a:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    371c:	4f 3f       	cpi	r20, 0xFF	; 255
    371e:	bf ef       	ldi	r27, 0xFF	; 255
    3720:	5b 07       	cpc	r21, r27
    3722:	bf ef       	ldi	r27, 0xFF	; 255
    3724:	6b 07       	cpc	r22, r27
    3726:	bf ef       	ldi	r27, 0xFF	; 255
    3728:	7b 07       	cpc	r23, r27
    372a:	41 f4       	brne	.+16     	; 0x373c <f_lseek+0x226>
    372c:	5e 82       	std	Y+6, r5	; 0x06
    372e:	4d 82       	std	Y+5, r4	; 0x05
    3730:	f2 01       	movw	r30, r4
    3732:	84 81       	ldd	r24, Z+4	; 0x04
    3734:	80 68       	ori	r24, 0x80	; 128
    3736:	84 83       	std	Z+4, r24	; 0x04
    3738:	11 e0       	ldi	r17, 0x01	; 1
    373a:	f4 c0       	rjmp	.+488    	; 0x3924 <f_lseek+0x40e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    373c:	42 30       	cpi	r20, 0x02	; 2
    373e:	51 05       	cpc	r21, r1
    3740:	61 05       	cpc	r22, r1
    3742:	71 05       	cpc	r23, r1
    3744:	60 f0       	brcs	.+24     	; 0x375e <f_lseek+0x248>
    3746:	d2 01       	movw	r26, r4
    3748:	ed 91       	ld	r30, X+
    374a:	fc 91       	ld	r31, X
    374c:	82 8d       	ldd	r24, Z+26	; 0x1a
    374e:	93 8d       	ldd	r25, Z+27	; 0x1b
    3750:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3752:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3754:	48 17       	cp	r20, r24
    3756:	59 07       	cpc	r21, r25
    3758:	6a 07       	cpc	r22, r26
    375a:	7b 07       	cpc	r23, r27
    375c:	40 f0       	brcs	.+16     	; 0x376e <f_lseek+0x258>
    375e:	5e 82       	std	Y+6, r5	; 0x06
    3760:	4d 82       	std	Y+5, r4	; 0x05
    3762:	f2 01       	movw	r30, r4
    3764:	84 81       	ldd	r24, Z+4	; 0x04
    3766:	80 68       	ori	r24, 0x80	; 128
    3768:	84 83       	std	Z+4, r24	; 0x04
    376a:	12 e0       	ldi	r17, 0x02	; 2
    376c:	db c0       	rjmp	.+438    	; 0x3924 <f_lseek+0x40e>
					fp->clust = clst;
    376e:	d2 01       	movw	r26, r4
    3770:	52 96       	adiw	r26, 0x12	; 18
    3772:	4d 93       	st	X+, r20
    3774:	5d 93       	st	X+, r21
    3776:	6d 93       	st	X+, r22
    3778:	7c 93       	st	X, r23
    377a:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    377c:	16 96       	adiw	r26, 0x06	; 6
    377e:	8d 91       	ld	r24, X+
    3780:	9d 91       	ld	r25, X+
    3782:	0d 90       	ld	r0, X+
    3784:	bc 91       	ld	r27, X
    3786:	a0 2d       	mov	r26, r0
    3788:	88 0d       	add	r24, r8
    378a:	99 1d       	adc	r25, r9
    378c:	aa 1d       	adc	r26, r10
    378e:	bb 1d       	adc	r27, r11
    3790:	f2 01       	movw	r30, r4
    3792:	86 83       	std	Z+6, r24	; 0x06
    3794:	97 83       	std	Z+7, r25	; 0x07
    3796:	a0 87       	std	Z+8, r26	; 0x08
    3798:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    379a:	c8 18       	sub	r12, r8
    379c:	d9 08       	sbc	r13, r9
    379e:	ea 08       	sbc	r14, r10
    37a0:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    37a2:	8c 14       	cp	r8, r12
    37a4:	9d 04       	cpc	r9, r13
    37a6:	ae 04       	cpc	r10, r14
    37a8:	bf 04       	cpc	r11, r15
    37aa:	08 f4       	brcc	.+2      	; 0x37ae <f_lseek+0x298>
    37ac:	a1 cf       	rjmp	.-190    	; 0x36f0 <f_lseek+0x1da>
    37ae:	5e 82       	std	Y+6, r5	; 0x06
    37b0:	4d 82       	std	Y+5, r4	; 0x05
    37b2:	04 c0       	rjmp	.+8      	; 0x37bc <f_lseek+0x2a6>
    37b4:	5e 82       	std	Y+6, r5	; 0x06
    37b6:	4d 82       	std	Y+5, r4	; 0x05
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    37b8:	75 01       	movw	r14, r10
    37ba:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    37bc:	ed 81       	ldd	r30, Y+5	; 0x05
    37be:	fe 81       	ldd	r31, Y+6	; 0x06
    37c0:	86 81       	ldd	r24, Z+6	; 0x06
    37c2:	97 81       	ldd	r25, Z+7	; 0x07
    37c4:	a0 85       	ldd	r26, Z+8	; 0x08
    37c6:	b1 85       	ldd	r27, Z+9	; 0x09
    37c8:	8c 0d       	add	r24, r12
    37ca:	9d 1d       	adc	r25, r13
    37cc:	ae 1d       	adc	r26, r14
    37ce:	bf 1d       	adc	r27, r15
    37d0:	86 83       	std	Z+6, r24	; 0x06
    37d2:	97 83       	std	Z+7, r25	; 0x07
    37d4:	a0 87       	std	Z+8, r26	; 0x08
    37d6:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    37d8:	d7 01       	movw	r26, r14
    37da:	c6 01       	movw	r24, r12
    37dc:	91 70       	andi	r25, 0x01	; 1
    37de:	a0 70       	andi	r26, 0x00	; 0
    37e0:	b0 70       	andi	r27, 0x00	; 0
    37e2:	00 97       	sbiw	r24, 0x00	; 0
    37e4:	a1 05       	cpc	r26, r1
    37e6:	b1 05       	cpc	r27, r1
    37e8:	49 f1       	breq	.+82     	; 0x383c <f_lseek+0x326>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    37ea:	80 81       	ld	r24, Z
    37ec:	91 81       	ldd	r25, Z+1	; 0x01
    37ee:	0e 94 2b 0c 	call	0x1856	; 0x1856 <clust2sect>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    37f6:	00 97       	sbiw	r24, 0x00	; 0
    37f8:	a1 05       	cpc	r26, r1
    37fa:	b1 05       	cpc	r27, r1
    37fc:	59 f4       	brne	.+22     	; 0x3814 <f_lseek+0x2fe>
    37fe:	ad 81       	ldd	r26, Y+5	; 0x05
    3800:	be 81       	ldd	r27, Y+6	; 0x06
    3802:	14 96       	adiw	r26, 0x04	; 4
    3804:	8c 91       	ld	r24, X
    3806:	14 97       	sbiw	r26, 0x04	; 4
    3808:	80 68       	ori	r24, 0x80	; 128
    380a:	14 96       	adiw	r26, 0x04	; 4
    380c:	8c 93       	st	X, r24
    380e:	14 97       	sbiw	r26, 0x04	; 4
    3810:	12 e0       	ldi	r17, 0x02	; 2
    3812:	88 c0       	rjmp	.+272    	; 0x3924 <f_lseek+0x40e>
					nsect += ofs / SS(fp->fs);
    3814:	46 01       	movw	r8, r12
    3816:	57 01       	movw	r10, r14
    3818:	07 2e       	mov	r0, r23
    381a:	79 e0       	ldi	r23, 0x09	; 9
    381c:	b6 94       	lsr	r11
    381e:	a7 94       	ror	r10
    3820:	97 94       	ror	r9
    3822:	87 94       	ror	r8
    3824:	7a 95       	dec	r23
    3826:	d1 f7       	brne	.-12     	; 0x381c <f_lseek+0x306>
    3828:	70 2d       	mov	r23, r0
    382a:	88 0e       	add	r8, r24
    382c:	99 1e       	adc	r9, r25
    382e:	aa 1e       	adc	r10, r26
    3830:	bb 1e       	adc	r11, r27
    3832:	07 c0       	rjmp	.+14     	; 0x3842 <f_lseek+0x32c>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    3834:	88 24       	eor	r8, r8
    3836:	99 24       	eor	r9, r9
    3838:	54 01       	movw	r10, r8
    383a:	03 c0       	rjmp	.+6      	; 0x3842 <f_lseek+0x32c>
    383c:	88 24       	eor	r8, r8
    383e:	99 24       	eor	r9, r9
    3840:	54 01       	movw	r10, r8
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    3842:	ed 81       	ldd	r30, Y+5	; 0x05
    3844:	fe 81       	ldd	r31, Y+6	; 0x06
    3846:	86 81       	ldd	r24, Z+6	; 0x06
    3848:	97 81       	ldd	r25, Z+7	; 0x07
    384a:	a0 85       	ldd	r26, Z+8	; 0x08
    384c:	b1 85       	ldd	r27, Z+9	; 0x09
    384e:	91 70       	andi	r25, 0x01	; 1
    3850:	a0 70       	andi	r26, 0x00	; 0
    3852:	b0 70       	andi	r27, 0x00	; 0
    3854:	00 97       	sbiw	r24, 0x00	; 0
    3856:	a1 05       	cpc	r26, r1
    3858:	b1 05       	cpc	r27, r1
    385a:	09 f4       	brne	.+2      	; 0x385e <f_lseek+0x348>
    385c:	4b c0       	rjmp	.+150    	; 0x38f4 <f_lseek+0x3de>
    385e:	c6 88       	ldd	r12, Z+22	; 0x16
    3860:	d7 88       	ldd	r13, Z+23	; 0x17
    3862:	e0 8c       	ldd	r14, Z+24	; 0x18
    3864:	f1 8c       	ldd	r15, Z+25	; 0x19
    3866:	c8 14       	cp	r12, r8
    3868:	d9 04       	cpc	r13, r9
    386a:	ea 04       	cpc	r14, r10
    386c:	fb 04       	cpc	r15, r11
    386e:	09 f4       	brne	.+2      	; 0x3872 <f_lseek+0x35c>
    3870:	41 c0       	rjmp	.+130    	; 0x38f4 <f_lseek+0x3de>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
    3872:	84 81       	ldd	r24, Z+4	; 0x04
    3874:	86 ff       	sbrs	r24, 6
    3876:	1f c0       	rjmp	.+62     	; 0x38b6 <f_lseek+0x3a0>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    3878:	01 90       	ld	r0, Z+
    387a:	f0 81       	ld	r31, Z
    387c:	e0 2d       	mov	r30, r0
    387e:	6d 81       	ldd	r22, Y+5	; 0x05
    3880:	7e 81       	ldd	r23, Y+6	; 0x06
    3882:	60 5e       	subi	r22, 0xE0	; 224
    3884:	7f 4f       	sbci	r23, 0xFF	; 255
    3886:	81 81       	ldd	r24, Z+1	; 0x01
    3888:	a7 01       	movw	r20, r14
    388a:	96 01       	movw	r18, r12
    388c:	01 e0       	ldi	r16, 0x01	; 1
    388e:	0e 94 8d 02 	call	0x51a	; 0x51a <disk_write>
    3892:	88 23       	and	r24, r24
    3894:	59 f0       	breq	.+22     	; 0x38ac <f_lseek+0x396>
					ABORT(fp->fs, FR_DISK_ERR);
    3896:	ad 81       	ldd	r26, Y+5	; 0x05
    3898:	be 81       	ldd	r27, Y+6	; 0x06
    389a:	14 96       	adiw	r26, 0x04	; 4
    389c:	8c 91       	ld	r24, X
    389e:	14 97       	sbiw	r26, 0x04	; 4
    38a0:	80 68       	ori	r24, 0x80	; 128
    38a2:	14 96       	adiw	r26, 0x04	; 4
    38a4:	8c 93       	st	X, r24
    38a6:	14 97       	sbiw	r26, 0x04	; 4
    38a8:	11 e0       	ldi	r17, 0x01	; 1
    38aa:	3c c0       	rjmp	.+120    	; 0x3924 <f_lseek+0x40e>
				fp->flag &= ~FA__DIRTY;
    38ac:	ed 81       	ldd	r30, Y+5	; 0x05
    38ae:	fe 81       	ldd	r31, Y+6	; 0x06
    38b0:	84 81       	ldd	r24, Z+4	; 0x04
    38b2:	8f 7b       	andi	r24, 0xBF	; 191
    38b4:	84 83       	std	Z+4, r24	; 0x04
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
    38b6:	ad 81       	ldd	r26, Y+5	; 0x05
    38b8:	be 81       	ldd	r27, Y+6	; 0x06
    38ba:	ed 91       	ld	r30, X+
    38bc:	fc 91       	ld	r31, X
    38be:	11 97       	sbiw	r26, 0x01	; 1
    38c0:	bd 01       	movw	r22, r26
    38c2:	60 5e       	subi	r22, 0xE0	; 224
    38c4:	7f 4f       	sbci	r23, 0xFF	; 255
    38c6:	81 81       	ldd	r24, Z+1	; 0x01
    38c8:	a5 01       	movw	r20, r10
    38ca:	94 01       	movw	r18, r8
    38cc:	01 e0       	ldi	r16, 0x01	; 1
    38ce:	0e 94 37 02 	call	0x46e	; 0x46e <disk_read>
    38d2:	88 23       	and	r24, r24
    38d4:	39 f0       	breq	.+14     	; 0x38e4 <f_lseek+0x3ce>
				ABORT(fp->fs, FR_DISK_ERR);
    38d6:	ed 81       	ldd	r30, Y+5	; 0x05
    38d8:	fe 81       	ldd	r31, Y+6	; 0x06
    38da:	84 81       	ldd	r24, Z+4	; 0x04
    38dc:	80 68       	ori	r24, 0x80	; 128
    38de:	84 83       	std	Z+4, r24	; 0x04
    38e0:	11 e0       	ldi	r17, 0x01	; 1
    38e2:	20 c0       	rjmp	.+64     	; 0x3924 <f_lseek+0x40e>
#endif
			fp->dsect = nsect;
    38e4:	ad 81       	ldd	r26, Y+5	; 0x05
    38e6:	be 81       	ldd	r27, Y+6	; 0x06
    38e8:	56 96       	adiw	r26, 0x16	; 22
    38ea:	8d 92       	st	X+, r8
    38ec:	9d 92       	st	X+, r9
    38ee:	ad 92       	st	X+, r10
    38f0:	bc 92       	st	X, r11
    38f2:	59 97       	sbiw	r26, 0x19	; 25
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    38f4:	ed 81       	ldd	r30, Y+5	; 0x05
    38f6:	fe 81       	ldd	r31, Y+6	; 0x06
    38f8:	86 81       	ldd	r24, Z+6	; 0x06
    38fa:	97 81       	ldd	r25, Z+7	; 0x07
    38fc:	a0 85       	ldd	r26, Z+8	; 0x08
    38fe:	b1 85       	ldd	r27, Z+9	; 0x09
    3900:	42 85       	ldd	r20, Z+10	; 0x0a
    3902:	53 85       	ldd	r21, Z+11	; 0x0b
    3904:	64 85       	ldd	r22, Z+12	; 0x0c
    3906:	75 85       	ldd	r23, Z+13	; 0x0d
    3908:	48 17       	cp	r20, r24
    390a:	59 07       	cpc	r21, r25
    390c:	6a 07       	cpc	r22, r26
    390e:	7b 07       	cpc	r23, r27
    3910:	48 f4       	brcc	.+18     	; 0x3924 <f_lseek+0x40e>
			fp->fsize = fp->fptr;
    3912:	82 87       	std	Z+10, r24	; 0x0a
    3914:	93 87       	std	Z+11, r25	; 0x0b
    3916:	a4 87       	std	Z+12, r26	; 0x0c
    3918:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    391a:	84 81       	ldd	r24, Z+4	; 0x04
    391c:	80 62       	ori	r24, 0x20	; 32
    391e:	84 83       	std	Z+4, r24	; 0x04
    3920:	01 c0       	rjmp	.+2      	; 0x3924 <f_lseek+0x40e>


	res = validate(fp);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    3922:	12 e0       	ldi	r17, 0x02	; 2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    3924:	81 2f       	mov	r24, r17
    3926:	26 96       	adiw	r28, 0x06	; 6
    3928:	0f b6       	in	r0, 0x3f	; 63
    392a:	f8 94       	cli
    392c:	de bf       	out	0x3e, r29	; 62
    392e:	0f be       	out	0x3f, r0	; 63
    3930:	cd bf       	out	0x3d, r28	; 61
    3932:	df 91       	pop	r29
    3934:	cf 91       	pop	r28
    3936:	1f 91       	pop	r17
    3938:	0f 91       	pop	r16
    393a:	ff 90       	pop	r15
    393c:	ef 90       	pop	r14
    393e:	df 90       	pop	r13
    3940:	cf 90       	pop	r12
    3942:	bf 90       	pop	r11
    3944:	af 90       	pop	r10
    3946:	9f 90       	pop	r9
    3948:	8f 90       	pop	r8
    394a:	7f 90       	pop	r7
    394c:	6f 90       	pop	r6
    394e:	5f 90       	pop	r5
    3950:	4f 90       	pop	r4
    3952:	3f 90       	pop	r3
    3954:	2f 90       	pop	r2
    3956:	08 95       	ret

00003958 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    3958:	ef 92       	push	r14
    395a:	ff 92       	push	r15
    395c:	0f 93       	push	r16
    395e:	1f 93       	push	r17
    3960:	cf 93       	push	r28
    3962:	df 93       	push	r29
    3964:	cd b7       	in	r28, 0x3d	; 61
    3966:	de b7       	in	r29, 0x3e	; 62
    3968:	2e 97       	sbiw	r28, 0x0e	; 14
    396a:	0f b6       	in	r0, 0x3f	; 63
    396c:	f8 94       	cli
    396e:	de bf       	out	0x3e, r29	; 62
    3970:	0f be       	out	0x3f, r0	; 63
    3972:	cd bf       	out	0x3d, r28	; 61
    3974:	8c 01       	movw	r16, r24
    3976:	7e 87       	std	Y+14, r23	; 0x0e
    3978:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	FATFS *fs;
	DEF_NAMEBUF;


	if (!dj) return FR_INVALID_OBJECT;
    397a:	00 97       	sbiw	r24, 0x00	; 0
    397c:	09 f4       	brne	.+2      	; 0x3980 <f_opendir+0x28>
    397e:	4c c0       	rjmp	.+152    	; 0x3a18 <f_opendir+0xc0>

	res = chk_mounted(&path, &dj->fs, 0);
    3980:	ce 01       	movw	r24, r28
    3982:	0d 96       	adiw	r24, 0x0d	; 13
    3984:	b8 01       	movw	r22, r16
    3986:	40 e0       	ldi	r20, 0x00	; 0
    3988:	0e 94 a4 06 	call	0xd48	; 0xd48 <chk_mounted>
	fs = dj->fs;
    398c:	d8 01       	movw	r26, r16
    398e:	ed 90       	ld	r14, X+
    3990:	fc 90       	ld	r15, X
    3992:	11 97       	sbiw	r26, 0x01	; 1
	if (res == FR_OK) {
    3994:	88 23       	and	r24, r24
    3996:	e1 f5       	brne	.+120    	; 0x3a10 <f_opendir+0xb8>
		INIT_BUF(*dj);
    3998:	ce 01       	movw	r24, r28
    399a:	01 96       	adiw	r24, 0x01	; 1
    399c:	55 96       	adiw	r26, 0x15	; 21
    399e:	9c 93       	st	X, r25
    39a0:	8e 93       	st	-X, r24
    39a2:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    39a4:	6d 85       	ldd	r22, Y+13	; 0x0d
    39a6:	7e 85       	ldd	r23, Y+14	; 0x0e
    39a8:	c8 01       	movw	r24, r16
    39aa:	0e 94 a8 11 	call	0x2350	; 0x2350 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    39ae:	88 23       	and	r24, r24
    39b0:	11 f5       	brne	.+68     	; 0x39f6 <f_opendir+0x9e>
			if (dj->dir) {						/* It is not the root dir */
    39b2:	d8 01       	movw	r26, r16
    39b4:	52 96       	adiw	r26, 0x12	; 18
    39b6:	ed 91       	ld	r30, X+
    39b8:	fc 91       	ld	r31, X
    39ba:	53 97       	sbiw	r26, 0x13	; 19
    39bc:	30 97       	sbiw	r30, 0x00	; 0
    39be:	71 f0       	breq	.+28     	; 0x39dc <f_opendir+0x84>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    39c0:	83 85       	ldd	r24, Z+11	; 0x0b
    39c2:	84 ff       	sbrs	r24, 4
    39c4:	1b c0       	rjmp	.+54     	; 0x39fc <f_opendir+0xa4>
					dj->sclust = ld_clust(fs, dj->dir);
    39c6:	c7 01       	movw	r24, r14
    39c8:	bf 01       	movw	r22, r30
    39ca:	0e 94 27 05 	call	0xa4e	; 0xa4e <ld_clust>
    39ce:	dc 01       	movw	r26, r24
    39d0:	cb 01       	movw	r24, r22
    39d2:	f8 01       	movw	r30, r16
    39d4:	86 83       	std	Z+6, r24	; 0x06
    39d6:	97 83       	std	Z+7, r25	; 0x07
    39d8:	a0 87       	std	Z+8, r26	; 0x08
    39da:	b1 87       	std	Z+9, r27	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = fs->id;
    39dc:	d7 01       	movw	r26, r14
    39de:	16 96       	adiw	r26, 0x06	; 6
    39e0:	8d 91       	ld	r24, X+
    39e2:	9c 91       	ld	r25, X
    39e4:	17 97       	sbiw	r26, 0x07	; 7
    39e6:	f8 01       	movw	r30, r16
    39e8:	93 83       	std	Z+3, r25	; 0x03
    39ea:	82 83       	std	Z+2, r24	; 0x02
				res = dir_sdi(dj, 0);			/* Rewind dir */
    39ec:	c8 01       	movw	r24, r16
    39ee:	60 e0       	ldi	r22, 0x00	; 0
    39f0:	70 e0       	ldi	r23, 0x00	; 0
    39f2:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <dir_sdi>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    39f6:	84 30       	cpi	r24, 0x04	; 4
    39f8:	11 f4       	brne	.+4      	; 0x39fe <f_opendir+0xa6>
    39fa:	04 c0       	rjmp	.+8      	; 0x3a04 <f_opendir+0xac>
		if (res == FR_OK) {						/* Follow completed */
			if (dj->dir) {						/* It is not the root dir */
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = ld_clust(fs, dj->dir);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    39fc:	85 e0       	ldi	r24, 0x05	; 5
				dj->id = fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
    39fe:	88 23       	and	r24, r24
    3a00:	61 f0       	breq	.+24     	; 0x3a1a <f_opendir+0xc2>
    3a02:	01 c0       	rjmp	.+2      	; 0x3a06 <f_opendir+0xae>
			if (res == FR_OK) {
				dj->id = fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3a04:	85 e0       	ldi	r24, 0x05	; 5
		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
    3a06:	d8 01       	movw	r26, r16
    3a08:	11 96       	adiw	r26, 0x01	; 1
    3a0a:	1c 92       	st	X, r1
    3a0c:	1e 92       	st	-X, r1
    3a0e:	05 c0       	rjmp	.+10     	; 0x3a1a <f_opendir+0xc2>
	} else {
		dj->fs = 0;
    3a10:	f8 01       	movw	r30, r16
    3a12:	11 82       	std	Z+1, r1	; 0x01
    3a14:	10 82       	st	Z, r1
    3a16:	01 c0       	rjmp	.+2      	; 0x3a1a <f_opendir+0xc2>
	FRESULT res;
	FATFS *fs;
	DEF_NAMEBUF;


	if (!dj) return FR_INVALID_OBJECT;
    3a18:	89 e0       	ldi	r24, 0x09	; 9
	} else {
		dj->fs = 0;
	}

	LEAVE_FF(fs, res);
}
    3a1a:	2e 96       	adiw	r28, 0x0e	; 14
    3a1c:	0f b6       	in	r0, 0x3f	; 63
    3a1e:	f8 94       	cli
    3a20:	de bf       	out	0x3e, r29	; 62
    3a22:	0f be       	out	0x3f, r0	; 63
    3a24:	cd bf       	out	0x3d, r28	; 61
    3a26:	df 91       	pop	r29
    3a28:	cf 91       	pop	r28
    3a2a:	1f 91       	pop	r17
    3a2c:	0f 91       	pop	r16
    3a2e:	ff 90       	pop	r15
    3a30:	ef 90       	pop	r14
    3a32:	08 95       	ret

00003a34 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3a34:	cf 92       	push	r12
    3a36:	df 92       	push	r13
    3a38:	ef 92       	push	r14
    3a3a:	ff 92       	push	r15
    3a3c:	1f 93       	push	r17
    3a3e:	cf 93       	push	r28
    3a40:	df 93       	push	r29
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62
    3a46:	2c 97       	sbiw	r28, 0x0c	; 12
    3a48:	0f b6       	in	r0, 0x3f	; 63
    3a4a:	f8 94       	cli
    3a4c:	de bf       	out	0x3e, r29	; 62
    3a4e:	0f be       	out	0x3f, r0	; 63
    3a50:	cd bf       	out	0x3d, r28	; 61
    3a52:	7c 01       	movw	r14, r24
    3a54:	6b 01       	movw	r12, r22
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj);						/* Check validity of the object */
    3a56:	0e 94 e7 05 	call	0xbce	; 0xbce <validate>
    3a5a:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3a5c:	88 23       	and	r24, r24
    3a5e:	81 f5       	brne	.+96     	; 0x3ac0 <f_readdir+0x8c>
		if (!fno) {
    3a60:	c1 14       	cp	r12, r1
    3a62:	d1 04       	cpc	r13, r1
    3a64:	39 f4       	brne	.+14     	; 0x3a74 <f_readdir+0x40>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
    3a66:	c7 01       	movw	r24, r14
    3a68:	60 e0       	ldi	r22, 0x00	; 0
    3a6a:	70 e0       	ldi	r23, 0x00	; 0
    3a6c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <dir_sdi>
    3a70:	18 2f       	mov	r17, r24
    3a72:	26 c0       	rjmp	.+76     	; 0x3ac0 <f_readdir+0x8c>
		} else {
			INIT_BUF(*dj);
    3a74:	ce 01       	movw	r24, r28
    3a76:	01 96       	adiw	r24, 0x01	; 1
    3a78:	f7 01       	movw	r30, r14
    3a7a:	95 8b       	std	Z+21, r25	; 0x15
    3a7c:	84 8b       	std	Z+20, r24	; 0x14
			res = dir_read(dj);				/* Read an directory item */
    3a7e:	c7 01       	movw	r24, r14
    3a80:	0e 94 ee 13 	call	0x27dc	; 0x27dc <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
    3a84:	84 30       	cpi	r24, 0x04	; 4
    3a86:	31 f4       	brne	.+12     	; 0x3a94 <f_readdir+0x60>
				dj->sect = 0;
    3a88:	f7 01       	movw	r30, r14
    3a8a:	16 86       	std	Z+14, r1	; 0x0e
    3a8c:	17 86       	std	Z+15, r1	; 0x0f
    3a8e:	10 8a       	std	Z+16, r1	; 0x10
    3a90:	11 8a       	std	Z+17, r1	; 0x11
    3a92:	02 c0       	rjmp	.+4      	; 0x3a98 <f_readdir+0x64>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    3a94:	88 23       	and	r24, r24
    3a96:	89 f4       	brne	.+34     	; 0x3aba <f_readdir+0x86>
				get_fileinfo(dj, fno);		/* Get the object information */
    3a98:	c7 01       	movw	r24, r14
    3a9a:	b6 01       	movw	r22, r12
    3a9c:	0e 94 55 05 	call	0xaaa	; 0xaaa <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
    3aa0:	c7 01       	movw	r24, r14
    3aa2:	60 e0       	ldi	r22, 0x00	; 0
    3aa4:	70 e0       	ldi	r23, 0x00	; 0
    3aa6:	0e 94 63 10 	call	0x20c6	; 0x20c6 <dir_next>
				if (res == FR_NO_FILE) {
    3aaa:	84 30       	cpi	r24, 0x04	; 4
    3aac:	41 f4       	brne	.+16     	; 0x3abe <f_readdir+0x8a>
					dj->sect = 0;
    3aae:	f7 01       	movw	r30, r14
    3ab0:	16 86       	std	Z+14, r1	; 0x0e
    3ab2:	17 86       	std	Z+15, r1	; 0x0f
    3ab4:	10 8a       	std	Z+16, r1	; 0x10
    3ab6:	11 8a       	std	Z+17, r1	; 0x11
    3ab8:	03 c0       	rjmp	.+6      	; 0x3ac0 <f_readdir+0x8c>
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
			res = dir_read(dj);				/* Read an directory item */
    3aba:	18 2f       	mov	r17, r24
    3abc:	01 c0       	rjmp	.+2      	; 0x3ac0 <f_readdir+0x8c>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
    3abe:	18 2f       	mov	r17, r24
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
    3ac0:	81 2f       	mov	r24, r17
    3ac2:	2c 96       	adiw	r28, 0x0c	; 12
    3ac4:	0f b6       	in	r0, 0x3f	; 63
    3ac6:	f8 94       	cli
    3ac8:	de bf       	out	0x3e, r29	; 62
    3aca:	0f be       	out	0x3f, r0	; 63
    3acc:	cd bf       	out	0x3d, r28	; 61
    3ace:	df 91       	pop	r29
    3ad0:	cf 91       	pop	r28
    3ad2:	1f 91       	pop	r17
    3ad4:	ff 90       	pop	r15
    3ad6:	ef 90       	pop	r14
    3ad8:	df 90       	pop	r13
    3ada:	cf 90       	pop	r12
    3adc:	08 95       	ret

00003ade <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3ade:	ef 92       	push	r14
    3ae0:	ff 92       	push	r15
    3ae2:	1f 93       	push	r17
    3ae4:	cf 93       	push	r28
    3ae6:	df 93       	push	r29
    3ae8:	cd b7       	in	r28, 0x3d	; 61
    3aea:	de b7       	in	r29, 0x3e	; 62
    3aec:	a4 97       	sbiw	r28, 0x24	; 36
    3aee:	0f b6       	in	r0, 0x3f	; 63
    3af0:	f8 94       	cli
    3af2:	de bf       	out	0x3e, r29	; 62
    3af4:	0f be       	out	0x3f, r0	; 63
    3af6:	cd bf       	out	0x3d, r28	; 61
    3af8:	9c a3       	lds	r25, 0x5c
    3afa:	8b a3       	lds	r24, 0x5b
    3afc:	7b 01       	movw	r14, r22
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    3afe:	ce 01       	movw	r24, r28
    3b00:	83 96       	adiw	r24, 0x23	; 35
    3b02:	be 01       	movw	r22, r28
    3b04:	6f 5f       	subi	r22, 0xFF	; 255
    3b06:	7f 4f       	sbci	r23, 0xFF	; 255
    3b08:	40 e0       	ldi	r20, 0x00	; 0
    3b0a:	0e 94 a4 06 	call	0xd48	; 0xd48 <chk_mounted>
    3b0e:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3b10:	88 23       	and	r24, r24
    3b12:	c1 f4       	brne	.+48     	; 0x3b44 <f_stat+0x66>
		INIT_BUF(dj);
    3b14:	ce 01       	movw	r24, r28
    3b16:	47 96       	adiw	r24, 0x17	; 23
    3b18:	9e 8b       	std	Y+22, r25	; 0x16
    3b1a:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    3b1c:	6b a1       	lds	r22, 0x4b
    3b1e:	7c a1       	lds	r23, 0x4c
    3b20:	ce 01       	movw	r24, r28
    3b22:	01 96       	adiw	r24, 0x01	; 1
    3b24:	0e 94 a8 11 	call	0x2350	; 0x2350 <follow_path>
    3b28:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follow completed */
    3b2a:	88 23       	and	r24, r24
    3b2c:	59 f4       	brne	.+22     	; 0x3b44 <f_stat+0x66>
			if (dj.dir)		/* Found an object */
    3b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b30:	9c 89       	ldd	r25, Y+20	; 0x14
    3b32:	00 97       	sbiw	r24, 0x00	; 0
    3b34:	31 f0       	breq	.+12     	; 0x3b42 <f_stat+0x64>
				get_fileinfo(&dj, fno);
    3b36:	ce 01       	movw	r24, r28
    3b38:	01 96       	adiw	r24, 0x01	; 1
    3b3a:	b7 01       	movw	r22, r14
    3b3c:	0e 94 55 05 	call	0xaaa	; 0xaaa <get_fileinfo>
    3b40:	01 c0       	rjmp	.+2      	; 0x3b44 <f_stat+0x66>
			else			/* It is root dir */
				res = FR_INVALID_NAME;
    3b42:	16 e0       	ldi	r17, 0x06	; 6
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    3b44:	81 2f       	mov	r24, r17
    3b46:	a4 96       	adiw	r28, 0x24	; 36
    3b48:	0f b6       	in	r0, 0x3f	; 63
    3b4a:	f8 94       	cli
    3b4c:	de bf       	out	0x3e, r29	; 62
    3b4e:	0f be       	out	0x3f, r0	; 63
    3b50:	cd bf       	out	0x3d, r28	; 61
    3b52:	df 91       	pop	r29
    3b54:	cf 91       	pop	r28
    3b56:	1f 91       	pop	r17
    3b58:	ff 90       	pop	r15
    3b5a:	ef 90       	pop	r14
    3b5c:	08 95       	ret

00003b5e <f_getfree>:
FRESULT f_getfree (
	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    3b5e:	2f 92       	push	r2
    3b60:	3f 92       	push	r3
    3b62:	4f 92       	push	r4
    3b64:	5f 92       	push	r5
    3b66:	6f 92       	push	r6
    3b68:	7f 92       	push	r7
    3b6a:	8f 92       	push	r8
    3b6c:	9f 92       	push	r9
    3b6e:	af 92       	push	r10
    3b70:	bf 92       	push	r11
    3b72:	cf 92       	push	r12
    3b74:	df 92       	push	r13
    3b76:	ef 92       	push	r14
    3b78:	ff 92       	push	r15
    3b7a:	0f 93       	push	r16
    3b7c:	1f 93       	push	r17
    3b7e:	cf 93       	push	r28
    3b80:	df 93       	push	r29
    3b82:	cd b7       	in	r28, 0x3d	; 61
    3b84:	de b7       	in	r29, 0x3e	; 62
    3b86:	2c 97       	sbiw	r28, 0x0c	; 12
    3b88:	0f b6       	in	r0, 0x3f	; 63
    3b8a:	f8 94       	cli
    3b8c:	de bf       	out	0x3e, r29	; 62
    3b8e:	0f be       	out	0x3f, r0	; 63
    3b90:	cd bf       	out	0x3d, r28	; 61
    3b92:	9a 83       	std	Y+2, r25	; 0x02
    3b94:	89 83       	std	Y+1, r24	; 0x01
    3b96:	1b 01       	movw	r2, r22
    3b98:	8a 01       	movw	r16, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    3b9a:	ce 01       	movw	r24, r28
    3b9c:	01 96       	adiw	r24, 0x01	; 1
    3b9e:	ba 01       	movw	r22, r20
    3ba0:	40 e0       	ldi	r20, 0x00	; 0
    3ba2:	0e 94 a4 06 	call	0xd48	; 0xd48 <chk_mounted>
    3ba6:	b8 2e       	mov	r11, r24
	fs = *fatfs;
    3ba8:	d8 01       	movw	r26, r16
    3baa:	0d 91       	ld	r16, X+
    3bac:	1c 91       	ld	r17, X
    3bae:	11 97       	sbiw	r26, 0x01	; 1
	if (res == FR_OK) {
    3bb0:	88 23       	and	r24, r24
    3bb2:	09 f0       	breq	.+2      	; 0x3bb6 <f_getfree+0x58>
    3bb4:	02 c1       	rjmp	.+516    	; 0x3dba <f_getfree+0x25c>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
    3bb6:	f8 01       	movw	r30, r16
    3bb8:	86 85       	ldd	r24, Z+14	; 0x0e
    3bba:	97 85       	ldd	r25, Z+15	; 0x0f
    3bbc:	a0 89       	ldd	r26, Z+16	; 0x10
    3bbe:	b1 89       	ldd	r27, Z+17	; 0x11
    3bc0:	c2 8c       	ldd	r12, Z+26	; 0x1a
    3bc2:	d3 8c       	ldd	r13, Z+27	; 0x1b
    3bc4:	e4 8c       	ldd	r14, Z+28	; 0x1c
    3bc6:	f5 8c       	ldd	r15, Z+29	; 0x1d
    3bc8:	b7 01       	movw	r22, r14
    3bca:	a6 01       	movw	r20, r12
    3bcc:	42 50       	subi	r20, 0x02	; 2
    3bce:	50 40       	sbci	r21, 0x00	; 0
    3bd0:	60 40       	sbci	r22, 0x00	; 0
    3bd2:	70 40       	sbci	r23, 0x00	; 0
    3bd4:	48 17       	cp	r20, r24
    3bd6:	59 07       	cpc	r21, r25
    3bd8:	6a 07       	cpc	r22, r26
    3bda:	7b 07       	cpc	r23, r27
    3bdc:	30 f0       	brcs	.+12     	; 0x3bea <f_getfree+0x8c>
			*nclst = fs->free_clust;
    3bde:	f1 01       	movw	r30, r2
    3be0:	80 83       	st	Z, r24
    3be2:	91 83       	std	Z+1, r25	; 0x01
    3be4:	a2 83       	std	Z+2, r26	; 0x02
    3be6:	b3 83       	std	Z+3, r27	; 0x03
    3be8:	e8 c0       	rjmp	.+464    	; 0x3dba <f_getfree+0x25c>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
    3bea:	a0 80       	ld	r10, Z
			n = 0;
			if (fat == FS_FAT12) {
    3bec:	b1 e0       	ldi	r27, 0x01	; 1
    3bee:	ab 16       	cp	r10, r27
    3bf0:	d9 f5       	brne	.+118    	; 0x3c68 <f_getfree+0x10a>
    3bf2:	cc 24       	eor	r12, r12
    3bf4:	dd 24       	eor	r13, r13
    3bf6:	76 01       	movw	r14, r12
    3bf8:	68 94       	set
    3bfa:	c1 f8       	bld	r12, 1
    3bfc:	44 24       	eor	r4, r4
    3bfe:	55 24       	eor	r5, r5
    3c00:	32 01       	movw	r6, r4
				clst = 2;
				do {
					stat = get_fat(fs, clst);
    3c02:	c8 01       	movw	r24, r16
    3c04:	b7 01       	movw	r22, r14
    3c06:	a6 01       	movw	r20, r12
    3c08:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <get_fat>
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	cb 01       	movw	r24, r22
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    3c10:	8f 3f       	cpi	r24, 0xFF	; 255
    3c12:	ef ef       	ldi	r30, 0xFF	; 255
    3c14:	9e 07       	cpc	r25, r30
    3c16:	ef ef       	ldi	r30, 0xFF	; 255
    3c18:	ae 07       	cpc	r26, r30
    3c1a:	ef ef       	ldi	r30, 0xFF	; 255
    3c1c:	be 07       	cpc	r27, r30
    3c1e:	09 f4       	brne	.+2      	; 0x3c22 <f_getfree+0xc4>
    3c20:	ae c0       	rjmp	.+348    	; 0x3d7e <f_getfree+0x220>
					if (stat == 1) { res = FR_INT_ERR; break; }
    3c22:	81 30       	cpi	r24, 0x01	; 1
    3c24:	91 05       	cpc	r25, r1
    3c26:	a1 05       	cpc	r26, r1
    3c28:	b1 05       	cpc	r27, r1
    3c2a:	09 f4       	brne	.+2      	; 0x3c2e <f_getfree+0xd0>
    3c2c:	ab c0       	rjmp	.+342    	; 0x3d84 <f_getfree+0x226>
					if (stat == 0) n++;
    3c2e:	00 97       	sbiw	r24, 0x00	; 0
    3c30:	a1 05       	cpc	r26, r1
    3c32:	b1 05       	cpc	r27, r1
    3c34:	29 f4       	brne	.+10     	; 0x3c40 <f_getfree+0xe2>
    3c36:	08 94       	sec
    3c38:	41 1c       	adc	r4, r1
    3c3a:	51 1c       	adc	r5, r1
    3c3c:	61 1c       	adc	r6, r1
    3c3e:	71 1c       	adc	r7, r1
				} while (++clst < fs->n_fatent);
    3c40:	08 94       	sec
    3c42:	c1 1c       	adc	r12, r1
    3c44:	d1 1c       	adc	r13, r1
    3c46:	e1 1c       	adc	r14, r1
    3c48:	f1 1c       	adc	r15, r1
    3c4a:	f8 01       	movw	r30, r16
    3c4c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c4e:	93 8d       	ldd	r25, Z+27	; 0x1b
    3c50:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3c52:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3c54:	c8 16       	cp	r12, r24
    3c56:	d9 06       	cpc	r13, r25
    3c58:	ea 06       	cpc	r14, r26
    3c5a:	fb 06       	cpc	r15, r27
    3c5c:	90 f2       	brcs	.-92     	; 0x3c02 <f_getfree+0xa4>
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			fs->free_clust = n;
    3c5e:	46 86       	std	Z+14, r4	; 0x0e
    3c60:	57 86       	std	Z+15, r5	; 0x0f
    3c62:	60 8a       	std	Z+16, r6	; 0x10
    3c64:	71 8a       	std	Z+17, r7	; 0x11
    3c66:	a4 c0       	rjmp	.+328    	; 0x3db0 <f_getfree+0x252>
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) n++;
				} while (++clst < fs->n_fatent);
			} else {
				clst = fs->n_fatent;
				sect = fs->fatbase;
    3c68:	82 a1       	lds	r24, 0x42
    3c6a:	93 a1       	lds	r25, 0x43
    3c6c:	a4 a1       	lds	r26, 0x44
    3c6e:	b5 a1       	lds	r27, 0x45
    3c70:	8b 83       	std	Y+3, r24	; 0x03
    3c72:	9c 83       	std	Y+4, r25	; 0x04
    3c74:	ad 83       	std	Y+5, r26	; 0x05
    3c76:	be 83       	std	Y+6, r27	; 0x06
				i = 0; p = 0;
    3c78:	e0 e0       	ldi	r30, 0x00	; 0
    3c7a:	f0 e0       	ldi	r31, 0x00	; 0
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
		if (fs->free_clust <= fs->n_fatent - 2) {
			*nclst = fs->free_clust;
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
			n = 0;
    3c80:	44 24       	eor	r4, r4
    3c82:	55 24       	eor	r5, r5
    3c84:	32 01       	movw	r6, r4
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
						if (res != FR_OK) break;
						p = fs->win;
    3c86:	a8 01       	movw	r20, r16
    3c88:	4e 5c       	subi	r20, 0xCE	; 206
    3c8a:	5f 4f       	sbci	r21, 0xFF	; 255
    3c8c:	5a 87       	std	Y+10, r21	; 0x0a
    3c8e:	49 87       	std	Y+9, r20	; 0x09
						i = SS(fs);
    3c90:	3c 86       	std	Y+12, r3	; 0x0c
    3c92:	2b 86       	std	Y+11, r2	; 0x0b
    3c94:	18 01       	movw	r2, r16
    3c96:	0a 2d       	mov	r16, r10
			} else {
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
    3c98:	21 15       	cp	r18, r1
    3c9a:	31 05       	cpc	r19, r1
    3c9c:	c9 f4       	brne	.+50     	; 0x3cd0 <f_getfree+0x172>
						res = move_window(fs, sect++);
    3c9e:	c1 01       	movw	r24, r2
    3ca0:	4b 81       	ldd	r20, Y+3	; 0x03
    3ca2:	5c 81       	ldd	r21, Y+4	; 0x04
    3ca4:	6d 81       	ldd	r22, Y+5	; 0x05
    3ca6:	7e 81       	ldd	r23, Y+6	; 0x06
    3ca8:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
						if (res != FR_OK) break;
    3cac:	88 23       	and	r24, r24
    3cae:	09 f0       	breq	.+2      	; 0x3cb2 <f_getfree+0x154>
    3cb0:	6d c0       	rjmp	.+218    	; 0x3d8c <f_getfree+0x22e>
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
    3cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb6:	ad 81       	ldd	r26, Y+5	; 0x05
    3cb8:	be 81       	ldd	r27, Y+6	; 0x06
    3cba:	01 96       	adiw	r24, 0x01	; 1
    3cbc:	a1 1d       	adc	r26, r1
    3cbe:	b1 1d       	adc	r27, r1
    3cc0:	8b 83       	std	Y+3, r24	; 0x03
    3cc2:	9c 83       	std	Y+4, r25	; 0x04
    3cc4:	ad 83       	std	Y+5, r26	; 0x05
    3cc6:	be 83       	std	Y+6, r27	; 0x06
						if (res != FR_OK) break;
						p = fs->win;
    3cc8:	e9 85       	ldd	r30, Y+9	; 0x09
    3cca:	fa 85       	ldd	r31, Y+10	; 0x0a
						i = SS(fs);
    3ccc:	20 e0       	ldi	r18, 0x00	; 0
    3cce:	32 e0       	ldi	r19, 0x02	; 2
					}
					if (fat == FS_FAT16) {
    3cd0:	02 30       	cpi	r16, 0x02	; 2
    3cd2:	a1 f4       	brne	.+40     	; 0x3cfc <f_getfree+0x19e>
						if (LD_WORD(p) == 0) n++;
    3cd4:	91 81       	ldd	r25, Z+1	; 0x01
    3cd6:	98 87       	std	Y+8, r25	; 0x08
    3cd8:	1f 82       	std	Y+7, r1	; 0x07
    3cda:	80 81       	ld	r24, Z
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	af 81       	ldd	r26, Y+7	; 0x07
    3ce0:	b8 85       	ldd	r27, Y+8	; 0x08
    3ce2:	8a 2b       	or	r24, r26
    3ce4:	9b 2b       	or	r25, r27
    3ce6:	00 97       	sbiw	r24, 0x00	; 0
    3ce8:	29 f4       	brne	.+10     	; 0x3cf4 <f_getfree+0x196>
    3cea:	08 94       	sec
    3cec:	41 1c       	adc	r4, r1
    3cee:	51 1c       	adc	r5, r1
    3cf0:	61 1c       	adc	r6, r1
    3cf2:	71 1c       	adc	r7, r1
						p += 2; i -= 2;
    3cf4:	32 96       	adiw	r30, 0x02	; 2
    3cf6:	22 50       	subi	r18, 0x02	; 2
    3cf8:	30 40       	sbci	r19, 0x00	; 0
    3cfa:	31 c0       	rjmp	.+98     	; 0x3d5e <f_getfree+0x200>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    3cfc:	83 81       	ldd	r24, Z+3	; 0x03
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	a0 e0       	ldi	r26, 0x00	; 0
    3d02:	b0 e0       	ldi	r27, 0x00	; 0
    3d04:	78 2f       	mov	r23, r24
    3d06:	66 27       	eor	r22, r22
    3d08:	55 27       	eor	r21, r21
    3d0a:	44 27       	eor	r20, r20
    3d0c:	82 81       	ldd	r24, Z+2	; 0x02
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	a0 e0       	ldi	r26, 0x00	; 0
    3d12:	b0 e0       	ldi	r27, 0x00	; 0
    3d14:	dc 01       	movw	r26, r24
    3d16:	99 27       	eor	r25, r25
    3d18:	88 27       	eor	r24, r24
    3d1a:	48 2b       	or	r20, r24
    3d1c:	59 2b       	or	r21, r25
    3d1e:	6a 2b       	or	r22, r26
    3d20:	7b 2b       	or	r23, r27
    3d22:	80 81       	ld	r24, Z
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	a0 e0       	ldi	r26, 0x00	; 0
    3d28:	b0 e0       	ldi	r27, 0x00	; 0
    3d2a:	84 2b       	or	r24, r20
    3d2c:	95 2b       	or	r25, r21
    3d2e:	a6 2b       	or	r26, r22
    3d30:	b7 2b       	or	r27, r23
    3d32:	91 80       	ldd	r9, Z+1	; 0x01
    3d34:	88 24       	eor	r8, r8
    3d36:	a4 01       	movw	r20, r8
    3d38:	60 e0       	ldi	r22, 0x00	; 0
    3d3a:	70 e0       	ldi	r23, 0x00	; 0
    3d3c:	84 2b       	or	r24, r20
    3d3e:	95 2b       	or	r25, r21
    3d40:	a6 2b       	or	r26, r22
    3d42:	b7 2b       	or	r27, r23
    3d44:	bf 70       	andi	r27, 0x0F	; 15
    3d46:	00 97       	sbiw	r24, 0x00	; 0
    3d48:	a1 05       	cpc	r26, r1
    3d4a:	b1 05       	cpc	r27, r1
    3d4c:	29 f4       	brne	.+10     	; 0x3d58 <f_getfree+0x1fa>
    3d4e:	08 94       	sec
    3d50:	41 1c       	adc	r4, r1
    3d52:	51 1c       	adc	r5, r1
    3d54:	61 1c       	adc	r6, r1
    3d56:	71 1c       	adc	r7, r1
						p += 4; i -= 4;
    3d58:	34 96       	adiw	r30, 0x04	; 4
    3d5a:	24 50       	subi	r18, 0x04	; 4
    3d5c:	30 40       	sbci	r19, 0x00	; 0
					}
				} while (--clst);
    3d5e:	08 94       	sec
    3d60:	c1 08       	sbc	r12, r1
    3d62:	d1 08       	sbc	r13, r1
    3d64:	e1 08       	sbc	r14, r1
    3d66:	f1 08       	sbc	r15, r1
    3d68:	c1 14       	cp	r12, r1
    3d6a:	d1 04       	cpc	r13, r1
    3d6c:	e1 04       	cpc	r14, r1
    3d6e:	f1 04       	cpc	r15, r1
    3d70:	09 f0       	breq	.+2      	; 0x3d74 <f_getfree+0x216>
    3d72:	92 cf       	rjmp	.-220    	; 0x3c98 <f_getfree+0x13a>
    3d74:	a0 2e       	mov	r10, r16
    3d76:	81 01       	movw	r16, r2
    3d78:	2b 84       	ldd	r2, Y+11	; 0x0b
    3d7a:	3c 84       	ldd	r3, Y+12	; 0x0c
    3d7c:	0c c0       	rjmp	.+24     	; 0x3d96 <f_getfree+0x238>
			n = 0;
			if (fat == FS_FAT12) {
				clst = 2;
				do {
					stat = get_fat(fs, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    3d7e:	bb 24       	eor	r11, r11
    3d80:	b3 94       	inc	r11
    3d82:	09 c0       	rjmp	.+18     	; 0x3d96 <f_getfree+0x238>
					if (stat == 1) { res = FR_INT_ERR; break; }
    3d84:	bb 24       	eor	r11, r11
    3d86:	68 94       	set
    3d88:	b1 f8       	bld	r11, 1
    3d8a:	05 c0       	rjmp	.+10     	; 0x3d96 <f_getfree+0x238>
    3d8c:	a0 2e       	mov	r10, r16
    3d8e:	81 01       	movw	r16, r2
    3d90:	2b 84       	ldd	r2, Y+11	; 0x0b
    3d92:	3c 84       	ldd	r3, Y+12	; 0x0c
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
    3d94:	b8 2e       	mov	r11, r24
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			fs->free_clust = n;
    3d96:	f8 01       	movw	r30, r16
    3d98:	46 86       	std	Z+14, r4	; 0x0e
    3d9a:	57 86       	std	Z+15, r5	; 0x0f
    3d9c:	60 8a       	std	Z+16, r6	; 0x10
    3d9e:	71 8a       	std	Z+17, r7	; 0x11
			if (fat == FS_FAT32) fs->fsi_flag = 1;
    3da0:	f3 e0       	ldi	r31, 0x03	; 3
    3da2:	af 16       	cp	r10, r31
    3da4:	29 f4       	brne	.+10     	; 0x3db0 <f_getfree+0x252>
    3da6:	81 e0       	ldi	r24, 0x01	; 1
    3da8:	d8 01       	movw	r26, r16
    3daa:	15 96       	adiw	r26, 0x05	; 5
    3dac:	8c 93       	st	X, r24
    3dae:	15 97       	sbiw	r26, 0x05	; 5
			*nclst = n;
    3db0:	f1 01       	movw	r30, r2
    3db2:	40 82       	st	Z, r4
    3db4:	51 82       	std	Z+1, r5	; 0x01
    3db6:	62 82       	std	Z+2, r6	; 0x02
    3db8:	73 82       	std	Z+3, r7	; 0x03
		}
	}
	LEAVE_FF(fs, res);
}
    3dba:	8b 2d       	mov	r24, r11
    3dbc:	2c 96       	adiw	r28, 0x0c	; 12
    3dbe:	0f b6       	in	r0, 0x3f	; 63
    3dc0:	f8 94       	cli
    3dc2:	de bf       	out	0x3e, r29	; 62
    3dc4:	0f be       	out	0x3f, r0	; 63
    3dc6:	cd bf       	out	0x3d, r28	; 61
    3dc8:	df 91       	pop	r29
    3dca:	cf 91       	pop	r28
    3dcc:	1f 91       	pop	r17
    3dce:	0f 91       	pop	r16
    3dd0:	ff 90       	pop	r15
    3dd2:	ef 90       	pop	r14
    3dd4:	df 90       	pop	r13
    3dd6:	cf 90       	pop	r12
    3dd8:	bf 90       	pop	r11
    3dda:	af 90       	pop	r10
    3ddc:	9f 90       	pop	r9
    3dde:	8f 90       	pop	r8
    3de0:	7f 90       	pop	r7
    3de2:	6f 90       	pop	r6
    3de4:	5f 90       	pop	r5
    3de6:	4f 90       	pop	r4
    3de8:	3f 90       	pop	r3
    3dea:	2f 90       	pop	r2
    3dec:	08 95       	ret

00003dee <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    3dee:	cf 92       	push	r12
    3df0:	df 92       	push	r13
    3df2:	ef 92       	push	r14
    3df4:	ff 92       	push	r15
    3df6:	0f 93       	push	r16
    3df8:	1f 93       	push	r17
    3dfa:	cf 93       	push	r28
    3dfc:	df 93       	push	r29
    3dfe:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	if (!fp) return FR_INVALID_OBJECT;
    3e00:	00 97       	sbiw	r24, 0x00	; 0
    3e02:	09 f4       	brne	.+2      	; 0x3e06 <f_truncate+0x18>
    3e04:	69 c0       	rjmp	.+210    	; 0x3ed8 <f_truncate+0xea>

	res = validate(fp);						/* Check validity of the object */
    3e06:	0e 94 e7 05 	call	0xbce	; 0xbce <validate>
	if (res == FR_OK) {
    3e0a:	88 23       	and	r24, r24
    3e0c:	09 f0       	breq	.+2      	; 0x3e10 <f_truncate+0x22>
    3e0e:	65 c0       	rjmp	.+202    	; 0x3eda <f_truncate+0xec>
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
    3e10:	9c 81       	ldd	r25, Y+4	; 0x04
    3e12:	99 23       	and	r25, r25
    3e14:	24 f0       	brlt	.+8      	; 0x3e1e <f_truncate+0x30>
			res = FR_INT_ERR;
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
    3e16:	91 fd       	sbrc	r25, 1
    3e18:	69 c0       	rjmp	.+210    	; 0x3eec <f_truncate+0xfe>
				res = FR_DENIED;
    3e1a:	87 e0       	ldi	r24, 0x07	; 7
    3e1c:	5e c0       	rjmp	.+188    	; 0x3eda <f_truncate+0xec>
	if (!fp) return FR_INVALID_OBJECT;

	res = validate(fp);						/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
			res = FR_INT_ERR;
    3e1e:	82 e0       	ldi	r24, 0x02	; 2
    3e20:	5c c0       	rjmp	.+184    	; 0x3eda <f_truncate+0xec>
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    3e22:	4a 87       	std	Y+10, r20	; 0x0a
    3e24:	5b 87       	std	Y+11, r21	; 0x0b
    3e26:	6c 87       	std	Y+12, r22	; 0x0c
    3e28:	7d 87       	std	Y+13, r23	; 0x0d
			fp->flag |= FA__WRITTEN;
    3e2a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e2c:	80 62       	ori	r24, 0x20	; 32
    3e2e:	8c 83       	std	Y+4, r24	; 0x04
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    3e30:	41 15       	cp	r20, r1
    3e32:	51 05       	cpc	r21, r1
    3e34:	61 05       	cpc	r22, r1
    3e36:	71 05       	cpc	r23, r1
    3e38:	69 f4       	brne	.+26     	; 0x3e54 <f_truncate+0x66>
				res = remove_chain(fp->fs, fp->sclust);
    3e3a:	4e 85       	ldd	r20, Y+14	; 0x0e
    3e3c:	5f 85       	ldd	r21, Y+15	; 0x0f
    3e3e:	68 89       	ldd	r22, Y+16	; 0x10
    3e40:	79 89       	ldd	r23, Y+17	; 0x11
    3e42:	88 81       	ld	r24, Y
    3e44:	99 81       	ldd	r25, Y+1	; 0x01
    3e46:	0e 94 1e 14 	call	0x283c	; 0x283c <remove_chain>
				fp->sclust = 0;
    3e4a:	1e 86       	std	Y+14, r1	; 0x0e
    3e4c:	1f 86       	std	Y+15, r1	; 0x0f
    3e4e:	18 8a       	std	Y+16, r1	; 0x10
    3e50:	19 8a       	std	Y+17, r1	; 0x11
    3e52:	3c c0       	rjmp	.+120    	; 0x3ecc <f_truncate+0xde>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
    3e54:	4a 89       	ldd	r20, Y+18	; 0x12
    3e56:	5b 89       	ldd	r21, Y+19	; 0x13
    3e58:	6c 89       	ldd	r22, Y+20	; 0x14
    3e5a:	7d 89       	ldd	r23, Y+21	; 0x15
    3e5c:	88 81       	ld	r24, Y
    3e5e:	99 81       	ldd	r25, Y+1	; 0x01
    3e60:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <get_fat>
    3e64:	6b 01       	movw	r12, r22
    3e66:	7c 01       	movw	r14, r24
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
    3e68:	81 e0       	ldi	r24, 0x01	; 1
    3e6a:	c8 16       	cp	r12, r24
    3e6c:	d1 04       	cpc	r13, r1
    3e6e:	e1 04       	cpc	r14, r1
    3e70:	f1 04       	cpc	r15, r1
    3e72:	09 f4       	brne	.+2      	; 0x3e76 <f_truncate+0x88>
    3e74:	4a c0       	rjmp	.+148    	; 0x3f0a <f_truncate+0x11c>
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
				res = remove_chain(fp->fs, fp->sclust);
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
				res = FR_OK;
    3e76:	81 e0       	ldi	r24, 0x01	; 1
    3e78:	9f ef       	ldi	r25, 0xFF	; 255
    3e7a:	c9 16       	cp	r12, r25
    3e7c:	9f ef       	ldi	r25, 0xFF	; 255
    3e7e:	d9 06       	cpc	r13, r25
    3e80:	9f ef       	ldi	r25, 0xFF	; 255
    3e82:	e9 06       	cpc	r14, r25
    3e84:	9f ef       	ldi	r25, 0xFF	; 255
    3e86:	f9 06       	cpc	r15, r25
    3e88:	09 f0       	breq	.+2      	; 0x3e8c <f_truncate+0x9e>
    3e8a:	80 e0       	ldi	r24, 0x00	; 0
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
    3e8c:	88 23       	and	r24, r24
    3e8e:	01 f5       	brne	.+64     	; 0x3ed0 <f_truncate+0xe2>
    3e90:	e8 81       	ld	r30, Y
    3e92:	f9 81       	ldd	r31, Y+1	; 0x01
    3e94:	42 8d       	ldd	r20, Z+26	; 0x1a
    3e96:	53 8d       	ldd	r21, Z+27	; 0x1b
    3e98:	64 8d       	ldd	r22, Z+28	; 0x1c
    3e9a:	75 8d       	ldd	r23, Z+29	; 0x1d
    3e9c:	c4 16       	cp	r12, r20
    3e9e:	d5 06       	cpc	r13, r21
    3ea0:	e6 06       	cpc	r14, r22
    3ea2:	f7 06       	cpc	r15, r23
    3ea4:	d0 f4       	brcc	.+52     	; 0x3eda <f_truncate+0xec>
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
    3ea6:	4a 89       	ldd	r20, Y+18	; 0x12
    3ea8:	5b 89       	ldd	r21, Y+19	; 0x13
    3eaa:	6c 89       	ldd	r22, Y+20	; 0x14
    3eac:	7d 89       	ldd	r23, Y+21	; 0x15
    3eae:	cf 01       	movw	r24, r30
    3eb0:	0f ef       	ldi	r16, 0xFF	; 255
    3eb2:	1f ef       	ldi	r17, 0xFF	; 255
    3eb4:	2f ef       	ldi	r18, 0xFF	; 255
    3eb6:	3f e0       	ldi	r19, 0x0F	; 15
    3eb8:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <put_fat>
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    3ebc:	88 23       	and	r24, r24
    3ebe:	41 f4       	brne	.+16     	; 0x3ed0 <f_truncate+0xe2>
    3ec0:	88 81       	ld	r24, Y
    3ec2:	99 81       	ldd	r25, Y+1	; 0x01
    3ec4:	b7 01       	movw	r22, r14
    3ec6:	a6 01       	movw	r20, r12
    3ec8:	0e 94 1e 14 	call	0x283c	; 0x283c <remove_chain>
				}
			}
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
    3ecc:	88 23       	and	r24, r24
    3ece:	29 f0       	breq	.+10     	; 0x3eda <f_truncate+0xec>
    3ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ed2:	90 68       	ori	r25, 0x80	; 128
    3ed4:	9c 83       	std	Y+4, r25	; 0x04
    3ed6:	01 c0       	rjmp	.+2      	; 0x3eda <f_truncate+0xec>
{
	FRESULT res;
	DWORD ncl;


	if (!fp) return FR_INVALID_OBJECT;
    3ed8:	89 e0       	ldi	r24, 0x09	; 9
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
	}

	LEAVE_FF(fp->fs, res);
}
    3eda:	df 91       	pop	r29
    3edc:	cf 91       	pop	r28
    3ede:	1f 91       	pop	r17
    3ee0:	0f 91       	pop	r16
    3ee2:	ff 90       	pop	r15
    3ee4:	ef 90       	pop	r14
    3ee6:	df 90       	pop	r13
    3ee8:	cf 90       	pop	r12
    3eea:	08 95       	ret
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
    3eec:	4e 81       	ldd	r20, Y+6	; 0x06
    3eee:	5f 81       	ldd	r21, Y+7	; 0x07
    3ef0:	68 85       	ldd	r22, Y+8	; 0x08
    3ef2:	79 85       	ldd	r23, Y+9	; 0x09
    3ef4:	0a 85       	ldd	r16, Y+10	; 0x0a
    3ef6:	1b 85       	ldd	r17, Y+11	; 0x0b
    3ef8:	2c 85       	ldd	r18, Y+12	; 0x0c
    3efa:	3d 85       	ldd	r19, Y+13	; 0x0d
    3efc:	40 17       	cp	r20, r16
    3efe:	51 07       	cpc	r21, r17
    3f00:	62 07       	cpc	r22, r18
    3f02:	73 07       	cpc	r23, r19
    3f04:	08 f4       	brcc	.+2      	; 0x3f08 <f_truncate+0x11a>
    3f06:	8d cf       	rjmp	.-230    	; 0x3e22 <f_truncate+0x34>
    3f08:	e8 cf       	rjmp	.-48     	; 0x3eda <f_truncate+0xec>
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
    3f0a:	82 e0       	ldi	r24, 0x02	; 2
    3f0c:	e1 cf       	rjmp	.-62     	; 0x3ed0 <f_truncate+0xe2>

00003f0e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    3f0e:	cf 92       	push	r12
    3f10:	df 92       	push	r13
    3f12:	ef 92       	push	r14
    3f14:	ff 92       	push	r15
    3f16:	1f 93       	push	r17
    3f18:	cf 93       	push	r28
    3f1a:	df 93       	push	r29
    3f1c:	cd b7       	in	r28, 0x3d	; 61
    3f1e:	de b7       	in	r29, 0x3e	; 62
    3f20:	ea 97       	sbiw	r28, 0x3a	; 58
    3f22:	0f b6       	in	r0, 0x3f	; 63
    3f24:	f8 94       	cli
    3f26:	de bf       	out	0x3e, r29	; 62
    3f28:	0f be       	out	0x3f, r0	; 63
    3f2a:	cd bf       	out	0x3d, r28	; 61
    3f2c:	9a af       	sts	0x7a, r25
    3f2e:	89 af       	sts	0x79, r24
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    3f30:	ce 01       	movw	r24, r28
    3f32:	c9 96       	adiw	r24, 0x39	; 57
    3f34:	be 01       	movw	r22, r28
    3f36:	6f 5f       	subi	r22, 0xFF	; 255
    3f38:	7f 4f       	sbci	r23, 0xFF	; 255
    3f3a:	41 e0       	ldi	r20, 0x01	; 1
    3f3c:	0e 94 a4 06 	call	0xd48	; 0xd48 <chk_mounted>
	if (res == FR_OK) {
    3f40:	88 23       	and	r24, r24
    3f42:	09 f0       	breq	.+2      	; 0x3f46 <f_unlink+0x38>
    3f44:	61 c0       	rjmp	.+194    	; 0x4008 <f_unlink+0xfa>
		INIT_BUF(dj);
    3f46:	ce 01       	movw	r24, r28
    3f48:	8d 96       	adiw	r24, 0x2d	; 45
    3f4a:	9e 8b       	std	Y+22, r25	; 0x16
    3f4c:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the file path */
    3f4e:	69 ad       	sts	0x69, r22
    3f50:	7a ad       	sts	0x6a, r23
    3f52:	ce 01       	movw	r24, r28
    3f54:	01 96       	adiw	r24, 0x01	; 1
    3f56:	0e 94 a8 11 	call	0x2350	; 0x2350 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    3f5a:	88 23       	and	r24, r24
    3f5c:	09 f0       	breq	.+2      	; 0x3f60 <f_unlink+0x52>
    3f5e:	54 c0       	rjmp	.+168    	; 0x4008 <f_unlink+0xfa>
    3f60:	ed 89       	ldd	r30, Y+21	; 0x15
    3f62:	fe 89       	ldd	r31, Y+22	; 0x16
    3f64:	83 85       	ldd	r24, Z+11	; 0x0b
    3f66:	85 ff       	sbrs	r24, 5
    3f68:	5d c0       	rjmp	.+186    	; 0x4024 <f_unlink+0x116>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
    3f6a:	86 e0       	ldi	r24, 0x06	; 6
    3f6c:	4d c0       	rjmp	.+154    	; 0x4008 <f_unlink+0xfa>
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    3f6e:	fb 01       	movw	r30, r22
    3f70:	13 85       	ldd	r17, Z+11	; 0x0b
    3f72:	10 ff       	sbrs	r17, 0
    3f74:	5e c0       	rjmp	.+188    	; 0x4032 <f_unlink+0x124>
					res = FR_DENIED;		/* Cannot remove R/O object */
    3f76:	87 e0       	ldi	r24, 0x07	; 7
    3f78:	47 c0       	rjmp	.+142    	; 0x4008 <f_unlink+0xfa>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    3f7a:	86 e0       	ldi	r24, 0x06	; 6
    3f7c:	45 c0       	rjmp	.+138    	; 0x4008 <f_unlink+0xfa>
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = ld_clust(dj.fs, dir);
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
				if (dclst < 2) {
    3f7e:	f2 e0       	ldi	r31, 0x02	; 2
    3f80:	cf 16       	cp	r12, r31
    3f82:	d1 04       	cpc	r13, r1
    3f84:	e1 04       	cpc	r14, r1
    3f86:	f1 04       	cpc	r15, r1
    3f88:	08 f4       	brcc	.+2      	; 0x3f8c <f_unlink+0x7e>
    3f8a:	5c c0       	rjmp	.+184    	; 0x4044 <f_unlink+0x136>
					res = FR_INT_ERR;
				} else {
					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-dir is empty or not */
    3f8c:	ce 01       	movw	r24, r28
    3f8e:	47 96       	adiw	r24, 0x17	; 23
    3f90:	be 01       	movw	r22, r28
    3f92:	6f 5f       	subi	r22, 0xFF	; 255
    3f94:	7f 4f       	sbci	r23, 0xFF	; 255
    3f96:	46 e1       	ldi	r20, 0x16	; 22
    3f98:	50 e0       	ldi	r21, 0x00	; 0
    3f9a:	0e 94 10 05 	call	0xa20	; 0xa20 <mem_cpy>
					sdj.sclust = dclst;
    3f9e:	cd 8e       	std	Y+29, r12	; 0x1d
    3fa0:	de 8e       	std	Y+30, r13	; 0x1e
    3fa2:	ef 8e       	std	Y+31, r14	; 0x1f
    3fa4:	f8 a2       	lds	r31, 0x98
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    3fa6:	ce 01       	movw	r24, r28
    3fa8:	47 96       	adiw	r24, 0x17	; 23
    3faa:	62 e0       	ldi	r22, 0x02	; 2
    3fac:	70 e0       	ldi	r23, 0x00	; 0
    3fae:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <dir_sdi>
					if (res == FR_OK) {
    3fb2:	88 23       	and	r24, r24
    3fb4:	49 f5       	brne	.+82     	; 0x4008 <f_unlink+0xfa>
						res = dir_read(&sdj);
    3fb6:	ce 01       	movw	r24, r28
    3fb8:	47 96       	adiw	r24, 0x17	; 23
    3fba:	0e 94 ee 13 	call	0x27dc	; 0x27dc <dir_read>
						if (res == FR_OK		/* Not empty dir */
    3fbe:	88 23       	and	r24, r24
    3fc0:	71 f0       	breq	.+28     	; 0x3fde <f_unlink+0xd0>
#if _FS_RPATH
						|| dclst == dj.fs->cdir	/* Current dir */
    3fc2:	e9 81       	ldd	r30, Y+1	; 0x01
    3fc4:	fa 81       	ldd	r31, Y+2	; 0x02
    3fc6:	46 89       	ldd	r20, Z+22	; 0x16
    3fc8:	57 89       	ldd	r21, Z+23	; 0x17
    3fca:	60 8d       	ldd	r22, Z+24	; 0x18
    3fcc:	71 8d       	ldd	r23, Z+25	; 0x19
    3fce:	4c 15       	cp	r20, r12
    3fd0:	5d 05       	cpc	r21, r13
    3fd2:	6e 05       	cpc	r22, r14
    3fd4:	7f 05       	cpc	r23, r15
    3fd6:	29 f0       	breq	.+10     	; 0x3fe2 <f_unlink+0xd4>
#endif
						) res = FR_DENIED;
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    3fd8:	84 30       	cpi	r24, 0x04	; 4
    3fda:	b1 f1       	breq	.+108    	; 0x4048 <f_unlink+0x13a>
    3fdc:	15 c0       	rjmp	.+42     	; 0x4008 <f_unlink+0xfa>
					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-dir is empty or not */
					sdj.sclust = dclst;
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
					if (res == FR_OK) {
						res = dir_read(&sdj);
						if (res == FR_OK		/* Not empty dir */
    3fde:	87 e0       	ldi	r24, 0x07	; 7
    3fe0:	13 c0       	rjmp	.+38     	; 0x4008 <f_unlink+0xfa>
#if _FS_RPATH
						|| dclst == dj.fs->cdir	/* Current dir */
    3fe2:	87 e0       	ldi	r24, 0x07	; 7
    3fe4:	11 c0       	rjmp	.+34     	; 0x4008 <f_unlink+0xfa>
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
    3fe6:	c1 14       	cp	r12, r1
    3fe8:	d1 04       	cpc	r13, r1
    3fea:	e1 04       	cpc	r14, r1
    3fec:	f1 04       	cpc	r15, r1
    3fee:	41 f0       	breq	.+16     	; 0x4000 <f_unlink+0xf2>
						res = remove_chain(dj.fs, dclst);
    3ff0:	89 81       	ldd	r24, Y+1	; 0x01
    3ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ff4:	b7 01       	movw	r22, r14
    3ff6:	a6 01       	movw	r20, r12
    3ff8:	0e 94 1e 14 	call	0x283c	; 0x283c <remove_chain>
					if (res == FR_OK) res = sync(dj.fs);
    3ffc:	88 23       	and	r24, r24
    3ffe:	21 f4       	brne	.+8      	; 0x4008 <f_unlink+0xfa>
    4000:	89 81       	ldd	r24, Y+1	; 0x01
    4002:	9a 81       	ldd	r25, Y+2	; 0x02
    4004:	0e 94 9b 0b 	call	0x1736	; 0x1736 <sync>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
    4008:	ea 96       	adiw	r28, 0x3a	; 58
    400a:	0f b6       	in	r0, 0x3f	; 63
    400c:	f8 94       	cli
    400e:	de bf       	out	0x3e, r29	; 62
    4010:	0f be       	out	0x3f, r0	; 63
    4012:	cd bf       	out	0x3d, r28	; 61
    4014:	df 91       	pop	r29
    4016:	cf 91       	pop	r28
    4018:	1f 91       	pop	r17
    401a:	ff 90       	pop	r15
    401c:	ef 90       	pop	r14
    401e:	df 90       	pop	r13
    4020:	cf 90       	pop	r12
    4022:	08 95       	ret
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
    4024:	6b 89       	ldd	r22, Y+19	; 0x13
    4026:	7c 89       	ldd	r23, Y+20	; 0x14
			if (!dir) {
    4028:	61 15       	cp	r22, r1
    402a:	71 05       	cpc	r23, r1
    402c:	09 f0       	breq	.+2      	; 0x4030 <f_unlink+0x122>
    402e:	9f cf       	rjmp	.-194    	; 0x3f6e <f_unlink+0x60>
    4030:	a4 cf       	rjmp	.-184    	; 0x3f7a <f_unlink+0x6c>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = ld_clust(dj.fs, dir);
    4032:	89 81       	ldd	r24, Y+1	; 0x01
    4034:	9a 81       	ldd	r25, Y+2	; 0x02
    4036:	0e 94 27 05 	call	0xa4e	; 0xa4e <ld_clust>
    403a:	6b 01       	movw	r12, r22
    403c:	7c 01       	movw	r14, r24
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    403e:	14 fd       	sbrc	r17, 4
    4040:	9e cf       	rjmp	.-196    	; 0x3f7e <f_unlink+0x70>
    4042:	02 c0       	rjmp	.+4      	; 0x4048 <f_unlink+0x13a>
				if (dclst < 2) {
					res = FR_INT_ERR;
    4044:	82 e0       	ldi	r24, 0x02	; 2
    4046:	e0 cf       	rjmp	.-64     	; 0x4008 <f_unlink+0xfa>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
    4048:	ce 01       	movw	r24, r28
    404a:	01 96       	adiw	r24, 0x01	; 1
    404c:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <dir_remove>
				if (res == FR_OK) {
    4050:	88 23       	and	r24, r24
    4052:	49 f2       	breq	.-110    	; 0x3fe6 <f_unlink+0xd8>
    4054:	d9 cf       	rjmp	.-78     	; 0x4008 <f_unlink+0xfa>

00004056 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
    4056:	2f 92       	push	r2
    4058:	3f 92       	push	r3
    405a:	4f 92       	push	r4
    405c:	5f 92       	push	r5
    405e:	6f 92       	push	r6
    4060:	7f 92       	push	r7
    4062:	8f 92       	push	r8
    4064:	9f 92       	push	r9
    4066:	af 92       	push	r10
    4068:	bf 92       	push	r11
    406a:	cf 92       	push	r12
    406c:	df 92       	push	r13
    406e:	ef 92       	push	r14
    4070:	ff 92       	push	r15
    4072:	0f 93       	push	r16
    4074:	1f 93       	push	r17
    4076:	cf 93       	push	r28
    4078:	df 93       	push	r29
    407a:	cd b7       	in	r28, 0x3d	; 61
    407c:	de b7       	in	r29, 0x3e	; 62
    407e:	a8 97       	sbiw	r28, 0x28	; 40
    4080:	0f b6       	in	r0, 0x3f	; 63
    4082:	f8 94       	cli
    4084:	de bf       	out	0x3e, r29	; 62
    4086:	0f be       	out	0x3f, r0	; 63
    4088:	cd bf       	out	0x3d, r28	; 61
    408a:	9c a3       	lds	r25, 0x5c
    408c:	8b a3       	lds	r24, 0x5b
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
    408e:	0e 94 27 0c 	call	0x184e	; 0x184e <get_fattime>
    4092:	6b 01       	movw	r12, r22
    4094:	7c 01       	movw	r14, r24
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    4096:	ce 01       	movw	r24, r28
    4098:	83 96       	adiw	r24, 0x23	; 35
    409a:	be 01       	movw	r22, r28
    409c:	6f 5f       	subi	r22, 0xFF	; 255
    409e:	7f 4f       	sbci	r23, 0xFF	; 255
    40a0:	41 e0       	ldi	r20, 0x01	; 1
    40a2:	0e 94 a4 06 	call	0xd48	; 0xd48 <chk_mounted>
    40a6:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    40a8:	88 23       	and	r24, r24
    40aa:	09 f0       	breq	.+2      	; 0x40ae <f_mkdir+0x58>
    40ac:	ee c0       	rjmp	.+476    	; 0x428a <__stack+0x18b>
		INIT_BUF(dj);
    40ae:	ce 01       	movw	r24, r28
    40b0:	47 96       	adiw	r24, 0x17	; 23
    40b2:	9e 8b       	std	Y+22, r25	; 0x16
    40b4:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);			/* Follow the file path */
    40b6:	6b a1       	lds	r22, 0x4b
    40b8:	7c a1       	lds	r23, 0x4c
    40ba:	ce 01       	movw	r24, r28
    40bc:	01 96       	adiw	r24, 0x01	; 1
    40be:	0e 94 a8 11 	call	0x2350	; 0x2350 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    40c2:	88 23       	and	r24, r24
    40c4:	49 f0       	breq	.+18     	; 0x40d8 <f_mkdir+0x82>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
    40c6:	84 30       	cpi	r24, 0x04	; 4
    40c8:	41 f4       	brne	.+16     	; 0x40da <f_mkdir+0x84>
    40ca:	ed 89       	ldd	r30, Y+21	; 0x15
    40cc:	fe 89       	ldd	r31, Y+22	; 0x16
    40ce:	83 85       	ldd	r24, Z+11	; 0x0b
    40d0:	85 ff       	sbrs	r24, 5
    40d2:	f5 c0       	rjmp	.+490    	; 0x42be <__stack+0x1bf>
			res = FR_INVALID_NAME;
    40d4:	86 e0       	ldi	r24, 0x06	; 6
    40d6:	01 c0       	rjmp	.+2      	; 0x40da <f_mkdir+0x84>

	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    40d8:	88 e0       	ldi	r24, 0x08	; 8
				ST_DWORD(dir+DIR_WrtTime, tim);
				st_clust(dir, dcl);
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
    40da:	18 2f       	mov	r17, r24
    40dc:	d6 c0       	rjmp	.+428    	; 0x428a <__stack+0x18b>
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	48 16       	cp	r4, r24
    40e2:	51 04       	cpc	r5, r1
    40e4:	61 04       	cpc	r6, r1
    40e6:	71 04       	cpc	r7, r1
    40e8:	09 f4       	brne	.+2      	; 0x40ec <f_mkdir+0x96>
    40ea:	f9 c0       	rjmp	.+498    	; 0x42de <__stack+0x1df>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    40ec:	ef ef       	ldi	r30, 0xFF	; 255
    40ee:	4e 16       	cp	r4, r30
    40f0:	ef ef       	ldi	r30, 0xFF	; 255
    40f2:	5e 06       	cpc	r5, r30
    40f4:	ef ef       	ldi	r30, 0xFF	; 255
    40f6:	6e 06       	cpc	r6, r30
    40f8:	ef ef       	ldi	r30, 0xFF	; 255
    40fa:	7e 06       	cpc	r7, r30
    40fc:	09 f4       	brne	.+2      	; 0x4100 <__stack+0x1>
    40fe:	f1 c0       	rjmp	.+482    	; 0x42e2 <__stack+0x1e3>
    4100:	01 c0       	rjmp	.+2      	; 0x4104 <__stack+0x5>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    4102:	17 e0       	ldi	r17, 0x07	; 7
			if (dcl == 1) res = FR_INT_ERR;
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK)					/* Flush FAT */
    4104:	11 23       	and	r17, r17
    4106:	09 f0       	breq	.+2      	; 0x410a <__stack+0xb>
    4108:	a0 c0       	rjmp	.+320    	; 0x424a <__stack+0x14b>
				res = move_window(dj.fs, 0);
    410a:	89 81       	ldd	r24, Y+1	; 0x01
    410c:	9a 81       	ldd	r25, Y+2	; 0x02
    410e:	40 e0       	ldi	r20, 0x00	; 0
    4110:	50 e0       	ldi	r21, 0x00	; 0
    4112:	ba 01       	movw	r22, r20
    4114:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
    4118:	18 2f       	mov	r17, r24
			if (res == FR_OK) {					/* Initialize the new directory table */
    411a:	88 23       	and	r24, r24
    411c:	09 f0       	breq	.+2      	; 0x4120 <__stack+0x21>
    411e:	95 c0       	rjmp	.+298    	; 0x424a <__stack+0x14b>
				dsc = clust2sect(dj.fs, dcl);
    4120:	09 81       	ldd	r16, Y+1	; 0x01
    4122:	1a 81       	ldd	r17, Y+2	; 0x02
    4124:	c8 01       	movw	r24, r16
    4126:	b3 01       	movw	r22, r6
    4128:	a2 01       	movw	r20, r4
    412a:	0e 94 2b 0c 	call	0x1856	; 0x1856 <clust2sect>
    412e:	4b 01       	movw	r8, r22
    4130:	5c 01       	movw	r10, r24
				dir = dj.fs->win;
    4132:	0f 2e       	mov	r0, r31
    4134:	f2 e3       	ldi	r31, 0x32	; 50
    4136:	2f 2e       	mov	r2, r31
    4138:	33 24       	eor	r3, r3
    413a:	f0 2d       	mov	r31, r0
    413c:	20 0e       	add	r2, r16
    413e:	31 1e       	adc	r3, r17
				mem_set(dir, 0, SS(dj.fs));
    4140:	c1 01       	movw	r24, r2
    4142:	60 e0       	ldi	r22, 0x00	; 0
    4144:	70 e0       	ldi	r23, 0x00	; 0
    4146:	40 e0       	ldi	r20, 0x00	; 0
    4148:	52 e0       	ldi	r21, 0x02	; 2
    414a:	0e 94 1d 05 	call	0xa3a	; 0xa3a <mem_set>
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
    414e:	c1 01       	movw	r24, r2
    4150:	60 e2       	ldi	r22, 0x20	; 32
    4152:	70 e0       	ldi	r23, 0x00	; 0
    4154:	4b e0       	ldi	r20, 0x0B	; 11
    4156:	50 e0       	ldi	r21, 0x00	; 0
    4158:	0e 94 1d 05 	call	0xa3a	; 0xa3a <mem_set>
				dir[DIR_Name] = '.';
    415c:	8e e2       	ldi	r24, 0x2E	; 46
    415e:	f8 01       	movw	r30, r16
    4160:	82 ab       	sts	0x52, r24
				dir[DIR_Attr] = AM_DIR;
    4162:	80 e1       	ldi	r24, 0x10	; 16
    4164:	85 af       	sts	0x75, r24
				ST_DWORD(dir+DIR_WrtTime, tim);
    4166:	cd a2       	lds	r28, 0x9d
    4168:	e8 5b       	subi	r30, 0xB8	; 184
    416a:	ff 4f       	sbci	r31, 0xFF	; 255
    416c:	c0 82       	st	Z, r12
    416e:	8d 2d       	mov	r24, r13
    4170:	99 27       	eor	r25, r25
    4172:	8e a3       	lds	r24, 0x5e
    4174:	f8 01       	movw	r30, r16
    4176:	e7 5b       	subi	r30, 0xB7	; 183
    4178:	ff 4f       	sbci	r31, 0xFF	; 255
    417a:	80 83       	st	Z, r24
    417c:	c7 01       	movw	r24, r14
    417e:	aa 27       	eor	r26, r26
    4180:	bb 27       	eor	r27, r27
    4182:	8f a3       	lds	r24, 0x5f
    4184:	f8 01       	movw	r30, r16
    4186:	e6 5b       	subi	r30, 0xB6	; 182
    4188:	ff 4f       	sbci	r31, 0xFF	; 255
    418a:	80 83       	st	Z, r24
    418c:	cf 2c       	mov	r12, r15
    418e:	dd 24       	eor	r13, r13
    4190:	ee 24       	eor	r14, r14
    4192:	ff 24       	eor	r15, r15
    4194:	c8 a6       	lds	r28, 0xb8
    4196:	f8 01       	movw	r30, r16
    4198:	e5 5b       	subi	r30, 0xB5	; 181
    419a:	ff 4f       	sbci	r31, 0xFF	; 255
    419c:	c0 82       	st	Z, r12
				st_clust(dir, dcl);
    419e:	c1 01       	movw	r24, r2
    41a0:	b3 01       	movw	r22, r6
    41a2:	a2 01       	movw	r20, r4
    41a4:	0e 94 4c 05 	call	0xa98	; 0xa98 <st_clust>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
    41a8:	0f 2e       	mov	r0, r31
    41aa:	f2 e5       	ldi	r31, 0x52	; 82
    41ac:	cf 2e       	mov	r12, r31
    41ae:	dd 24       	eor	r13, r13
    41b0:	f0 2d       	mov	r31, r0
    41b2:	c0 0e       	add	r12, r16
    41b4:	d1 1e       	adc	r13, r17
    41b6:	c6 01       	movw	r24, r12
    41b8:	b1 01       	movw	r22, r2
    41ba:	40 e2       	ldi	r20, 0x20	; 32
    41bc:	50 e0       	ldi	r21, 0x00	; 0
    41be:	0e 94 10 05 	call	0xa20	; 0xa20 <mem_cpy>
				dir[33] = '.'; pcl = dj.sclust;
    41c2:	f8 01       	movw	r30, r16
    41c4:	ed 5a       	subi	r30, 0xAD	; 173
    41c6:	ff 4f       	sbci	r31, 0xFF	; 255
    41c8:	8e e2       	ldi	r24, 0x2E	; 46
    41ca:	80 83       	st	Z, r24
    41cc:	4f 81       	ldd	r20, Y+7	; 0x07
    41ce:	58 85       	ldd	r21, Y+8	; 0x08
    41d0:	69 85       	ldd	r22, Y+9	; 0x09
    41d2:	7a 85       	ldd	r23, Y+10	; 0x0a
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
    41d4:	e9 81       	ldd	r30, Y+1	; 0x01
    41d6:	fa 81       	ldd	r31, Y+2	; 0x02
    41d8:	80 81       	ld	r24, Z
    41da:	83 30       	cpi	r24, 0x03	; 3
    41dc:	61 f4       	brne	.+24     	; 0x41f6 <__stack+0xf7>
    41de:	86 a1       	lds	r24, 0x46
    41e0:	97 a1       	lds	r25, 0x47
    41e2:	a0 a5       	lds	r26, 0x60
    41e4:	b1 a5       	lds	r27, 0x61
    41e6:	84 17       	cp	r24, r20
    41e8:	95 07       	cpc	r25, r21
    41ea:	a6 07       	cpc	r26, r22
    41ec:	b7 07       	cpc	r27, r23
    41ee:	19 f4       	brne	.+6      	; 0x41f6 <__stack+0xf7>
					pcl = 0;
    41f0:	40 e0       	ldi	r20, 0x00	; 0
    41f2:	50 e0       	ldi	r21, 0x00	; 0
    41f4:	ba 01       	movw	r22, r20
				st_clust(dir+SZ_DIR, pcl);
    41f6:	c6 01       	movw	r24, r12
    41f8:	0e 94 4c 05 	call	0xa98	; 0xa98 <st_clust>
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    41fc:	e9 81       	ldd	r30, Y+1	; 0x01
    41fe:	fa 81       	ldd	r31, Y+2	; 0x02
    4200:	02 81       	ldd	r16, Z+2	; 0x02
    4202:	00 23       	and	r16, r16
    4204:	09 f4       	brne	.+2      	; 0x4208 <__stack+0x109>
    4206:	6f c0       	rjmp	.+222    	; 0x42e6 <__stack+0x1e7>
					dj.fs->winsect = dsc++;
					dj.fs->wflag = 1;
    4208:	cc 24       	eor	r12, r12
    420a:	c3 94       	inc	r12
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
    420c:	89 81       	ldd	r24, Y+1	; 0x01
    420e:	9a 81       	ldd	r25, Y+2	; 0x02
    4210:	fc 01       	movw	r30, r24
    4212:	86 a6       	lds	r24, 0xb6
    4214:	97 a6       	lds	r25, 0xb7
    4216:	a0 aa       	sts	0x90, r26
    4218:	b1 aa       	sts	0x91, r27
    421a:	08 94       	sec
    421c:	81 1c       	adc	r8, r1
    421e:	91 1c       	adc	r9, r1
    4220:	a1 1c       	adc	r10, r1
    4222:	b1 1c       	adc	r11, r1
					dj.fs->wflag = 1;
    4224:	c4 82       	std	Z+4, r12	; 0x04
					res = move_window(dj.fs, 0);
    4226:	40 e0       	ldi	r20, 0x00	; 0
    4228:	50 e0       	ldi	r21, 0x00	; 0
    422a:	ba 01       	movw	r22, r20
    422c:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
    4230:	18 2f       	mov	r17, r24
					if (res != FR_OK) break;
    4232:	88 23       	and	r24, r24
    4234:	51 f4       	brne	.+20     	; 0x424a <__stack+0x14b>
					mem_set(dir, 0, SS(dj.fs));
    4236:	c1 01       	movw	r24, r2
    4238:	60 e0       	ldi	r22, 0x00	; 0
    423a:	70 e0       	ldi	r23, 0x00	; 0
    423c:	40 e0       	ldi	r20, 0x00	; 0
    423e:	52 e0       	ldi	r21, 0x02	; 2
    4240:	0e 94 1d 05 	call	0xa3a	; 0xa3a <mem_set>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    4244:	01 50       	subi	r16, 0x01	; 1
    4246:	11 f7       	brne	.-60     	; 0x420c <__stack+0x10d>
    4248:	4e c0       	rjmp	.+156    	; 0x42e6 <__stack+0x1e7>
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
			if (res != FR_OK) {
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
    424a:	89 81       	ldd	r24, Y+1	; 0x01
    424c:	9a 81       	ldd	r25, Y+2	; 0x02
    424e:	b3 01       	movw	r22, r6
    4250:	a2 01       	movw	r20, r4
    4252:	0e 94 1e 14 	call	0x283c	; 0x283c <remove_chain>
    4256:	19 c0       	rjmp	.+50     	; 0x428a <__stack+0x18b>
			} else {
				dir = dj.dir;
    4258:	eb 89       	ldd	r30, Y+19	; 0x13
    425a:	fc 89       	ldd	r31, Y+20	; 0x14
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
    425c:	80 e1       	ldi	r24, 0x10	; 16
    425e:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
    4260:	8d a1       	lds	r24, 0x4d
    4262:	86 8b       	std	Z+22, r24	; 0x16
    4264:	8e a1       	lds	r24, 0x4e
    4266:	87 8b       	std	Z+23, r24	; 0x17
    4268:	8f a1       	lds	r24, 0x4f
    426a:	80 8f       	std	Z+24, r24	; 0x18
    426c:	88 a5       	lds	r24, 0x68
    426e:	81 8f       	std	Z+25, r24	; 0x19
				st_clust(dir, dcl);					/* Table start cluster */
    4270:	cf 01       	movw	r24, r30
    4272:	b3 01       	movw	r22, r6
    4274:	a2 01       	movw	r20, r4
    4276:	0e 94 4c 05 	call	0xa98	; 0xa98 <st_clust>
				dj.fs->wflag = 1;
    427a:	89 81       	ldd	r24, Y+1	; 0x01
    427c:	9a 81       	ldd	r25, Y+2	; 0x02
    427e:	21 e0       	ldi	r18, 0x01	; 1
    4280:	fc 01       	movw	r30, r24
    4282:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    4284:	0e 94 9b 0b 	call	0x1736	; 0x1736 <sync>
    4288:	18 2f       	mov	r17, r24
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    428a:	81 2f       	mov	r24, r17
    428c:	a8 96       	adiw	r28, 0x28	; 40
    428e:	0f b6       	in	r0, 0x3f	; 63
    4290:	f8 94       	cli
    4292:	de bf       	out	0x3e, r29	; 62
    4294:	0f be       	out	0x3f, r0	; 63
    4296:	cd bf       	out	0x3d, r28	; 61
    4298:	df 91       	pop	r29
    429a:	cf 91       	pop	r28
    429c:	1f 91       	pop	r17
    429e:	0f 91       	pop	r16
    42a0:	ff 90       	pop	r15
    42a2:	ef 90       	pop	r14
    42a4:	df 90       	pop	r13
    42a6:	cf 90       	pop	r12
    42a8:	bf 90       	pop	r11
    42aa:	af 90       	pop	r10
    42ac:	9f 90       	pop	r9
    42ae:	8f 90       	pop	r8
    42b0:	7f 90       	pop	r7
    42b2:	6f 90       	pop	r6
    42b4:	5f 90       	pop	r5
    42b6:	4f 90       	pop	r4
    42b8:	3f 90       	pop	r3
    42ba:	2f 90       	pop	r2
    42bc:	08 95       	ret
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
    42be:	89 81       	ldd	r24, Y+1	; 0x01
    42c0:	9a 81       	ldd	r25, Y+2	; 0x02
    42c2:	40 e0       	ldi	r20, 0x00	; 0
    42c4:	50 e0       	ldi	r21, 0x00	; 0
    42c6:	ba 01       	movw	r22, r20
    42c8:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <create_chain>
    42cc:	2b 01       	movw	r4, r22
    42ce:	3c 01       	movw	r6, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    42d0:	61 15       	cp	r22, r1
    42d2:	71 05       	cpc	r23, r1
    42d4:	81 05       	cpc	r24, r1
    42d6:	91 05       	cpc	r25, r1
    42d8:	09 f4       	brne	.+2      	; 0x42dc <__stack+0x1dd>
    42da:	13 cf       	rjmp	.-474    	; 0x4102 <__stack+0x3>
    42dc:	00 cf       	rjmp	.-512    	; 0x40de <f_mkdir+0x88>
			if (dcl == 1) res = FR_INT_ERR;
    42de:	12 e0       	ldi	r17, 0x02	; 2
    42e0:	b4 cf       	rjmp	.-152    	; 0x424a <__stack+0x14b>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    42e2:	11 e0       	ldi	r17, 0x01	; 1
    42e4:	b2 cf       	rjmp	.-156    	; 0x424a <__stack+0x14b>
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
    42e6:	ce 01       	movw	r24, r28
    42e8:	01 96       	adiw	r24, 0x01	; 1
    42ea:	0e 94 92 13 	call	0x2724	; 0x2724 <dir_register>
    42ee:	18 2f       	mov	r17, r24
			if (res != FR_OK) {
    42f0:	88 23       	and	r24, r24
    42f2:	09 f4       	brne	.+2      	; 0x42f6 <__stack+0x1f7>
    42f4:	b1 cf       	rjmp	.-158    	; 0x4258 <__stack+0x159>
    42f6:	a9 cf       	rjmp	.-174    	; 0x424a <__stack+0x14b>

000042f8 <f_chmod>:
FRESULT f_chmod (
	const TCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    42f8:	0f 93       	push	r16
    42fa:	1f 93       	push	r17
    42fc:	cf 93       	push	r28
    42fe:	df 93       	push	r29
    4300:	cd b7       	in	r28, 0x3d	; 61
    4302:	de b7       	in	r29, 0x3e	; 62
    4304:	a4 97       	sbiw	r28, 0x24	; 36
    4306:	0f b6       	in	r0, 0x3f	; 63
    4308:	f8 94       	cli
    430a:	de bf       	out	0x3e, r29	; 62
    430c:	0f be       	out	0x3f, r0	; 63
    430e:	cd bf       	out	0x3d, r28	; 61
    4310:	9c a3       	lds	r25, 0x5c
    4312:	8b a3       	lds	r24, 0x5b
    4314:	06 2f       	mov	r16, r22
    4316:	14 2f       	mov	r17, r20
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    4318:	ce 01       	movw	r24, r28
    431a:	83 96       	adiw	r24, 0x23	; 35
    431c:	be 01       	movw	r22, r28
    431e:	6f 5f       	subi	r22, 0xFF	; 255
    4320:	7f 4f       	sbci	r23, 0xFF	; 255
    4322:	41 e0       	ldi	r20, 0x01	; 1
    4324:	0e 94 a4 06 	call	0xd48	; 0xd48 <chk_mounted>
	if (res == FR_OK) {
    4328:	88 23       	and	r24, r24
    432a:	29 f5       	brne	.+74     	; 0x4376 <f_chmod+0x7e>
		INIT_BUF(dj);
    432c:	ce 01       	movw	r24, r28
    432e:	47 96       	adiw	r24, 0x17	; 23
    4330:	9e 8b       	std	Y+22, r25	; 0x16
    4332:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the file path */
    4334:	6b a1       	lds	r22, 0x4b
    4336:	7c a1       	lds	r23, 0x4c
    4338:	ce 01       	movw	r24, r28
    433a:	01 96       	adiw	r24, 0x01	; 1
    433c:	0e 94 a8 11 	call	0x2350	; 0x2350 <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    4340:	88 23       	and	r24, r24
    4342:	c9 f4       	brne	.+50     	; 0x4376 <f_chmod+0x7e>
    4344:	ed 89       	ldd	r30, Y+21	; 0x15
    4346:	fe 89       	ldd	r31, Y+22	; 0x16
    4348:	83 85       	ldd	r24, Z+11	; 0x0b
    434a:	85 ff       	sbrs	r24, 5
    434c:	1f c0       	rjmp	.+62     	; 0x438c <f_chmod+0x94>
			res = FR_INVALID_NAME;
    434e:	86 e0       	ldi	r24, 0x06	; 6
    4350:	12 c0       	rjmp	.+36     	; 0x4376 <f_chmod+0x7e>
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    4352:	17 72       	andi	r17, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    4354:	91 2f       	mov	r25, r17
    4356:	90 95       	com	r25
    4358:	83 85       	ldd	r24, Z+11	; 0x0b
    435a:	89 23       	and	r24, r25
    435c:	01 23       	and	r16, r17
    435e:	18 2f       	mov	r17, r24
    4360:	10 2b       	or	r17, r16
    4362:	13 87       	std	Z+11, r17	; 0x0b
				dj.fs->wflag = 1;
    4364:	89 81       	ldd	r24, Y+1	; 0x01
    4366:	9a 81       	ldd	r25, Y+2	; 0x02
    4368:	21 e0       	ldi	r18, 0x01	; 1
    436a:	fc 01       	movw	r30, r24
    436c:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    436e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <sync>
    4372:	01 c0       	rjmp	.+2      	; 0x4376 <f_chmod+0x7e>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
    4374:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4376:	a4 96       	adiw	r28, 0x24	; 36
    4378:	0f b6       	in	r0, 0x3f	; 63
    437a:	f8 94       	cli
    437c:	de bf       	out	0x3e, r29	; 62
    437e:	0f be       	out	0x3f, r0	; 63
    4380:	cd bf       	out	0x3d, r28	; 61
    4382:	df 91       	pop	r29
    4384:	cf 91       	pop	r28
    4386:	1f 91       	pop	r17
    4388:	0f 91       	pop	r16
    438a:	08 95       	ret
		res = follow_path(&dj, path);		/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    438c:	eb 89       	ldd	r30, Y+19	; 0x13
    438e:	fc 89       	ldd	r31, Y+20	; 0x14
			if (!dir) {						/* Is it a root directory? */
    4390:	30 97       	sbiw	r30, 0x00	; 0
    4392:	f9 f6       	brne	.-66     	; 0x4352 <f_chmod+0x5a>
    4394:	ef cf       	rjmp	.-34     	; 0x4374 <f_chmod+0x7c>

00004396 <f_utime>:

FRESULT f_utime (
	const TCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the time stamp to be set */
)
{
    4396:	0f 93       	push	r16
    4398:	1f 93       	push	r17
    439a:	cf 93       	push	r28
    439c:	df 93       	push	r29
    439e:	cd b7       	in	r28, 0x3d	; 61
    43a0:	de b7       	in	r29, 0x3e	; 62
    43a2:	a4 97       	sbiw	r28, 0x24	; 36
    43a4:	0f b6       	in	r0, 0x3f	; 63
    43a6:	f8 94       	cli
    43a8:	de bf       	out	0x3e, r29	; 62
    43aa:	0f be       	out	0x3f, r0	; 63
    43ac:	cd bf       	out	0x3d, r28	; 61
    43ae:	9c a3       	lds	r25, 0x5c
    43b0:	8b a3       	lds	r24, 0x5b
    43b2:	8b 01       	movw	r16, r22
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    43b4:	ce 01       	movw	r24, r28
    43b6:	83 96       	adiw	r24, 0x23	; 35
    43b8:	be 01       	movw	r22, r28
    43ba:	6f 5f       	subi	r22, 0xFF	; 255
    43bc:	7f 4f       	sbci	r23, 0xFF	; 255
    43be:	41 e0       	ldi	r20, 0x01	; 1
    43c0:	0e 94 a4 06 	call	0xd48	; 0xd48 <chk_mounted>
	if (res == FR_OK) {
    43c4:	88 23       	and	r24, r24
    43c6:	61 f5       	brne	.+88     	; 0x4420 <f_utime+0x8a>
		INIT_BUF(dj);
    43c8:	ce 01       	movw	r24, r28
    43ca:	47 96       	adiw	r24, 0x17	; 23
    43cc:	9e 8b       	std	Y+22, r25	; 0x16
    43ce:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    43d0:	6b a1       	lds	r22, 0x4b
    43d2:	7c a1       	lds	r23, 0x4c
    43d4:	ce 01       	movw	r24, r28
    43d6:	01 96       	adiw	r24, 0x01	; 1
    43d8:	0e 94 a8 11 	call	0x2350	; 0x2350 <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    43dc:	88 23       	and	r24, r24
    43de:	01 f5       	brne	.+64     	; 0x4420 <f_utime+0x8a>
    43e0:	ed 89       	ldd	r30, Y+21	; 0x15
    43e2:	fe 89       	ldd	r31, Y+22	; 0x16
    43e4:	83 85       	ldd	r24, Z+11	; 0x0b
    43e6:	85 ff       	sbrs	r24, 5
    43e8:	26 c0       	rjmp	.+76     	; 0x4436 <f_utime+0xa0>
			res = FR_INVALID_NAME;
    43ea:	86 e0       	ldi	r24, 0x06	; 6
    43ec:	19 c0       	rjmp	.+50     	; 0x4420 <f_utime+0x8a>
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    43ee:	d8 01       	movw	r26, r16
    43f0:	16 96       	adiw	r26, 0x06	; 6
    43f2:	8c 91       	ld	r24, X
    43f4:	16 97       	sbiw	r26, 0x06	; 6
    43f6:	86 8b       	std	Z+22, r24	; 0x16
    43f8:	17 96       	adiw	r26, 0x07	; 7
    43fa:	8c 91       	ld	r24, X
    43fc:	17 97       	sbiw	r26, 0x07	; 7
    43fe:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    4400:	14 96       	adiw	r26, 0x04	; 4
    4402:	8c 91       	ld	r24, X
    4404:	14 97       	sbiw	r26, 0x04	; 4
    4406:	80 8f       	std	Z+24, r24	; 0x18
    4408:	15 96       	adiw	r26, 0x05	; 5
    440a:	8c 91       	ld	r24, X
    440c:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    440e:	89 81       	ldd	r24, Y+1	; 0x01
    4410:	9a 81       	ldd	r25, Y+2	; 0x02
    4412:	21 e0       	ldi	r18, 0x01	; 1
    4414:	fc 01       	movw	r30, r24
    4416:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    4418:	0e 94 9b 0b 	call	0x1736	; 0x1736 <sync>
    441c:	01 c0       	rjmp	.+2      	; 0x4420 <f_utime+0x8a>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
    441e:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4420:	a4 96       	adiw	r28, 0x24	; 36
    4422:	0f b6       	in	r0, 0x3f	; 63
    4424:	f8 94       	cli
    4426:	de bf       	out	0x3e, r29	; 62
    4428:	0f be       	out	0x3f, r0	; 63
    442a:	cd bf       	out	0x3d, r28	; 61
    442c:	df 91       	pop	r29
    442e:	cf 91       	pop	r28
    4430:	1f 91       	pop	r17
    4432:	0f 91       	pop	r16
    4434:	08 95       	ret
		res = follow_path(&dj, path);	/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    4436:	eb 89       	ldd	r30, Y+19	; 0x13
    4438:	fc 89       	ldd	r31, Y+20	; 0x14
			if (!dir) {					/* Root directory */
    443a:	30 97       	sbiw	r30, 0x00	; 0
    443c:	c1 f6       	brne	.-80     	; 0x43ee <f_utime+0x58>
    443e:	ef cf       	rjmp	.-34     	; 0x441e <f_utime+0x88>

00004440 <f_rename>:

FRESULT f_rename (
	const TCHAR *path_old,	/* Pointer to the old name */
	const TCHAR *path_new	/* Pointer to the new name */
)
{
    4440:	ef 92       	push	r14
    4442:	ff 92       	push	r15
    4444:	0f 93       	push	r16
    4446:	1f 93       	push	r17
    4448:	cf 93       	push	r28
    444a:	df 93       	push	r29
    444c:	cd b7       	in	r28, 0x3d	; 61
    444e:	de b7       	in	r29, 0x3e	; 62
    4450:	cf 54       	subi	r28, 0x4F	; 79
    4452:	d0 40       	sbci	r29, 0x00	; 0
    4454:	0f b6       	in	r0, 0x3f	; 63
    4456:	f8 94       	cli
    4458:	de bf       	out	0x3e, r29	; 62
    445a:	0f be       	out	0x3f, r0	; 63
    445c:	cd bf       	out	0x3d, r28	; 61
    445e:	60 96       	adiw	r28, 0x10	; 16
    4460:	9f af       	sts	0x7f, r25
    4462:	8e af       	sts	0x7e, r24
    4464:	60 97       	sbiw	r28, 0x10	; 16
    4466:	8b 01       	movw	r16, r22
	BYTE buf[21], *dir;
	DWORD dw;
	DEF_NAMEBUF;


	res = chk_mounted(&path_old, &djo.fs, 1);
    4468:	ce 01       	movw	r24, r28
    446a:	82 5b       	subi	r24, 0xB2	; 178
    446c:	9f 4f       	sbci	r25, 0xFF	; 255
    446e:	be 01       	movw	r22, r28
    4470:	6f 5f       	subi	r22, 0xFF	; 255
    4472:	7f 4f       	sbci	r23, 0xFF	; 255
    4474:	41 e0       	ldi	r20, 0x01	; 1
    4476:	0e 94 a4 06 	call	0xd48	; 0xd48 <chk_mounted>
	if (res == FR_OK) {
    447a:	88 23       	and	r24, r24
    447c:	09 f0       	breq	.+2      	; 0x4480 <f_rename+0x40>
    447e:	b1 c0       	rjmp	.+354    	; 0x45e2 <f_rename+0x1a2>
		djn.fs = djo.fs;
    4480:	89 81       	ldd	r24, Y+1	; 0x01
    4482:	9a 81       	ldd	r25, Y+2	; 0x02
    4484:	98 8f       	std	Y+24, r25	; 0x18
    4486:	8f 8b       	std	Y+23, r24	; 0x17
		INIT_BUF(djo);
    4488:	ce 01       	movw	r24, r28
    448a:	8e 5b       	subi	r24, 0xBE	; 190
    448c:	9f 4f       	sbci	r25, 0xFF	; 255
    448e:	9e 8b       	std	Y+22, r25	; 0x16
    4490:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&djo, path_old);		/* Check old object */
    4492:	60 96       	adiw	r28, 0x10	; 16
    4494:	6e ad       	sts	0x6e, r22
    4496:	7f ad       	sts	0x6f, r23
    4498:	60 97       	sbiw	r28, 0x10	; 16
    449a:	ce 01       	movw	r24, r28
    449c:	01 96       	adiw	r24, 0x01	; 1
    449e:	0e 94 a8 11 	call	0x2350	; 0x2350 <follow_path>
		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
    44a2:	88 23       	and	r24, r24
    44a4:	09 f0       	breq	.+2      	; 0x44a8 <f_rename+0x68>
    44a6:	9d c0       	rjmp	.+314    	; 0x45e2 <f_rename+0x1a2>
    44a8:	ed 89       	ldd	r30, Y+21	; 0x15
    44aa:	fe 89       	ldd	r31, Y+22	; 0x16
    44ac:	83 85       	ldd	r24, Z+11	; 0x0b
    44ae:	85 ff       	sbrs	r24, 5
    44b0:	a6 c0       	rjmp	.+332    	; 0x45fe <f_rename+0x1be>
			res = FR_INVALID_NAME;
    44b2:	86 e0       	ldi	r24, 0x06	; 6
    44b4:	96 c0       	rjmp	.+300    	; 0x45e2 <f_rename+0x1a2>
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
    44b6:	65 5f       	subi	r22, 0xF5	; 245
    44b8:	7f 4f       	sbci	r23, 0xFF	; 255
    44ba:	ce 01       	movw	r24, r28
    44bc:	8d 96       	adiw	r24, 0x2d	; 45
    44be:	45 e1       	ldi	r20, 0x15	; 21
    44c0:	50 e0       	ldi	r21, 0x00	; 0
    44c2:	0e 94 10 05 	call	0xa20	; 0xa20 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Check new object */
    44c6:	ce 01       	movw	r24, r28
    44c8:	47 96       	adiw	r24, 0x17	; 23
    44ca:	be 01       	movw	r22, r28
    44cc:	6f 5f       	subi	r22, 0xFF	; 255
    44ce:	7f 4f       	sbci	r23, 0xFF	; 255
    44d0:	46 e1       	ldi	r20, 0x16	; 22
    44d2:	50 e0       	ldi	r21, 0x00	; 0
    44d4:	0e 94 10 05 	call	0xa20	; 0xa20 <mem_cpy>
				res = follow_path(&djn, path_new);
    44d8:	ce 01       	movw	r24, r28
    44da:	47 96       	adiw	r24, 0x17	; 23
    44dc:	b8 01       	movw	r22, r16
    44de:	0e 94 a8 11 	call	0x2350	; 0x2350 <follow_path>
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    44e2:	88 23       	and	r24, r24
    44e4:	09 f4       	brne	.+2      	; 0x44e8 <f_rename+0xa8>
    44e6:	7a c0       	rjmp	.+244    	; 0x45dc <f_rename+0x19c>
				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
    44e8:	84 30       	cpi	r24, 0x04	; 4
    44ea:	09 f0       	breq	.+2      	; 0x44ee <f_rename+0xae>
    44ec:	7a c0       	rjmp	.+244    	; 0x45e2 <f_rename+0x1a2>
/* Start critical section that an interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
    44ee:	ce 01       	movw	r24, r28
    44f0:	47 96       	adiw	r24, 0x17	; 23
    44f2:	0e 94 92 13 	call	0x2724	; 0x2724 <dir_register>
					if (res == FR_OK) {
    44f6:	88 23       	and	r24, r24
    44f8:	09 f0       	breq	.+2      	; 0x44fc <f_rename+0xbc>
    44fa:	73 c0       	rjmp	.+230    	; 0x45e2 <f_rename+0x1a2>
						dir = djn.dir;					/* Copy object information except for name */
    44fc:	09 a5       	lds	r16, 0x69
    44fe:	1a a5       	lds	r17, 0x6a
						mem_cpy(dir+13, buf+2, 19);
    4500:	c8 01       	movw	r24, r16
    4502:	0d 96       	adiw	r24, 0x0d	; 13
    4504:	be 01       	movw	r22, r28
    4506:	61 5d       	subi	r22, 0xD1	; 209
    4508:	7f 4f       	sbci	r23, 0xFF	; 255
    450a:	43 e1       	ldi	r20, 0x13	; 19
    450c:	50 e0       	ldi	r21, 0x00	; 0
    450e:	0e 94 10 05 	call	0xa20	; 0xa20 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
    4512:	8d a5       	lds	r24, 0x6d
    4514:	80 62       	ori	r24, 0x20	; 32
    4516:	f8 01       	movw	r30, r16
    4518:	83 87       	std	Z+11, r24	; 0x0b
						djo.fs->wflag = 1;
    451a:	e9 80       	ldd	r14, Y+1	; 0x01
    451c:	fa 80       	ldd	r15, Y+2	; 0x02
    451e:	81 e0       	ldi	r24, 0x01	; 1
    4520:	f7 01       	movw	r30, r14
    4522:	84 83       	std	Z+4, r24	; 0x04
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
    4524:	4f 81       	ldd	r20, Y+7	; 0x07
    4526:	58 85       	ldd	r21, Y+8	; 0x08
    4528:	69 85       	ldd	r22, Y+9	; 0x09
    452a:	7a 85       	ldd	r23, Y+10	; 0x0a
    452c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    452e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4530:	af 8d       	ldd	r26, Y+31	; 0x1f
    4532:	b8 a1       	lds	r27, 0x48
    4534:	48 17       	cp	r20, r24
    4536:	59 07       	cpc	r21, r25
    4538:	6a 07       	cpc	r22, r26
    453a:	7b 07       	cpc	r23, r27
    453c:	09 f4       	brne	.+2      	; 0x4540 <f_rename+0x100>
    453e:	43 c0       	rjmp	.+134    	; 0x45c6 <f_rename+0x186>
    4540:	f8 01       	movw	r30, r16
    4542:	83 85       	ldd	r24, Z+11	; 0x0b
    4544:	84 ff       	sbrs	r24, 4
    4546:	3f c0       	rjmp	.+126    	; 0x45c6 <f_rename+0x186>
							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
    4548:	c7 01       	movw	r24, r14
    454a:	b8 01       	movw	r22, r16
    454c:	0e 94 27 05 	call	0xa4e	; 0xa4e <ld_clust>
    4550:	ab 01       	movw	r20, r22
    4552:	bc 01       	movw	r22, r24
    4554:	c7 01       	movw	r24, r14
    4556:	0e 94 2b 0c 	call	0x1856	; 0x1856 <clust2sect>
    455a:	ab 01       	movw	r20, r22
    455c:	bc 01       	movw	r22, r24
							if (!dw) {
    455e:	41 15       	cp	r20, r1
    4560:	51 05       	cpc	r21, r1
    4562:	61 05       	cpc	r22, r1
    4564:	71 05       	cpc	r23, r1
    4566:	09 f4       	brne	.+2      	; 0x456a <f_rename+0x12a>
    4568:	51 c0       	rjmp	.+162    	; 0x460c <f_rename+0x1cc>
								res = FR_INT_ERR;
							} else {
								res = move_window(djo.fs, dw);
    456a:	c7 01       	movw	r24, r14
    456c:	0e 94 15 0b 	call	0x162a	; 0x162a <move_window>
								dir = djo.fs->win+SZ_DIR;	/* .. entry */
    4570:	e9 81       	ldd	r30, Y+1	; 0x01
    4572:	fa 81       	ldd	r31, Y+2	; 0x02
								if (res == FR_OK && dir[1] == '.') {
    4574:	88 23       	and	r24, r24
    4576:	a9 f5       	brne	.+106    	; 0x45e2 <f_rename+0x1a2>
    4578:	df 01       	movw	r26, r30
    457a:	ad 5a       	subi	r26, 0xAD	; 173
    457c:	bf 4f       	sbci	r27, 0xFF	; 255
    457e:	8c 91       	ld	r24, X
    4580:	8e 32       	cpi	r24, 0x2E	; 46
    4582:	09 f5       	brne	.+66     	; 0x45c6 <f_rename+0x186>
									dw = (djo.fs->fs_type == FS_FAT32 && djn.sclust == djo.fs->dirbase) ? 0 : djn.sclust;
    4584:	80 81       	ld	r24, Z
    4586:	83 30       	cpi	r24, 0x03	; 3
    4588:	69 f4       	brne	.+26     	; 0x45a4 <f_rename+0x164>
    458a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    458c:	5e 8d       	ldd	r21, Y+30	; 0x1e
    458e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4590:	78 a1       	lds	r23, 0x48
    4592:	86 a1       	lds	r24, 0x46
    4594:	97 a1       	lds	r25, 0x47
    4596:	a0 a5       	lds	r26, 0x60
    4598:	b1 a5       	lds	r27, 0x61
    459a:	48 17       	cp	r20, r24
    459c:	59 07       	cpc	r21, r25
    459e:	6a 07       	cpc	r22, r26
    45a0:	7b 07       	cpc	r23, r27
    45a2:	29 f0       	breq	.+10     	; 0x45ae <f_rename+0x16e>
    45a4:	4d 8d       	ldd	r20, Y+29	; 0x1d
    45a6:	5e 8d       	ldd	r21, Y+30	; 0x1e
    45a8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    45aa:	78 a1       	lds	r23, 0x48
    45ac:	03 c0       	rjmp	.+6      	; 0x45b4 <f_rename+0x174>
    45ae:	40 e0       	ldi	r20, 0x00	; 0
    45b0:	50 e0       	ldi	r21, 0x00	; 0
    45b2:	ba 01       	movw	r22, r20
									st_clust(dir, dw);
    45b4:	cf 01       	movw	r24, r30
    45b6:	8e 5a       	subi	r24, 0xAE	; 174
    45b8:	9f 4f       	sbci	r25, 0xFF	; 255
    45ba:	0e 94 4c 05 	call	0xa98	; 0xa98 <st_clust>
									djo.fs->wflag = 1;
    45be:	e9 81       	ldd	r30, Y+1	; 0x01
    45c0:	fa 81       	ldd	r31, Y+2	; 0x02
    45c2:	81 e0       	ldi	r24, 0x01	; 1
    45c4:	84 83       	std	Z+4, r24	; 0x04
								}
							}
						}
						if (res == FR_OK) {
							res = dir_remove(&djo);		/* Remove old entry */
    45c6:	ce 01       	movw	r24, r28
    45c8:	01 96       	adiw	r24, 0x01	; 1
    45ca:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <dir_remove>
							if (res == FR_OK)
    45ce:	88 23       	and	r24, r24
    45d0:	41 f4       	brne	.+16     	; 0x45e2 <f_rename+0x1a2>
								res = sync(djo.fs);
    45d2:	89 81       	ldd	r24, Y+1	; 0x01
    45d4:	9a 81       	ldd	r25, Y+2	; 0x02
    45d6:	0e 94 9b 0b 	call	0x1736	; 0x1736 <sync>
    45da:	03 c0       	rjmp	.+6      	; 0x45e2 <f_rename+0x1a2>
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Check new object */
				res = follow_path(&djn, path_new);
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    45dc:	88 e0       	ldi	r24, 0x08	; 8
    45de:	01 c0       	rjmp	.+2      	; 0x45e2 <f_rename+0x1a2>
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
    45e0:	84 e0       	ldi	r24, 0x04	; 4
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
    45e2:	c1 5b       	subi	r28, 0xB1	; 177
    45e4:	df 4f       	sbci	r29, 0xFF	; 255
    45e6:	0f b6       	in	r0, 0x3f	; 63
    45e8:	f8 94       	cli
    45ea:	de bf       	out	0x3e, r29	; 62
    45ec:	0f be       	out	0x3f, r0	; 63
    45ee:	cd bf       	out	0x3d, r28	; 61
    45f0:	df 91       	pop	r29
    45f2:	cf 91       	pop	r28
    45f4:	1f 91       	pop	r17
    45f6:	0f 91       	pop	r16
    45f8:	ff 90       	pop	r15
    45fa:	ef 90       	pop	r14
    45fc:	08 95       	ret
			res = FR_INVALID_NAME;
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
    45fe:	6b 89       	ldd	r22, Y+19	; 0x13
    4600:	7c 89       	ldd	r23, Y+20	; 0x14
    4602:	61 15       	cp	r22, r1
    4604:	71 05       	cpc	r23, r1
    4606:	09 f0       	breq	.+2      	; 0x460a <f_rename+0x1ca>
    4608:	56 cf       	rjmp	.-340    	; 0x44b6 <f_rename+0x76>
    460a:	ea cf       	rjmp	.-44     	; 0x45e0 <f_rename+0x1a0>
						dir[DIR_Attr] = buf[0] | AM_ARC;
						djo.fs->wflag = 1;
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
							if (!dw) {
								res = FR_INT_ERR;
    460c:	82 e0       	ldi	r24, 0x02	; 2
    460e:	e9 cf       	rjmp	.-46     	; 0x45e2 <f_rename+0x1a2>

00004610 <fat_init>:
		errCode = f_write(&file, buff, 10, &bytesRead); // Will attempt to write string 'helloworld' to file (data.txt)
		errCode = f_close(&file);
    }
}

void fat_init(void){
    4610:	af 92       	push	r10
    4612:	bf 92       	push	r11
    4614:	cf 92       	push	r12
    4616:	df 92       	push	r13
    4618:	ef 92       	push	r14
    461a:	ff 92       	push	r15
    461c:	0f 93       	push	r16
    461e:	1f 93       	push	r17
    4620:	cf 93       	push	r28
    4622:	df 93       	push	r29
    errCode = -1;
    4624:	8f ef       	ldi	r24, 0xFF	; 255
    4626:	80 93 ba 01 	sts	0x01BA, r24

    while (errCode != FR_OK){                               //go until f_open returns FR_OK (function successful)
        errCode = f_mount(0, &fatfs);                       //mount drive number 0
    462a:	c4 ef       	ldi	r28, 0xF4	; 244
    462c:	d3 e0       	ldi	r29, 0x03	; 3
        errCode = f_opendir(&dir, "/");				    	//root directory
    462e:	0d ed       	ldi	r16, 0xDD	; 221
    4630:	13 e0       	ldi	r17, 0x03	; 3
    4632:	0f 2e       	mov	r0, r31
    4634:	f0 e1       	ldi	r31, 0x10	; 16
    4636:	ef 2e       	mov	r14, r31
    4638:	f1 e0       	ldi	r31, 0x01	; 1
    463a:	ff 2e       	mov	r15, r31
    463c:	f0 2d       	mov	r31, r0

        errCode = f_open(&file, "/gt2.txt", FA_CREATE_ALWAYS | FA_WRITE);
    463e:	0f 2e       	mov	r0, r31
    4640:	fb eb       	ldi	r31, 0xBB	; 187
    4642:	cf 2e       	mov	r12, r31
    4644:	f1 e0       	ldi	r31, 0x01	; 1
    4646:	df 2e       	mov	r13, r31
    4648:	f0 2d       	mov	r31, r0
    464a:	0f 2e       	mov	r0, r31
    464c:	f2 e1       	ldi	r31, 0x12	; 18
    464e:	af 2e       	mov	r10, r31
    4650:	f1 e0       	ldi	r31, 0x01	; 1
    4652:	bf 2e       	mov	r11, r31
    4654:	f0 2d       	mov	r31, r0
}

void fat_init(void){
    errCode = -1;

    while (errCode != FR_OK){                               //go until f_open returns FR_OK (function successful)
    4656:	19 c0       	rjmp	.+50     	; 0x468a <fat_init+0x7a>
        errCode = f_mount(0, &fatfs);                       //mount drive number 0
    4658:	80 e0       	ldi	r24, 0x00	; 0
    465a:	be 01       	movw	r22, r28
    465c:	0e 94 a0 14 	call	0x2940	; 0x2940 <f_mount>
    4660:	80 93 ba 01 	sts	0x01BA, r24
        errCode = f_opendir(&dir, "/");				    	//root directory
    4664:	c8 01       	movw	r24, r16
    4666:	b7 01       	movw	r22, r14
    4668:	0e 94 ac 1c 	call	0x3958	; 0x3958 <f_opendir>
    466c:	80 93 ba 01 	sts	0x01BA, r24

        errCode = f_open(&file, "/gt2.txt", FA_CREATE_ALWAYS | FA_WRITE);
    4670:	c6 01       	movw	r24, r12
    4672:	b5 01       	movw	r22, r10
    4674:	4a e0       	ldi	r20, 0x0A	; 10
    4676:	0e 94 b6 14 	call	0x296c	; 0x296c <f_open>
    467a:	80 93 ba 01 	sts	0x01BA, r24
        if(errCode != FR_OK){
    467e:	88 23       	and	r24, r24
    4680:	21 f0       	breq	.+8      	; 0x468a <fat_init+0x7a>
            result=0; //used as a debugging flag
    4682:	10 92 27 01 	sts	0x0127, r1
    4686:	10 92 26 01 	sts	0x0126, r1
}

void fat_init(void){
    errCode = -1;

    while (errCode != FR_OK){                               //go until f_open returns FR_OK (function successful)
    468a:	80 91 ba 01 	lds	r24, 0x01BA
    468e:	88 23       	and	r24, r24
    4690:	19 f7       	brne	.-58     	; 0x4658 <fat_init+0x48>
        errCode = f_open(&file, "/gt2.txt", FA_CREATE_ALWAYS | FA_WRITE);
        if(errCode != FR_OK){
            result=0; //used as a debugging flag
		}                                       
    }
}
    4692:	df 91       	pop	r29
    4694:	cf 91       	pop	r28
    4696:	1f 91       	pop	r17
    4698:	0f 91       	pop	r16
    469a:	ff 90       	pop	r15
    469c:	ef 90       	pop	r14
    469e:	df 90       	pop	r13
    46a0:	cf 90       	pop	r12
    46a2:	bf 90       	pop	r11
    46a4:	af 90       	pop	r10
    46a6:	08 95       	ret

000046a8 <main>:
int result=1;
char buff[] = "helloworld";
int buff_stat;

int main(void)
{
    46a8:	cf 93       	push	r28
    46aa:	df 93       	push	r29
    if(1)
    {
        //TODO:: Please write your application code 

 		fat_init(); // Will Hang if SD not inserted
    46ac:	0e 94 08 23 	call	0x4610	; 0x4610 <fat_init>
		errCode = f_write(&file, buff, 10, &bytesRead); // Will attempt to write string 'helloworld' to file (data.txt)
    46b0:	cb eb       	ldi	r28, 0xBB	; 187
    46b2:	d1 e0       	ldi	r29, 0x01	; 1
    46b4:	ce 01       	movw	r24, r28
    46b6:	6b e1       	ldi	r22, 0x1B	; 27
    46b8:	71 e0       	ldi	r23, 0x01	; 1
    46ba:	4a e0       	ldi	r20, 0x0A	; 10
    46bc:	50 e0       	ldi	r21, 0x00	; 0
    46be:	26 eb       	ldi	r18, 0xB6	; 182
    46c0:	31 e0       	ldi	r19, 0x01	; 1
    46c2:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <f_write>
    46c6:	80 93 ba 01 	sts	0x01BA, r24
		errCode = f_close(&file);
    46ca:	ce 01       	movw	r24, r28
    46cc:	0e 94 1f 1a 	call	0x343e	; 0x343e <f_close>
    46d0:	80 93 ba 01 	sts	0x01BA, r24
    }
}
    46d4:	80 e0       	ldi	r24, 0x00	; 0
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	df 91       	pop	r29
    46da:	cf 91       	pop	r28
    46dc:	08 95       	ret

000046de <uart_init>:
// 	UBRR0L = F_CPU / BAUD / 16 - 1;
// 	UCSR0B = _BV(RXEN0) | _BV(RXCIE0) | _BV(TXEN0);
// 	
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
    46de:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
    46e2:	80 93 c4 00 	sts	0x00C4, r24
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    46e6:	e1 ec       	ldi	r30, 0xC1	; 193
    46e8:	f0 e0       	ldi	r31, 0x00	; 0
    46ea:	88 e1       	ldi	r24, 0x18	; 24
    46ec:	80 83       	st	Z, r24
	
	UCSR0C = 0x06; //set asynchronous, no parity, one stop bit, 8 bit transfer.
    46ee:	86 e0       	ldi	r24, 0x06	; 6
    46f0:	80 93 c2 00 	sts	0x00C2, r24
	
	UCSR0B |= (1 << RXCIE0); //set RX interrupt on
    46f4:	80 81       	ld	r24, Z
    46f6:	80 68       	ori	r24, 0x80	; 128
    46f8:	80 83       	st	Z, r24
}
    46fa:	08 95       	ret

000046fc <uart_test>:

/* Get a received character */

uint8_t uart_test (void)
{
	return RxFifo.ct;
    46fc:	80 91 32 01 	lds	r24, 0x0132
}
    4700:	08 95       	ret

00004702 <uart_get>:
uint8_t uart_get (void)
{
	uint8_t d, i;


	while (RxFifo.ct == 0) ;
    4702:	e2 e3       	ldi	r30, 0x32	; 50
    4704:	f1 e0       	ldi	r31, 0x01	; 1
    4706:	80 81       	ld	r24, Z
    4708:	88 23       	and	r24, r24
    470a:	e9 f3       	breq	.-6      	; 0x4706 <uart_get+0x4>
	i = RxFifo.ri;
    470c:	90 91 31 01 	lds	r25, 0x0131
	d = RxFifo.buff[i];
    4710:	e0 e3       	ldi	r30, 0x30	; 48
    4712:	f1 e0       	ldi	r31, 0x01	; 1
    4714:	df 01       	movw	r26, r30
    4716:	a9 0f       	add	r26, r25
    4718:	b1 1d       	adc	r27, r1
    471a:	13 96       	adiw	r26, 0x03	; 3
    471c:	8c 91       	ld	r24, X
    471e:	13 97       	sbiw	r26, 0x03	; 3
	cli();
    4720:	f8 94       	cli
	RxFifo.ct--;
    4722:	22 81       	ldd	r18, Z+2	; 0x02
    4724:	21 50       	subi	r18, 0x01	; 1
    4726:	22 83       	std	Z+2, r18	; 0x02
	sei();
    4728:	78 94       	sei
	RxFifo.ri = (i + 1) % sizeof RxFifo.buff;
    472a:	9f 5f       	subi	r25, 0xFF	; 255
    472c:	9f 73       	andi	r25, 0x3F	; 63
    472e:	90 93 31 01 	sts	0x0131, r25

	return d;
}
    4732:	08 95       	ret

00004734 <uart_put>:
void uart_put (uint8_t d)
{
	uint8_t i;


	while (TxFifo.ct >= sizeof TxFifo.buff) ;
    4734:	e5 e7       	ldi	r30, 0x75	; 117
    4736:	f1 e0       	ldi	r31, 0x01	; 1
    4738:	90 81       	ld	r25, Z
    473a:	90 34       	cpi	r25, 0x40	; 64
    473c:	e8 f7       	brcc	.-6      	; 0x4738 <uart_put+0x4>
	i = TxFifo.wi;
    473e:	90 91 73 01 	lds	r25, 0x0173
	TxFifo.buff[i] = d;
    4742:	e9 2f       	mov	r30, r25
    4744:	f0 e0       	ldi	r31, 0x00	; 0
    4746:	ed 58       	subi	r30, 0x8D	; 141
    4748:	fe 4f       	sbci	r31, 0xFE	; 254
    474a:	83 83       	std	Z+3, r24	; 0x03
	cli();
    474c:	f8 94       	cli
	TxFifo.ct++;
    474e:	80 91 75 01 	lds	r24, 0x0175
    4752:	8f 5f       	subi	r24, 0xFF	; 255
    4754:	80 93 75 01 	sts	0x0175, r24
	UCSR0B = _BV(RXEN0) | _BV(RXCIE0) | _BV(TXEN0) | _BV(UDRIE0);
    4758:	88 eb       	ldi	r24, 0xB8	; 184
    475a:	80 93 c1 00 	sts	0x00C1, r24
	sei();
    475e:	78 94       	sei
	TxFifo.wi = (i + 1) % sizeof TxFifo.buff;
    4760:	9f 5f       	subi	r25, 0xFF	; 255
    4762:	9f 73       	andi	r25, 0x3F	; 63
    4764:	90 93 73 01 	sts	0x0173, r25
}
    4768:	08 95       	ret

0000476a <__vector_20>:


/* UART RXC interrupt */

ISR(USART0_RX_vect)
{
    476a:	1f 92       	push	r1
    476c:	0f 92       	push	r0
    476e:	0f b6       	in	r0, 0x3f	; 63
    4770:	0f 92       	push	r0
    4772:	0b b6       	in	r0, 0x3b	; 59
    4774:	0f 92       	push	r0
    4776:	11 24       	eor	r1, r1
    4778:	8f 93       	push	r24
    477a:	9f 93       	push	r25
    477c:	af 93       	push	r26
    477e:	bf 93       	push	r27
    4780:	ef 93       	push	r30
    4782:	ff 93       	push	r31
	uint8_t d, n, i;


	d = UDR0;
    4784:	90 91 c6 00 	lds	r25, 0x00C6
	n = RxFifo.ct;
    4788:	80 91 32 01 	lds	r24, 0x0132
	if (n < sizeof RxFifo.buff) {
    478c:	80 34       	cpi	r24, 0x40	; 64
    478e:	70 f4       	brcc	.+28     	; 0x47ac <__vector_20+0x42>
		RxFifo.ct = ++n;
    4790:	8f 5f       	subi	r24, 0xFF	; 255
    4792:	80 93 32 01 	sts	0x0132, r24
		i = RxFifo.wi;
    4796:	e0 e3       	ldi	r30, 0x30	; 48
    4798:	f1 e0       	ldi	r31, 0x01	; 1
    479a:	80 81       	ld	r24, Z
		RxFifo.buff[i] = d;
    479c:	df 01       	movw	r26, r30
    479e:	a8 0f       	add	r26, r24
    47a0:	b1 1d       	adc	r27, r1
    47a2:	13 96       	adiw	r26, 0x03	; 3
    47a4:	9c 93       	st	X, r25
		RxFifo.wi = (i + 1) % sizeof RxFifo.buff;
    47a6:	8f 5f       	subi	r24, 0xFF	; 255
    47a8:	8f 73       	andi	r24, 0x3F	; 63
    47aa:	80 83       	st	Z, r24
	}
}
    47ac:	ff 91       	pop	r31
    47ae:	ef 91       	pop	r30
    47b0:	bf 91       	pop	r27
    47b2:	af 91       	pop	r26
    47b4:	9f 91       	pop	r25
    47b6:	8f 91       	pop	r24
    47b8:	0f 90       	pop	r0
    47ba:	0b be       	out	0x3b, r0	; 59
    47bc:	0f 90       	pop	r0
    47be:	0f be       	out	0x3f, r0	; 63
    47c0:	0f 90       	pop	r0
    47c2:	1f 90       	pop	r1
    47c4:	18 95       	reti

000047c6 <__vector_21>:


/* UART UDRE interrupt */

ISR(USART0_UDRE_vect)
{
    47c6:	1f 92       	push	r1
    47c8:	0f 92       	push	r0
    47ca:	0f b6       	in	r0, 0x3f	; 63
    47cc:	0f 92       	push	r0
    47ce:	0b b6       	in	r0, 0x3b	; 59
    47d0:	0f 92       	push	r0
    47d2:	11 24       	eor	r1, r1
    47d4:	2f 93       	push	r18
    47d6:	3f 93       	push	r19
    47d8:	8f 93       	push	r24
    47da:	9f 93       	push	r25
    47dc:	af 93       	push	r26
    47de:	bf 93       	push	r27
    47e0:	ef 93       	push	r30
    47e2:	ff 93       	push	r31
	uint8_t n, i;


	n = TxFifo.ct;
    47e4:	80 91 75 01 	lds	r24, 0x0175
	if (n) {
    47e8:	88 23       	and	r24, r24
    47ea:	b1 f0       	breq	.+44     	; 0x4818 <__vector_21+0x52>
		TxFifo.ct = --n;
    47ec:	28 2f       	mov	r18, r24
    47ee:	21 50       	subi	r18, 0x01	; 1
    47f0:	85 e7       	ldi	r24, 0x75	; 117
    47f2:	91 e0       	ldi	r25, 0x01	; 1
    47f4:	20 93 75 01 	sts	0x0175, r18
		i = TxFifo.ri;
    47f8:	fc 01       	movw	r30, r24
    47fa:	32 91       	ld	r19, -Z
		UDR0 = TxFifo.buff[i];
    47fc:	02 97       	sbiw	r24, 0x02	; 2
    47fe:	dc 01       	movw	r26, r24
    4800:	a3 0f       	add	r26, r19
    4802:	b1 1d       	adc	r27, r1
    4804:	13 96       	adiw	r26, 0x03	; 3
    4806:	8c 91       	ld	r24, X
    4808:	13 97       	sbiw	r26, 0x03	; 3
    480a:	80 93 c6 00 	sts	0x00C6, r24
		TxFifo.ri = (i + 1) % sizeof TxFifo.buff;
    480e:	3f 5f       	subi	r19, 0xFF	; 255
    4810:	3f 73       	andi	r19, 0x3F	; 63
    4812:	30 83       	st	Z, r19
	}
	if (n == 0) UCSR0B = _BV(RXEN0) | _BV(RXCIE0) | _BV(TXEN0);
    4814:	22 23       	and	r18, r18
    4816:	19 f4       	brne	.+6      	; 0x481e <__vector_21+0x58>
    4818:	88 e9       	ldi	r24, 0x98	; 152
    481a:	80 93 c1 00 	sts	0x00C1, r24
}
    481e:	ff 91       	pop	r31
    4820:	ef 91       	pop	r30
    4822:	bf 91       	pop	r27
    4824:	af 91       	pop	r26
    4826:	9f 91       	pop	r25
    4828:	8f 91       	pop	r24
    482a:	3f 91       	pop	r19
    482c:	2f 91       	pop	r18
    482e:	0f 90       	pop	r0
    4830:	0b be       	out	0x3b, r0	; 59
    4832:	0f 90       	pop	r0
    4834:	0f be       	out	0x3f, r0	; 63
    4836:	0f 90       	pop	r0
    4838:	1f 90       	pop	r1
    483a:	18 95       	reti

0000483c <__mulsi3>:
    483c:	62 9f       	mul	r22, r18
    483e:	d0 01       	movw	r26, r0
    4840:	73 9f       	mul	r23, r19
    4842:	f0 01       	movw	r30, r0
    4844:	82 9f       	mul	r24, r18
    4846:	e0 0d       	add	r30, r0
    4848:	f1 1d       	adc	r31, r1
    484a:	64 9f       	mul	r22, r20
    484c:	e0 0d       	add	r30, r0
    484e:	f1 1d       	adc	r31, r1
    4850:	92 9f       	mul	r25, r18
    4852:	f0 0d       	add	r31, r0
    4854:	83 9f       	mul	r24, r19
    4856:	f0 0d       	add	r31, r0
    4858:	74 9f       	mul	r23, r20
    485a:	f0 0d       	add	r31, r0
    485c:	65 9f       	mul	r22, r21
    485e:	f0 0d       	add	r31, r0
    4860:	99 27       	eor	r25, r25
    4862:	72 9f       	mul	r23, r18
    4864:	b0 0d       	add	r27, r0
    4866:	e1 1d       	adc	r30, r1
    4868:	f9 1f       	adc	r31, r25
    486a:	63 9f       	mul	r22, r19
    486c:	b0 0d       	add	r27, r0
    486e:	e1 1d       	adc	r30, r1
    4870:	f9 1f       	adc	r31, r25
    4872:	bd 01       	movw	r22, r26
    4874:	cf 01       	movw	r24, r30
    4876:	11 24       	eor	r1, r1
    4878:	08 95       	ret

0000487a <__udivmodsi4>:
    487a:	a1 e2       	ldi	r26, 0x21	; 33
    487c:	1a 2e       	mov	r1, r26
    487e:	aa 1b       	sub	r26, r26
    4880:	bb 1b       	sub	r27, r27
    4882:	fd 01       	movw	r30, r26
    4884:	0d c0       	rjmp	.+26     	; 0x48a0 <__udivmodsi4_ep>

00004886 <__udivmodsi4_loop>:
    4886:	aa 1f       	adc	r26, r26
    4888:	bb 1f       	adc	r27, r27
    488a:	ee 1f       	adc	r30, r30
    488c:	ff 1f       	adc	r31, r31
    488e:	a2 17       	cp	r26, r18
    4890:	b3 07       	cpc	r27, r19
    4892:	e4 07       	cpc	r30, r20
    4894:	f5 07       	cpc	r31, r21
    4896:	20 f0       	brcs	.+8      	; 0x48a0 <__udivmodsi4_ep>
    4898:	a2 1b       	sub	r26, r18
    489a:	b3 0b       	sbc	r27, r19
    489c:	e4 0b       	sbc	r30, r20
    489e:	f5 0b       	sbc	r31, r21

000048a0 <__udivmodsi4_ep>:
    48a0:	66 1f       	adc	r22, r22
    48a2:	77 1f       	adc	r23, r23
    48a4:	88 1f       	adc	r24, r24
    48a6:	99 1f       	adc	r25, r25
    48a8:	1a 94       	dec	r1
    48aa:	69 f7       	brne	.-38     	; 0x4886 <__udivmodsi4_loop>
    48ac:	60 95       	com	r22
    48ae:	70 95       	com	r23
    48b0:	80 95       	com	r24
    48b2:	90 95       	com	r25
    48b4:	9b 01       	movw	r18, r22
    48b6:	ac 01       	movw	r20, r24
    48b8:	bd 01       	movw	r22, r26
    48ba:	cf 01       	movw	r24, r30
    48bc:	08 95       	ret

000048be <_exit>:
    48be:	f8 94       	cli

000048c0 <__stop_program>:
    48c0:	ff cf       	rjmp	.-2      	; 0x48c0 <__stop_program>
