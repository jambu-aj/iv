
GccApplication_ADC_Enable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  00000204  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000958  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000046f  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000159  00000000  00000000  00000e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000350  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000012f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000162  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000050  00000000  00000000  00001496  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e9       	ldi	r30, 0x90	; 144
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 30       	cpi	r26, 0x01	; 1
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 93 00 	call	0x126	; 0x126 <main>
  c6:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <wait_one_second>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f e3       	ldi	r24, 0x3F	; 63
  d0:	9d e0       	ldi	r25, 0x0D	; 13
  d2:	a3 e0       	ldi	r26, 0x03	; 3
  d4:	81 50       	subi	r24, 0x01	; 1
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	a0 40       	sbci	r26, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <wait_one_second+0x6>
  dc:	00 c0       	rjmp	.+0      	; 0xde <wait_one_second+0x10>
  de:	00 00       	nop
}

int wait_one_second(void){
	_delay_ms(1000);
	return 1;
}
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	08 95       	ret

000000e6 <set_PORTB_bit>:
{
	// Sets or clears the bit in position 'position'
	// either high or low (1 or 0) to match 'value'.
	// Leaves all other bits in PORTB unchanged.
	
	if (value == 0)
  e6:	61 15       	cp	r22, r1
  e8:	71 05       	cpc	r23, r1
  ea:	71 f4       	brne	.+28     	; 0x108 <set_PORTB_bit+0x22>
	{
		PORTB &= ~(1 << position);      // Set bit # 'position' low
  ec:	45 b1       	in	r20, 0x05	; 5
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	b9 01       	movw	r22, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <set_PORTB_bit+0x14>
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	8a 95       	dec	r24
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <set_PORTB_bit+0x10>
  fe:	cb 01       	movw	r24, r22
 100:	80 95       	com	r24
 102:	84 23       	and	r24, r20
 104:	85 b9       	out	0x05, r24	; 5
 106:	0c c0       	rjmp	.+24     	; 0x120 <set_PORTB_bit+0x3a>
	}
	else
	{
		PORTB |= (1 << position);       // Set bit # 'position' high
 108:	45 b1       	in	r20, 0x05	; 5
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	b9 01       	movw	r22, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <set_PORTB_bit+0x30>
 112:	66 0f       	add	r22, r22
 114:	77 1f       	adc	r23, r23
 116:	8a 95       	dec	r24
 118:	e2 f7       	brpl	.-8      	; 0x112 <set_PORTB_bit+0x2c>
 11a:	cb 01       	movw	r24, r22
 11c:	84 2b       	or	r24, r20
 11e:	85 b9       	out	0x05, r24	; 5
	}
	return 1;
}
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	08 95       	ret

00000126 <main>:
	
	
int main(void)
{
	// Enabling PB3 LED
	DDRB = 0b00001000; 
 126:	88 e0       	ldi	r24, 0x08	; 8
 128:	84 b9       	out	0x04, r24	; 4
	
	//Enabling ADC
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Enabling ADC frequency @ 125kHz sample rate for 16Mhz clock
 12a:	ea e7       	ldi	r30, 0x7A	; 122
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	87 60       	ori	r24, 0x07	; 7
 132:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0); // Set ADC reference (AREF) to AVCC
 134:	ac e7       	ldi	r26, 0x7C	; 124
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	8c 91       	ld	r24, X
 13a:	80 64       	ori	r24, 0x40	; 64
 13c:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
 13e:	8c 91       	ld	r24, X
 140:	80 62       	ori	r24, 0x20	; 32
 142:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADEN); // Enable ADC
 144:	80 81       	ld	r24, Z
 146:	80 68       	ori	r24, 0x80	; 128
 148:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Start A2D Conversions
 14a:	80 81       	ld	r24, Z
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	80 83       	st	Z, r24
	sei();
	ISR(ADC_vect){
	*/
	
	for (;;){
		adcVal=ADCH;
 150:	09 e7       	ldi	r16, 0x79	; 121
 152:	10 e0       	ldi	r17, 0x00	; 0
		if(adcVal < 128){
			set_PORTB_bit(3, 1);    // Set PB3 high
			ADCSRA |= (1 << ADSC); // Required before reading a single ADCH value
 154:	ca e7       	ldi	r28, 0x7A	; 122
 156:	d0 e0       	ldi	r29, 0x00	; 0
	sei();
	ISR(ADC_vect){
	*/
	
	for (;;){
		adcVal=ADCH;
 158:	f8 01       	movw	r30, r16
 15a:	80 81       	ld	r24, Z
 15c:	80 93 00 01 	sts	0x0100, r24
		if(adcVal < 128){
 160:	88 23       	and	r24, r24
 162:	54 f0       	brlt	.+20     	; 0x178 <main+0x52>
			set_PORTB_bit(3, 1);    // Set PB3 high
 164:	83 e0       	ldi	r24, 0x03	; 3
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	0e 94 73 00 	call	0xe6	; 0xe6 <set_PORTB_bit>
			ADCSRA |= (1 << ADSC); // Required before reading a single ADCH value
 170:	88 81       	ld	r24, Y
 172:	80 64       	ori	r24, 0x40	; 64
 174:	88 83       	st	Y, r24
 176:	f0 cf       	rjmp	.-32     	; 0x158 <main+0x32>
		}
		else{
			set_PORTB_bit(3, 0);    // Set PB3 low
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	0e 94 73 00 	call	0xe6	; 0xe6 <set_PORTB_bit>
			ADCSRA |= (1 << ADSC); // Start A2D Conversions
 184:	88 81       	ld	r24, Y
 186:	80 64       	ori	r24, 0x40	; 64
 188:	88 83       	st	Y, r24
 18a:	e6 cf       	rjmp	.-52     	; 0x158 <main+0x32>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
