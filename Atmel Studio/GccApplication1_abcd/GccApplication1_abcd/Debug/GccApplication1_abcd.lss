
GccApplication1_abcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000471a  000047ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000471a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000027b  0080012a  0080012a  000047d8  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  000047d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  0000545c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00005618  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031de  00000000  00000000  00005798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a79  00000000  00000000  00008976  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000163f  00000000  00000000  000093ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c1c  00000000  00000000  0000aa30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086c  00000000  00000000  0000b64c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005c4f  00000000  00000000  0000beb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00011b07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e1       	ldi	r30, 0x1A	; 26
      a0:	f7 e4       	ldi	r31, 0x47	; 71
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 32       	cpi	r26, 0x2A	; 42
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	13 e0       	ldi	r17, 0x03	; 3
      b4:	aa e2       	ldi	r26, 0x2A	; 42
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a5 3a       	cpi	r26, 0xA5	; 165
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 2c 1b 	call	0x3658	; 0x3658 <main>
      c6:	0c 94 8b 23 	jmp	0x4716	; 0x4716 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	ec 01       	movw	r28, r24
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
      d4:	42 30       	cpi	r20, 0x02	; 2
      d6:	51 05       	cpc	r21, r1
      d8:	b8 f0       	brcs	.+46     	; 0x108 <mem_cpy+0x3a>

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
      da:	fb 01       	movw	r30, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
      dc:	dc 01       	movw	r26, r24
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
      de:	ca 01       	movw	r24, r20
		*(int*)d = *(int*)s;
      e0:	21 91       	ld	r18, Z+
      e2:	31 91       	ld	r19, Z+
      e4:	2d 93       	st	X+, r18
      e6:	3d 93       	st	X+, r19
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
      e8:	02 97       	sbiw	r24, 0x02	; 2
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
      ea:	82 30       	cpi	r24, 0x02	; 2
      ec:	91 05       	cpc	r25, r1
      ee:	c0 f7       	brcc	.-16     	; 0xe0 <mem_cpy+0x12>
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
      f0:	ca 01       	movw	r24, r20
      f2:	02 97       	sbiw	r24, 0x02	; 2
      f4:	8e 7f       	andi	r24, 0xFE	; 254
      f6:	02 96       	adiw	r24, 0x02	; 2
      f8:	fe 01       	movw	r30, r28
      fa:	e8 0f       	add	r30, r24
      fc:	f9 1f       	adc	r31, r25
      fe:	86 0f       	add	r24, r22
     100:	97 1f       	adc	r25, r23
     102:	41 70       	andi	r20, 0x01	; 1
     104:	50 70       	andi	r21, 0x00	; 0
     106:	02 c0       	rjmp	.+4      	; 0x10c <mem_cpy+0x3e>
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
     108:	cb 01       	movw	r24, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
     10a:	fe 01       	movw	r30, r28
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
     10c:	41 15       	cp	r20, r1
     10e:	51 05       	cpc	r21, r1
     110:	31 f0       	breq	.+12     	; 0x11e <mem_cpy+0x50>
     112:	dc 01       	movw	r26, r24
		*d++ = *s++;
     114:	8d 91       	ld	r24, X+
     116:	81 93       	st	Z+, r24
     118:	41 50       	subi	r20, 0x01	; 1
     11a:	50 40       	sbci	r21, 0x00	; 0
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
     11c:	d9 f7       	brne	.-10     	; 0x114 <mem_cpy+0x46>
		*d++ = *s++;
}
     11e:	df 91       	pop	r29
     120:	cf 91       	pop	r28
     122:	08 95       	ret

00000124 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     124:	41 15       	cp	r20, r1
     126:	51 05       	cpc	r21, r1
     128:	31 f0       	breq	.+12     	; 0x136 <mem_set+0x12>
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
     12a:	e8 2f       	mov	r30, r24
     12c:	f9 2f       	mov	r31, r25

	while (cnt--)
		*d++ = (BYTE)val;
     12e:	61 93       	st	Z+, r22
     130:	41 50       	subi	r20, 0x01	; 1
     132:	50 40       	sbci	r21, 0x00	; 0
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     134:	e1 f7       	brne	.-8      	; 0x12e <mem_set+0xa>
     136:	08 95       	ret

00000138 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
     138:	0f 93       	push	r16
     13a:	1f 93       	push	r17
     13c:	fb 01       	movw	r30, r22
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
     13e:	02 8d       	ldd	r16, Z+26	; 0x1a
     140:	13 8d       	ldd	r17, Z+27	; 0x1b
     142:	20 e0       	ldi	r18, 0x00	; 0
     144:	30 e0       	ldi	r19, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
     146:	dc 01       	movw	r26, r24
     148:	8c 91       	ld	r24, X
     14a:	83 30       	cpi	r24, 0x03	; 3
     14c:	59 f4       	brne	.+22     	; 0x164 <ld_clust+0x2c>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
     14e:	84 89       	ldd	r24, Z+20	; 0x14
     150:	95 89       	ldd	r25, Z+21	; 0x15
     152:	a0 e0       	ldi	r26, 0x00	; 0
     154:	b0 e0       	ldi	r27, 0x00	; 0
     156:	dc 01       	movw	r26, r24
     158:	99 27       	eor	r25, r25
     15a:	88 27       	eor	r24, r24
     15c:	08 2b       	or	r16, r24
     15e:	19 2b       	or	r17, r25
     160:	2a 2b       	or	r18, r26
     162:	3b 2b       	or	r19, r27

	return cl;
}
     164:	60 2f       	mov	r22, r16
     166:	71 2f       	mov	r23, r17
     168:	82 2f       	mov	r24, r18
     16a:	93 2f       	mov	r25, r19
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	08 95       	ret

00000172 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
     172:	fc 01       	movw	r30, r24
	ST_WORD(dir + DIR_FstClusLO, cl);
     174:	53 8f       	std	Z+27, r21	; 0x1b
     176:	42 8f       	std	Z+26, r20	; 0x1a
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
     178:	75 8b       	std	Z+21, r23	; 0x15
     17a:	64 8b       	std	Z+20, r22	; 0x14
}
     17c:	08 95       	ret

0000017e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	fc 01       	movw	r30, r24
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
     184:	eb 01       	movw	r28, r22
     186:	29 96       	adiw	r28, 0x09	; 9
	if (dp->sect) {		/* Get SFN */
     188:	86 85       	ldd	r24, Z+14	; 0x0e
     18a:	97 85       	ldd	r25, Z+15	; 0x0f
     18c:	a0 89       	ldd	r26, Z+16	; 0x10
     18e:	b1 89       	ldd	r27, Z+17	; 0x11
     190:	00 97       	sbiw	r24, 0x00	; 0
     192:	a1 05       	cpc	r26, r1
     194:	b1 05       	cpc	r27, r1
     196:	81 f1       	breq	.+96     	; 0x1f8 <get_fileinfo+0x7a>
		dir = dp->dir;
     198:	22 89       	ldd	r18, Z+18	; 0x12
     19a:	33 89       	ldd	r19, Z+19	; 0x13
     19c:	f9 01       	movw	r30, r18
		i = 0;
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
			if (c == ' ') continue;				/* Skip padding spaces */
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
     1a2:	ae e2       	ldi	r26, 0x2E	; 46
		dir = dp->dir;
		i = 0;
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
			if (c == ' ') continue;				/* Skip padding spaces */
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
     1a4:	55 ee       	ldi	r21, 0xE5	; 229
	p = fno->fname;
	if (dp->sect) {		/* Get SFN */
		dir = dp->dir;
		i = 0;
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
     1a6:	41 91       	ld	r20, Z+
     1a8:	01 96       	adiw	r24, 0x01	; 1
			if (c == ' ') continue;				/* Skip padding spaces */
     1aa:	40 32       	cpi	r20, 0x20	; 32
     1ac:	41 f0       	breq	.+16     	; 0x1be <get_fileinfo+0x40>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
     1ae:	45 30       	cpi	r20, 0x05	; 5
     1b0:	09 f4       	brne	.+2      	; 0x1b4 <get_fileinfo+0x36>
     1b2:	45 2f       	mov	r20, r21
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
     1b4:	89 30       	cpi	r24, 0x09	; 9
     1b6:	91 05       	cpc	r25, r1
     1b8:	09 f4       	brne	.+2      	; 0x1bc <get_fileinfo+0x3e>
     1ba:	a9 93       	st	Y+, r26
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
     1bc:	49 93       	st	Y+, r20

	p = fno->fname;
	if (dp->sect) {		/* Get SFN */
		dir = dp->dir;
		i = 0;
		while (i < 11) {		/* Copy name body and extension */
     1be:	8b 30       	cpi	r24, 0x0B	; 11
     1c0:	91 05       	cpc	r25, r1
     1c2:	89 f7       	brne	.-30     	; 0x1a6 <get_fileinfo+0x28>
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     1c4:	f9 01       	movw	r30, r18
     1c6:	83 85       	ldd	r24, Z+11	; 0x0b
     1c8:	fb 01       	movw	r30, r22
     1ca:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
     1cc:	f9 01       	movw	r30, r18
     1ce:	84 8d       	ldd	r24, Z+28	; 0x1c
     1d0:	95 8d       	ldd	r25, Z+29	; 0x1d
     1d2:	a6 8d       	ldd	r26, Z+30	; 0x1e
     1d4:	b7 8d       	ldd	r27, Z+31	; 0x1f
     1d6:	fb 01       	movw	r30, r22
     1d8:	80 83       	st	Z, r24
     1da:	91 83       	std	Z+1, r25	; 0x01
     1dc:	a2 83       	std	Z+2, r26	; 0x02
     1de:	b3 83       	std	Z+3, r27	; 0x03
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
     1e0:	f9 01       	movw	r30, r18
     1e2:	80 8d       	ldd	r24, Z+24	; 0x18
     1e4:	91 8d       	ldd	r25, Z+25	; 0x19
     1e6:	fb 01       	movw	r30, r22
     1e8:	95 83       	std	Z+5, r25	; 0x05
     1ea:	84 83       	std	Z+4, r24	; 0x04
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
     1ec:	f9 01       	movw	r30, r18
     1ee:	86 89       	ldd	r24, Z+22	; 0x16
     1f0:	97 89       	ldd	r25, Z+23	; 0x17
     1f2:	fb 01       	movw	r30, r22
     1f4:	97 83       	std	Z+7, r25	; 0x07
     1f6:	86 83       	std	Z+6, r24	; 0x06
	}
	*p = 0;		/* Terminate SFN string by a \0 */
     1f8:	18 82       	st	Y, r1
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	ec 01       	movw	r28, r24
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
     206:	a8 81       	ld	r26, Y
     208:	b9 81       	ldd	r27, Y+1	; 0x01
     20a:	10 97       	sbiw	r26, 0x00	; 0
     20c:	39 f1       	breq	.+78     	; 0x25c <get_ldnumber+0x5c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     20e:	8c 91       	ld	r24, X
     210:	81 32       	cpi	r24, 0x21	; 33
     212:	68 f0       	brcs	.+26     	; 0x22e <get_ldnumber+0x2e>
     214:	8a 33       	cpi	r24, 0x3A	; 58
     216:	a9 f1       	breq	.+106    	; 0x282 <get_ldnumber+0x82>
/*-----------------------------------------------------------------------*/
/* Get logical drive number from path name                               */
/*-----------------------------------------------------------------------*/

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
     218:	fd 01       	movw	r30, r26
     21a:	31 96       	adiw	r30, 0x01	; 1
     21c:	ad 01       	movw	r20, r26
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     21e:	4f 5f       	subi	r20, 0xFF	; 255
     220:	5f 4f       	sbci	r21, 0xFF	; 255
     222:	91 91       	ld	r25, Z+
     224:	91 32       	cpi	r25, 0x21	; 33
     226:	28 f0       	brcs	.+10     	; 0x232 <get_ldnumber+0x32>
     228:	9a 33       	cpi	r25, 0x3A	; 58
     22a:	c9 f7       	brne	.-14     	; 0x21e <get_ldnumber+0x1e>
     22c:	04 c0       	rjmp	.+8      	; 0x236 <get_ldnumber+0x36>
     22e:	98 2f       	mov	r25, r24
     230:	ad 01       	movw	r20, r26
		if (*tt == ':') {	/* If a ':' is exist in the path name */
     232:	9a 33       	cpi	r25, 0x3A	; 58
     234:	b1 f4       	brne	.+44     	; 0x262 <get_ldnumber+0x62>
			tp = *path;
			i = *tp++ - '0'; 
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	bc 01       	movw	r22, r24
     23a:	60 53       	subi	r22, 0x30	; 48
     23c:	70 40       	sbci	r23, 0x00	; 0
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
     23e:	6a 30       	cpi	r22, 0x0A	; 10
     240:	71 05       	cpc	r23, r1
     242:	90 f4       	brcc	.+36     	; 0x268 <get_ldnumber+0x68>

	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
     244:	cd 01       	movw	r24, r26
     246:	01 96       	adiw	r24, 0x01	; 1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
     248:	48 17       	cp	r20, r24
     24a:	59 07       	cpc	r21, r25
     24c:	81 f4       	brne	.+32     	; 0x26e <get_ldnumber+0x6e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
     24e:	61 15       	cp	r22, r1
     250:	71 05       	cpc	r23, r1
     252:	81 f4       	brne	.+32     	; 0x274 <get_ldnumber+0x74>
					vol = (int)i;
					*path = ++tt;
     254:	12 96       	adiw	r26, 0x02	; 2
     256:	b9 83       	std	Y+1, r27	; 0x01
     258:	a8 83       	st	Y, r26
     25a:	0e c0       	rjmp	.+28     	; 0x278 <get_ldnumber+0x78>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
     25c:	6f ef       	ldi	r22, 0xFF	; 255
     25e:	7f ef       	ldi	r23, 0xFF	; 255
     260:	0b c0       	rjmp	.+22     	; 0x278 <get_ldnumber+0x78>
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
     262:	60 e0       	ldi	r22, 0x00	; 0
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	08 c0       	rjmp	.+16     	; 0x278 <get_ldnumber+0x78>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
     268:	6f ef       	ldi	r22, 0xFF	; 255
     26a:	7f ef       	ldi	r23, 0xFF	; 255
     26c:	05 c0       	rjmp	.+10     	; 0x278 <get_ldnumber+0x78>
     26e:	6f ef       	ldi	r22, 0xFF	; 255
     270:	7f ef       	ldi	r23, 0xFF	; 255
     272:	02 c0       	rjmp	.+4      	; 0x278 <get_ldnumber+0x78>
     274:	6f ef       	ldi	r22, 0xFF	; 255
     276:	7f ef       	ldi	r23, 0xFF	; 255
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
     278:	86 2f       	mov	r24, r22
     27a:	97 2f       	mov	r25, r23
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     282:	ad 01       	movw	r20, r26
     284:	d8 cf       	rjmp	.-80     	; 0x236 <get_ldnumber+0x36>

00000286 <validate>:
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
     286:	00 97       	sbiw	r24, 0x00	; 0
     288:	c9 f0       	breq	.+50     	; 0x2bc <validate+0x36>
     28a:	dc 01       	movw	r26, r24
     28c:	ed 91       	ld	r30, X+
     28e:	fc 91       	ld	r31, X
     290:	11 97       	sbiw	r26, 0x01	; 1
     292:	30 97       	sbiw	r30, 0x00	; 0
     294:	a9 f0       	breq	.+42     	; 0x2c0 <validate+0x3a>
     296:	20 81       	ld	r18, Z
     298:	22 23       	and	r18, r18
     29a:	a1 f0       	breq	.+40     	; 0x2c4 <validate+0x3e>
     29c:	26 81       	ldd	r18, Z+6	; 0x06
     29e:	37 81       	ldd	r19, Z+7	; 0x07
     2a0:	12 96       	adiw	r26, 0x02	; 2
     2a2:	8d 91       	ld	r24, X+
     2a4:	9c 91       	ld	r25, X
     2a6:	13 97       	sbiw	r26, 0x03	; 3
     2a8:	28 17       	cp	r18, r24
     2aa:	39 07       	cpc	r19, r25
     2ac:	69 f4       	brne	.+26     	; 0x2c8 <validate+0x42>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
     2ae:	81 81       	ldd	r24, Z+1	; 0x01
     2b0:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <disk_status>
     2b4:	80 ff       	sbrs	r24, 0
     2b6:	0a c0       	rjmp	.+20     	; 0x2cc <validate+0x46>
		return FR_NOT_READY;
     2b8:	83 e0       	ldi	r24, 0x03	; 3
     2ba:	08 95       	ret
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
     2bc:	89 e0       	ldi	r24, 0x09	; 9
     2be:	08 95       	ret
     2c0:	89 e0       	ldi	r24, 0x09	; 9
     2c2:	08 95       	ret
     2c4:	89 e0       	ldi	r24, 0x09	; 9
     2c6:	08 95       	ret
     2c8:	89 e0       	ldi	r24, 0x09	; 9
     2ca:	08 95       	ret
	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
     2cc:	80 e0       	ldi	r24, 0x00	; 0
}
     2ce:	08 95       	ret

000002d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
     2d0:	8f 92       	push	r8
     2d2:	9f 92       	push	r9
     2d4:	af 92       	push	r10
     2d6:	bf 92       	push	r11
     2d8:	cf 92       	push	r12
     2da:	df 92       	push	r13
     2dc:	ef 92       	push	r14
     2de:	ff 92       	push	r15
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	5c 01       	movw	r10, r24
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
     2ea:	fc 01       	movw	r30, r24
     2ec:	84 81       	ldd	r24, Z+4	; 0x04
     2ee:	88 23       	and	r24, r24
     2f0:	09 f4       	brne	.+2      	; 0x2f4 <sync_window+0x24>
     2f2:	46 c0       	rjmp	.+140    	; 0x380 <sync_window+0xb0>
		wsect = fs->winsect;	/* Current sector number */
     2f4:	c6 a4       	lds	r28, 0xa6
     2f6:	d7 a4       	lds	r29, 0xa7
     2f8:	e0 a8       	sts	0x00, r30
     2fa:	f1 a8       	sts	0x81, r31
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
     2fc:	0f 2e       	mov	r0, r31
     2fe:	f2 e3       	ldi	r31, 0x32	; 50
     300:	8f 2e       	mov	r8, r31
     302:	99 24       	eor	r9, r9
     304:	f0 2d       	mov	r31, r0
     306:	8a 0c       	add	r8, r10
     308:	9b 1c       	adc	r9, r11
     30a:	81 81       	ldd	r24, Z+1	; 0x01
     30c:	b4 01       	movw	r22, r8
     30e:	a7 01       	movw	r20, r14
     310:	96 01       	movw	r18, r12
     312:	01 e0       	ldi	r16, 0x01	; 1
     314:	10 e0       	ldi	r17, 0x00	; 0
     316:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <disk_write>
     31a:	88 23       	and	r24, r24
     31c:	99 f5       	brne	.+102    	; 0x384 <sync_window+0xb4>
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
     31e:	f5 01       	movw	r30, r10
     320:	14 82       	std	Z+4, r1	; 0x04
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
     322:	82 a1       	lds	r24, 0x42
     324:	93 a1       	lds	r25, 0x43
     326:	a4 a1       	lds	r26, 0x44
     328:	b5 a1       	lds	r27, 0x45
     32a:	b7 01       	movw	r22, r14
     32c:	a6 01       	movw	r20, r12
     32e:	48 1b       	sub	r20, r24
     330:	59 0b       	sbc	r21, r25
     332:	6a 0b       	sbc	r22, r26
     334:	7b 0b       	sbc	r23, r27
     336:	82 8d       	ldd	r24, Z+26	; 0x1a
     338:	93 8d       	ldd	r25, Z+27	; 0x1b
     33a:	a4 8d       	ldd	r26, Z+28	; 0x1c
     33c:	b5 8d       	ldd	r27, Z+29	; 0x1d
     33e:	48 17       	cp	r20, r24
     340:	59 07       	cpc	r21, r25
     342:	6a 07       	cpc	r22, r26
     344:	7b 07       	cpc	r23, r27
     346:	00 f5       	brcc	.+64     	; 0x388 <sync_window+0xb8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     348:	c3 81       	ldd	r28, Z+3	; 0x03
     34a:	d0 e0       	ldi	r29, 0x00	; 0
     34c:	c2 30       	cpi	r28, 0x02	; 2
     34e:	d1 05       	cpc	r29, r1
     350:	e8 f0       	brcs	.+58     	; 0x38c <sync_window+0xbc>
					wsect += fs->fsize;
     352:	f5 01       	movw	r30, r10
     354:	82 8d       	ldd	r24, Z+26	; 0x1a
     356:	93 8d       	ldd	r25, Z+27	; 0x1b
     358:	a4 8d       	ldd	r26, Z+28	; 0x1c
     35a:	b5 8d       	ldd	r27, Z+29	; 0x1d
     35c:	c8 0e       	add	r12, r24
     35e:	d9 1e       	adc	r13, r25
     360:	ea 1e       	adc	r14, r26
     362:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
     364:	81 81       	ldd	r24, Z+1	; 0x01
     366:	b4 01       	movw	r22, r8
     368:	a7 01       	movw	r20, r14
     36a:	96 01       	movw	r18, r12
     36c:	01 e0       	ldi	r16, 0x01	; 1
     36e:	10 e0       	ldi	r17, 0x00	; 0
     370:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <disk_write>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     374:	21 97       	sbiw	r28, 0x01	; 1
     376:	c1 30       	cpi	r28, 0x01	; 1
     378:	d1 05       	cpc	r29, r1
     37a:	59 f7       	brne	.-42     	; 0x352 <sync_window+0x82>
	FATFS* fs		/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	07 c0       	rjmp	.+14     	; 0x38e <sync_window+0xbe>
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	05 c0       	rjmp	.+10     	; 0x38e <sync_window+0xbe>


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	03 c0       	rjmp	.+6      	; 0x38e <sync_window+0xbe>
	FATFS* fs		/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	01 c0       	rjmp	.+2      	; 0x38e <sync_window+0xbe>
     38c:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	return res;
}
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	ff 90       	pop	r15
     398:	ef 90       	pop	r14
     39a:	df 90       	pop	r13
     39c:	cf 90       	pop	r12
     39e:	bf 90       	pop	r11
     3a0:	af 90       	pop	r10
     3a2:	9f 90       	pop	r9
     3a4:	8f 90       	pop	r8
     3a6:	08 95       	ret

000003a8 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
     3a8:	af 92       	push	r10
     3aa:	bf 92       	push	r11
     3ac:	cf 92       	push	r12
     3ae:	df 92       	push	r13
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	5c 01       	movw	r10, r24
     3bc:	6a 01       	movw	r12, r20
     3be:	7b 01       	movw	r14, r22
	FRESULT res = FR_OK;


	if (sector != fs->winsect) {	/* Window offset changed? */
     3c0:	fc 01       	movw	r30, r24
     3c2:	86 a5       	lds	r24, 0x66
     3c4:	97 a5       	lds	r25, 0x67
     3c6:	a0 a9       	sts	0x40, r26
     3c8:	b1 a9       	sts	0x41, r27
     3ca:	84 17       	cp	r24, r20
     3cc:	95 07       	cpc	r25, r21
     3ce:	a6 07       	cpc	r26, r22
     3d0:	b7 07       	cpc	r27, r23
     3d2:	f1 f0       	breq	.+60     	; 0x410 <move_window+0x68>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
     3d4:	c5 01       	movw	r24, r10
     3d6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sync_window>
     3da:	c8 2f       	mov	r28, r24
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
     3dc:	88 23       	and	r24, r24
     3de:	c9 f4       	brne	.+50     	; 0x412 <move_window+0x6a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
     3e0:	b5 01       	movw	r22, r10
     3e2:	6e 5c       	subi	r22, 0xCE	; 206
     3e4:	7f 4f       	sbci	r23, 0xFF	; 255
     3e6:	f5 01       	movw	r30, r10
     3e8:	81 81       	ldd	r24, Z+1	; 0x01
     3ea:	a7 01       	movw	r20, r14
     3ec:	96 01       	movw	r18, r12
     3ee:	01 e0       	ldi	r16, 0x01	; 1
     3f0:	10 e0       	ldi	r17, 0x00	; 0
     3f2:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <disk_read>
     3f6:	88 23       	and	r24, r24
     3f8:	29 f0       	breq	.+10     	; 0x404 <move_window+0x5c>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;
     3fa:	c1 e0       	ldi	r28, 0x01	; 1
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
     3fc:	cc 24       	eor	r12, r12
     3fe:	ca 94       	dec	r12
     400:	dc 2c       	mov	r13, r12
     402:	76 01       	movw	r14, r12
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
     404:	f5 01       	movw	r30, r10
     406:	c6 a6       	lds	r28, 0xb6
     408:	d7 a6       	lds	r29, 0xb7
     40a:	e0 aa       	sts	0x90, r30
     40c:	f1 aa       	sts	0x91, r31
     40e:	01 c0       	rjmp	.+2      	; 0x412 <move_window+0x6a>
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
	FRESULT res = FR_OK;
     410:	c0 e0       	ldi	r28, 0x00	; 0
			}
			fs->winsect = sector;
		}
	}
	return res;
}
     412:	8c 2f       	mov	r24, r28
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	ff 90       	pop	r15
     41c:	ef 90       	pop	r14
     41e:	df 90       	pop	r13
     420:	cf 90       	pop	r12
     422:	bf 90       	pop	r11
     424:	af 90       	pop	r10
     426:	08 95       	ret

00000428 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	ec 01       	movw	r28, r24
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
     42e:	1c 82       	std	Y+4, r1	; 0x04
     430:	8f ef       	ldi	r24, 0xFF	; 255
     432:	9f ef       	ldi	r25, 0xFF	; 255
     434:	dc 01       	movw	r26, r24
     436:	8e a7       	lds	r24, 0x7e
     438:	9f a7       	lds	r25, 0x7f
     43a:	a8 ab       	sts	0x58, r26
     43c:	b9 ab       	sts	0x59, r27
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
     43e:	ce 01       	movw	r24, r28
     440:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <move_window>
     444:	88 23       	and	r24, r24
     446:	59 f5       	brne	.+86     	; 0x49e <check_fs+0x76>
		return 3;

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
     448:	fe 01       	movw	r30, r28
     44a:	e0 5d       	subi	r30, 0xD0	; 208
     44c:	fd 4f       	sbci	r31, 0xFD	; 253
     44e:	80 81       	ld	r24, Z
     450:	91 81       	ldd	r25, Z+1	; 0x01
     452:	2a ea       	ldi	r18, 0xAA	; 170
     454:	85 35       	cpi	r24, 0x55	; 85
     456:	92 07       	cpc	r25, r18
     458:	21 f5       	brne	.+72     	; 0x4a2 <check_fs+0x7a>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
     45a:	fe 01       	movw	r30, r28
     45c:	e8 59       	subi	r30, 0x98	; 152
     45e:	ff 4f       	sbci	r31, 0xFF	; 255
     460:	80 81       	ld	r24, Z
     462:	91 81       	ldd	r25, Z+1	; 0x01
     464:	a2 81       	ldd	r26, Z+2	; 0x02
     466:	b3 81       	ldd	r27, Z+3	; 0x03
     468:	b0 70       	andi	r27, 0x00	; 0
     46a:	86 34       	cpi	r24, 0x46	; 70
     46c:	21 e4       	ldi	r18, 0x41	; 65
     46e:	92 07       	cpc	r25, r18
     470:	24 e5       	ldi	r18, 0x54	; 84
     472:	a2 07       	cpc	r26, r18
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	b2 07       	cpc	r27, r18
     478:	b1 f0       	breq	.+44     	; 0x4a6 <check_fs+0x7e>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     47a:	cc 57       	subi	r28, 0x7C	; 124
     47c:	df 4f       	sbci	r29, 0xFF	; 255
     47e:	48 81       	ld	r20, Y
     480:	59 81       	ldd	r21, Y+1	; 0x01
     482:	6a 81       	ldd	r22, Y+2	; 0x02
     484:	7b 81       	ldd	r23, Y+3	; 0x03
     486:	70 70       	andi	r23, 0x00	; 0
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
		return 3;
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	46 34       	cpi	r20, 0x46	; 70
     48c:	91 e4       	ldi	r25, 0x41	; 65
     48e:	59 07       	cpc	r21, r25
     490:	94 e5       	ldi	r25, 0x54	; 84
     492:	69 07       	cpc	r22, r25
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	79 07       	cpc	r23, r25
     498:	39 f4       	brne	.+14     	; 0x4a8 <check_fs+0x80>
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	05 c0       	rjmp	.+10     	; 0x4a8 <check_fs+0x80>
     49e:	83 e0       	ldi	r24, 0x03	; 3
     4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <check_fs+0x80>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
     4a2:	82 e0       	ldi	r24, 0x02	; 2
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <check_fs+0x80>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
		return 0;
     4a6:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;

	return 1;
}
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
     4ae:	3f 92       	push	r3
     4b0:	4f 92       	push	r4
     4b2:	5f 92       	push	r5
     4b4:	6f 92       	push	r6
     4b6:	7f 92       	push	r7
     4b8:	8f 92       	push	r8
     4ba:	9f 92       	push	r9
     4bc:	af 92       	push	r10
     4be:	bf 92       	push	r11
     4c0:	cf 92       	push	r12
     4c2:	df 92       	push	r13
     4c4:	ef 92       	push	r14
     4c6:	ff 92       	push	r15
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
     4d4:	a0 97       	sbiw	r28, 0x20	; 32
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
     4e0:	7c 01       	movw	r14, r24
     4e2:	cb 01       	movw	r24, r22
     4e4:	d4 2e       	mov	r13, r20
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
     4e6:	d7 01       	movw	r26, r14
     4e8:	1d 92       	st	X+, r1
     4ea:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
     4ec:	0e 94 00 01 	call	0x200	; 0x200 <get_ldnumber>
     4f0:	8c 01       	movw	r16, r24
	if (vol < 0) return FR_INVALID_DRIVE;
     4f2:	99 23       	and	r25, r25
     4f4:	0c f4       	brge	.+2      	; 0x4f8 <find_volume+0x4a>
     4f6:	69 c2       	rjmp	.+1234   	; 0x9ca <find_volume+0x51c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
     4f8:	fc 01       	movw	r30, r24
     4fa:	ee 0f       	add	r30, r30
     4fc:	ff 1f       	adc	r31, r31
     4fe:	e6 5d       	subi	r30, 0xD6	; 214
     500:	fe 4f       	sbci	r31, 0xFE	; 254
     502:	a0 80       	ld	r10, Z
     504:	b1 80       	ldd	r11, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     506:	a1 14       	cp	r10, r1
     508:	b1 04       	cpc	r11, r1
     50a:	09 f4       	brne	.+2      	; 0x50e <find_volume+0x60>
     50c:	60 c2       	rjmp	.+1216   	; 0x9ce <find_volume+0x520>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
     50e:	f7 01       	movw	r30, r14
     510:	b1 82       	std	Z+1, r11	; 0x01
     512:	a0 82       	st	Z, r10

	if (fs->fs_type) {					/* If the volume has been mounted */
     514:	d5 01       	movw	r26, r10
     516:	8c 91       	ld	r24, X
     518:	88 23       	and	r24, r24
     51a:	69 f0       	breq	.+26     	; 0x536 <find_volume+0x88>
		stat = disk_status(fs->drv);
     51c:	11 96       	adiw	r26, 0x01	; 1
     51e:	8c 91       	ld	r24, X
     520:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
     524:	80 fd       	sbrc	r24, 0
     526:	07 c0       	rjmp	.+14     	; 0x536 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
     528:	dd 20       	and	r13, r13
     52a:	09 f4       	brne	.+2      	; 0x52e <find_volume+0x80>
     52c:	52 c2       	rjmp	.+1188   	; 0x9d2 <find_volume+0x524>
     52e:	82 fd       	sbrc	r24, 2
     530:	52 c2       	rjmp	.+1188   	; 0x9d6 <find_volume+0x528>
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	6f c2       	rjmp	.+1246   	; 0xa14 <find_volume+0x566>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
     536:	f5 01       	movw	r30, r10
     538:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
     53a:	01 83       	std	Z+1, r16	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
     53c:	80 2f       	mov	r24, r16
     53e:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
     542:	80 fd       	sbrc	r24, 0
     544:	4a c2       	rjmp	.+1172   	; 0x9da <find_volume+0x52c>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
     546:	dd 20       	and	r13, r13
     548:	11 f0       	breq	.+4      	; 0x54e <find_volume+0xa0>
     54a:	82 fd       	sbrc	r24, 2
     54c:	48 c2       	rjmp	.+1168   	; 0x9de <find_volume+0x530>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
     54e:	c5 01       	movw	r24, r10
     550:	40 e0       	ldi	r20, 0x00	; 0
     552:	50 e0       	ldi	r21, 0x00	; 0
     554:	ba 01       	movw	r22, r20
     556:	0e 94 14 02 	call	0x428	; 0x428 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
     55a:	81 30       	cpi	r24, 0x01	; 1
     55c:	09 f0       	breq	.+2      	; 0x560 <find_volume+0xb2>
     55e:	4a c0       	rjmp	.+148    	; 0x5f4 <find_volume+0x146>
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
     560:	a5 01       	movw	r20, r10
     562:	4c 50       	subi	r20, 0x0C	; 12
     564:	5e 4f       	sbci	r21, 0xFE	; 254
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
     566:	8e 01       	movw	r16, r28
     568:	0f 5f       	subi	r16, 0xFF	; 255
     56a:	1f 4f       	sbci	r17, 0xFF	; 255
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
     56c:	b8 01       	movw	r22, r16
     56e:	2e eb       	ldi	r18, 0xBE	; 190
     570:	31 e0       	ldi	r19, 0x01	; 1
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + MBR_Table + i * SZ_PTE;
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
     572:	cc 24       	eor	r12, r12
     574:	dd 24       	eor	r13, r13
     576:	76 01       	movw	r14, r12
     578:	da 01       	movw	r26, r20
     57a:	8c 91       	ld	r24, X
     57c:	88 23       	and	r24, r24
     57e:	41 f0       	breq	.+16     	; 0x590 <find_volume+0xe2>
     580:	f5 01       	movw	r30, r10
     582:	e2 0f       	add	r30, r18
     584:	f3 1f       	adc	r31, r19
     586:	82 ad       	sts	0x62, r24
     588:	93 ad       	sts	0x63, r25
     58a:	a4 ad       	sts	0x64, r26
     58c:	b5 ad       	sts	0x65, r27
     58e:	02 c0       	rjmp	.+4      	; 0x594 <find_volume+0xe6>
     590:	d7 01       	movw	r26, r14
     592:	c6 01       	movw	r24, r12
     594:	fb 01       	movw	r30, r22
     596:	81 93       	st	Z+, r24
     598:	91 93       	st	Z+, r25
     59a:	a1 93       	st	Z+, r26
     59c:	b1 93       	st	Z+, r27
     59e:	bf 01       	movw	r22, r30
     5a0:	40 5f       	subi	r20, 0xF0	; 240
     5a2:	5f 4f       	sbci	r21, 0xFF	; 255
     5a4:	20 5f       	subi	r18, 0xF0	; 240
     5a6:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
     5a8:	f1 e0       	ldi	r31, 0x01	; 1
     5aa:	2e 3f       	cpi	r18, 0xFE	; 254
     5ac:	3f 07       	cpc	r19, r31
     5ae:	21 f7       	brne	.-56     	; 0x578 <find_volume+0xca>
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
     5b0:	0f 2e       	mov	r0, r31
     5b2:	f1 e1       	ldi	r31, 0x11	; 17
     5b4:	ef 2e       	mov	r14, r31
     5b6:	ff 24       	eor	r15, r15
     5b8:	f0 2d       	mov	r31, r0
     5ba:	ec 0e       	add	r14, r28
     5bc:	fd 1e       	adc	r15, r29
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     5be:	dd 24       	eor	r13, r13
     5c0:	68 94       	set
     5c2:	d1 f8       	bld	r13, 1
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
     5c4:	d8 01       	movw	r26, r16
     5c6:	4d 90       	ld	r4, X+
     5c8:	5d 90       	ld	r5, X+
     5ca:	6d 90       	ld	r6, X+
     5cc:	7d 90       	ld	r7, X+
     5ce:	8d 01       	movw	r16, r26
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     5d0:	41 14       	cp	r4, r1
     5d2:	51 04       	cpc	r5, r1
     5d4:	61 04       	cpc	r6, r1
     5d6:	71 04       	cpc	r7, r1
     5d8:	41 f0       	breq	.+16     	; 0x5ea <find_volume+0x13c>
     5da:	c5 01       	movw	r24, r10
     5dc:	b3 01       	movw	r22, r6
     5de:	a2 01       	movw	r20, r4
     5e0:	0e 94 14 02 	call	0x428	; 0x428 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
     5e4:	88 23       	and	r24, r24
     5e6:	11 f4       	brne	.+4      	; 0x5ec <find_volume+0x13e>
     5e8:	0e c0       	rjmp	.+28     	; 0x606 <find_volume+0x158>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     5ea:	8d 2d       	mov	r24, r13
		} while (!LD2PT(vol) && fmt && ++i < 4);
     5ec:	0e 15       	cp	r16, r14
     5ee:	1f 05       	cpc	r17, r15
     5f0:	49 f7       	brne	.-46     	; 0x5c4 <find_volume+0x116>
     5f2:	03 c0       	rjmp	.+6      	; 0x5fa <find_volume+0x14c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
     5f4:	44 24       	eor	r4, r4
     5f6:	55 24       	eor	r5, r5
     5f8:	32 01       	movw	r6, r4
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     5fa:	83 30       	cpi	r24, 0x03	; 3
     5fc:	09 f4       	brne	.+2      	; 0x600 <find_volume+0x152>
     5fe:	f1 c1       	rjmp	.+994    	; 0x9e2 <find_volume+0x534>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
     600:	88 23       	and	r24, r24
     602:	09 f0       	breq	.+2      	; 0x606 <find_volume+0x158>
     604:	f0 c1       	rjmp	.+992    	; 0x9e6 <find_volume+0x538>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
     606:	f5 01       	movw	r30, r10
     608:	85 ad       	sts	0x65, r24
     60a:	96 ad       	sts	0x66, r25
     60c:	f2 e0       	ldi	r31, 0x02	; 2
     60e:	80 30       	cpi	r24, 0x00	; 0
     610:	9f 07       	cpc	r25, r31
     612:	09 f0       	breq	.+2      	; 0x616 <find_volume+0x168>
     614:	ea c1       	rjmp	.+980    	; 0x9ea <find_volume+0x53c>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
     616:	f5 01       	movw	r30, r10
     618:	e8 5b       	subi	r30, 0xB8	; 184
     61a:	ff 4f       	sbci	r31, 0xFF	; 255
     61c:	80 81       	ld	r24, Z
     61e:	91 81       	ldd	r25, Z+1	; 0x01
     620:	6c 01       	movw	r12, r24
     622:	ee 24       	eor	r14, r14
     624:	ff 24       	eor	r15, r15
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
     626:	c1 14       	cp	r12, r1
     628:	d1 04       	cpc	r13, r1
     62a:	e1 04       	cpc	r14, r1
     62c:	f1 04       	cpc	r15, r1
     62e:	39 f4       	brne	.+14     	; 0x63e <find_volume+0x190>
     630:	f5 01       	movw	r30, r10
     632:	ea 5a       	subi	r30, 0xAA	; 170
     634:	ff 4f       	sbci	r31, 0xFF	; 255
     636:	c0 80       	ld	r12, Z
     638:	d1 80       	ldd	r13, Z+1	; 0x01
     63a:	e2 80       	ldd	r14, Z+2	; 0x02
     63c:	f3 80       	ldd	r15, Z+3	; 0x03
	fs->fsize = fasize;
     63e:	d5 01       	movw	r26, r10
     640:	5a 96       	adiw	r26, 0x1a	; 26
     642:	cd 92       	st	X+, r12
     644:	dd 92       	st	X+, r13
     646:	ed 92       	st	X+, r14
     648:	fc 92       	st	X, r15
     64a:	5d 97       	sbiw	r26, 0x1d	; 29

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
     64c:	f5 01       	movw	r30, r10
     64e:	ee 5b       	subi	r30, 0xBE	; 190
     650:	ff 4f       	sbci	r31, 0xFF	; 255
     652:	40 81       	ld	r20, Z
     654:	f5 01       	movw	r30, r10
     656:	43 83       	std	Z+3, r20	; 0x03
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
     658:	84 2f       	mov	r24, r20
     65a:	81 50       	subi	r24, 0x01	; 1
     65c:	82 30       	cpi	r24, 0x02	; 2
     65e:	08 f0       	brcs	.+2      	; 0x662 <find_volume+0x1b4>
     660:	c6 c1       	rjmp	.+908    	; 0x9ee <find_volume+0x540>
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
     662:	37 ac       	sts	0xa7, r19
     664:	32 82       	std	Z+2, r3	; 0x02
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
     666:	33 20       	and	r3, r3
     668:	09 f4       	brne	.+2      	; 0x66c <find_volume+0x1be>
     66a:	c3 c1       	rjmp	.+902    	; 0x9f2 <find_volume+0x544>
     66c:	83 2d       	mov	r24, r3
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	9c 01       	movw	r18, r24
     672:	21 50       	subi	r18, 0x01	; 1
     674:	30 40       	sbci	r19, 0x00	; 0
     676:	82 23       	and	r24, r18
     678:	93 23       	and	r25, r19
     67a:	00 97       	sbiw	r24, 0x00	; 0
     67c:	09 f0       	breq	.+2      	; 0x680 <find_volume+0x1d2>
     67e:	bb c1       	rjmp	.+886    	; 0x9f6 <find_volume+0x548>
		return FR_NO_FILESYSTEM;

	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
     680:	ed 5b       	subi	r30, 0xBD	; 189
     682:	ff 4f       	sbci	r31, 0xFF	; 255
     684:	80 80       	ld	r8, Z
     686:	91 80       	ldd	r9, Z+1	; 0x01
     688:	19 96       	adiw	r26, 0x09	; 9
     68a:	9c 92       	st	X, r9
     68c:	8e 92       	st	-X, r8
     68e:	18 97       	sbiw	r26, 0x08	; 8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
     690:	c4 01       	movw	r24, r8
     692:	8f 70       	andi	r24, 0x0F	; 15
     694:	90 70       	andi	r25, 0x00	; 0
     696:	00 97       	sbiw	r24, 0x00	; 0
     698:	09 f0       	breq	.+2      	; 0x69c <find_volume+0x1ee>
     69a:	af c1       	rjmp	.+862    	; 0x9fa <find_volume+0x54c>
		return FR_NO_FILESYSTEM;

	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
     69c:	f5 01       	movw	r30, r10
     69e:	eb 5b       	subi	r30, 0xBB	; 187
     6a0:	ff 4f       	sbci	r31, 0xFF	; 255
     6a2:	80 81       	ld	r24, Z
     6a4:	91 81       	ldd	r25, Z+1	; 0x01
     6a6:	8c 01       	movw	r16, r24
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	09 8b       	std	Y+17, r16	; 0x11
     6ae:	1a 8b       	std	Y+18, r17	; 0x12
     6b0:	2b 8b       	std	Y+19, r18	; 0x13
     6b2:	3c 8b       	std	Y+20, r19	; 0x14
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
     6b4:	01 15       	cp	r16, r1
     6b6:	11 05       	cpc	r17, r1
     6b8:	21 05       	cpc	r18, r1
     6ba:	31 05       	cpc	r19, r1
     6bc:	59 f4       	brne	.+22     	; 0x6d4 <find_volume+0x226>
     6be:	f5 01       	movw	r30, r10
     6c0:	ee 5a       	subi	r30, 0xAE	; 174
     6c2:	ff 4f       	sbci	r31, 0xFF	; 255
     6c4:	00 81       	ld	r16, Z
     6c6:	11 81       	ldd	r17, Z+1	; 0x01
     6c8:	22 81       	ldd	r18, Z+2	; 0x02
     6ca:	33 81       	ldd	r19, Z+3	; 0x03
     6cc:	09 8b       	std	Y+17, r16	; 0x11
     6ce:	1a 8b       	std	Y+18, r17	; 0x12
     6d0:	2b 8b       	std	Y+19, r18	; 0x13
     6d2:	3c 8b       	std	Y+20, r19	; 0x14

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
     6d4:	f5 01       	movw	r30, r10
     6d6:	e0 5c       	subi	r30, 0xC0	; 192
     6d8:	ff 4f       	sbci	r31, 0xFF	; 255
     6da:	00 81       	ld	r16, Z
     6dc:	11 81       	ldd	r17, Z+1	; 0x01
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
     6de:	01 15       	cp	r16, r1
     6e0:	11 05       	cpc	r17, r1
     6e2:	09 f4       	brne	.+2      	; 0x6e6 <find_volume+0x238>
     6e4:	8c c1       	rjmp	.+792    	; 0x9fe <find_volume+0x550>
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
     6e6:	24 2f       	mov	r18, r20
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	40 e0       	ldi	r20, 0x00	; 0
     6ec:	50 e0       	ldi	r21, 0x00	; 0
     6ee:	c7 01       	movw	r24, r14
     6f0:	b6 01       	movw	r22, r12
     6f2:	0e 94 7d 20 	call	0x40fa	; 0x40fa <__mulsi3>
     6f6:	6d 8f       	std	Y+29, r22	; 0x1d
     6f8:	7e 8f       	std	Y+30, r23	; 0x1e
     6fa:	8f 8f       	std	Y+31, r24	; 0x1f
     6fc:	98 a3       	lds	r25, 0x58

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
     6fe:	98 01       	movw	r18, r16
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	29 8f       	std	Y+25, r18	; 0x19
     706:	3a 8f       	std	Y+26, r19	; 0x1a
     708:	4b 8f       	std	Y+27, r20	; 0x1b
     70a:	5c 8f       	std	Y+28, r21	; 0x1c
     70c:	c4 01       	movw	r24, r8
     70e:	92 95       	swap	r25
     710:	82 95       	swap	r24
     712:	8f 70       	andi	r24, 0x0F	; 15
     714:	89 27       	eor	r24, r25
     716:	9f 70       	andi	r25, 0x0F	; 15
     718:	89 27       	eor	r24, r25
     71a:	a0 e0       	ldi	r26, 0x00	; 0
     71c:	b0 e0       	ldi	r27, 0x00	; 0
     71e:	82 0f       	add	r24, r18
     720:	93 1f       	adc	r25, r19
     722:	a4 1f       	adc	r26, r20
     724:	b5 1f       	adc	r27, r21
     726:	0d 8d       	ldd	r16, Y+29	; 0x1d
     728:	1e 8d       	ldd	r17, Y+30	; 0x1e
     72a:	2f 8d       	ldd	r18, Y+31	; 0x1f
     72c:	38 a1       	lds	r19, 0x48
     72e:	08 0f       	add	r16, r24
     730:	19 1f       	adc	r17, r25
     732:	2a 1f       	adc	r18, r26
     734:	3b 1f       	adc	r19, r27
     736:	0d 8b       	std	Y+21, r16	; 0x15
     738:	1e 8b       	std	Y+22, r17	; 0x16
     73a:	2f 8b       	std	Y+23, r18	; 0x17
     73c:	38 8f       	std	Y+24, r19	; 0x18
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
     73e:	89 89       	ldd	r24, Y+17	; 0x11
     740:	9a 89       	ldd	r25, Y+18	; 0x12
     742:	ab 89       	ldd	r26, Y+19	; 0x13
     744:	bc 89       	ldd	r27, Y+20	; 0x14
     746:	80 17       	cp	r24, r16
     748:	91 07       	cpc	r25, r17
     74a:	a2 07       	cpc	r26, r18
     74c:	b3 07       	cpc	r27, r19
     74e:	08 f4       	brcc	.+2      	; 0x752 <find_volume+0x2a4>
     750:	58 c1       	rjmp	.+688    	; 0xa02 <find_volume+0x554>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
     752:	bc 01       	movw	r22, r24
     754:	cd 01       	movw	r24, r26
     756:	60 1b       	sub	r22, r16
     758:	71 0b       	sbc	r23, r17
     75a:	82 0b       	sbc	r24, r18
     75c:	93 0b       	sbc	r25, r19
     75e:	23 2d       	mov	r18, r3
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	40 e0       	ldi	r20, 0x00	; 0
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	0e 94 b0 20 	call	0x4160	; 0x4160 <__udivmodsi4>
     76a:	89 01       	movw	r16, r18
     76c:	9a 01       	movw	r18, r20
     76e:	d9 01       	movw	r26, r18
     770:	c8 01       	movw	r24, r16
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
     772:	01 15       	cp	r16, r1
     774:	11 05       	cpc	r17, r1
     776:	21 05       	cpc	r18, r1
     778:	31 05       	cpc	r19, r1
     77a:	09 f4       	brne	.+2      	; 0x77e <find_volume+0x2d0>
     77c:	44 c1       	rjmp	.+648    	; 0xa06 <find_volume+0x558>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
     77e:	06 3f       	cpi	r16, 0xF6	; 246
     780:	ef e0       	ldi	r30, 0x0F	; 15
     782:	1e 07       	cpc	r17, r30
     784:	e0 e0       	ldi	r30, 0x00	; 0
     786:	2e 07       	cpc	r18, r30
     788:	e0 e0       	ldi	r30, 0x00	; 0
     78a:	3e 07       	cpc	r19, r30
     78c:	18 f4       	brcc	.+6      	; 0x794 <find_volume+0x2e6>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
     78e:	33 24       	eor	r3, r3
     790:	33 94       	inc	r3
     792:	03 c0       	rjmp	.+6      	; 0x79a <find_volume+0x2ec>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
     794:	33 24       	eor	r3, r3
     796:	68 94       	set
     798:	31 f8       	bld	r3, 1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
     79a:	86 3f       	cpi	r24, 0xF6	; 246
     79c:	ff ef       	ldi	r31, 0xFF	; 255
     79e:	9f 07       	cpc	r25, r31
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	af 07       	cpc	r26, r31
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	bf 07       	cpc	r27, r31
     7a8:	08 f0       	brcs	.+2      	; 0x7ac <find_volume+0x2fe>
     7aa:	4c c1       	rjmp	.+664    	; 0xa44 <find_volume+0x596>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     7ac:	b9 01       	movw	r22, r18
     7ae:	a8 01       	movw	r20, r16
     7b0:	4e 5f       	subi	r20, 0xFE	; 254
     7b2:	5f 4f       	sbci	r21, 0xFF	; 255
     7b4:	6f 4f       	sbci	r22, 0xFF	; 255
     7b6:	7f 4f       	sbci	r23, 0xFF	; 255
     7b8:	d5 01       	movw	r26, r10
     7ba:	56 96       	adiw	r26, 0x16	; 22
     7bc:	4d 93       	st	X+, r20
     7be:	5d 93       	st	X+, r21
     7c0:	6d 93       	st	X+, r22
     7c2:	7c 93       	st	X, r23
     7c4:	59 97       	sbiw	r26, 0x19	; 25
	fs->volbase = bsect;								/* Volume start sector */
     7c6:	f5 01       	movw	r30, r10
     7c8:	46 8e       	std	Z+30, r4	; 0x1e
     7ca:	57 8e       	std	Z+31, r5	; 0x1f
     7cc:	60 a2       	lds	r22, 0x90
     7ce:	71 a2       	lds	r23, 0x91
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     7d0:	09 8d       	ldd	r16, Y+25	; 0x19
     7d2:	1a 8d       	ldd	r17, Y+26	; 0x1a
     7d4:	2b 8d       	ldd	r18, Y+27	; 0x1b
     7d6:	3c 8d       	ldd	r19, Y+28	; 0x1c
     7d8:	04 0d       	add	r16, r4
     7da:	15 1d       	adc	r17, r5
     7dc:	26 1d       	adc	r18, r6
     7de:	37 1d       	adc	r19, r7
     7e0:	92 96       	adiw	r26, 0x22	; 34
     7e2:	0d 93       	st	X+, r16
     7e4:	1d 93       	st	X+, r17
     7e6:	2d 93       	st	X+, r18
     7e8:	3c 93       	st	X, r19
     7ea:	95 97       	sbiw	r26, 0x25	; 37
	fs->database = bsect + sysect;						/* Data start sector */
     7ec:	8d 89       	ldd	r24, Y+21	; 0x15
     7ee:	9e 89       	ldd	r25, Y+22	; 0x16
     7f0:	af 89       	ldd	r26, Y+23	; 0x17
     7f2:	b8 8d       	ldd	r27, Y+24	; 0x18
     7f4:	84 0d       	add	r24, r4
     7f6:	95 1d       	adc	r25, r5
     7f8:	a6 1d       	adc	r26, r6
     7fa:	b7 1d       	adc	r27, r7
     7fc:	82 a7       	lds	r24, 0x72
     7fe:	93 a7       	lds	r25, 0x73
     800:	a4 a7       	lds	r26, 0x74
     802:	b5 a7       	lds	r27, 0x75
	if (fmt == FS_FAT32) {
     804:	f3 e0       	ldi	r31, 0x03	; 3
     806:	3f 16       	cp	r3, r31
     808:	d9 f4       	brne	.+54     	; 0x840 <find_volume+0x392>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
     80a:	81 14       	cp	r8, r1
     80c:	91 04       	cpc	r9, r1
     80e:	09 f0       	breq	.+2      	; 0x812 <find_volume+0x364>
     810:	fc c0       	rjmp	.+504    	; 0xa0a <find_volume+0x55c>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
     812:	f5 01       	movw	r30, r10
     814:	e2 5a       	subi	r30, 0xA2	; 162
     816:	ff 4f       	sbci	r31, 0xFF	; 255
     818:	80 81       	ld	r24, Z
     81a:	91 81       	ldd	r25, Z+1	; 0x01
     81c:	a2 81       	ldd	r26, Z+2	; 0x02
     81e:	b3 81       	ldd	r27, Z+3	; 0x03
     820:	f5 01       	movw	r30, r10
     822:	86 a3       	lds	r24, 0x56
     824:	97 a3       	lds	r25, 0x57
     826:	a0 a7       	lds	r26, 0x70
     828:	b1 a7       	lds	r27, 0x71
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
     82a:	db 01       	movw	r26, r22
     82c:	ca 01       	movw	r24, r20
     82e:	88 0f       	add	r24, r24
     830:	99 1f       	adc	r25, r25
     832:	aa 1f       	adc	r26, r26
     834:	bb 1f       	adc	r27, r27
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
     83a:	aa 1f       	adc	r26, r26
     83c:	bb 1f       	adc	r27, r27
     83e:	35 c0       	rjmp	.+106    	; 0x8aa <find_volume+0x3fc>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
     840:	81 14       	cp	r8, r1
     842:	91 04       	cpc	r9, r1
     844:	09 f4       	brne	.+2      	; 0x848 <find_volume+0x39a>
     846:	e3 c0       	rjmp	.+454    	; 0xa0e <find_volume+0x560>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
     848:	8d 8d       	ldd	r24, Y+29	; 0x1d
     84a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     84c:	af 8d       	ldd	r26, Y+31	; 0x1f
     84e:	b8 a1       	lds	r27, 0x48
     850:	80 0f       	add	r24, r16
     852:	91 1f       	adc	r25, r17
     854:	a2 1f       	adc	r26, r18
     856:	b3 1f       	adc	r27, r19
     858:	f5 01       	movw	r30, r10
     85a:	86 a3       	lds	r24, 0x56
     85c:	97 a3       	lds	r25, 0x57
     85e:	a0 a7       	lds	r26, 0x70
     860:	b1 a7       	lds	r27, 0x71
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
     862:	f2 e0       	ldi	r31, 0x02	; 2
     864:	3f 16       	cp	r3, r31
     866:	39 f4       	brne	.+14     	; 0x876 <find_volume+0x3c8>
     868:	db 01       	movw	r26, r22
     86a:	ca 01       	movw	r24, r20
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	aa 1f       	adc	r26, r26
     872:	bb 1f       	adc	r27, r27
     874:	1a c0       	rjmp	.+52     	; 0x8aa <find_volume+0x3fc>
     876:	db 01       	movw	r26, r22
     878:	ca 01       	movw	r24, r20
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	aa 1f       	adc	r26, r26
     880:	bb 1f       	adc	r27, r27
     882:	84 0f       	add	r24, r20
     884:	95 1f       	adc	r25, r21
     886:	a6 1f       	adc	r26, r22
     888:	b7 1f       	adc	r27, r23
     88a:	8c 01       	movw	r16, r24
     88c:	9d 01       	movw	r18, r26
     88e:	36 95       	lsr	r19
     890:	27 95       	ror	r18
     892:	17 95       	ror	r17
     894:	07 95       	ror	r16
     896:	db 01       	movw	r26, r22
     898:	ca 01       	movw	r24, r20
     89a:	81 70       	andi	r24, 0x01	; 1
     89c:	90 70       	andi	r25, 0x00	; 0
     89e:	a0 70       	andi	r26, 0x00	; 0
     8a0:	b0 70       	andi	r27, 0x00	; 0
     8a2:	80 0f       	add	r24, r16
     8a4:	91 1f       	adc	r25, r17
     8a6:	a2 1f       	adc	r26, r18
     8a8:	b3 1f       	adc	r27, r19
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
     8aa:	81 50       	subi	r24, 0x01	; 1
     8ac:	9e 4f       	sbci	r25, 0xFE	; 254
     8ae:	af 4f       	sbci	r26, 0xFF	; 255
     8b0:	bf 4f       	sbci	r27, 0xFF	; 255
     8b2:	07 2e       	mov	r0, r23
     8b4:	79 e0       	ldi	r23, 0x09	; 9
     8b6:	b6 95       	lsr	r27
     8b8:	a7 95       	ror	r26
     8ba:	97 95       	ror	r25
     8bc:	87 95       	ror	r24
     8be:	7a 95       	dec	r23
     8c0:	d1 f7       	brne	.-12     	; 0x8b6 <find_volume+0x408>
     8c2:	70 2d       	mov	r23, r0
     8c4:	c8 16       	cp	r12, r24
     8c6:	d9 06       	cpc	r13, r25
     8c8:	ea 06       	cpc	r14, r26
     8ca:	fb 06       	cpc	r15, r27
     8cc:	08 f4       	brcc	.+2      	; 0x8d0 <find_volume+0x422>
     8ce:	a1 c0       	rjmp	.+322    	; 0xa12 <find_volume+0x564>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
     8d0:	8f ef       	ldi	r24, 0xFF	; 255
     8d2:	9f ef       	ldi	r25, 0xFF	; 255
     8d4:	dc 01       	movw	r26, r24
     8d6:	f5 01       	movw	r30, r10
     8d8:	86 87       	std	Z+14, r24	; 0x0e
     8da:	97 87       	std	Z+15, r25	; 0x0f
     8dc:	a0 8b       	std	Z+16, r26	; 0x10
     8de:	b1 8b       	std	Z+17, r27	; 0x11
     8e0:	82 87       	std	Z+10, r24	; 0x0a
     8e2:	93 87       	std	Z+11, r25	; 0x0b
     8e4:	a4 87       	std	Z+12, r26	; 0x0c
     8e6:	b5 87       	std	Z+13, r27	; 0x0d

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
     8e8:	80 e8       	ldi	r24, 0x80	; 128
     8ea:	85 83       	std	Z+5, r24	; 0x05
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
     8ec:	f3 e0       	ldi	r31, 0x03	; 3
     8ee:	3f 16       	cp	r3, r31
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <find_volume+0x446>
     8f2:	55 c0       	rjmp	.+170    	; 0x99e <find_volume+0x4f0>
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
     8f4:	f5 01       	movw	r30, r10
     8f6:	ee 59       	subi	r30, 0x9E	; 158
     8f8:	ff 4f       	sbci	r31, 0xFF	; 255
     8fa:	80 81       	ld	r24, Z
     8fc:	91 81       	ldd	r25, Z+1	; 0x01
     8fe:	81 30       	cpi	r24, 0x01	; 1
     900:	91 05       	cpc	r25, r1
     902:	09 f0       	breq	.+2      	; 0x906 <find_volume+0x458>
     904:	4c c0       	rjmp	.+152    	; 0x99e <find_volume+0x4f0>
		&& move_window(fs, bsect + 1) == FR_OK)
     906:	b3 01       	movw	r22, r6
     908:	a2 01       	movw	r20, r4
     90a:	4f 5f       	subi	r20, 0xFF	; 255
     90c:	5f 4f       	sbci	r21, 0xFF	; 255
     90e:	6f 4f       	sbci	r22, 0xFF	; 255
     910:	7f 4f       	sbci	r23, 0xFF	; 255
     912:	c5 01       	movw	r24, r10
     914:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <move_window>
     918:	88 23       	and	r24, r24
     91a:	09 f0       	breq	.+2      	; 0x91e <find_volume+0x470>
     91c:	40 c0       	rjmp	.+128    	; 0x99e <find_volume+0x4f0>
	{
		fs->fsi_flag = 0;
     91e:	d5 01       	movw	r26, r10
     920:	15 96       	adiw	r26, 0x05	; 5
     922:	1c 92       	st	X, r1
     924:	15 97       	sbiw	r26, 0x05	; 5
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
     926:	f5 01       	movw	r30, r10
     928:	e0 5d       	subi	r30, 0xD0	; 208
     92a:	fd 4f       	sbci	r31, 0xFD	; 253
     92c:	80 81       	ld	r24, Z
     92e:	91 81       	ldd	r25, Z+1	; 0x01
     930:	ba ea       	ldi	r27, 0xAA	; 170
     932:	85 35       	cpi	r24, 0x55	; 85
     934:	9b 07       	cpc	r25, r27
     936:	99 f5       	brne	.+102    	; 0x99e <find_volume+0x4f0>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
     938:	f5 01       	movw	r30, r10
     93a:	82 a9       	sts	0x42, r24
     93c:	93 a9       	sts	0x43, r25
     93e:	a4 a9       	sts	0x44, r26
     940:	b5 a9       	sts	0x45, r27
     942:	82 35       	cpi	r24, 0x52	; 82
     944:	f2 e5       	ldi	r31, 0x52	; 82
     946:	9f 07       	cpc	r25, r31
     948:	f1 e6       	ldi	r31, 0x61	; 97
     94a:	af 07       	cpc	r26, r31
     94c:	f1 e4       	ldi	r31, 0x41	; 65
     94e:	bf 07       	cpc	r27, r31
     950:	31 f5       	brne	.+76     	; 0x99e <find_volume+0x4f0>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
     952:	f5 01       	movw	r30, r10
     954:	ea 5e       	subi	r30, 0xEA	; 234
     956:	fd 4f       	sbci	r31, 0xFD	; 253
     958:	80 81       	ld	r24, Z
     95a:	91 81       	ldd	r25, Z+1	; 0x01
     95c:	a2 81       	ldd	r26, Z+2	; 0x02
     95e:	b3 81       	ldd	r27, Z+3	; 0x03
     960:	82 37       	cpi	r24, 0x72	; 114
     962:	02 e7       	ldi	r16, 0x72	; 114
     964:	90 07       	cpc	r25, r16
     966:	01 e4       	ldi	r16, 0x41	; 65
     968:	a0 07       	cpc	r26, r16
     96a:	01 e6       	ldi	r16, 0x61	; 97
     96c:	b0 07       	cpc	r27, r16
     96e:	b9 f4       	brne	.+46     	; 0x99e <find_volume+0x4f0>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
     970:	f5 01       	movw	r30, r10
     972:	e6 5e       	subi	r30, 0xE6	; 230
     974:	fd 4f       	sbci	r31, 0xFD	; 253
     976:	80 81       	ld	r24, Z
     978:	91 81       	ldd	r25, Z+1	; 0x01
     97a:	a2 81       	ldd	r26, Z+2	; 0x02
     97c:	b3 81       	ldd	r27, Z+3	; 0x03
     97e:	f5 01       	movw	r30, r10
     980:	86 87       	std	Z+14, r24	; 0x0e
     982:	97 87       	std	Z+15, r25	; 0x0f
     984:	a0 8b       	std	Z+16, r26	; 0x10
     986:	b1 8b       	std	Z+17, r27	; 0x11
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
     988:	e2 5e       	subi	r30, 0xE2	; 226
     98a:	fd 4f       	sbci	r31, 0xFD	; 253
     98c:	80 81       	ld	r24, Z
     98e:	91 81       	ldd	r25, Z+1	; 0x01
     990:	a2 81       	ldd	r26, Z+2	; 0x02
     992:	b3 81       	ldd	r27, Z+3	; 0x03
     994:	f5 01       	movw	r30, r10
     996:	82 87       	std	Z+10, r24	; 0x0a
     998:	93 87       	std	Z+11, r25	; 0x0b
     99a:	a4 87       	std	Z+12, r26	; 0x0c
     99c:	b5 87       	std	Z+13, r27	; 0x0d
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
     99e:	d5 01       	movw	r26, r10
     9a0:	3c 92       	st	X, r3
	fs->id = ++Fsid;	/* File system mount ID */
     9a2:	80 91 2c 01 	lds	r24, 0x012C
     9a6:	90 91 2d 01 	lds	r25, 0x012D
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	90 93 2d 01 	sts	0x012D, r25
     9b0:	80 93 2c 01 	sts	0x012C, r24
     9b4:	17 96       	adiw	r26, 0x07	; 7
     9b6:	9c 93       	st	X, r25
     9b8:	8e 93       	st	-X, r24
     9ba:	16 97       	sbiw	r26, 0x06	; 6
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
     9bc:	f5 01       	movw	r30, r10
     9be:	12 8a       	std	Z+18, r1	; 0x12
     9c0:	13 8a       	std	Z+19, r1	; 0x13
     9c2:	14 8a       	std	Z+20, r1	; 0x14
     9c4:	15 8a       	std	Z+21, r1	; 0x15
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	25 c0       	rjmp	.+74     	; 0xa14 <find_volume+0x566>


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
     9ca:	8b e0       	ldi	r24, 0x0B	; 11
     9cc:	23 c0       	rjmp	.+70     	; 0xa14 <find_volume+0x566>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     9ce:	8c e0       	ldi	r24, 0x0C	; 12
     9d0:	21 c0       	rjmp	.+66     	; 0xa14 <find_volume+0x566>
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	1f c0       	rjmp	.+62     	; 0xa14 <find_volume+0x566>

	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
     9d6:	8a e0       	ldi	r24, 0x0A	; 10
     9d8:	1d c0       	rjmp	.+58     	; 0xa14 <find_volume+0x566>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
     9da:	83 e0       	ldi	r24, 0x03	; 3
     9dc:	1b c0       	rjmp	.+54     	; 0xa14 <find_volume+0x566>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
     9de:	8a e0       	ldi	r24, 0x0A	; 10
     9e0:	19 c0       	rjmp	.+50     	; 0xa14 <find_volume+0x566>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	17 c0       	rjmp	.+46     	; 0xa14 <find_volume+0x566>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
     9e6:	8d e0       	ldi	r24, 0x0D	; 13
     9e8:	15 c0       	rjmp	.+42     	; 0xa14 <find_volume+0x566>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
     9ea:	8d e0       	ldi	r24, 0x0D	; 13
     9ec:	13 c0       	rjmp	.+38     	; 0xa14 <find_volume+0x566>
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
     9ee:	8d e0       	ldi	r24, 0x0D	; 13
     9f0:	11 c0       	rjmp	.+34     	; 0xa14 <find_volume+0x566>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
		return FR_NO_FILESYSTEM;
     9f2:	8d e0       	ldi	r24, 0x0D	; 13
     9f4:	0f c0       	rjmp	.+30     	; 0xa14 <find_volume+0x566>
     9f6:	8d e0       	ldi	r24, 0x0D	; 13
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <find_volume+0x566>

	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
		return FR_NO_FILESYSTEM;
     9fa:	8d e0       	ldi	r24, 0x0D	; 13
     9fc:	0b c0       	rjmp	.+22     	; 0xa14 <find_volume+0x566>

	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
     9fe:	8d e0       	ldi	r24, 0x0D	; 13
     a00:	09 c0       	rjmp	.+18     	; 0xa14 <find_volume+0x566>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
     a02:	8d e0       	ldi	r24, 0x0D	; 13
     a04:	07 c0       	rjmp	.+14     	; 0xa14 <find_volume+0x566>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
     a06:	8d e0       	ldi	r24, 0x0D	; 13
     a08:	05 c0       	rjmp	.+10     	; 0xa14 <find_volume+0x566>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->volbase = bsect;								/* Volume start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	fs->database = bsect + sysect;						/* Data start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
     a0a:	8d e0       	ldi	r24, 0x0D	; 13
     a0c:	03 c0       	rjmp	.+6      	; 0xa14 <find_volume+0x566>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
     a0e:	8d e0       	ldi	r24, 0x0D	; 13
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <find_volume+0x566>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
		return FR_NO_FILESYSTEM;
     a12:	8d e0       	ldi	r24, 0x0D	; 13
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
     a14:	a0 96       	adiw	r28, 0x20	; 32
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	f8 94       	cli
     a1a:	de bf       	out	0x3e, r29	; 62
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	cd bf       	out	0x3d, r28	; 61
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	ff 90       	pop	r15
     a2a:	ef 90       	pop	r14
     a2c:	df 90       	pop	r13
     a2e:	cf 90       	pop	r12
     a30:	bf 90       	pop	r11
     a32:	af 90       	pop	r10
     a34:	9f 90       	pop	r9
     a36:	8f 90       	pop	r8
     a38:	7f 90       	pop	r7
     a3a:	6f 90       	pop	r6
     a3c:	5f 90       	pop	r5
     a3e:	4f 90       	pop	r4
     a40:	3f 90       	pop	r3
     a42:	08 95       	ret
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     a44:	b9 01       	movw	r22, r18
     a46:	a8 01       	movw	r20, r16
     a48:	4e 5f       	subi	r20, 0xFE	; 254
     a4a:	5f 4f       	sbci	r21, 0xFF	; 255
     a4c:	6f 4f       	sbci	r22, 0xFF	; 255
     a4e:	7f 4f       	sbci	r23, 0xFF	; 255
     a50:	d5 01       	movw	r26, r10
     a52:	56 96       	adiw	r26, 0x16	; 22
     a54:	4d 93       	st	X+, r20
     a56:	5d 93       	st	X+, r21
     a58:	6d 93       	st	X+, r22
     a5a:	7c 93       	st	X, r23
     a5c:	59 97       	sbiw	r26, 0x19	; 25
	fs->volbase = bsect;								/* Volume start sector */
     a5e:	f5 01       	movw	r30, r10
     a60:	46 8e       	std	Z+30, r4	; 0x1e
     a62:	57 8e       	std	Z+31, r5	; 0x1f
     a64:	60 a2       	lds	r22, 0x90
     a66:	71 a2       	lds	r23, 0x91
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     a68:	89 8d       	ldd	r24, Y+25	; 0x19
     a6a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a6c:	ab 8d       	ldd	r26, Y+27	; 0x1b
     a6e:	bc 8d       	ldd	r27, Y+28	; 0x1c
     a70:	84 0d       	add	r24, r4
     a72:	95 1d       	adc	r25, r5
     a74:	a6 1d       	adc	r26, r6
     a76:	b7 1d       	adc	r27, r7
     a78:	82 a3       	lds	r24, 0x52
     a7a:	93 a3       	lds	r25, 0x53
     a7c:	a4 a3       	lds	r26, 0x54
     a7e:	b5 a3       	lds	r27, 0x55
	fs->database = bsect + sysect;						/* Data start sector */
     a80:	8d 89       	ldd	r24, Y+21	; 0x15
     a82:	9e 89       	ldd	r25, Y+22	; 0x16
     a84:	af 89       	ldd	r26, Y+23	; 0x17
     a86:	b8 8d       	ldd	r27, Y+24	; 0x18
     a88:	84 0d       	add	r24, r4
     a8a:	95 1d       	adc	r25, r5
     a8c:	a6 1d       	adc	r26, r6
     a8e:	b7 1d       	adc	r27, r7
     a90:	82 a7       	lds	r24, 0x72
     a92:	93 a7       	lds	r25, 0x73
     a94:	a4 a7       	lds	r26, 0x74
     a96:	b5 a7       	lds	r27, 0x75
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
     a98:	0f 2e       	mov	r0, r31
     a9a:	f3 e0       	ldi	r31, 0x03	; 3
     a9c:	3f 2e       	mov	r3, r31
     a9e:	f0 2d       	mov	r31, r0
     aa0:	b4 ce       	rjmp	.-664    	; 0x80a <find_volume+0x35c>

00000aa2 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	ec 01       	movw	r28, r24
     aac:	db 01       	movw	r26, r22
     aae:	ca 01       	movw	r24, r20
	clst -= 2;
     ab0:	02 97       	sbiw	r24, 0x02	; 2
     ab2:	a1 09       	sbc	r26, r1
     ab4:	b1 09       	sbc	r27, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
     ab6:	4e 89       	ldd	r20, Y+22	; 0x16
     ab8:	5f 89       	ldd	r21, Y+23	; 0x17
     aba:	68 8d       	ldd	r22, Y+24	; 0x18
     abc:	79 8d       	ldd	r23, Y+25	; 0x19
     abe:	42 50       	subi	r20, 0x02	; 2
     ac0:	50 40       	sbci	r21, 0x00	; 0
     ac2:	60 40       	sbci	r22, 0x00	; 0
     ac4:	70 40       	sbci	r23, 0x00	; 0
     ac6:	84 17       	cp	r24, r20
     ac8:	95 07       	cpc	r25, r21
     aca:	a6 07       	cpc	r26, r22
     acc:	b7 07       	cpc	r27, r23
     ace:	98 f4       	brcc	.+38     	; 0xaf6 <clust2sect+0x54>
	return clst * fs->csize + fs->database;
     ad0:	2a 81       	ldd	r18, Y+2	; 0x02
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	bc 01       	movw	r22, r24
     ada:	cd 01       	movw	r24, r26
     adc:	0e 94 7d 20 	call	0x40fa	; 0x40fa <__mulsi3>
     ae0:	8b 01       	movw	r16, r22
     ae2:	9c 01       	movw	r18, r24
     ae4:	8a a5       	lds	r24, 0x6a
     ae6:	9b a5       	lds	r25, 0x6b
     ae8:	ac a5       	lds	r26, 0x6c
     aea:	bd a5       	lds	r27, 0x6d
     aec:	08 0f       	add	r16, r24
     aee:	19 1f       	adc	r17, r25
     af0:	2a 1f       	adc	r18, r26
     af2:	3b 1f       	adc	r19, r27
     af4:	03 c0       	rjmp	.+6      	; 0xafc <clust2sect+0x5a>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
     af6:	00 e0       	ldi	r16, 0x00	; 0
     af8:	10 e0       	ldi	r17, 0x00	; 0
     afa:	98 01       	movw	r18, r16
	return clst * fs->csize + fs->database;
}
     afc:	60 2f       	mov	r22, r16
     afe:	71 2f       	mov	r23, r17
     b00:	82 2f       	mov	r24, r18
     b02:	93 2f       	mov	r25, r19
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	08 95       	ret

00000b0e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
     b0e:	bf 92       	push	r11
     b10:	cf 92       	push	r12
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	ec 01       	movw	r28, r24
     b22:	6a 01       	movw	r12, r20
     b24:	7b 01       	movw	r14, r22
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
     b26:	42 30       	cpi	r20, 0x02	; 2
     b28:	51 05       	cpc	r21, r1
     b2a:	61 05       	cpc	r22, r1
     b2c:	71 05       	cpc	r23, r1
     b2e:	08 f4       	brcc	.+2      	; 0xb32 <get_fat+0x24>
     b30:	aa c0       	rjmp	.+340    	; 0xc86 <get_fat+0x178>
     b32:	8e 89       	ldd	r24, Y+22	; 0x16
     b34:	9f 89       	ldd	r25, Y+23	; 0x17
     b36:	a8 8d       	ldd	r26, Y+24	; 0x18
     b38:	b9 8d       	ldd	r27, Y+25	; 0x19
     b3a:	48 17       	cp	r20, r24
     b3c:	59 07       	cpc	r21, r25
     b3e:	6a 07       	cpc	r22, r26
     b40:	7b 07       	cpc	r23, r27
     b42:	08 f0       	brcs	.+2      	; 0xb46 <get_fat+0x38>
     b44:	a5 c0       	rjmp	.+330    	; 0xc90 <get_fat+0x182>
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
     b46:	88 81       	ld	r24, Y
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	09 f4       	brne	.+2      	; 0xb4e <get_fat+0x40>
     b4c:	5c c0       	rjmp	.+184    	; 0xc06 <get_fat+0xf8>
     b4e:	83 30       	cpi	r24, 0x03	; 3
     b50:	09 f4       	brne	.+2      	; 0xb54 <get_fat+0x46>
     b52:	76 c0       	rjmp	.+236    	; 0xc40 <get_fat+0x132>
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	09 f0       	breq	.+2      	; 0xb5a <get_fat+0x4c>
     b58:	a0 c0       	rjmp	.+320    	; 0xc9a <get_fat+0x18c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
     b5a:	9a 01       	movw	r18, r20
     b5c:	36 95       	lsr	r19
     b5e:	27 95       	ror	r18
     b60:	89 01       	movw	r16, r18
     b62:	04 0f       	add	r16, r20
     b64:	15 1f       	adc	r17, r21
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
     b66:	a8 01       	movw	r20, r16
     b68:	45 2f       	mov	r20, r21
     b6a:	55 27       	eor	r21, r21
     b6c:	46 95       	lsr	r20
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	8a a1       	lds	r24, 0x4a
     b74:	9b a1       	lds	r25, 0x4b
     b76:	ac a1       	lds	r26, 0x4c
     b78:	bd a1       	lds	r27, 0x4d
     b7a:	48 0f       	add	r20, r24
     b7c:	59 1f       	adc	r21, r25
     b7e:	6a 1f       	adc	r22, r26
     b80:	7b 1f       	adc	r23, r27
     b82:	ce 01       	movw	r24, r28
     b84:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <move_window>
     b88:	88 23       	and	r24, r24
     b8a:	09 f0       	breq	.+2      	; 0xb8e <get_fat+0x80>
     b8c:	8b c0       	rjmp	.+278    	; 0xca4 <get_fat+0x196>
			wc = fs->win[bc++ % SS(fs)];
     b8e:	f8 01       	movw	r30, r16
     b90:	f1 70       	andi	r31, 0x01	; 1
     b92:	ec 0f       	add	r30, r28
     b94:	fd 1f       	adc	r31, r29
     b96:	b2 a8       	sts	0x82, r27
     b98:	0f 5f       	subi	r16, 0xFF	; 255
     b9a:	1f 4f       	sbci	r17, 0xFF	; 255
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
     b9c:	a8 01       	movw	r20, r16
     b9e:	45 2f       	mov	r20, r21
     ba0:	55 27       	eor	r21, r21
     ba2:	46 95       	lsr	r20
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	8a a1       	lds	r24, 0x4a
     baa:	9b a1       	lds	r25, 0x4b
     bac:	ac a1       	lds	r26, 0x4c
     bae:	bd a1       	lds	r27, 0x4d
     bb0:	48 0f       	add	r20, r24
     bb2:	59 1f       	adc	r21, r25
     bb4:	6a 1f       	adc	r22, r26
     bb6:	7b 1f       	adc	r23, r27
     bb8:	ce 01       	movw	r24, r28
     bba:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <move_window>
     bbe:	88 23       	and	r24, r24
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <get_fat+0xb6>
     bc2:	74 c0       	rjmp	.+232    	; 0xcac <get_fat+0x19e>

		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
			wc = fs->win[bc++ % SS(fs)];
     bc4:	2b 2d       	mov	r18, r11
     bc6:	30 e0       	ldi	r19, 0x00	; 0
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
			wc |= fs->win[bc % SS(fs)] << 8;
     bc8:	f8 01       	movw	r30, r16
     bca:	f1 70       	andi	r31, 0x01	; 1
     bcc:	ec 0f       	add	r30, r28
     bce:	fd 1f       	adc	r31, r29
     bd0:	92 a9       	sts	0x42, r25
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	82 2b       	or	r24, r18
     bd6:	93 2b       	or	r25, r19
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
     bd8:	21 e0       	ldi	r18, 0x01	; 1
     bda:	c2 22       	and	r12, r18
     bdc:	dd 24       	eor	r13, r13
     bde:	c1 14       	cp	r12, r1
     be0:	d1 04       	cpc	r13, r1
     be2:	51 f0       	breq	.+20     	; 0xbf8 <get_fat+0xea>
     be4:	92 95       	swap	r25
     be6:	82 95       	swap	r24
     be8:	8f 70       	andi	r24, 0x0F	; 15
     bea:	89 27       	eor	r24, r25
     bec:	9f 70       	andi	r25, 0x0F	; 15
     bee:	89 27       	eor	r24, r25
     bf0:	8c 01       	movw	r16, r24
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	65 c0       	rjmp	.+202    	; 0xcc2 <get_fat+0x1b4>
     bf8:	8c 01       	movw	r16, r24
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	1f 70       	andi	r17, 0x0F	; 15
     c00:	20 70       	andi	r18, 0x00	; 0
     c02:	30 70       	andi	r19, 0x00	; 0
     c04:	5e c0       	rjmp	.+188    	; 0xcc2 <get_fat+0x1b4>
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
     c06:	45 2f       	mov	r20, r21
     c08:	56 2f       	mov	r21, r22
     c0a:	67 2f       	mov	r22, r23
     c0c:	77 27       	eor	r23, r23
     c0e:	8a a1       	lds	r24, 0x4a
     c10:	9b a1       	lds	r25, 0x4b
     c12:	ac a1       	lds	r26, 0x4c
     c14:	bd a1       	lds	r27, 0x4d
     c16:	48 0f       	add	r20, r24
     c18:	59 1f       	adc	r21, r25
     c1a:	6a 1f       	adc	r22, r26
     c1c:	7b 1f       	adc	r23, r27
     c1e:	ce 01       	movw	r24, r28
     c20:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <move_window>
     c24:	88 23       	and	r24, r24
     c26:	09 f0       	breq	.+2      	; 0xc2a <get_fat+0x11c>
     c28:	45 c0       	rjmp	.+138    	; 0xcb4 <get_fat+0x1a6>
			p = &fs->win[clst * 2 % SS(fs)];
     c2a:	f6 01       	movw	r30, r12
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	f1 70       	andi	r31, 0x01	; 1
			val = LD_WORD(p);
     c32:	ce 0f       	add	r28, r30
     c34:	df 1f       	adc	r29, r31
     c36:	0a a9       	sts	0x4a, r16
     c38:	1b a9       	sts	0x4b, r17
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
			break;
     c3e:	41 c0       	rjmp	.+130    	; 0xcc2 <get_fat+0x1b4>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
     c40:	68 94       	set
     c42:	16 f8       	bld	r1, 6
     c44:	76 95       	lsr	r23
     c46:	67 95       	ror	r22
     c48:	57 95       	ror	r21
     c4a:	47 95       	ror	r20
     c4c:	16 94       	lsr	r1
     c4e:	d1 f7       	brne	.-12     	; 0xc44 <get_fat+0x136>
     c50:	8a a1       	lds	r24, 0x4a
     c52:	9b a1       	lds	r25, 0x4b
     c54:	ac a1       	lds	r26, 0x4c
     c56:	bd a1       	lds	r27, 0x4d
     c58:	48 0f       	add	r20, r24
     c5a:	59 1f       	adc	r21, r25
     c5c:	6a 1f       	adc	r22, r26
     c5e:	7b 1f       	adc	r23, r27
     c60:	ce 01       	movw	r24, r28
     c62:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <move_window>
     c66:	88 23       	and	r24, r24
     c68:	49 f5       	brne	.+82     	; 0xcbc <get_fat+0x1ae>
			p = &fs->win[clst * 4 % SS(fs)];
     c6a:	f6 01       	movw	r30, r12
     c6c:	ee 0f       	add	r30, r30
     c6e:	ff 1f       	adc	r31, r31
     c70:	ee 0f       	add	r30, r30
     c72:	ff 1f       	adc	r31, r31
     c74:	f1 70       	andi	r31, 0x01	; 1
			val = LD_DWORD(p) & 0x0FFFFFFF;
     c76:	ce 0f       	add	r28, r30
     c78:	df 1f       	adc	r29, r31
     c7a:	0a a9       	sts	0x4a, r16
     c7c:	1b a9       	sts	0x4b, r17
     c7e:	2c a9       	sts	0x4c, r18
     c80:	3d a9       	sts	0x4d, r19
     c82:	3f 70       	andi	r19, 0x0F	; 15
			break;
     c84:	1e c0       	rjmp	.+60     	; 0xcc2 <get_fat+0x1b4>
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		val = 1;	/* Internal error */
     c86:	01 e0       	ldi	r16, 0x01	; 1
     c88:	10 e0       	ldi	r17, 0x00	; 0
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	19 c0       	rjmp	.+50     	; 0xcc2 <get_fat+0x1b4>
     c90:	01 e0       	ldi	r16, 0x01	; 1
     c92:	10 e0       	ldi	r17, 0x00	; 0
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	14 c0       	rjmp	.+40     	; 0xcc2 <get_fat+0x1b4>
			p = &fs->win[clst * 4 % SS(fs)];
			val = LD_DWORD(p) & 0x0FFFFFFF;
			break;

		default:
			val = 1;	/* Internal error */
     c9a:	01 e0       	ldi	r16, 0x01	; 1
     c9c:	10 e0       	ldi	r17, 0x00	; 0
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	0f c0       	rjmp	.+30     	; 0xcc2 <get_fat+0x1b4>

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
     ca4:	0f ef       	ldi	r16, 0xFF	; 255
     ca6:	1f ef       	ldi	r17, 0xFF	; 255
     ca8:	98 01       	movw	r18, r16
     caa:	0b c0       	rjmp	.+22     	; 0xcc2 <get_fat+0x1b4>
     cac:	0f ef       	ldi	r16, 0xFF	; 255
     cae:	1f ef       	ldi	r17, 0xFF	; 255
     cb0:	98 01       	movw	r18, r16
     cb2:	07 c0       	rjmp	.+14     	; 0xcc2 <get_fat+0x1b4>
     cb4:	0f ef       	ldi	r16, 0xFF	; 255
     cb6:	1f ef       	ldi	r17, 0xFF	; 255
     cb8:	98 01       	movw	r18, r16
     cba:	03 c0       	rjmp	.+6      	; 0xcc2 <get_fat+0x1b4>
     cbc:	0f ef       	ldi	r16, 0xFF	; 255
     cbe:	1f ef       	ldi	r17, 0xFF	; 255
     cc0:	98 01       	movw	r18, r16
			val = 1;	/* Internal error */
		}
	}

	return val;
}
     cc2:	60 2f       	mov	r22, r16
     cc4:	71 2f       	mov	r23, r17
     cc6:	82 2f       	mov	r24, r18
     cc8:	93 2f       	mov	r25, r19
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	1f 91       	pop	r17
     cd0:	0f 91       	pop	r16
     cd2:	ff 90       	pop	r15
     cd4:	ef 90       	pop	r14
     cd6:	df 90       	pop	r13
     cd8:	cf 90       	pop	r12
     cda:	bf 90       	pop	r11
     cdc:	08 95       	ret

00000cde <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
     cde:	af 92       	push	r10
     ce0:	bf 92       	push	r11
     ce2:	cf 92       	push	r12
     ce4:	df 92       	push	r13
     ce6:	ef 92       	push	r14
     ce8:	ff 92       	push	r15
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	ec 01       	movw	r28, r24
     cf4:	8b 01       	movw	r16, r22
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
     cf6:	7d 83       	std	Y+5, r23	; 0x05
     cf8:	6c 83       	std	Y+4, r22	; 0x04
	clst = dp->sclust;		/* Table start cluster (0:root) */
     cfa:	ce 80       	ldd	r12, Y+6	; 0x06
     cfc:	df 80       	ldd	r13, Y+7	; 0x07
     cfe:	e8 84       	ldd	r14, Y+8	; 0x08
     d00:	f9 84       	ldd	r15, Y+9	; 0x09
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	c8 16       	cp	r12, r24
     d06:	d1 04       	cpc	r13, r1
     d08:	e1 04       	cpc	r14, r1
     d0a:	f1 04       	cpc	r15, r1
     d0c:	09 f4       	brne	.+2      	; 0xd10 <dir_sdi+0x32>
     d0e:	96 c0       	rjmp	.+300    	; 0xe3c <dir_sdi+0x15e>
     d10:	e8 81       	ld	r30, Y
     d12:	f9 81       	ldd	r31, Y+1	; 0x01
     d14:	86 89       	ldd	r24, Z+22	; 0x16
     d16:	97 89       	ldd	r25, Z+23	; 0x17
     d18:	a0 8d       	ldd	r26, Z+24	; 0x18
     d1a:	b1 8d       	ldd	r27, Z+25	; 0x19
     d1c:	c8 16       	cp	r12, r24
     d1e:	d9 06       	cpc	r13, r25
     d20:	ea 06       	cpc	r14, r26
     d22:	fb 06       	cpc	r15, r27
     d24:	08 f0       	brcs	.+2      	; 0xd28 <dir_sdi+0x4a>
     d26:	8c c0       	rjmp	.+280    	; 0xe40 <dir_sdi+0x162>
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     d28:	c1 14       	cp	r12, r1
     d2a:	d1 04       	cpc	r13, r1
     d2c:	e1 04       	cpc	r14, r1
     d2e:	f1 04       	cpc	r15, r1
     d30:	c1 f4       	brne	.+48     	; 0xd62 <dir_sdi+0x84>
     d32:	80 81       	ld	r24, Z
     d34:	83 30       	cpi	r24, 0x03	; 3
     d36:	41 f4       	brne	.+16     	; 0xd48 <dir_sdi+0x6a>
		clst = dp->fs->dirbase;
     d38:	86 a1       	lds	r24, 0x46
     d3a:	97 a1       	lds	r25, 0x47
     d3c:	a0 a5       	lds	r26, 0x60
     d3e:	b1 a5       	lds	r27, 0x61

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	a1 05       	cpc	r26, r1
     d44:	b1 05       	cpc	r27, r1
     d46:	59 f4       	brne	.+22     	; 0xd5e <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
     d48:	80 85       	ldd	r24, Z+8	; 0x08
     d4a:	91 85       	ldd	r25, Z+9	; 0x09
     d4c:	08 17       	cp	r16, r24
     d4e:	19 07       	cpc	r17, r25
     d50:	08 f0       	brcs	.+2      	; 0xd54 <dir_sdi+0x76>
     d52:	78 c0       	rjmp	.+240    	; 0xe44 <dir_sdi+0x166>
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
     d54:	46 a1       	lds	r20, 0x46
     d56:	57 a1       	lds	r21, 0x47
     d58:	60 a5       	lds	r22, 0x60
     d5a:	71 a5       	lds	r23, 0x61
     d5c:	42 c0       	rjmp	.+132    	; 0xde2 <dir_sdi+0x104>
	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;
     d5e:	6c 01       	movw	r12, r24
     d60:	7d 01       	movw	r14, r26
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
     d62:	82 81       	ldd	r24, Z+2	; 0x02
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	5c 01       	movw	r10, r24
     d68:	aa 0c       	add	r10, r10
     d6a:	bb 1c       	adc	r11, r11
     d6c:	aa 0c       	add	r10, r10
     d6e:	bb 1c       	adc	r11, r11
     d70:	aa 0c       	add	r10, r10
     d72:	bb 1c       	adc	r11, r11
     d74:	aa 0c       	add	r10, r10
     d76:	bb 1c       	adc	r11, r11
		while (idx >= ic) {	/* Follow cluster chain */
     d78:	0a 15       	cp	r16, r10
     d7a:	1b 05       	cpc	r17, r11
     d7c:	50 f1       	brcs	.+84     	; 0xdd2 <dir_sdi+0xf4>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
     d7e:	88 81       	ld	r24, Y
     d80:	99 81       	ldd	r25, Y+1	; 0x01
     d82:	b7 01       	movw	r22, r14
     d84:	a6 01       	movw	r20, r12
     d86:	0e 94 87 05 	call	0xb0e	; 0xb0e <get_fat>
     d8a:	6b 01       	movw	r12, r22
     d8c:	7c 01       	movw	r14, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     d8e:	8f ef       	ldi	r24, 0xFF	; 255
     d90:	c8 16       	cp	r12, r24
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	d8 06       	cpc	r13, r24
     d96:	8f ef       	ldi	r24, 0xFF	; 255
     d98:	e8 06       	cpc	r14, r24
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	f8 06       	cpc	r15, r24
     d9e:	09 f4       	brne	.+2      	; 0xda2 <dir_sdi+0xc4>
     da0:	53 c0       	rjmp	.+166    	; 0xe48 <dir_sdi+0x16a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	c8 16       	cp	r12, r24
     da6:	d1 04       	cpc	r13, r1
     da8:	e1 04       	cpc	r14, r1
     daa:	f1 04       	cpc	r15, r1
     dac:	08 f4       	brcc	.+2      	; 0xdb0 <dir_sdi+0xd2>
     dae:	4e c0       	rjmp	.+156    	; 0xe4c <dir_sdi+0x16e>
     db0:	e8 81       	ld	r30, Y
     db2:	f9 81       	ldd	r31, Y+1	; 0x01
     db4:	86 89       	ldd	r24, Z+22	; 0x16
     db6:	97 89       	ldd	r25, Z+23	; 0x17
     db8:	a0 8d       	ldd	r26, Z+24	; 0x18
     dba:	b1 8d       	ldd	r27, Z+25	; 0x19
     dbc:	c8 16       	cp	r12, r24
     dbe:	d9 06       	cpc	r13, r25
     dc0:	ea 06       	cpc	r14, r26
     dc2:	fb 06       	cpc	r15, r27
     dc4:	08 f0       	brcs	.+2      	; 0xdc8 <dir_sdi+0xea>
     dc6:	44 c0       	rjmp	.+136    	; 0xe50 <dir_sdi+0x172>
				return FR_INT_ERR;
			idx -= ic;
     dc8:	0a 19       	sub	r16, r10
     dca:	1b 09       	sbc	r17, r11
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
     dcc:	0a 15       	cp	r16, r10
     dce:	1b 05       	cpc	r17, r11
     dd0:	b0 f6       	brcc	.-84     	; 0xd7e <dir_sdi+0xa0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
     dd2:	88 81       	ld	r24, Y
     dd4:	99 81       	ldd	r25, Y+1	; 0x01
     dd6:	b7 01       	movw	r22, r14
     dd8:	a6 01       	movw	r20, r12
     dda:	0e 94 51 05 	call	0xaa2	; 0xaa2 <clust2sect>
     dde:	ab 01       	movw	r20, r22
     de0:	bc 01       	movw	r22, r24
	}
	dp->clust = clst;	/* Current cluster# */
     de2:	ca 86       	std	Y+10, r12	; 0x0a
     de4:	db 86       	std	Y+11, r13	; 0x0b
     de6:	ec 86       	std	Y+12, r14	; 0x0c
     de8:	fd 86       	std	Y+13, r15	; 0x0d
	if (!sect) return FR_INT_ERR;
     dea:	41 15       	cp	r20, r1
     dec:	51 05       	cpc	r21, r1
     dee:	61 05       	cpc	r22, r1
     df0:	71 05       	cpc	r23, r1
     df2:	81 f1       	breq	.+96     	; 0xe54 <dir_sdi+0x176>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
     df4:	c8 01       	movw	r24, r16
     df6:	92 95       	swap	r25
     df8:	82 95       	swap	r24
     dfa:	8f 70       	andi	r24, 0x0F	; 15
     dfc:	89 27       	eor	r24, r25
     dfe:	9f 70       	andi	r25, 0x0F	; 15
     e00:	89 27       	eor	r24, r25
     e02:	a0 e0       	ldi	r26, 0x00	; 0
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	84 0f       	add	r24, r20
     e08:	95 1f       	adc	r25, r21
     e0a:	a6 1f       	adc	r26, r22
     e0c:	b7 1f       	adc	r27, r23
     e0e:	8e 87       	std	Y+14, r24	; 0x0e
     e10:	9f 87       	std	Y+15, r25	; 0x0f
     e12:	a8 8b       	std	Y+16, r26	; 0x10
     e14:	b9 8b       	std	Y+17, r27	; 0x11
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
     e16:	88 81       	ld	r24, Y
     e18:	99 81       	ldd	r25, Y+1	; 0x01
     e1a:	c2 96       	adiw	r24, 0x32	; 50
     e1c:	0f 70       	andi	r16, 0x0F	; 15
     e1e:	10 70       	andi	r17, 0x00	; 0
     e20:	00 0f       	add	r16, r16
     e22:	11 1f       	adc	r17, r17
     e24:	02 95       	swap	r16
     e26:	12 95       	swap	r17
     e28:	10 7f       	andi	r17, 0xF0	; 240
     e2a:	10 27       	eor	r17, r16
     e2c:	00 7f       	andi	r16, 0xF0	; 240
     e2e:	10 27       	eor	r17, r16
     e30:	80 0f       	add	r24, r16
     e32:	91 1f       	adc	r25, r17
     e34:	9b 8b       	std	Y+19, r25	; 0x13
     e36:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	0d c0       	rjmp	.+26     	; 0xe56 <dir_sdi+0x178>


	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	0b c0       	rjmp	.+22     	; 0xe56 <dir_sdi+0x178>
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	09 c0       	rjmp	.+18     	; 0xe56 <dir_sdi+0x178>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	07 c0       	rjmp	.+14     	; 0xe56 <dir_sdi+0x178>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	05 c0       	rjmp	.+10     	; 0xe56 <dir_sdi+0x178>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <dir_sdi+0x178>
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <dir_sdi+0x178>
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
	}
	dp->clust = clst;	/* Current cluster# */
	if (!sect) return FR_INT_ERR;
     e54:	82 e0       	ldi	r24, 0x02	; 2
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */

	return FR_OK;
}
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	ff 90       	pop	r15
     e60:	ef 90       	pop	r14
     e62:	df 90       	pop	r13
     e64:	cf 90       	pop	r12
     e66:	bf 90       	pop	r11
     e68:	af 90       	pop	r10
     e6a:	08 95       	ret

00000e6c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
     e6c:	8f 92       	push	r8
     e6e:	9f 92       	push	r9
     e70:	af 92       	push	r10
     e72:	bf 92       	push	r11
     e74:	cf 92       	push	r12
     e76:	df 92       	push	r13
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	ec 01       	movw	r28, r24
     e86:	6a 01       	movw	r12, r20
     e88:	7b 01       	movw	r14, r22
     e8a:	48 01       	movw	r8, r16
     e8c:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
     e8e:	42 30       	cpi	r20, 0x02	; 2
     e90:	51 05       	cpc	r21, r1
     e92:	61 05       	cpc	r22, r1
     e94:	71 05       	cpc	r23, r1
     e96:	08 f4       	brcc	.+2      	; 0xe9a <put_fat+0x2e>
     e98:	cb c0       	rjmp	.+406    	; 0x1030 <put_fat+0x1c4>
     e9a:	8e 89       	ldd	r24, Y+22	; 0x16
     e9c:	9f 89       	ldd	r25, Y+23	; 0x17
     e9e:	a8 8d       	ldd	r26, Y+24	; 0x18
     ea0:	b9 8d       	ldd	r27, Y+25	; 0x19
     ea2:	48 17       	cp	r20, r24
     ea4:	59 07       	cpc	r21, r25
     ea6:	6a 07       	cpc	r22, r26
     ea8:	7b 07       	cpc	r23, r27
     eaa:	08 f0       	brcs	.+2      	; 0xeae <put_fat+0x42>
     eac:	c3 c0       	rjmp	.+390    	; 0x1034 <put_fat+0x1c8>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
     eae:	88 81       	ld	r24, Y
     eb0:	82 30       	cpi	r24, 0x02	; 2
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <put_fat+0x4a>
     eb4:	6c c0       	rjmp	.+216    	; 0xf8e <put_fat+0x122>
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	09 f4       	brne	.+2      	; 0xebc <put_fat+0x50>
     eba:	87 c0       	rjmp	.+270    	; 0xfca <put_fat+0x15e>
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	09 f0       	breq	.+2      	; 0xec2 <put_fat+0x56>
     ec0:	bb c0       	rjmp	.+374    	; 0x1038 <put_fat+0x1cc>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
     ec2:	9a 01       	movw	r18, r20
     ec4:	36 95       	lsr	r19
     ec6:	27 95       	ror	r18
     ec8:	89 01       	movw	r16, r18
     eca:	04 0f       	add	r16, r20
     ecc:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
     ece:	a8 01       	movw	r20, r16
     ed0:	45 2f       	mov	r20, r21
     ed2:	55 27       	eor	r21, r21
     ed4:	46 95       	lsr	r20
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	8a a1       	lds	r24, 0x4a
     edc:	9b a1       	lds	r25, 0x4b
     ede:	ac a1       	lds	r26, 0x4c
     ee0:	bd a1       	lds	r27, 0x4d
     ee2:	48 0f       	add	r20, r24
     ee4:	59 1f       	adc	r21, r25
     ee6:	6a 1f       	adc	r22, r26
     ee8:	7b 1f       	adc	r23, r27
     eea:	ce 01       	movw	r24, r28
     eec:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <move_window>
			if (res != FR_OK) break;
     ef0:	88 23       	and	r24, r24
     ef2:	09 f0       	breq	.+2      	; 0xef6 <put_fat+0x8a>
     ef4:	a2 c0       	rjmp	.+324    	; 0x103a <put_fat+0x1ce>
			p = &fs->win[bc++ % SS(fs)];
     ef6:	c8 01       	movw	r24, r16
     ef8:	91 70       	andi	r25, 0x01	; 1
     efa:	0f 5f       	subi	r16, 0xFF	; 255
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
     efe:	e1 e0       	ldi	r30, 0x01	; 1
     f00:	ce 22       	and	r12, r30
     f02:	dd 24       	eor	r13, r13
     f04:	c1 14       	cp	r12, r1
     f06:	d1 04       	cpc	r13, r1
     f08:	51 f0       	breq	.+20     	; 0xf1e <put_fat+0xb2>
     f0a:	fe 01       	movw	r30, r28
     f0c:	e8 0f       	add	r30, r24
     f0e:	f9 1f       	adc	r31, r25
     f10:	22 a9       	sts	0x42, r18
     f12:	2f 70       	andi	r18, 0x0F	; 15
     f14:	38 2d       	mov	r19, r8
     f16:	32 95       	swap	r19
     f18:	30 7f       	andi	r19, 0xF0	; 240
     f1a:	23 2b       	or	r18, r19
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <put_fat+0xb4>
     f1e:	28 2d       	mov	r18, r8
     f20:	fe 01       	movw	r30, r28
     f22:	e8 0f       	add	r30, r24
     f24:	f9 1f       	adc	r31, r25
     f26:	22 ab       	sts	0x52, r18
			fs->wflag = 1;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
     f2c:	a8 01       	movw	r20, r16
     f2e:	45 2f       	mov	r20, r21
     f30:	55 27       	eor	r21, r21
     f32:	46 95       	lsr	r20
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	8a a1       	lds	r24, 0x4a
     f3a:	9b a1       	lds	r25, 0x4b
     f3c:	ac a1       	lds	r26, 0x4c
     f3e:	bd a1       	lds	r27, 0x4d
     f40:	48 0f       	add	r20, r24
     f42:	59 1f       	adc	r21, r25
     f44:	6a 1f       	adc	r22, r26
     f46:	7b 1f       	adc	r23, r27
     f48:	ce 01       	movw	r24, r28
     f4a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <move_window>
			if (res != FR_OK) break;
     f4e:	88 23       	and	r24, r24
     f50:	09 f0       	breq	.+2      	; 0xf54 <put_fat+0xe8>
     f52:	73 c0       	rjmp	.+230    	; 0x103a <put_fat+0x1ce>
			p = &fs->win[bc % SS(fs)];
     f54:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
     f56:	c1 14       	cp	r12, r1
     f58:	d1 04       	cpc	r13, r1
     f5a:	49 f0       	breq	.+18     	; 0xf6e <put_fat+0x102>
     f5c:	68 94       	set
     f5e:	13 f8       	bld	r1, 3
     f60:	b6 94       	lsr	r11
     f62:	a7 94       	ror	r10
     f64:	97 94       	ror	r9
     f66:	87 94       	ror	r8
     f68:	16 94       	lsr	r1
     f6a:	d1 f7       	brne	.-12     	; 0xf60 <put_fat+0xf4>
     f6c:	09 c0       	rjmp	.+18     	; 0xf80 <put_fat+0x114>
     f6e:	fe 01       	movw	r30, r28
     f70:	e0 0f       	add	r30, r16
     f72:	f1 1f       	adc	r31, r17
     f74:	22 a9       	sts	0x42, r18
     f76:	20 7f       	andi	r18, 0xF0	; 240
     f78:	99 2d       	mov	r25, r9
     f7a:	9f 70       	andi	r25, 0x0F	; 15
     f7c:	82 2e       	mov	r8, r18
     f7e:	89 2a       	or	r8, r25
     f80:	0c 0f       	add	r16, r28
     f82:	1d 1f       	adc	r17, r29
     f84:	f8 01       	movw	r30, r16
     f86:	82 aa       	sts	0x92, r24
			fs->wflag = 1;
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	9c 83       	std	Y+4, r25	; 0x04
			break;
     f8c:	56 c0       	rjmp	.+172    	; 0x103a <put_fat+0x1ce>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
     f8e:	45 2f       	mov	r20, r21
     f90:	56 2f       	mov	r21, r22
     f92:	67 2f       	mov	r22, r23
     f94:	77 27       	eor	r23, r23
     f96:	8a a1       	lds	r24, 0x4a
     f98:	9b a1       	lds	r25, 0x4b
     f9a:	ac a1       	lds	r26, 0x4c
     f9c:	bd a1       	lds	r27, 0x4d
     f9e:	48 0f       	add	r20, r24
     fa0:	59 1f       	adc	r21, r25
     fa2:	6a 1f       	adc	r22, r26
     fa4:	7b 1f       	adc	r23, r27
     fa6:	ce 01       	movw	r24, r28
     fa8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <move_window>
			if (res != FR_OK) break;
     fac:	88 23       	and	r24, r24
     fae:	09 f0       	breq	.+2      	; 0xfb2 <put_fat+0x146>
     fb0:	44 c0       	rjmp	.+136    	; 0x103a <put_fat+0x1ce>
			p = &fs->win[clst * 2 % SS(fs)];
     fb2:	f6 01       	movw	r30, r12
     fb4:	ee 0f       	add	r30, r30
     fb6:	ff 1f       	adc	r31, r31
     fb8:	f1 70       	andi	r31, 0x01	; 1
     fba:	f2 96       	adiw	r30, 0x32	; 50
			ST_WORD(p, (WORD)val);
     fbc:	ec 0f       	add	r30, r28
     fbe:	fd 1f       	adc	r31, r29
     fc0:	91 82       	std	Z+1, r9	; 0x01
     fc2:	80 82       	st	Z, r8
			fs->wflag = 1;
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	9c 83       	std	Y+4, r25	; 0x04
			break;
     fc8:	38 c0       	rjmp	.+112    	; 0x103a <put_fat+0x1ce>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
     fca:	68 94       	set
     fcc:	16 f8       	bld	r1, 6
     fce:	76 95       	lsr	r23
     fd0:	67 95       	ror	r22
     fd2:	57 95       	ror	r21
     fd4:	47 95       	ror	r20
     fd6:	16 94       	lsr	r1
     fd8:	d1 f7       	brne	.-12     	; 0xfce <put_fat+0x162>
     fda:	8a a1       	lds	r24, 0x4a
     fdc:	9b a1       	lds	r25, 0x4b
     fde:	ac a1       	lds	r26, 0x4c
     fe0:	bd a1       	lds	r27, 0x4d
     fe2:	48 0f       	add	r20, r24
     fe4:	59 1f       	adc	r21, r25
     fe6:	6a 1f       	adc	r22, r26
     fe8:	7b 1f       	adc	r23, r27
     fea:	ce 01       	movw	r24, r28
     fec:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <move_window>
			if (res != FR_OK) break;
     ff0:	88 23       	and	r24, r24
     ff2:	19 f5       	brne	.+70     	; 0x103a <put_fat+0x1ce>
			p = &fs->win[clst * 4 % SS(fs)];
     ff4:	96 01       	movw	r18, r12
     ff6:	22 0f       	add	r18, r18
     ff8:	33 1f       	adc	r19, r19
     ffa:	22 0f       	add	r18, r18
     ffc:	33 1f       	adc	r19, r19
     ffe:	31 70       	andi	r19, 0x01	; 1
    1000:	2e 5c       	subi	r18, 0xCE	; 206
    1002:	3f 4f       	sbci	r19, 0xFF	; 255
    1004:	fe 01       	movw	r30, r28
    1006:	e2 0f       	add	r30, r18
    1008:	f3 1f       	adc	r31, r19
			val |= LD_DWORD(p) & 0xF0000000;
    100a:	40 81       	ld	r20, Z
    100c:	51 81       	ldd	r21, Z+1	; 0x01
    100e:	62 81       	ldd	r22, Z+2	; 0x02
    1010:	73 81       	ldd	r23, Z+3	; 0x03
    1012:	40 70       	andi	r20, 0x00	; 0
    1014:	50 70       	andi	r21, 0x00	; 0
    1016:	60 70       	andi	r22, 0x00	; 0
    1018:	70 7f       	andi	r23, 0xF0	; 240
    101a:	48 29       	or	r20, r8
    101c:	59 29       	or	r21, r9
    101e:	6a 29       	or	r22, r10
    1020:	7b 29       	or	r23, r11
			ST_DWORD(p, val);
    1022:	40 83       	st	Z, r20
    1024:	51 83       	std	Z+1, r21	; 0x01
    1026:	62 83       	std	Z+2, r22	; 0x02
    1028:	73 83       	std	Z+3, r23	; 0x03
			fs->wflag = 1;
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	9c 83       	std	Y+4, r25	; 0x04
			break;
    102e:	05 c0       	rjmp	.+10     	; 0x103a <put_fat+0x1ce>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1030:	82 e0       	ldi	r24, 0x02	; 2
    1032:	03 c0       	rjmp	.+6      	; 0x103a <put_fat+0x1ce>
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	01 c0       	rjmp	.+2      	; 0x103a <put_fat+0x1ce>
			ST_DWORD(p, val);
			fs->wflag = 1;
			break;

		default :
			res = FR_INT_ERR;
    1038:	82 e0       	ldi	r24, 0x02	; 2
		}
	}

	return res;
}
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	ff 90       	pop	r15
    1044:	ef 90       	pop	r14
    1046:	df 90       	pop	r13
    1048:	cf 90       	pop	r12
    104a:	bf 90       	pop	r11
    104c:	af 90       	pop	r10
    104e:	9f 90       	pop	r9
    1050:	8f 90       	pop	r8
    1052:	08 95       	ret

00001054 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1054:	2f 92       	push	r2
    1056:	3f 92       	push	r3
    1058:	4f 92       	push	r4
    105a:	5f 92       	push	r5
    105c:	6f 92       	push	r6
    105e:	7f 92       	push	r7
    1060:	8f 92       	push	r8
    1062:	9f 92       	push	r9
    1064:	af 92       	push	r10
    1066:	bf 92       	push	r11
    1068:	cf 92       	push	r12
    106a:	df 92       	push	r13
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	00 d0       	rcall	.+0      	; 0x107a <create_chain+0x26>
    107a:	00 d0       	rcall	.+0      	; 0x107c <create_chain+0x28>
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	1c 01       	movw	r2, r24
    1082:	49 83       	std	Y+1, r20	; 0x01
    1084:	5a 83       	std	Y+2, r21	; 0x02
    1086:	6b 83       	std	Y+3, r22	; 0x03
    1088:	7c 83       	std	Y+4, r23	; 0x04
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    108a:	41 15       	cp	r20, r1
    108c:	51 05       	cpc	r21, r1
    108e:	61 05       	cpc	r22, r1
    1090:	71 05       	cpc	r23, r1
    1092:	c1 f4       	brne	.+48     	; 0x10c4 <create_chain+0x70>
		scl = fs->last_clust;			/* Get suggested start point */
    1094:	dc 01       	movw	r26, r24
    1096:	1a 96       	adiw	r26, 0x0a	; 10
    1098:	8d 90       	ld	r8, X+
    109a:	9d 90       	ld	r9, X+
    109c:	ad 90       	ld	r10, X+
    109e:	bc 90       	ld	r11, X
    10a0:	1d 97       	sbiw	r26, 0x0d	; 13
		if (!scl || scl >= fs->n_fatent) scl = 1;
    10a2:	81 14       	cp	r8, r1
    10a4:	91 04       	cpc	r9, r1
    10a6:	a1 04       	cpc	r10, r1
    10a8:	b1 04       	cpc	r11, r1
    10aa:	99 f1       	breq	.+102    	; 0x1112 <create_chain+0xbe>
    10ac:	56 96       	adiw	r26, 0x16	; 22
    10ae:	8d 91       	ld	r24, X+
    10b0:	9d 91       	ld	r25, X+
    10b2:	0d 90       	ld	r0, X+
    10b4:	bc 91       	ld	r27, X
    10b6:	a0 2d       	mov	r26, r0
    10b8:	88 16       	cp	r8, r24
    10ba:	99 06       	cpc	r9, r25
    10bc:	aa 06       	cpc	r10, r26
    10be:	bb 06       	cpc	r11, r27
    10c0:	68 f5       	brcc	.+90     	; 0x111c <create_chain+0xc8>
    10c2:	30 c0       	rjmp	.+96     	; 0x1124 <create_chain+0xd0>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    10c4:	49 81       	ldd	r20, Y+1	; 0x01
    10c6:	5a 81       	ldd	r21, Y+2	; 0x02
    10c8:	6b 81       	ldd	r22, Y+3	; 0x03
    10ca:	7c 81       	ldd	r23, Y+4	; 0x04
    10cc:	0e 94 87 05 	call	0xb0e	; 0xb0e <get_fat>
    10d0:	8b 01       	movw	r16, r22
    10d2:	9c 01       	movw	r18, r24
		if (cs < 2) return 1;			/* Invalid value */
    10d4:	62 30       	cpi	r22, 0x02	; 2
    10d6:	71 05       	cpc	r23, r1
    10d8:	81 05       	cpc	r24, r1
    10da:	91 05       	cpc	r25, r1
    10dc:	08 f4       	brcc	.+2      	; 0x10e0 <create_chain+0x8c>
    10de:	b8 c0       	rjmp	.+368    	; 0x1250 <create_chain+0x1fc>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    10e0:	6f 3f       	cpi	r22, 0xFF	; 255
    10e2:	bf ef       	ldi	r27, 0xFF	; 255
    10e4:	7b 07       	cpc	r23, r27
    10e6:	bf ef       	ldi	r27, 0xFF	; 255
    10e8:	8b 07       	cpc	r24, r27
    10ea:	bf ef       	ldi	r27, 0xFF	; 255
    10ec:	9b 07       	cpc	r25, r27
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <create_chain+0x9e>
    10f0:	c3 c0       	rjmp	.+390    	; 0x1278 <create_chain+0x224>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    10f2:	f1 01       	movw	r30, r2
    10f4:	86 89       	ldd	r24, Z+22	; 0x16
    10f6:	97 89       	ldd	r25, Z+23	; 0x17
    10f8:	a0 8d       	ldd	r26, Z+24	; 0x18
    10fa:	b1 8d       	ldd	r27, Z+25	; 0x19
    10fc:	08 17       	cp	r16, r24
    10fe:	19 07       	cpc	r17, r25
    1100:	2a 07       	cpc	r18, r26
    1102:	3b 07       	cpc	r19, r27
    1104:	08 f4       	brcc	.+2      	; 0x1108 <create_chain+0xb4>
    1106:	b8 c0       	rjmp	.+368    	; 0x1278 <create_chain+0x224>
		scl = clst;
    1108:	89 80       	ldd	r8, Y+1	; 0x01
    110a:	9a 80       	ldd	r9, Y+2	; 0x02
    110c:	ab 80       	ldd	r10, Y+3	; 0x03
    110e:	bc 80       	ldd	r11, Y+4	; 0x04
    1110:	09 c0       	rjmp	.+18     	; 0x1124 <create_chain+0xd0>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1112:	88 24       	eor	r8, r8
    1114:	99 24       	eor	r9, r9
    1116:	54 01       	movw	r10, r8
    1118:	83 94       	inc	r8
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <create_chain+0xd0>
    111c:	88 24       	eor	r8, r8
    111e:	99 24       	eor	r9, r9
    1120:	54 01       	movw	r10, r8
    1122:	83 94       	inc	r8
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
    1124:	75 01       	movw	r14, r10
    1126:	64 01       	movw	r12, r8
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
    1128:	44 24       	eor	r4, r4
    112a:	55 24       	eor	r5, r5
    112c:	32 01       	movw	r6, r4
    112e:	68 94       	set
    1130:	41 f8       	bld	r4, 1
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1132:	08 94       	sec
    1134:	c1 1c       	adc	r12, r1
    1136:	d1 1c       	adc	r13, r1
    1138:	e1 1c       	adc	r14, r1
    113a:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
    113c:	f1 01       	movw	r30, r2
    113e:	86 89       	ldd	r24, Z+22	; 0x16
    1140:	97 89       	ldd	r25, Z+23	; 0x17
    1142:	a0 8d       	ldd	r26, Z+24	; 0x18
    1144:	b1 8d       	ldd	r27, Z+25	; 0x19
    1146:	c8 16       	cp	r12, r24
    1148:	d9 06       	cpc	r13, r25
    114a:	ea 06       	cpc	r14, r26
    114c:	fb 06       	cpc	r15, r27
    114e:	48 f0       	brcs	.+18     	; 0x1162 <create_chain+0x10e>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1150:	f2 e0       	ldi	r31, 0x02	; 2
    1152:	8f 16       	cp	r8, r31
    1154:	91 04       	cpc	r9, r1
    1156:	a1 04       	cpc	r10, r1
    1158:	b1 04       	cpc	r11, r1
    115a:	08 f4       	brcc	.+2      	; 0x115e <create_chain+0x10a>
    115c:	7e c0       	rjmp	.+252    	; 0x125a <create_chain+0x206>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
    115e:	73 01       	movw	r14, r6
    1160:	62 01       	movw	r12, r4
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1162:	c1 01       	movw	r24, r2
    1164:	b7 01       	movw	r22, r14
    1166:	a6 01       	movw	r20, r12
    1168:	0e 94 87 05 	call	0xb0e	; 0xb0e <get_fat>
    116c:	8b 01       	movw	r16, r22
    116e:	9c 01       	movw	r18, r24
		if (cs == 0) break;				/* Found a free cluster */
    1170:	61 15       	cp	r22, r1
    1172:	71 05       	cpc	r23, r1
    1174:	81 05       	cpc	r24, r1
    1176:	91 05       	cpc	r25, r1
    1178:	a9 f0       	breq	.+42     	; 0x11a4 <create_chain+0x150>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    117a:	0f 3f       	cpi	r16, 0xFF	; 255
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	18 07       	cpc	r17, r24
    1180:	8f ef       	ldi	r24, 0xFF	; 255
    1182:	28 07       	cpc	r18, r24
    1184:	8f ef       	ldi	r24, 0xFF	; 255
    1186:	38 07       	cpc	r19, r24
    1188:	09 f4       	brne	.+2      	; 0x118c <create_chain+0x138>
    118a:	76 c0       	rjmp	.+236    	; 0x1278 <create_chain+0x224>
    118c:	01 30       	cpi	r16, 0x01	; 1
    118e:	11 05       	cpc	r17, r1
    1190:	21 05       	cpc	r18, r1
    1192:	31 05       	cpc	r19, r1
    1194:	09 f4       	brne	.+2      	; 0x1198 <create_chain+0x144>
    1196:	70 c0       	rjmp	.+224    	; 0x1278 <create_chain+0x224>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1198:	c8 14       	cp	r12, r8
    119a:	d9 04       	cpc	r13, r9
    119c:	ea 04       	cpc	r14, r10
    119e:	fb 04       	cpc	r15, r11
    11a0:	41 f6       	brne	.-112    	; 0x1132 <create_chain+0xde>
    11a2:	5f c0       	rjmp	.+190    	; 0x1262 <create_chain+0x20e>
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
    11a4:	8c 2c       	mov	r8, r12
    11a6:	4d 2c       	mov	r4, r13
    11a8:	be 2c       	mov	r11, r14
    11aa:	af 2c       	mov	r10, r15
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    11ac:	c1 01       	movw	r24, r2
    11ae:	4c 2d       	mov	r20, r12
    11b0:	5d 2d       	mov	r21, r13
    11b2:	6e 2d       	mov	r22, r14
    11b4:	7f 2d       	mov	r23, r15
    11b6:	0f ef       	ldi	r16, 0xFF	; 255
    11b8:	1f ef       	ldi	r17, 0xFF	; 255
    11ba:	2f ef       	ldi	r18, 0xFF	; 255
    11bc:	3f e0       	ldi	r19, 0x0F	; 15
    11be:	0e 94 36 07 	call	0xe6c	; 0xe6c <put_fat>
	if (res == FR_OK && clst != 0) {
    11c2:	88 23       	and	r24, r24
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <create_chain+0x174>
    11c6:	3e c0       	rjmp	.+124    	; 0x1244 <create_chain+0x1f0>
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	9a 81       	ldd	r25, Y+2	; 0x02
    11cc:	ab 81       	ldd	r26, Y+3	; 0x03
    11ce:	bc 81       	ldd	r27, Y+4	; 0x04
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	a1 05       	cpc	r26, r1
    11d4:	b1 05       	cpc	r27, r1
    11d6:	69 f0       	breq	.+26     	; 0x11f2 <create_chain+0x19e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    11d8:	c1 01       	movw	r24, r2
    11da:	49 81       	ldd	r20, Y+1	; 0x01
    11dc:	5a 81       	ldd	r21, Y+2	; 0x02
    11de:	6b 81       	ldd	r22, Y+3	; 0x03
    11e0:	7c 81       	ldd	r23, Y+4	; 0x04
    11e2:	0c 2d       	mov	r16, r12
    11e4:	1d 2d       	mov	r17, r13
    11e6:	2e 2d       	mov	r18, r14
    11e8:	3f 2d       	mov	r19, r15
    11ea:	0e 94 36 07 	call	0xe6c	; 0xe6c <put_fat>
	}
	if (res == FR_OK) {
    11ee:	88 23       	and	r24, r24
    11f0:	49 f5       	brne	.+82     	; 0x1244 <create_chain+0x1f0>
		fs->last_clust = ncl;			/* Update FSINFO */
    11f2:	d1 01       	movw	r26, r2
    11f4:	1a 96       	adiw	r26, 0x0a	; 10
    11f6:	8c 92       	st	X, r8
    11f8:	1a 97       	sbiw	r26, 0x0a	; 10
    11fa:	1b 96       	adiw	r26, 0x0b	; 11
    11fc:	4c 92       	st	X, r4
    11fe:	1b 97       	sbiw	r26, 0x0b	; 11
    1200:	1c 96       	adiw	r26, 0x0c	; 12
    1202:	bc 92       	st	X, r11
    1204:	1c 97       	sbiw	r26, 0x0c	; 12
    1206:	1d 96       	adiw	r26, 0x0d	; 13
    1208:	ac 92       	st	X, r10
    120a:	1d 97       	sbiw	r26, 0x0d	; 13
		if (fs->free_clust != 0xFFFFFFFF) {
    120c:	1e 96       	adiw	r26, 0x0e	; 14
    120e:	8d 91       	ld	r24, X+
    1210:	9d 91       	ld	r25, X+
    1212:	0d 90       	ld	r0, X+
    1214:	bc 91       	ld	r27, X
    1216:	a0 2d       	mov	r26, r0
    1218:	8f 3f       	cpi	r24, 0xFF	; 255
    121a:	ef ef       	ldi	r30, 0xFF	; 255
    121c:	9e 07       	cpc	r25, r30
    121e:	ef ef       	ldi	r30, 0xFF	; 255
    1220:	ae 07       	cpc	r26, r30
    1222:	ef ef       	ldi	r30, 0xFF	; 255
    1224:	be 07       	cpc	r27, r30
    1226:	09 f1       	breq	.+66     	; 0x126a <create_chain+0x216>
			fs->free_clust--;
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	a1 09       	sbc	r26, r1
    122c:	b1 09       	sbc	r27, r1
    122e:	f1 01       	movw	r30, r2
    1230:	86 87       	std	Z+14, r24	; 0x0e
    1232:	97 87       	std	Z+15, r25	; 0x0f
    1234:	a0 8b       	std	Z+16, r26	; 0x10
    1236:	b1 8b       	std	Z+17, r27	; 0x11
			fs->fsi_flag |= 1;
    1238:	85 81       	ldd	r24, Z+5	; 0x05
    123a:	81 60       	ori	r24, 0x01	; 1
    123c:	85 83       	std	Z+5, r24	; 0x05
    123e:	97 01       	movw	r18, r14
    1240:	86 01       	movw	r16, r12
    1242:	1a c0       	rjmp	.+52     	; 0x1278 <create_chain+0x224>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	a1 f4       	brne	.+40     	; 0x1270 <create_chain+0x21c>
    1248:	0f ef       	ldi	r16, 0xFF	; 255
    124a:	1f ef       	ldi	r17, 0xFF	; 255
    124c:	98 01       	movw	r18, r16
    124e:	14 c0       	rjmp	.+40     	; 0x1278 <create_chain+0x224>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* Invalid value */
    1250:	01 e0       	ldi	r16, 0x01	; 1
    1252:	10 e0       	ldi	r17, 0x00	; 0
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	0f c0       	rjmp	.+30     	; 0x1278 <create_chain+0x224>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    125a:	00 e0       	ldi	r16, 0x00	; 0
    125c:	10 e0       	ldi	r17, 0x00	; 0
    125e:	98 01       	movw	r18, r16
    1260:	0b c0       	rjmp	.+22     	; 0x1278 <create_chain+0x224>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1262:	00 e0       	ldi	r16, 0x00	; 0
    1264:	10 e0       	ldi	r17, 0x00	; 0
    1266:	98 01       	movw	r18, r16
    1268:	07 c0       	rjmp	.+14     	; 0x1278 <create_chain+0x224>
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
    126a:	97 01       	movw	r18, r14
    126c:	86 01       	movw	r16, r12
    126e:	04 c0       	rjmp	.+8      	; 0x1278 <create_chain+0x224>
			fs->free_clust--;
			fs->fsi_flag |= 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1270:	01 e0       	ldi	r16, 0x01	; 1
    1272:	10 e0       	ldi	r17, 0x00	; 0
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
    1278:	60 2f       	mov	r22, r16
    127a:	71 2f       	mov	r23, r17
    127c:	82 2f       	mov	r24, r18
    127e:	93 2f       	mov	r25, r19
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	df 90       	pop	r13
    1296:	cf 90       	pop	r12
    1298:	bf 90       	pop	r11
    129a:	af 90       	pop	r10
    129c:	9f 90       	pop	r9
    129e:	8f 90       	pop	r8
    12a0:	7f 90       	pop	r7
    12a2:	6f 90       	pop	r6
    12a4:	5f 90       	pop	r5
    12a6:	4f 90       	pop	r4
    12a8:	3f 90       	pop	r3
    12aa:	2f 90       	pop	r2
    12ac:	08 95       	ret

000012ae <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    12ae:	8f 92       	push	r8
    12b0:	9f 92       	push	r9
    12b2:	af 92       	push	r10
    12b4:	bf 92       	push	r11
    12b6:	cf 92       	push	r12
    12b8:	df 92       	push	r13
    12ba:	ef 92       	push	r14
    12bc:	ff 92       	push	r15
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	8c 01       	movw	r16, r24
    12c8:	eb 01       	movw	r28, r22
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
    12ca:	dc 01       	movw	r26, r24
    12cc:	14 96       	adiw	r26, 0x04	; 4
    12ce:	ed 90       	ld	r14, X+
    12d0:	fc 90       	ld	r15, X
    12d2:	15 97       	sbiw	r26, 0x05	; 5
    12d4:	08 94       	sec
    12d6:	e1 1c       	adc	r14, r1
    12d8:	f1 1c       	adc	r15, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
    12da:	e1 14       	cp	r14, r1
    12dc:	f1 04       	cpc	r15, r1
    12de:	09 f4       	brne	.+2      	; 0x12e2 <dir_next+0x34>
    12e0:	09 c1       	rjmp	.+530    	; 0x14f4 <dir_next+0x246>
    12e2:	1e 96       	adiw	r26, 0x0e	; 14
    12e4:	8d 91       	ld	r24, X+
    12e6:	9d 91       	ld	r25, X+
    12e8:	0d 90       	ld	r0, X+
    12ea:	bc 91       	ld	r27, X
    12ec:	a0 2d       	mov	r26, r0
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	a1 05       	cpc	r26, r1
    12f2:	b1 05       	cpc	r27, r1
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <dir_next+0x4a>
    12f6:	00 c1       	rjmp	.+512    	; 0x14f8 <dir_next+0x24a>
		return FR_NO_FILE;

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
    12f8:	0f 2e       	mov	r0, r31
    12fa:	ff e0       	ldi	r31, 0x0F	; 15
    12fc:	cf 2e       	mov	r12, r31
    12fe:	dd 24       	eor	r13, r13
    1300:	f0 2d       	mov	r31, r0
    1302:	ce 20       	and	r12, r14
    1304:	df 20       	and	r13, r15
    1306:	c1 14       	cp	r12, r1
    1308:	d1 04       	cpc	r13, r1
    130a:	09 f0       	breq	.+2      	; 0x130e <dir_next+0x60>
    130c:	d8 c0       	rjmp	.+432    	; 0x14be <dir_next+0x210>
		dp->sect++;					/* Next sector */
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	a1 1d       	adc	r26, r1
    1312:	b1 1d       	adc	r27, r1
    1314:	f8 01       	movw	r30, r16
    1316:	86 87       	std	Z+14, r24	; 0x0e
    1318:	97 87       	std	Z+15, r25	; 0x0f
    131a:	a0 8b       	std	Z+16, r26	; 0x10
    131c:	b1 8b       	std	Z+17, r27	; 0x11

		if (!dp->clust) {		/* Static table */
    131e:	42 85       	ldd	r20, Z+10	; 0x0a
    1320:	53 85       	ldd	r21, Z+11	; 0x0b
    1322:	64 85       	ldd	r22, Z+12	; 0x0c
    1324:	75 85       	ldd	r23, Z+13	; 0x0d
    1326:	41 15       	cp	r20, r1
    1328:	51 05       	cpc	r21, r1
    132a:	61 05       	cpc	r22, r1
    132c:	71 05       	cpc	r23, r1
    132e:	51 f4       	brne	.+20     	; 0x1344 <dir_next+0x96>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
    1330:	01 90       	ld	r0, Z+
    1332:	f0 81       	ld	r31, Z
    1334:	e0 2d       	mov	r30, r0
    1336:	80 85       	ldd	r24, Z+8	; 0x08
    1338:	91 85       	ldd	r25, Z+9	; 0x09
    133a:	e8 16       	cp	r14, r24
    133c:	f9 06       	cpc	r15, r25
    133e:	08 f0       	brcs	.+2      	; 0x1342 <dir_next+0x94>
    1340:	dd c0       	rjmp	.+442    	; 0x14fc <dir_next+0x24e>
    1342:	bd c0       	rjmp	.+378    	; 0x14be <dir_next+0x210>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1344:	01 90       	ld	r0, Z+
    1346:	f0 81       	ld	r31, Z
    1348:	e0 2d       	mov	r30, r0
    134a:	82 81       	ldd	r24, Z+2	; 0x02
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	01 97       	sbiw	r24, 0x01	; 1
    1350:	97 01       	movw	r18, r14
    1352:	32 95       	swap	r19
    1354:	22 95       	swap	r18
    1356:	2f 70       	andi	r18, 0x0F	; 15
    1358:	23 27       	eor	r18, r19
    135a:	3f 70       	andi	r19, 0x0F	; 15
    135c:	23 27       	eor	r18, r19
    135e:	82 23       	and	r24, r18
    1360:	93 23       	and	r25, r19
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	09 f0       	breq	.+2      	; 0x1368 <dir_next+0xba>
    1366:	ab c0       	rjmp	.+342    	; 0x14be <dir_next+0x210>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
    1368:	cf 01       	movw	r24, r30
    136a:	0e 94 87 05 	call	0xb0e	; 0xb0e <get_fat>
    136e:	4b 01       	movw	r8, r22
    1370:	5c 01       	movw	r10, r24
				if (clst <= 1) return FR_INT_ERR;
    1372:	62 30       	cpi	r22, 0x02	; 2
    1374:	71 05       	cpc	r23, r1
    1376:	81 05       	cpc	r24, r1
    1378:	91 05       	cpc	r25, r1
    137a:	08 f4       	brcc	.+2      	; 0x137e <dir_next+0xd0>
    137c:	c1 c0       	rjmp	.+386    	; 0x1500 <dir_next+0x252>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    137e:	6f 3f       	cpi	r22, 0xFF	; 255
    1380:	ef ef       	ldi	r30, 0xFF	; 255
    1382:	7e 07       	cpc	r23, r30
    1384:	ef ef       	ldi	r30, 0xFF	; 255
    1386:	8e 07       	cpc	r24, r30
    1388:	ef ef       	ldi	r30, 0xFF	; 255
    138a:	9e 07       	cpc	r25, r30
    138c:	09 f4       	brne	.+2      	; 0x1390 <dir_next+0xe2>
    138e:	ba c0       	rjmp	.+372    	; 0x1504 <dir_next+0x256>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
    1390:	d8 01       	movw	r26, r16
    1392:	ed 91       	ld	r30, X+
    1394:	fc 91       	ld	r31, X
    1396:	86 89       	ldd	r24, Z+22	; 0x16
    1398:	97 89       	ldd	r25, Z+23	; 0x17
    139a:	a0 8d       	ldd	r26, Z+24	; 0x18
    139c:	b1 8d       	ldd	r27, Z+25	; 0x19
    139e:	88 16       	cp	r8, r24
    13a0:	99 06       	cpc	r9, r25
    13a2:	aa 06       	cpc	r10, r26
    13a4:	bb 06       	cpc	r11, r27
    13a6:	08 f4       	brcc	.+2      	; 0x13aa <dir_next+0xfc>
    13a8:	78 c0       	rjmp	.+240    	; 0x149a <dir_next+0x1ec>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    13aa:	20 97       	sbiw	r28, 0x00	; 0
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <dir_next+0x102>
    13ae:	ac c0       	rjmp	.+344    	; 0x1508 <dir_next+0x25a>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
    13b0:	d8 01       	movw	r26, r16
    13b2:	1a 96       	adiw	r26, 0x0a	; 10
    13b4:	4d 91       	ld	r20, X+
    13b6:	5d 91       	ld	r21, X+
    13b8:	6d 91       	ld	r22, X+
    13ba:	7c 91       	ld	r23, X
    13bc:	1d 97       	sbiw	r26, 0x0d	; 13
    13be:	cf 01       	movw	r24, r30
    13c0:	0e 94 2a 08 	call	0x1054	; 0x1054 <create_chain>
    13c4:	4b 01       	movw	r8, r22
    13c6:	5c 01       	movw	r10, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    13c8:	61 15       	cp	r22, r1
    13ca:	71 05       	cpc	r23, r1
    13cc:	81 05       	cpc	r24, r1
    13ce:	91 05       	cpc	r25, r1
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <dir_next+0x126>
    13d2:	9c c0       	rjmp	.+312    	; 0x150c <dir_next+0x25e>
					if (clst == 1) return FR_INT_ERR;
    13d4:	61 30       	cpi	r22, 0x01	; 1
    13d6:	71 05       	cpc	r23, r1
    13d8:	81 05       	cpc	r24, r1
    13da:	91 05       	cpc	r25, r1
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <dir_next+0x132>
    13de:	98 c0       	rjmp	.+304    	; 0x1510 <dir_next+0x262>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    13e0:	6f 3f       	cpi	r22, 0xFF	; 255
    13e2:	ef ef       	ldi	r30, 0xFF	; 255
    13e4:	7e 07       	cpc	r23, r30
    13e6:	ef ef       	ldi	r30, 0xFF	; 255
    13e8:	8e 07       	cpc	r24, r30
    13ea:	ef ef       	ldi	r30, 0xFF	; 255
    13ec:	9e 07       	cpc	r25, r30
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <dir_next+0x144>
    13f0:	91 c0       	rjmp	.+290    	; 0x1514 <dir_next+0x266>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    13f2:	d8 01       	movw	r26, r16
    13f4:	8d 91       	ld	r24, X+
    13f6:	9c 91       	ld	r25, X
    13f8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sync_window>
    13fc:	88 23       	and	r24, r24
    13fe:	09 f0       	breq	.+2      	; 0x1402 <dir_next+0x154>
    1400:	8b c0       	rjmp	.+278    	; 0x1518 <dir_next+0x26a>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
    1402:	f8 01       	movw	r30, r16
    1404:	80 81       	ld	r24, Z
    1406:	91 81       	ldd	r25, Z+1	; 0x01
    1408:	c2 96       	adiw	r24, 0x32	; 50
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	40 e0       	ldi	r20, 0x00	; 0
    1410:	52 e0       	ldi	r21, 0x02	; 2
    1412:	0e 94 92 00 	call	0x124	; 0x124 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
    1416:	d8 01       	movw	r26, r16
    1418:	cd 91       	ld	r28, X+
    141a:	dc 91       	ld	r29, X
    141c:	ce 01       	movw	r24, r28
    141e:	b5 01       	movw	r22, r10
    1420:	a4 01       	movw	r20, r8
    1422:	0e 94 51 05 	call	0xaa2	; 0xaa2 <clust2sect>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	8e a7       	lds	r24, 0x7e
    142c:	9f a7       	lds	r25, 0x7f
    142e:	a8 ab       	sts	0x58, r26
    1430:	b9 ab       	sts	0x59, r27
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1432:	c0 e0       	ldi	r28, 0x00	; 0
    1434:	d0 e0       	ldi	r29, 0x00	; 0
    1436:	19 c0       	rjmp	.+50     	; 0x146a <dir_next+0x1bc>
						dp->fs->wflag = 1;
    1438:	b1 e0       	ldi	r27, 0x01	; 1
    143a:	b4 83       	std	Z+4, r27	; 0x04
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    143c:	f8 01       	movw	r30, r16
    143e:	80 81       	ld	r24, Z
    1440:	91 81       	ldd	r25, Z+1	; 0x01
    1442:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sync_window>
    1446:	88 23       	and	r24, r24
    1448:	09 f0       	breq	.+2      	; 0x144c <dir_next+0x19e>
    144a:	68 c0       	rjmp	.+208    	; 0x151c <dir_next+0x26e>
						dp->fs->winsect++;
    144c:	d8 01       	movw	r26, r16
    144e:	ed 91       	ld	r30, X+
    1450:	fc 91       	ld	r31, X
    1452:	86 a5       	lds	r24, 0x66
    1454:	97 a5       	lds	r25, 0x67
    1456:	a0 a9       	sts	0x40, r26
    1458:	b1 a9       	sts	0x41, r27
    145a:	01 96       	adiw	r24, 0x01	; 1
    145c:	a1 1d       	adc	r26, r1
    145e:	b1 1d       	adc	r27, r1
    1460:	86 a7       	lds	r24, 0x76
    1462:	97 a7       	lds	r25, 0x77
    1464:	a0 ab       	sts	0x50, r26
    1466:	b1 ab       	sts	0x51, r27
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1468:	21 96       	adiw	r28, 0x01	; 1
    146a:	d8 01       	movw	r26, r16
    146c:	ed 91       	ld	r30, X+
    146e:	fc 91       	ld	r31, X
    1470:	11 97       	sbiw	r26, 0x01	; 1
    1472:	82 81       	ldd	r24, Z+2	; 0x02
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	c8 17       	cp	r28, r24
    1478:	d9 07       	cpc	r29, r25
    147a:	f0 f2       	brcs	.-68     	; 0x1438 <dir_next+0x18a>
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
						dp->fs->winsect++;
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
    147c:	ae 01       	movw	r20, r28
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	86 a5       	lds	r24, 0x66
    1484:	97 a5       	lds	r25, 0x67
    1486:	a0 a9       	sts	0x40, r26
    1488:	b1 a9       	sts	0x41, r27
    148a:	84 1b       	sub	r24, r20
    148c:	95 0b       	sbc	r25, r21
    148e:	a6 0b       	sbc	r26, r22
    1490:	b7 0b       	sbc	r27, r23
    1492:	86 a7       	lds	r24, 0x76
    1494:	97 a7       	lds	r25, 0x77
    1496:	a0 ab       	sts	0x50, r26
    1498:	b1 ab       	sts	0x51, r27
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
    149a:	f8 01       	movw	r30, r16
    149c:	82 86       	std	Z+10, r8	; 0x0a
    149e:	93 86       	std	Z+11, r9	; 0x0b
    14a0:	a4 86       	std	Z+12, r10	; 0x0c
    14a2:	b5 86       	std	Z+13, r11	; 0x0d
				dp->sect = clust2sect(dp->fs, clst);
    14a4:	80 81       	ld	r24, Z
    14a6:	91 81       	ldd	r25, Z+1	; 0x01
    14a8:	b5 01       	movw	r22, r10
    14aa:	a4 01       	movw	r20, r8
    14ac:	0e 94 51 05 	call	0xaa2	; 0xaa2 <clust2sect>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	f8 01       	movw	r30, r16
    14b6:	86 87       	std	Z+14, r24	; 0x0e
    14b8:	97 87       	std	Z+15, r25	; 0x0f
    14ba:	a0 8b       	std	Z+16, r26	; 0x10
    14bc:	b1 8b       	std	Z+17, r27	; 0x11
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
    14be:	d8 01       	movw	r26, r16
    14c0:	15 96       	adiw	r26, 0x05	; 5
    14c2:	fc 92       	st	X, r15
    14c4:	ee 92       	st	-X, r14
    14c6:	14 97       	sbiw	r26, 0x04	; 4
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
    14c8:	8d 91       	ld	r24, X+
    14ca:	9c 91       	ld	r25, X
    14cc:	11 97       	sbiw	r26, 0x01	; 1
    14ce:	c2 96       	adiw	r24, 0x32	; 50
    14d0:	cc 0c       	add	r12, r12
    14d2:	dd 1c       	adc	r13, r13
    14d4:	cc 0c       	add	r12, r12
    14d6:	dd 1c       	adc	r13, r13
    14d8:	cc 0c       	add	r12, r12
    14da:	dd 1c       	adc	r13, r13
    14dc:	cc 0c       	add	r12, r12
    14de:	dd 1c       	adc	r13, r13
    14e0:	cc 0c       	add	r12, r12
    14e2:	dd 1c       	adc	r13, r13
    14e4:	8c 0d       	add	r24, r12
    14e6:	9d 1d       	adc	r25, r13
    14e8:	53 96       	adiw	r26, 0x13	; 19
    14ea:	9c 93       	st	X, r25
    14ec:	8e 93       	st	-X, r24
    14ee:	52 97       	sbiw	r26, 0x12	; 18

	return FR_OK;
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	15 c0       	rjmp	.+42     	; 0x151e <dir_next+0x270>
#endif


	i = dp->index + 1;
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
    14f4:	84 e0       	ldi	r24, 0x04	; 4
    14f6:	13 c0       	rjmp	.+38     	; 0x151e <dir_next+0x270>
    14f8:	84 e0       	ldi	r24, 0x04	; 4
    14fa:	11 c0       	rjmp	.+34     	; 0x151e <dir_next+0x270>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
		dp->sect++;					/* Next sector */

		if (!dp->clust) {		/* Static table */
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
				return FR_NO_FILE;
    14fc:	84 e0       	ldi	r24, 0x04	; 4
    14fe:	0f c0       	rjmp	.+30     	; 0x151e <dir_next+0x270>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    1500:	82 e0       	ldi	r24, 0x02	; 2
    1502:	0d c0       	rjmp	.+26     	; 0x151e <dir_next+0x270>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	0b c0       	rjmp	.+22     	; 0x151e <dir_next+0x270>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    1508:	84 e0       	ldi	r24, 0x04	; 4
    150a:	09 c0       	rjmp	.+18     	; 0x151e <dir_next+0x270>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    150c:	87 e0       	ldi	r24, 0x07	; 7
    150e:	07 c0       	rjmp	.+14     	; 0x151e <dir_next+0x270>
					if (clst == 1) return FR_INT_ERR;
    1510:	82 e0       	ldi	r24, 0x02	; 2
    1512:	05 c0       	rjmp	.+10     	; 0x151e <dir_next+0x270>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	03 c0       	rjmp	.+6      	; 0x151e <dir_next+0x270>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	01 c0       	rjmp	.+2      	; 0x151e <dir_next+0x270>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    151c:	81 e0       	ldi	r24, 0x01	; 1

	dp->index = (WORD)i;	/* Current index */
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */

	return FR_OK;
}
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	1f 91       	pop	r17
    1524:	0f 91       	pop	r16
    1526:	ff 90       	pop	r15
    1528:	ef 90       	pop	r14
    152a:	df 90       	pop	r13
    152c:	cf 90       	pop	r12
    152e:	bf 90       	pop	r11
    1530:	af 90       	pop	r10
    1532:	9f 90       	pop	r9
    1534:	8f 90       	pop	r8
    1536:	08 95       	ret

00001538 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
    1538:	cf 92       	push	r12
    153a:	df 92       	push	r13
    153c:	ef 92       	push	r14
    153e:	ff 92       	push	r15
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	ec 01       	movw	r28, r24
    154a:	7b 01       	movw	r14, r22
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
    154c:	84 e0       	ldi	r24, 0x04	; 4
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
    154e:	cc 24       	eor	r12, r12
    1550:	dd 24       	eor	r13, r13
    1552:	c3 94       	inc	r12
    1554:	00 e0       	ldi	r16, 0x00	; 0
    1556:	10 e0       	ldi	r17, 0x00	; 0
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dp->sect) {
    1558:	20 c0       	rjmp	.+64     	; 0x159a <dir_read+0x62>
		res = move_window(dp->fs, dp->sect);
    155a:	88 81       	ld	r24, Y
    155c:	99 81       	ldd	r25, Y+1	; 0x01
    155e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <move_window>
		if (res != FR_OK) break;
    1562:	88 23       	and	r24, r24
    1564:	29 f5       	brne	.+74     	; 0x15b0 <dir_read+0x78>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    1566:	ea 89       	ldd	r30, Y+18	; 0x12
    1568:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    156a:	90 81       	ld	r25, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    156c:	99 23       	and	r25, r25
    156e:	69 f1       	breq	.+90     	; 0x15ca <dir_read+0x92>
		a = dir[DIR_Attr] & AM_MASK;
    1570:	23 85       	ldd	r18, Z+11	; 0x0b
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
    1572:	95 3e       	cpi	r25, 0xE5	; 229
    1574:	61 f0       	breq	.+24     	; 0x158e <dir_read+0x56>
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		a = dir[DIR_Attr] & AM_MASK;
    1576:	92 2f       	mov	r25, r18
    1578:	9f 73       	andi	r25, 0x3F	; 63
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
    157a:	9f 30       	cpi	r25, 0x0F	; 15
    157c:	41 f0       	breq	.+16     	; 0x158e <dir_read+0x56>
    157e:	9f 71       	andi	r25, 0x1F	; 31
    1580:	96 01       	movw	r18, r12
    1582:	98 30       	cpi	r25, 0x08	; 8
    1584:	09 f0       	breq	.+2      	; 0x1588 <dir_read+0x50>
    1586:	98 01       	movw	r18, r16
    1588:	2e 15       	cp	r18, r14
    158a:	3f 05       	cpc	r19, r15
    158c:	a9 f0       	breq	.+42     	; 0x15b8 <dir_read+0x80>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
    158e:	ce 01       	movw	r24, r28
    1590:	b8 01       	movw	r22, r16
    1592:	0e 94 57 09 	call	0x12ae	; 0x12ae <dir_next>
		if (res != FR_OK) break;
    1596:	88 23       	and	r24, r24
    1598:	59 f4       	brne	.+22     	; 0x15b0 <dir_read+0x78>
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dp->sect) {
    159a:	4e 85       	ldd	r20, Y+14	; 0x0e
    159c:	5f 85       	ldd	r21, Y+15	; 0x0f
    159e:	68 89       	ldd	r22, Y+16	; 0x10
    15a0:	79 89       	ldd	r23, Y+17	; 0x11
    15a2:	41 15       	cp	r20, r1
    15a4:	51 05       	cpc	r21, r1
    15a6:	61 05       	cpc	r22, r1
    15a8:	71 05       	cpc	r23, r1
    15aa:	b9 f6       	brne	.-82     	; 0x155a <dir_read+0x22>
#endif
		res = dir_next(dp, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dp->sect = 0;
    15ac:	88 23       	and	r24, r24
    15ae:	21 f0       	breq	.+8      	; 0x15b8 <dir_read+0x80>
    15b0:	1e 86       	std	Y+14, r1	; 0x0e
    15b2:	1f 86       	std	Y+15, r1	; 0x0f
    15b4:	18 8a       	std	Y+16, r1	; 0x10
    15b6:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
    15c4:	df 90       	pop	r13
    15c6:	cf 90       	pop	r12
    15c8:	08 95       	ret
	while (dp->sect) {
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    15ca:	84 e0       	ldi	r24, 0x04	; 4
    15cc:	f1 cf       	rjmp	.-30     	; 0x15b0 <dir_read+0x78>

000015ce <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
    15ce:	2f 92       	push	r2
    15d0:	3f 92       	push	r3
    15d2:	4f 92       	push	r4
    15d4:	5f 92       	push	r5
    15d6:	6f 92       	push	r6
    15d8:	7f 92       	push	r7
    15da:	8f 92       	push	r8
    15dc:	9f 92       	push	r9
    15de:	af 92       	push	r10
    15e0:	bf 92       	push	r11
    15e2:	cf 92       	push	r12
    15e4:	df 92       	push	r13
    15e6:	ef 92       	push	r14
    15e8:	ff 92       	push	r15
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <follow_path+0x26>
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <follow_path+0x28>
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	8c 01       	movw	r16, r24
    15fc:	3b 01       	movw	r6, r22
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
    15fe:	db 01       	movw	r26, r22
    1600:	8c 91       	ld	r24, X
    1602:	8f 32       	cpi	r24, 0x2F	; 47
    1604:	11 f0       	breq	.+4      	; 0x160a <follow_path+0x3c>
    1606:	8c 35       	cpi	r24, 0x5C	; 92
    1608:	49 f4       	brne	.+18     	; 0x161c <follow_path+0x4e>
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
    160a:	08 94       	sec
    160c:	61 1c       	adc	r6, r1
    160e:	71 1c       	adc	r7, r1
    1610:	f8 01       	movw	r30, r16
    1612:	16 82       	std	Z+6, r1	; 0x06
    1614:	17 82       	std	Z+7, r1	; 0x07
    1616:	10 86       	std	Z+8, r1	; 0x08
    1618:	11 86       	std	Z+9, r1	; 0x09
    161a:	0c c0       	rjmp	.+24     	; 0x1634 <follow_path+0x66>
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
    161c:	d8 01       	movw	r26, r16
    161e:	ed 91       	ld	r30, X+
    1620:	fc 91       	ld	r31, X
    1622:	82 89       	ldd	r24, Z+18	; 0x12
    1624:	93 89       	ldd	r25, Z+19	; 0x13
    1626:	a4 89       	ldd	r26, Z+20	; 0x14
    1628:	b5 89       	ldd	r27, Z+21	; 0x15
    162a:	f8 01       	movw	r30, r16
    162c:	86 83       	std	Z+6, r24	; 0x06
    162e:	97 83       	std	Z+7, r25	; 0x07
    1630:	a0 87       	std	Z+8, r26	; 0x08
    1632:	b1 87       	std	Z+9, r27	; 0x09
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
		path++;
	dp->sclust = 0;							/* Always start from the root directory */
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    1634:	d3 01       	movw	r26, r6
    1636:	8c 91       	ld	r24, X
    1638:	80 32       	cpi	r24, 0x20	; 32
    163a:	50 f4       	brcc	.+20     	; 0x1650 <follow_path+0x82>
		res = dir_sdi(dp, 0);
    163c:	c8 01       	movw	r24, r16
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	0e 94 6f 06 	call	0xcde	; 0xcde <dir_sdi>
    1646:	48 2f       	mov	r20, r24
		dp->dir = 0;
    1648:	f8 01       	movw	r30, r16
    164a:	13 8a       	std	Z+19, r1	; 0x13
    164c:	12 8a       	std	Z+18, r1	; 0x12
    164e:	34 c1       	rjmp	.+616    	; 0x18b8 <follow_path+0x2ea>
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	sfn = dp->fn;
	mem_set(sfn, ' ', 11);
    1650:	0f 2e       	mov	r0, r31
    1652:	fb e0       	ldi	r31, 0x0B	; 11
    1654:	4f 2e       	mov	r4, r31
    1656:	55 24       	eor	r5, r5
    1658:	f0 2d       	mov	r31, r0
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    165a:	cc 24       	eor	r12, r12
    165c:	dd 24       	eor	r13, r13
    165e:	22 24       	eor	r2, r2
    1660:	33 24       	eor	r3, r3
    1662:	68 94       	set
    1664:	23 f8       	bld	r2, 3
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    1666:	29 82       	std	Y+1, r2	; 0x01
    1668:	3a 82       	std	Y+2, r3	; 0x02
    166a:	4b 82       	std	Y+3, r4	; 0x03
    166c:	5c 82       	std	Y+4, r5	; 0x04
	dp->sclust = 0;							/* Always start from the root directory */
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
		res = dir_sdi(dp, 0);
		dp->dir = 0;
    166e:	f3 01       	movw	r30, r6
    1670:	9f 01       	movw	r18, r30
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    1672:	81 91       	ld	r24, Z+
    1674:	8f 32       	cpi	r24, 0x2F	; 47
    1676:	e1 f3       	breq	.-8      	; 0x1670 <follow_path+0xa2>
    1678:	8c 35       	cpi	r24, 0x5C	; 92
    167a:	d1 f3       	breq	.-12     	; 0x1670 <follow_path+0xa2>
    167c:	39 01       	movw	r6, r18
	sfn = dp->fn;
    167e:	d8 01       	movw	r26, r16
    1680:	54 96       	adiw	r26, 0x14	; 20
    1682:	ad 90       	ld	r10, X+
    1684:	bc 90       	ld	r11, X
    1686:	55 97       	sbiw	r26, 0x15	; 21
	mem_set(sfn, ' ', 11);
    1688:	c5 01       	movw	r24, r10
    168a:	60 e2       	ldi	r22, 0x20	; 32
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	a2 01       	movw	r20, r4
    1690:	0e 94 92 00 	call	0x124	; 0x124 <mem_set>
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    1694:	f3 01       	movw	r30, r6
    1696:	80 81       	ld	r24, Z
    1698:	8e 32       	cpi	r24, 0x2E	; 46
    169a:	31 f0       	breq	.+12     	; 0x16a8 <follow_path+0xda>
    169c:	d3 01       	movw	r26, r6
    169e:	76 01       	movw	r14, r12
    16a0:	b6 01       	movw	r22, r12
    16a2:	41 01       	movw	r8, r2
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	29 c0       	rjmp	.+82     	; 0x16fa <follow_path+0x12c>
		for (;;) {
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
    16a8:	ee e2       	ldi	r30, 0x2E	; 46
    16aa:	d5 01       	movw	r26, r10
    16ac:	ec 93       	st	X, r30
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    16ae:	d3 01       	movw	r26, r6
    16b0:	11 96       	adiw	r26, 0x01	; 1
    16b2:	2c 91       	ld	r18, X
    16b4:	11 97       	sbiw	r26, 0x01	; 1
			if (c != '.' || si >= 3) break;
    16b6:	2e 32       	cpi	r18, 0x2E	; 46
    16b8:	59 f4       	brne	.+22     	; 0x16d0 <follow_path+0x102>
			sfn[i++] = c;
    16ba:	8e e2       	ldi	r24, 0x2E	; 46
    16bc:	f5 01       	movw	r30, r10
    16be:	81 83       	std	Z+1, r24	; 0x01
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    16c0:	12 96       	adiw	r26, 0x02	; 2
    16c2:	2c 91       	ld	r18, X
    16c4:	12 97       	sbiw	r26, 0x02	; 2
			if (c != '.' || si >= 3) break;
    16c6:	2e 32       	cpi	r18, 0x2E	; 46
    16c8:	51 f0       	breq	.+20     	; 0x16de <follow_path+0x110>
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    16ca:	83 e0       	ldi	r24, 0x03	; 3
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <follow_path+0x106>
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	90 e0       	ldi	r25, 0x00	; 0
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    16d4:	2f 32       	cpi	r18, 0x2F	; 47
    16d6:	49 f0       	breq	.+18     	; 0x16ea <follow_path+0x11c>
    16d8:	2c 35       	cpi	r18, 0x5C	; 92
    16da:	39 f0       	breq	.+14     	; 0x16ea <follow_path+0x11c>
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <follow_path+0x114>
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    16de:	83 e0       	ldi	r24, 0x03	; 3
    16e0:	90 e0       	ldi	r25, 0x00	; 0
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    16e2:	21 32       	cpi	r18, 0x21	; 33
    16e4:	08 f0       	brcs	.+2      	; 0x16e8 <follow_path+0x11a>
    16e6:	d7 c0       	rjmp	.+430    	; 0x1896 <follow_path+0x2c8>
    16e8:	ff c0       	rjmp	.+510    	; 0x18e8 <follow_path+0x31a>
		*path = &p[si];									/* Return pointer to the next segment */
    16ea:	68 0e       	add	r6, r24
    16ec:	79 1e       	adc	r7, r25
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    16ee:	80 e2       	ldi	r24, 0x20	; 32
    16f0:	d5 01       	movw	r26, r10
    16f2:	1b 96       	adiw	r26, 0x0b	; 11
    16f4:	8c 93       	st	X, r24
    16f6:	1b 97       	sbiw	r26, 0x0b	; 11
    16f8:	00 c1       	rjmp	.+512    	; 0x18fa <follow_path+0x32c>
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    16fa:	2d 91       	ld	r18, X+
    16fc:	6f 5f       	subi	r22, 0xFF	; 255
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    1700:	21 32       	cpi	r18, 0x21	; 33
    1702:	08 f4       	brcc	.+2      	; 0x1706 <follow_path+0x138>
    1704:	42 c0       	rjmp	.+132    	; 0x178a <follow_path+0x1bc>
    1706:	2f 32       	cpi	r18, 0x2F	; 47
    1708:	09 f4       	brne	.+2      	; 0x170c <follow_path+0x13e>
    170a:	f2 c0       	rjmp	.+484    	; 0x18f0 <follow_path+0x322>
    170c:	2c 35       	cpi	r18, 0x5C	; 92
    170e:	09 f4       	brne	.+2      	; 0x1712 <follow_path+0x144>
    1710:	ef c0       	rjmp	.+478    	; 0x18f0 <follow_path+0x322>
		if (c == '.' || i >= ni) {
    1712:	2e 32       	cpi	r18, 0x2E	; 46
    1714:	19 f0       	breq	.+6      	; 0x171c <follow_path+0x14e>
    1716:	e8 14       	cp	r14, r8
    1718:	f9 04       	cpc	r15, r9
    171a:	78 f0       	brcs	.+30     	; 0x173a <follow_path+0x16c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    171c:	e8 e0       	ldi	r30, 0x08	; 8
    171e:	8e 16       	cp	r8, r30
    1720:	91 04       	cpc	r9, r1
    1722:	09 f0       	breq	.+2      	; 0x1726 <follow_path+0x158>
    1724:	ba c0       	rjmp	.+372    	; 0x189a <follow_path+0x2cc>
    1726:	2e 32       	cpi	r18, 0x2E	; 46
    1728:	09 f0       	breq	.+2      	; 0x172c <follow_path+0x15e>
    172a:	b9 c0       	rjmp	.+370    	; 0x189e <follow_path+0x2d0>
			i = 8; ni = 11;
			b <<= 2; continue;
    172c:	33 0f       	add	r19, r19
    172e:	33 0f       	add	r19, r19
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    1730:	e9 80       	ldd	r14, Y+1	; 0x01
    1732:	fa 80       	ldd	r15, Y+2	; 0x02
    1734:	8b 80       	ldd	r8, Y+3	; 0x03
    1736:	9c 80       	ldd	r9, Y+4	; 0x04
    1738:	e0 cf       	rjmp	.-64     	; 0x16fa <follow_path+0x12c>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended character? */
    173a:	22 23       	and	r18, r18
    173c:	0c f4       	brge	.+2      	; 0x1740 <follow_path+0x172>
    173e:	b1 c0       	rjmp	.+354    	; 0x18a2 <follow_path+0x2d4>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    1740:	42 2f       	mov	r20, r18
    1742:	50 e0       	ldi	r21, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    1744:	42 32       	cpi	r20, 0x22	; 34
    1746:	51 05       	cpc	r21, r1
    1748:	09 f4       	brne	.+2      	; 0x174c <follow_path+0x17e>
    174a:	ad c0       	rjmp	.+346    	; 0x18a6 <follow_path+0x2d8>
    174c:	e1 e0       	ldi	r30, 0x01	; 1
    174e:	f1 e0       	ldi	r31, 0x01	; 1
    1750:	81 91       	ld	r24, Z+
    1752:	88 23       	and	r24, r24
    1754:	31 f0       	breq	.+12     	; 0x1762 <follow_path+0x194>
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	48 17       	cp	r20, r24
    175a:	59 07       	cpc	r21, r25
    175c:	c9 f7       	brne	.-14     	; 0x1750 <follow_path+0x182>
    175e:	46 e0       	ldi	r20, 0x06	; 6
    1760:	ab c0       	rjmp	.+342    	; 0x18b8 <follow_path+0x2ea>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    1762:	82 2f       	mov	r24, r18
    1764:	81 54       	subi	r24, 0x41	; 65
    1766:	8a 31       	cpi	r24, 0x1A	; 26
    1768:	10 f4       	brcc	.+4      	; 0x176e <follow_path+0x1a0>
				b |= 2;
    176a:	32 60       	ori	r19, 0x02	; 2
    176c:	06 c0       	rjmp	.+12     	; 0x177a <follow_path+0x1ac>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    176e:	82 2f       	mov	r24, r18
    1770:	81 56       	subi	r24, 0x61	; 97
    1772:	8a 31       	cpi	r24, 0x1A	; 26
    1774:	10 f4       	brcc	.+4      	; 0x177a <follow_path+0x1ac>
					b |= 1; c -= 0x20;
    1776:	31 60       	ori	r19, 0x01	; 1
    1778:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    177a:	f5 01       	movw	r30, r10
    177c:	ee 0d       	add	r30, r14
    177e:	ff 1d       	adc	r31, r15
    1780:	20 83       	st	Z, r18
    1782:	08 94       	sec
    1784:	e1 1c       	adc	r14, r1
    1786:	f1 1c       	adc	r15, r1
    1788:	b8 cf       	rjmp	.-144    	; 0x16fa <follow_path+0x12c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    178a:	66 0e       	add	r6, r22
    178c:	77 1e       	adc	r7, r23
    178e:	83 2f       	mov	r24, r19
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1790:	44 e0       	ldi	r20, 0x04	; 4

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    1792:	e1 14       	cp	r14, r1
    1794:	f1 04       	cpc	r15, r1
    1796:	09 f4       	brne	.+2      	; 0x179a <follow_path+0x1cc>
    1798:	88 c0       	rjmp	.+272    	; 0x18aa <follow_path+0x2dc>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
    179a:	d5 01       	movw	r26, r10
    179c:	9c 91       	ld	r25, X
    179e:	95 3e       	cpi	r25, 0xE5	; 229
    17a0:	11 f4       	brne	.+4      	; 0x17a6 <follow_path+0x1d8>
    17a2:	e5 e0       	ldi	r30, 0x05	; 5
    17a4:	ec 93       	st	X, r30

	if (ni == 8) b <<= 2;
    17a6:	f8 e0       	ldi	r31, 0x08	; 8
    17a8:	8f 16       	cp	r8, r31
    17aa:	91 04       	cpc	r9, r1
    17ac:	19 f4       	brne	.+6      	; 0x17b4 <follow_path+0x1e6>
    17ae:	38 2f       	mov	r19, r24
    17b0:	33 0f       	add	r19, r19
    17b2:	33 0f       	add	r19, r19
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    17b4:	83 2f       	mov	r24, r19
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	9c 01       	movw	r18, r24
    17ba:	23 70       	andi	r18, 0x03	; 3
    17bc:	30 70       	andi	r19, 0x00	; 0
    17be:	21 30       	cpi	r18, 0x01	; 1
    17c0:	31 05       	cpc	r19, r1
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <follow_path+0x1f8>
    17c4:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    17c6:	8c 70       	andi	r24, 0x0C	; 12
    17c8:	90 70       	andi	r25, 0x00	; 0
    17ca:	84 30       	cpi	r24, 0x04	; 4
    17cc:	91 05       	cpc	r25, r1
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <follow_path+0x204>
    17d0:	48 60       	ori	r20, 0x08	; 8

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
    17d2:	d5 01       	movw	r26, r10
    17d4:	1b 96       	adiw	r26, 0x0b	; 11
    17d6:	4c 93       	st	X, r20
    17d8:	1b 97       	sbiw	r26, 0x0b	; 11
    17da:	8f c0       	rjmp	.+286    	; 0x18fa <follow_path+0x32c>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
    17dc:	f8 01       	movw	r30, r16
    17de:	46 85       	ldd	r20, Z+14	; 0x0e
    17e0:	57 85       	ldd	r21, Z+15	; 0x0f
    17e2:	60 89       	ldd	r22, Z+16	; 0x10
    17e4:	71 89       	ldd	r23, Z+17	; 0x11
    17e6:	80 81       	ld	r24, Z
    17e8:	91 81       	ldd	r25, Z+1	; 0x01
    17ea:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <move_window>
		if (res != FR_OK) break;
    17ee:	88 23       	and	r24, r24
    17f0:	31 f5       	brne	.+76     	; 0x183e <follow_path+0x270>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    17f2:	d8 01       	movw	r26, r16
    17f4:	52 96       	adiw	r26, 0x12	; 18
    17f6:	4d 91       	ld	r20, X+
    17f8:	5c 91       	ld	r21, X
    17fa:	53 97       	sbiw	r26, 0x13	; 19
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    17fc:	fa 01       	movw	r30, r20
    17fe:	90 81       	ld	r25, Z
    1800:	99 23       	and	r25, r25
    1802:	09 f4       	brne	.+2      	; 0x1806 <follow_path+0x238>
    1804:	88 c0       	rjmp	.+272    	; 0x1916 <follow_path+0x348>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
    1806:	93 85       	ldd	r25, Z+11	; 0x0b
    1808:	93 fd       	sbrc	r25, 3
    180a:	13 c0       	rjmp	.+38     	; 0x1832 <follow_path+0x264>
    180c:	54 96       	adiw	r26, 0x14	; 20
    180e:	6d 91       	ld	r22, X+
    1810:	7c 91       	ld	r23, X
    1812:	55 97       	sbiw	r26, 0x15	; 21
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    1814:	9a 01       	movw	r18, r20
    1816:	25 5f       	subi	r18, 0xF5	; 245
    1818:	3f 4f       	sbci	r19, 0xFF	; 255
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    181a:	db 01       	movw	r26, r22
    181c:	7a 01       	movw	r14, r20
    181e:	48 2f       	mov	r20, r24
    1820:	04 c0       	rjmp	.+8      	; 0x182a <follow_path+0x25c>
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1822:	e2 17       	cp	r30, r18
    1824:	f3 07       	cpc	r31, r19
    1826:	09 f4       	brne	.+2      	; 0x182a <follow_path+0x25c>
    1828:	70 c0       	rjmp	.+224    	; 0x190a <follow_path+0x33c>
    182a:	91 91       	ld	r25, Z+
    182c:	8d 91       	ld	r24, X+
    182e:	98 17       	cp	r25, r24
    1830:	c1 f3       	breq	.-16     	; 0x1822 <follow_path+0x254>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
    1832:	c8 01       	movw	r24, r16
    1834:	b6 01       	movw	r22, r12
    1836:	0e 94 57 09 	call	0x12ae	; 0x12ae <dir_next>
	} while (res == FR_OK);
    183a:	88 23       	and	r24, r24
    183c:	79 f2       	breq	.-98     	; 0x17dc <follow_path+0x20e>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NSFLAG];
    183e:	d8 01       	movw	r26, r16
    1840:	54 96       	adiw	r26, 0x14	; 20
    1842:	ed 91       	ld	r30, X+
    1844:	fc 91       	ld	r31, X
    1846:	55 97       	sbiw	r26, 0x15	; 21
    1848:	93 85       	ldd	r25, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
    184a:	84 30       	cpi	r24, 0x04	; 4
    184c:	a1 f5       	brne	.+104    	; 0x18b6 <follow_path+0x2e8>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
    184e:	95 ff       	sbrs	r25, 5
    1850:	0b c0       	rjmp	.+22     	; 0x1868 <follow_path+0x29a>
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
    1852:	f8 01       	movw	r30, r16
    1854:	16 82       	std	Z+6, r1	; 0x06
    1856:	17 82       	std	Z+7, r1	; 0x07
    1858:	10 86       	std	Z+8, r1	; 0x08
    185a:	11 86       	std	Z+9, r1	; 0x09
    185c:	13 8a       	std	Z+19, r1	; 0x13
    185e:	12 8a       	std	Z+18, r1	; 0x12
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
    1860:	92 ff       	sbrs	r25, 2
    1862:	05 cf       	rjmp	.-502    	; 0x166e <follow_path+0xa0>
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
    1864:	40 e0       	ldi	r20, 0x00	; 0
    1866:	28 c0       	rjmp	.+80     	; 0x18b8 <follow_path+0x2ea>
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    1868:	92 ff       	sbrs	r25, 2
    186a:	21 c0       	rjmp	.+66     	; 0x18ae <follow_path+0x2e0>
		dp->dir = 0;
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
    186c:	44 e0       	ldi	r20, 0x04	; 4
    186e:	24 c0       	rjmp	.+72     	; 0x18b8 <follow_path+0x2ea>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    1870:	1b 96       	adiw	r26, 0x0b	; 11
    1872:	8c 91       	ld	r24, X
    1874:	1b 97       	sbiw	r26, 0x0b	; 11
    1876:	84 ff       	sbrs	r24, 4
    1878:	1c c0       	rjmp	.+56     	; 0x18b2 <follow_path+0x2e4>
				res = FR_NO_PATH; break;
			}
			dp->sclust = ld_clust(dp->fs, dir);
    187a:	f8 01       	movw	r30, r16
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	bd 01       	movw	r22, r26
    1882:	0e 94 9c 00 	call	0x138	; 0x138 <ld_clust>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	f8 01       	movw	r30, r16
    188c:	86 83       	std	Z+6, r24	; 0x06
    188e:	97 83       	std	Z+7, r25	; 0x07
    1890:	a0 87       	std	Z+8, r26	; 0x08
    1892:	b1 87       	std	Z+9, r27	; 0x09
    1894:	ec ce       	rjmp	.-552    	; 0x166e <follow_path+0xa0>
		for (;;) {
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    1896:	46 e0       	ldi	r20, 0x06	; 6
    1898:	0f c0       	rjmp	.+30     	; 0x18b8 <follow_path+0x2ea>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    189a:	46 e0       	ldi	r20, 0x06	; 6
    189c:	0d c0       	rjmp	.+26     	; 0x18b8 <follow_path+0x2ea>
    189e:	46 e0       	ldi	r20, 0x06	; 6
    18a0:	0b c0       	rjmp	.+22     	; 0x18b8 <follow_path+0x2ea>
			i = 8; ni = 11;
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended character? */
    18a2:	46 e0       	ldi	r20, 0x06	; 6
    18a4:	09 c0       	rjmp	.+18     	; 0x18b8 <follow_path+0x2ea>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    18a6:	46 e0       	ldi	r20, 0x06	; 6
    18a8:	07 c0       	rjmp	.+14     	; 0x18b8 <follow_path+0x2ea>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    18aa:	46 e0       	ldi	r20, 0x06	; 6
    18ac:	05 c0       	rjmp	.+10     	; 0x18b8 <follow_path+0x2ea>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    18ae:	45 e0       	ldi	r20, 0x05	; 5
    18b0:	03 c0       	rjmp	.+6      	; 0x18b8 <follow_path+0x2ea>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
    18b2:	45 e0       	ldi	r20, 0x05	; 5
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <follow_path+0x2ea>
    18b6:	48 2f       	mov	r20, r24
			dp->sclust = ld_clust(dp->fs, dir);
		}
	}

	return res;
}
    18b8:	84 2f       	mov	r24, r20
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	1f 91       	pop	r17
    18c8:	0f 91       	pop	r16
    18ca:	ff 90       	pop	r15
    18cc:	ef 90       	pop	r14
    18ce:	df 90       	pop	r13
    18d0:	cf 90       	pop	r12
    18d2:	bf 90       	pop	r11
    18d4:	af 90       	pop	r10
    18d6:	9f 90       	pop	r9
    18d8:	8f 90       	pop	r8
    18da:	7f 90       	pop	r7
    18dc:	6f 90       	pop	r6
    18de:	5f 90       	pop	r5
    18e0:	4f 90       	pop	r4
    18e2:	3f 90       	pop	r3
    18e4:	2f 90       	pop	r2
    18e6:	08 95       	ret
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
		*path = &p[si];									/* Return pointer to the next segment */
    18e8:	68 0e       	add	r6, r24
    18ea:	79 1e       	adc	r7, r25
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    18ec:	84 e2       	ldi	r24, 0x24	; 36
    18ee:	00 cf       	rjmp	.-512    	; 0x16f0 <follow_path+0x122>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    18f0:	66 0e       	add	r6, r22
    18f2:	77 1e       	adc	r7, r23
    18f4:	83 2f       	mov	r24, r19
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	4c cf       	rjmp	.-360    	; 0x1792 <follow_path+0x1c4>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    18fa:	c8 01       	movw	r24, r16
    18fc:	b6 01       	movw	r22, r12
    18fe:	0e 94 6f 06 	call	0xcde	; 0xcde <dir_sdi>
	if (res != FR_OK) return res;
    1902:	88 23       	and	r24, r24
    1904:	09 f4       	brne	.+2      	; 0x1908 <follow_path+0x33a>
    1906:	6a cf       	rjmp	.-300    	; 0x17dc <follow_path+0x20e>
    1908:	9a cf       	rjmp	.-204    	; 0x183e <follow_path+0x270>
    190a:	d7 01       	movw	r26, r14
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    190c:	fb 01       	movw	r30, r22
    190e:	93 85       	ldd	r25, Z+11	; 0x0b
    1910:	92 ff       	sbrs	r25, 2
    1912:	ae cf       	rjmp	.-164    	; 0x1870 <follow_path+0x2a2>
    1914:	d1 cf       	rjmp	.-94     	; 0x18b8 <follow_path+0x2ea>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NSFLAG];
    1916:	d8 01       	movw	r26, r16
    1918:	54 96       	adiw	r26, 0x14	; 20
    191a:	ed 91       	ld	r30, X+
    191c:	fc 91       	ld	r31, X
    191e:	55 97       	sbiw	r26, 0x15	; 21
    1920:	93 85       	ldd	r25, Z+11	; 0x0b
    1922:	95 cf       	rjmp	.-214    	; 0x184e <follow_path+0x280>

00001924 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    1924:	1f 93       	push	r17
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	00 d0       	rcall	.+0      	; 0x192c <f_mount+0x8>
    192c:	00 d0       	rcall	.+0      	; 0x192e <f_mount+0xa>
    192e:	00 d0       	rcall	.+0      	; 0x1930 <f_mount+0xc>
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	9c 83       	std	Y+4, r25	; 0x04
    1936:	8b 83       	std	Y+3, r24	; 0x03
    1938:	7e 83       	std	Y+6, r23	; 0x06
    193a:	6d 83       	std	Y+5, r22	; 0x05
    193c:	14 2f       	mov	r17, r20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    193e:	7a 83       	std	Y+2, r23	; 0x02
    1940:	69 83       	std	Y+1, r22	; 0x01


	vol = get_ldnumber(&rp);
    1942:	ce 01       	movw	r24, r28
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	0e 94 00 01 	call	0x200	; 0x200 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    194a:	99 23       	and	r25, r25
    194c:	3c f1       	brlt	.+78     	; 0x199c <f_mount+0x78>
	cfs = FatFs[vol];					/* Pointer to fs object */
    194e:	fc 01       	movw	r30, r24
    1950:	ee 0f       	add	r30, r30
    1952:	ff 1f       	adc	r31, r31
    1954:	e6 5d       	subi	r30, 0xD6	; 214
    1956:	fe 4f       	sbci	r31, 0xFE	; 254
    1958:	01 90       	ld	r0, Z+
    195a:	f0 81       	ld	r31, Z
    195c:	e0 2d       	mov	r30, r0

	if (cfs) {
    195e:	30 97       	sbiw	r30, 0x00	; 0
    1960:	09 f0       	breq	.+2      	; 0x1964 <f_mount+0x40>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    1962:	10 82       	st	Z, r1
	}

	if (fs) {
    1964:	eb 81       	ldd	r30, Y+3	; 0x03
    1966:	fc 81       	ldd	r31, Y+4	; 0x04
    1968:	30 97       	sbiw	r30, 0x00	; 0
    196a:	39 f1       	breq	.+78     	; 0x19ba <f_mount+0x96>
		fs->fs_type = 0;				/* Clear new fs object */
    196c:	10 82       	st	Z, r1
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    196e:	2b 81       	ldd	r18, Y+3	; 0x03
    1970:	3c 81       	ldd	r19, Y+4	; 0x04
    1972:	fc 01       	movw	r30, r24
    1974:	ee 0f       	add	r30, r30
    1976:	ff 1f       	adc	r31, r31
    1978:	e6 5d       	subi	r30, 0xD6	; 214
    197a:	fe 4f       	sbci	r31, 0xFE	; 254
    197c:	31 83       	std	Z+1, r19	; 0x01
    197e:	20 83       	st	Z, r18

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1980:	21 15       	cp	r18, r1
    1982:	31 05       	cpc	r19, r1
    1984:	69 f0       	breq	.+26     	; 0x19a0 <f_mount+0x7c>
    1986:	11 30       	cpi	r17, 0x01	; 1
    1988:	69 f4       	brne	.+26     	; 0x19a4 <f_mount+0x80>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
    198a:	ce 01       	movw	r24, r28
    198c:	03 96       	adiw	r24, 0x03	; 3
    198e:	be 01       	movw	r22, r28
    1990:	6b 5f       	subi	r22, 0xFB	; 251
    1992:	7f 4f       	sbci	r23, 0xFF	; 255
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	0e 94 57 02 	call	0x4ae	; 0x4ae <find_volume>
	LEAVE_FF(fs, res);
    199a:	05 c0       	rjmp	.+10     	; 0x19a6 <f_mount+0x82>
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
    199c:	8b e0       	ldi	r24, 0x0B	; 11
    199e:	03 c0       	rjmp	.+6      	; 0x19a6 <f_mount+0x82>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	01 c0       	rjmp	.+2      	; 0x19a6 <f_mount+0x82>
    19a4:	80 e0       	ldi	r24, 0x00	; 0

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    19a6:	26 96       	adiw	r28, 0x06	; 6
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	1f 91       	pop	r17
    19b8:	08 95       	ret
		fs->fs_type = 0;				/* Clear new fs object */
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    19ba:	fc 01       	movw	r30, r24
    19bc:	ee 0f       	add	r30, r30
    19be:	ff 1f       	adc	r31, r31
    19c0:	e6 5d       	subi	r30, 0xD6	; 214
    19c2:	fe 4f       	sbci	r31, 0xFE	; 254
    19c4:	11 82       	std	Z+1, r1	; 0x01
    19c6:	10 82       	st	Z, r1

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	ed cf       	rjmp	.-38     	; 0x19a6 <f_mount+0x82>

000019cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    19cc:	2f 92       	push	r2
    19ce:	3f 92       	push	r3
    19d0:	4f 92       	push	r4
    19d2:	5f 92       	push	r5
    19d4:	6f 92       	push	r6
    19d6:	7f 92       	push	r7
    19d8:	8f 92       	push	r8
    19da:	9f 92       	push	r9
    19dc:	af 92       	push	r10
    19de:	bf 92       	push	r11
    19e0:	cf 92       	push	r12
    19e2:	df 92       	push	r13
    19e4:	ef 92       	push	r14
    19e6:	ff 92       	push	r15
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	ac 97       	sbiw	r28, 0x2c	; 44
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	6c 01       	movw	r12, r24
    1a02:	7c a3       	lds	r23, 0x5c
    1a04:	6b a3       	lds	r22, 0x5b
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <f_open+0x40>
    1a0a:	8c c1       	rjmp	.+792    	; 0x1d24 <f_open+0x358>
	fp->fs = 0;			/* Clear file object */
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	1d 92       	st	X+, r1
    1a10:	1c 92       	st	X, r1

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    1a12:	0f 2e       	mov	r0, r31
    1a14:	ff e1       	ldi	r31, 0x1F	; 31
    1a16:	ef 2e       	mov	r14, r31
    1a18:	f0 2d       	mov	r31, r0
    1a1a:	e4 22       	and	r14, r20
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
    1a1c:	4e 71       	andi	r20, 0x1E	; 30
    1a1e:	ce 01       	movw	r24, r28
    1a20:	01 96       	adiw	r24, 0x01	; 1
    1a22:	be 01       	movw	r22, r28
    1a24:	6d 5d       	subi	r22, 0xDD	; 221
    1a26:	7f 4f       	sbci	r23, 0xFF	; 255
    1a28:	0e 94 57 02 	call	0x4ae	; 0x4ae <find_volume>
    1a2c:	f8 2e       	mov	r15, r24
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
    1a2e:	88 23       	and	r24, r24
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <f_open+0x68>
    1a32:	7c c1       	rjmp	.+760    	; 0x1d2c <f_open+0x360>
		INIT_BUF(dj);
    1a34:	ce 01       	movw	r24, r28
    1a36:	47 96       	adiw	r24, 0x17	; 23
    1a38:	9e 8b       	std	Y+22, r25	; 0x16
    1a3a:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    1a3c:	6b a1       	lds	r22, 0x4b
    1a3e:	7c a1       	lds	r23, 0x4c
    1a40:	ce 01       	movw	r24, r28
    1a42:	01 96       	adiw	r24, 0x01	; 1
    1a44:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <follow_path>
    1a48:	18 2f       	mov	r17, r24
		dir = dj.dir;
    1a4a:	ab 88       	ldd	r10, Y+19	; 0x13
    1a4c:	bc 88       	ldd	r11, Y+20	; 0x14
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    1a4e:	88 23       	and	r24, r24
    1a50:	21 f4       	brne	.+8      	; 0x1a5a <f_open+0x8e>
			if (!dir)	/* Default directory itself */
    1a52:	a1 14       	cp	r10, r1
    1a54:	b1 04       	cpc	r11, r1
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <f_open+0x8e>
				res = FR_INVALID_NAME;
    1a58:	16 e0       	ldi	r17, 0x06	; 6
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1a5a:	2e 2d       	mov	r18, r14
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	c9 01       	movw	r24, r18
    1a60:	8c 71       	andi	r24, 0x1C	; 28
    1a62:	90 70       	andi	r25, 0x00	; 0
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <f_open+0x9e>
    1a68:	14 c1       	rjmp	.+552    	; 0x1c92 <f_open+0x2c6>
			if (res != FR_OK) {					/* No file, create new */
    1a6a:	11 23       	and	r17, r17
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <f_open+0xa4>
    1a6e:	54 c0       	rjmp	.+168    	; 0x1b18 <f_open+0x14c>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    1a70:	14 30       	cpi	r17, 0x04	; 4
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <f_open+0xaa>
    1a74:	55 c1       	rjmp	.+682    	; 0x1d20 <f_open+0x354>
{
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
    1a76:	ce 01       	movw	r24, r28
    1a78:	01 96       	adiw	r24, 0x01	; 1
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	0e 94 6f 06 	call	0xcde	; 0xcde <dir_sdi>
    1a82:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    1a84:	88 23       	and	r24, r24
    1a86:	d9 f4       	brne	.+54     	; 0x1abe <f_open+0xf2>
		n = 0;
		do {
			res = move_window(dp->fs, dp->sect);
    1a88:	4f 85       	ldd	r20, Y+15	; 0x0f
    1a8a:	58 89       	ldd	r21, Y+16	; 0x10
    1a8c:	69 89       	ldd	r22, Y+17	; 0x11
    1a8e:	7a 89       	ldd	r23, Y+18	; 0x12
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <move_window>
    1a98:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    1a9a:	88 23       	and	r24, r24
    1a9c:	81 f4       	brne	.+32     	; 0x1abe <f_open+0xf2>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
    1a9e:	eb 89       	ldd	r30, Y+19	; 0x13
    1aa0:	fc 89       	ldd	r31, Y+20	; 0x14
    1aa2:	80 81       	ld	r24, Z
    1aa4:	85 3e       	cpi	r24, 0xE5	; 229
    1aa6:	79 f0       	breq	.+30     	; 0x1ac6 <f_open+0xfa>
    1aa8:	88 23       	and	r24, r24
    1aaa:	69 f0       	breq	.+26     	; 0x1ac6 <f_open+0xfa>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
    1aac:	ce 01       	movw	r24, r28
    1aae:	01 96       	adiw	r24, 0x01	; 1
    1ab0:	61 e0       	ldi	r22, 0x01	; 1
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	0e 94 57 09 	call	0x12ae	; 0x12ae <dir_next>
    1ab8:	18 2f       	mov	r17, r24
		} while (res == FR_OK);
    1aba:	88 23       	and	r24, r24
    1abc:	29 f3       	breq	.-54     	; 0x1a88 <f_open+0xbc>
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    1abe:	14 30       	cpi	r17, 0x04	; 4
    1ac0:	11 f1       	breq	.+68     	; 0x1b06 <f_open+0x13a>
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
    1ac2:	11 23       	and	r17, r17
    1ac4:	09 f5       	brne	.+66     	; 0x1b08 <f_open+0x13c>
		res = move_window(dp->fs, dp->sect);
    1ac6:	4f 85       	ldd	r20, Y+15	; 0x0f
    1ac8:	58 89       	ldd	r21, Y+16	; 0x10
    1aca:	69 89       	ldd	r22, Y+17	; 0x11
    1acc:	7a 89       	ldd	r23, Y+18	; 0x12
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <move_window>
    1ad6:	18 2f       	mov	r17, r24
		if (res == FR_OK) {
    1ad8:	88 23       	and	r24, r24
    1ada:	b1 f4       	brne	.+44     	; 0x1b08 <f_open+0x13c>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
    1adc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ade:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	40 e2       	ldi	r20, 0x20	; 32
    1ae6:	50 e0       	ldi	r21, 0x00	; 0
    1ae8:	0e 94 92 00 	call	0x124	; 0x124 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
    1aec:	6d 89       	ldd	r22, Y+21	; 0x15
    1aee:	7e 89       	ldd	r23, Y+22	; 0x16
    1af0:	8b 89       	ldd	r24, Y+19	; 0x13
    1af2:	9c 89       	ldd	r25, Y+20	; 0x14
    1af4:	4b e0       	ldi	r20, 0x0B	; 11
    1af6:	50 e0       	ldi	r21, 0x00	; 0
    1af8:	0e 94 67 00 	call	0xce	; 0xce <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
    1afc:	e9 81       	ldd	r30, Y+1	; 0x01
    1afe:	fa 81       	ldd	r31, Y+2	; 0x02
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	84 83       	std	Z+4, r24	; 0x04
    1b04:	01 c0       	rjmp	.+2      	; 0x1b08 <f_open+0x13c>
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
		} while (res == FR_OK);
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    1b06:	17 e0       	ldi	r17, 0x07	; 7
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
    1b08:	ab 88       	ldd	r10, Y+19	; 0x13
    1b0a:	bc 88       	ldd	r11, Y+20	; 0x14
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    1b0c:	11 23       	and	r17, r17
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <f_open+0x146>
    1b10:	07 c1       	rjmp	.+526    	; 0x1d20 <f_open+0x354>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    1b12:	b8 e0       	ldi	r27, 0x08	; 8
    1b14:	eb 2a       	or	r14, r27
    1b16:	07 c0       	rjmp	.+14     	; 0x1b26 <f_open+0x15a>
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    1b18:	f5 01       	movw	r30, r10
    1b1a:	83 85       	ldd	r24, Z+11	; 0x0b
    1b1c:	81 71       	andi	r24, 0x11	; 17
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <f_open+0x156>
    1b20:	1f c1       	rjmp	.+574    	; 0x1d60 <f_open+0x394>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    1b22:	e2 fc       	sbrc	r14, 2
    1b24:	1f c1       	rjmp	.+574    	; 0x1d64 <f_open+0x398>
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    1b26:	e3 fe       	sbrs	r14, 3
    1b28:	2b c1       	rjmp	.+598    	; 0x1d80 <f_open+0x3b4>
				dw = GET_FATTIME();				/* Created time */
    1b2a:	0e 94 76 1b 	call	0x36ec	; 0x36ec <get_fattime>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
				ST_DWORD(dir + DIR_CrtTime, dw);
    1b32:	f5 01       	movw	r30, r10
    1b34:	86 87       	std	Z+14, r24	; 0x0e
    1b36:	97 87       	std	Z+15, r25	; 0x0f
    1b38:	a0 8b       	std	Z+16, r26	; 0x10
    1b3a:	b1 8b       	std	Z+17, r27	; 0x11
				dir[DIR_Attr] = 0;				/* Reset attribute */
    1b3c:	13 86       	std	Z+11, r1	; 0x0b
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
    1b3e:	14 8e       	std	Z+28, r1	; 0x1c
    1b40:	15 8e       	std	Z+29, r1	; 0x1d
    1b42:	16 8e       	std	Z+30, r1	; 0x1e
    1b44:	17 8e       	std	Z+31, r1	; 0x1f
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4a:	b5 01       	movw	r22, r10
    1b4c:	0e 94 9c 00 	call	0x138	; 0x138 <ld_clust>
    1b50:	6d a3       	lds	r22, 0x5d
    1b52:	7e a3       	lds	r23, 0x5e
    1b54:	8f a3       	lds	r24, 0x5f
    1b56:	98 a7       	lds	r25, 0x78
				st_clust(dir, 0);				/* cluster = 0 */
    1b58:	c5 01       	movw	r24, r10
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	50 e0       	ldi	r21, 0x00	; 0
    1b5e:	ba 01       	movw	r22, r20
    1b60:	0e 94 b9 00 	call	0x172	; 0x172 <st_clust>
				dj.fs->wflag = 1;
    1b64:	89 80       	ldd	r8, Y+1	; 0x01
    1b66:	9a 80       	ldd	r9, Y+2	; 0x02
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	f4 01       	movw	r30, r8
    1b6c:	84 83       	std	Z+4, r24	; 0x04
				if (cl) {						/* Remove the cluster chain if exist */
    1b6e:	2d a1       	lds	r18, 0x4d
    1b70:	3e a1       	lds	r19, 0x4e
    1b72:	4f a1       	lds	r20, 0x4f
    1b74:	58 a5       	lds	r21, 0x68
    1b76:	21 15       	cp	r18, r1
    1b78:	31 05       	cpc	r19, r1
    1b7a:	41 05       	cpc	r20, r1
    1b7c:	51 05       	cpc	r21, r1
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <f_open+0x1b6>
    1b80:	ff c0       	rjmp	.+510    	; 0x1d80 <f_open+0x3b4>
					dw = dj.fs->winsect;
    1b82:	86 a5       	lds	r24, 0x66
    1b84:	97 a5       	lds	r25, 0x67
    1b86:	a0 a9       	sts	0x40, r26
    1b88:	b1 a9       	sts	0x41, r27
    1b8a:	89 a7       	lds	r24, 0x79
    1b8c:	9a a7       	lds	r25, 0x7a
    1b8e:	ab a7       	lds	r26, 0x7b
    1b90:	bc a7       	lds	r27, 0x7c
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1b92:	22 30       	cpi	r18, 0x02	; 2
    1b94:	31 05       	cpc	r19, r1
    1b96:	41 05       	cpc	r20, r1
    1b98:	51 05       	cpc	r21, r1
    1b9a:	08 f4       	brcc	.+2      	; 0x1b9e <f_open+0x1d2>
    1b9c:	e5 c0       	rjmp	.+458    	; 0x1d68 <f_open+0x39c>
    1b9e:	86 89       	ldd	r24, Z+22	; 0x16
    1ba0:	97 89       	ldd	r25, Z+23	; 0x17
    1ba2:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ba4:	b1 8d       	ldd	r27, Z+25	; 0x19
    1ba6:	28 17       	cp	r18, r24
    1ba8:	39 07       	cpc	r19, r25
    1baa:	4a 07       	cpc	r20, r26
    1bac:	5b 07       	cpc	r21, r27
    1bae:	08 f0       	brcs	.+2      	; 0x1bb2 <f_open+0x1e6>
    1bb0:	dd c0       	rjmp	.+442    	; 0x1d6c <f_open+0x3a0>
    1bb2:	1d a1       	lds	r17, 0x4d
    1bb4:	0e a1       	lds	r16, 0x4e
    1bb6:	3f a0       	lds	r19, 0x8f
    1bb8:	28 a4       	lds	r18, 0xa8
    1bba:	04 c0       	rjmp	.+8      	; 0x1bc4 <f_open+0x1f8>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    1bbc:	14 2d       	mov	r17, r4
    1bbe:	05 2d       	mov	r16, r5
    1bc0:	36 2c       	mov	r3, r6
    1bc2:	27 2c       	mov	r2, r7
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1bc4:	c4 01       	movw	r24, r8
    1bc6:	41 2f       	mov	r20, r17
    1bc8:	50 2f       	mov	r21, r16
    1bca:	63 2d       	mov	r22, r3
    1bcc:	72 2d       	mov	r23, r2
    1bce:	0e 94 87 05 	call	0xb0e	; 0xb0e <get_fat>
    1bd2:	2b 01       	movw	r4, r22
    1bd4:	3c 01       	movw	r6, r24
			if (nxt == 0) break;				/* Empty cluster? */
    1bd6:	61 15       	cp	r22, r1
    1bd8:	71 05       	cpc	r23, r1
    1bda:	81 05       	cpc	r24, r1
    1bdc:	91 05       	cpc	r25, r1
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <f_open+0x216>
    1be0:	40 c0       	rjmp	.+128    	; 0x1c62 <f_open+0x296>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1be2:	61 30       	cpi	r22, 0x01	; 1
    1be4:	71 05       	cpc	r23, r1
    1be6:	81 05       	cpc	r24, r1
    1be8:	91 05       	cpc	r25, r1
    1bea:	09 f4       	brne	.+2      	; 0x1bee <f_open+0x222>
    1bec:	c1 c0       	rjmp	.+386    	; 0x1d70 <f_open+0x3a4>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1bee:	6f 3f       	cpi	r22, 0xFF	; 255
    1bf0:	2f ef       	ldi	r18, 0xFF	; 255
    1bf2:	72 07       	cpc	r23, r18
    1bf4:	2f ef       	ldi	r18, 0xFF	; 255
    1bf6:	82 07       	cpc	r24, r18
    1bf8:	2f ef       	ldi	r18, 0xFF	; 255
    1bfa:	92 07       	cpc	r25, r18
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <f_open+0x234>
    1bfe:	ba c0       	rjmp	.+372    	; 0x1d74 <f_open+0x3a8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1c00:	c4 01       	movw	r24, r8
    1c02:	41 2f       	mov	r20, r17
    1c04:	50 2f       	mov	r21, r16
    1c06:	63 2d       	mov	r22, r3
    1c08:	72 2d       	mov	r23, r2
    1c0a:	00 e0       	ldi	r16, 0x00	; 0
    1c0c:	10 e0       	ldi	r17, 0x00	; 0
    1c0e:	98 01       	movw	r18, r16
    1c10:	0e 94 36 07 	call	0xe6c	; 0xe6c <put_fat>
    1c14:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    1c16:	88 23       	and	r24, r24
    1c18:	09 f0       	breq	.+2      	; 0x1c1c <f_open+0x250>
    1c1a:	82 c0       	rjmp	.+260    	; 0x1d20 <f_open+0x354>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
    1c1c:	f4 01       	movw	r30, r8
    1c1e:	86 85       	ldd	r24, Z+14	; 0x0e
    1c20:	97 85       	ldd	r25, Z+15	; 0x0f
    1c22:	a0 89       	ldd	r26, Z+16	; 0x10
    1c24:	b1 89       	ldd	r27, Z+17	; 0x11
    1c26:	8f 3f       	cpi	r24, 0xFF	; 255
    1c28:	ff ef       	ldi	r31, 0xFF	; 255
    1c2a:	9f 07       	cpc	r25, r31
    1c2c:	ff ef       	ldi	r31, 0xFF	; 255
    1c2e:	af 07       	cpc	r26, r31
    1c30:	ff ef       	ldi	r31, 0xFF	; 255
    1c32:	bf 07       	cpc	r27, r31
    1c34:	59 f0       	breq	.+22     	; 0x1c4c <f_open+0x280>
				fs->free_clust++;
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	a1 1d       	adc	r26, r1
    1c3a:	b1 1d       	adc	r27, r1
    1c3c:	f4 01       	movw	r30, r8
    1c3e:	86 87       	std	Z+14, r24	; 0x0e
    1c40:	97 87       	std	Z+15, r25	; 0x0f
    1c42:	a0 8b       	std	Z+16, r26	; 0x10
    1c44:	b1 8b       	std	Z+17, r27	; 0x11
				fs->fsi_flag |= 1;
    1c46:	85 81       	ldd	r24, Z+5	; 0x05
    1c48:	81 60       	ori	r24, 0x01	; 1
    1c4a:	85 83       	std	Z+5, r24	; 0x05
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    1c4c:	f4 01       	movw	r30, r8
    1c4e:	86 89       	ldd	r24, Z+22	; 0x16
    1c50:	97 89       	ldd	r25, Z+23	; 0x17
    1c52:	a0 8d       	ldd	r26, Z+24	; 0x18
    1c54:	b1 8d       	ldd	r27, Z+25	; 0x19
    1c56:	48 16       	cp	r4, r24
    1c58:	59 06       	cpc	r5, r25
    1c5a:	6a 06       	cpc	r6, r26
    1c5c:	7b 06       	cpc	r7, r27
    1c5e:	08 f4       	brcc	.+2      	; 0x1c62 <f_open+0x296>
    1c60:	ad cf       	rjmp	.-166    	; 0x1bbc <f_open+0x1f0>
				dj.fs->wflag = 1;
				if (cl) {						/* Remove the cluster chain if exist */
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
					if (res == FR_OK) {
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    1c62:	e9 81       	ldd	r30, Y+1	; 0x01
    1c64:	fa 81       	ldd	r31, Y+2	; 0x02
    1c66:	8d a1       	lds	r24, 0x4d
    1c68:	9e a1       	lds	r25, 0x4e
    1c6a:	af a1       	lds	r26, 0x4f
    1c6c:	b8 a5       	lds	r27, 0x68
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	a1 09       	sbc	r26, r1
    1c72:	b1 09       	sbc	r27, r1
    1c74:	82 87       	std	Z+10, r24	; 0x0a
    1c76:	93 87       	std	Z+11, r25	; 0x0b
    1c78:	a4 87       	std	Z+12, r26	; 0x0c
    1c7a:	b5 87       	std	Z+13, r27	; 0x0d
						res = move_window(dj.fs, dw);
    1c7c:	cf 01       	movw	r24, r30
    1c7e:	49 a5       	lds	r20, 0x69
    1c80:	5a a5       	lds	r21, 0x6a
    1c82:	6b a5       	lds	r22, 0x6b
    1c84:	7c a5       	lds	r23, 0x6c
    1c86:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <move_window>
    1c8a:	18 2f       	mov	r17, r24
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    1c8c:	88 23       	and	r24, r24
    1c8e:	79 f0       	breq	.+30     	; 0x1cae <f_open+0x2e2>
    1c90:	47 c0       	rjmp	.+142    	; 0x1d20 <f_open+0x354>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
    1c92:	11 23       	and	r17, r17
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <f_open+0x2cc>
    1c96:	44 c0       	rjmp	.+136    	; 0x1d20 <f_open+0x354>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
    1c98:	d5 01       	movw	r26, r10
    1c9a:	1b 96       	adiw	r26, 0x0b	; 11
    1c9c:	8c 91       	ld	r24, X
    1c9e:	1b 97       	sbiw	r26, 0x0b	; 11
    1ca0:	84 fd       	sbrc	r24, 4
    1ca2:	6a c0       	rjmp	.+212    	; 0x1d78 <f_open+0x3ac>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    1ca4:	e1 fe       	sbrs	r14, 1
    1ca6:	6c c0       	rjmp	.+216    	; 0x1d80 <f_open+0x3b4>
    1ca8:	80 fd       	sbrc	r24, 0
    1caa:	68 c0       	rjmp	.+208    	; 0x1d7c <f_open+0x3b0>
    1cac:	69 c0       	rjmp	.+210    	; 0x1d80 <f_open+0x3b4>
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
				mode |= FA__WRITTEN;
    1cae:	b0 e2       	ldi	r27, 0x20	; 32
    1cb0:	eb 2a       	or	r14, r27
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    1cb2:	09 81       	ldd	r16, Y+1	; 0x01
    1cb4:	1a 81       	ldd	r17, Y+2	; 0x02
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	86 a5       	lds	r24, 0x66
    1cba:	97 a5       	lds	r25, 0x67
    1cbc:	a0 a9       	sts	0x40, r26
    1cbe:	b1 a9       	sts	0x41, r27
    1cc0:	f6 01       	movw	r30, r12
    1cc2:	82 8f       	std	Z+26, r24	; 0x1a
    1cc4:	93 8f       	std	Z+27, r25	; 0x1b
    1cc6:	a4 8f       	std	Z+28, r26	; 0x1c
    1cc8:	b5 8f       	std	Z+29, r27	; 0x1d
			fp->dir_ptr = dir;
    1cca:	b7 8e       	std	Z+31, r11	; 0x1f
    1ccc:	a6 8e       	std	Z+30, r10	; 0x1e
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    1cce:	e4 82       	std	Z+4, r14	; 0x04
			fp->err = 0;						/* Clear error flag */
    1cd0:	15 82       	std	Z+5, r1	; 0x05
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    1cd2:	c8 01       	movw	r24, r16
    1cd4:	b5 01       	movw	r22, r10
    1cd6:	0e 94 9c 00 	call	0x138	; 0x138 <ld_clust>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	f6 01       	movw	r30, r12
    1ce0:	86 87       	std	Z+14, r24	; 0x0e
    1ce2:	97 87       	std	Z+15, r25	; 0x0f
    1ce4:	a0 8b       	std	Z+16, r26	; 0x10
    1ce6:	b1 8b       	std	Z+17, r27	; 0x11
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
    1ce8:	f5 01       	movw	r30, r10
    1cea:	84 8d       	ldd	r24, Z+28	; 0x1c
    1cec:	95 8d       	ldd	r25, Z+29	; 0x1d
    1cee:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1cf0:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1cf2:	f6 01       	movw	r30, r12
    1cf4:	82 87       	std	Z+10, r24	; 0x0a
    1cf6:	93 87       	std	Z+11, r25	; 0x0b
    1cf8:	a4 87       	std	Z+12, r26	; 0x0c
    1cfa:	b5 87       	std	Z+13, r27	; 0x0d
			fp->fptr = 0;						/* File pointer */
    1cfc:	16 82       	std	Z+6, r1	; 0x06
    1cfe:	17 82       	std	Z+7, r1	; 0x07
    1d00:	10 86       	std	Z+8, r1	; 0x08
    1d02:	11 86       	std	Z+9, r1	; 0x09
			fp->dsect = 0;
    1d04:	16 8a       	std	Z+22, r1	; 0x16
    1d06:	17 8a       	std	Z+23, r1	; 0x17
    1d08:	10 8e       	std	Z+24, r1	; 0x18
    1d0a:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
    1d0c:	11 83       	std	Z+1, r17	; 0x01
    1d0e:	00 83       	st	Z, r16
			fp->id = fp->fs->id;
    1d10:	d8 01       	movw	r26, r16
    1d12:	16 96       	adiw	r26, 0x06	; 6
    1d14:	8d 91       	ld	r24, X+
    1d16:	9c 91       	ld	r25, X
    1d18:	17 97       	sbiw	r26, 0x07	; 7
    1d1a:	93 83       	std	Z+3, r25	; 0x03
    1d1c:	82 83       	std	Z+2, r24	; 0x02
    1d1e:	06 c0       	rjmp	.+12     	; 0x1d2c <f_open+0x360>
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
    1d20:	f1 2e       	mov	r15, r17
    1d22:	04 c0       	rjmp	.+8      	; 0x1d2c <f_open+0x360>
    1d24:	0f 2e       	mov	r0, r31
    1d26:	f9 e0       	ldi	r31, 0x09	; 9
    1d28:	ff 2e       	mov	r15, r31
    1d2a:	f0 2d       	mov	r31, r0
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    1d2c:	8f 2d       	mov	r24, r15
    1d2e:	ac 96       	adiw	r28, 0x2c	; 44
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	ff 90       	pop	r15
    1d44:	ef 90       	pop	r14
    1d46:	df 90       	pop	r13
    1d48:	cf 90       	pop	r12
    1d4a:	bf 90       	pop	r11
    1d4c:	af 90       	pop	r10
    1d4e:	9f 90       	pop	r9
    1d50:	8f 90       	pop	r8
    1d52:	7f 90       	pop	r7
    1d54:	6f 90       	pop	r6
    1d56:	5f 90       	pop	r5
    1d58:	4f 90       	pop	r4
    1d5a:	3f 90       	pop	r3
    1d5c:	2f 90       	pop	r2
    1d5e:	08 95       	ret
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
    1d60:	17 e0       	ldi	r17, 0x07	; 7
    1d62:	de cf       	rjmp	.-68     	; 0x1d20 <f_open+0x354>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
    1d64:	18 e0       	ldi	r17, 0x08	; 8
    1d66:	dc cf       	rjmp	.-72     	; 0x1d20 <f_open+0x354>
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1d68:	12 e0       	ldi	r17, 0x02	; 2
    1d6a:	da cf       	rjmp	.-76     	; 0x1d20 <f_open+0x354>
    1d6c:	12 e0       	ldi	r17, 0x02	; 2
    1d6e:	d8 cf       	rjmp	.-80     	; 0x1d20 <f_open+0x354>
	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1d70:	12 e0       	ldi	r17, 0x02	; 2
    1d72:	d6 cf       	rjmp	.-84     	; 0x1d20 <f_open+0x354>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1d74:	11 e0       	ldi	r17, 0x01	; 1
    1d76:	d4 cf       	rjmp	.-88     	; 0x1d20 <f_open+0x354>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
					res = FR_NO_FILE;
    1d78:	14 e0       	ldi	r17, 0x04	; 4
    1d7a:	d2 cf       	rjmp	.-92     	; 0x1d20 <f_open+0x354>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
    1d7c:	17 e0       	ldi	r17, 0x07	; 7
    1d7e:	d0 cf       	rjmp	.-96     	; 0x1d20 <f_open+0x354>
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
    1d80:	e3 fe       	sbrs	r14, 3
    1d82:	97 cf       	rjmp	.-210    	; 0x1cb2 <f_open+0x2e6>
    1d84:	94 cf       	rjmp	.-216    	; 0x1cae <f_open+0x2e2>

00001d86 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
    1d86:	2f 92       	push	r2
    1d88:	3f 92       	push	r3
    1d8a:	4f 92       	push	r4
    1d8c:	5f 92       	push	r5
    1d8e:	6f 92       	push	r6
    1d90:	7f 92       	push	r7
    1d92:	8f 92       	push	r8
    1d94:	9f 92       	push	r9
    1d96:	bf 92       	push	r11
    1d98:	cf 92       	push	r12
    1d9a:	df 92       	push	r13
    1d9c:	ef 92       	push	r14
    1d9e:	ff 92       	push	r15
    1da0:	0f 93       	push	r16
    1da2:	1f 93       	push	r17
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <f_read+0x24>
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <f_read+0x26>
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	9c 83       	std	Y+4, r25	; 0x04
    1db2:	8b 83       	std	Y+3, r24	; 0x03
    1db4:	c6 2e       	mov	r12, r22
    1db6:	17 2f       	mov	r17, r23
    1db8:	4a 01       	movw	r8, r20
    1dba:	19 01       	movw	r2, r18
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
    1dbc:	d9 01       	movw	r26, r18
    1dbe:	1d 92       	st	X+, r1
    1dc0:	1c 92       	st	X, r1

	res = validate(fp);							/* Check validity */
    1dc2:	0e 94 43 01 	call	0x286	; 0x286 <validate>
    1dc6:	b8 2e       	mov	r11, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1dc8:	88 23       	and	r24, r24
    1dca:	09 f0       	breq	.+2      	; 0x1dce <f_read+0x48>
    1dcc:	67 c1       	rjmp	.+718    	; 0x209c <f_read+0x316>
	if (fp->err)								/* Check error */
    1dce:	eb 81       	ldd	r30, Y+3	; 0x03
    1dd0:	fc 81       	ldd	r31, Y+4	; 0x04
    1dd2:	85 81       	ldd	r24, Z+5	; 0x05
    1dd4:	88 23       	and	r24, r24
    1dd6:	09 f0       	breq	.+2      	; 0x1dda <f_read+0x54>
    1dd8:	5b c1       	rjmp	.+694    	; 0x2090 <f_read+0x30a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    1dda:	84 81       	ldd	r24, Z+4	; 0x04
    1ddc:	80 ff       	sbrs	r24, 0
    1dde:	5a c1       	rjmp	.+692    	; 0x2094 <f_read+0x30e>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    1de0:	82 85       	ldd	r24, Z+10	; 0x0a
    1de2:	93 85       	ldd	r25, Z+11	; 0x0b
    1de4:	a4 85       	ldd	r26, Z+12	; 0x0c
    1de6:	b5 85       	ldd	r27, Z+13	; 0x0d
    1de8:	46 81       	ldd	r20, Z+6	; 0x06
    1dea:	57 81       	ldd	r21, Z+7	; 0x07
    1dec:	60 85       	ldd	r22, Z+8	; 0x08
    1dee:	71 85       	ldd	r23, Z+9	; 0x09
    1df0:	84 1b       	sub	r24, r20
    1df2:	95 0b       	sbc	r25, r21
    1df4:	a6 0b       	sbc	r26, r22
    1df6:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    1df8:	a4 01       	movw	r20, r8
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	84 17       	cp	r24, r20
    1e00:	95 07       	cpc	r25, r21
    1e02:	a6 07       	cpc	r26, r22
    1e04:	b7 07       	cpc	r27, r23
    1e06:	08 f4       	brcc	.+2      	; 0x1e0a <f_read+0x84>
    1e08:	4c 01       	movw	r8, r24

	for ( ;  btr;								/* Repeat until all data read */
    1e0a:	81 14       	cp	r8, r1
    1e0c:	91 04       	cpc	r9, r1
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <f_read+0x8c>
    1e10:	45 c1       	rjmp	.+650    	; 0x209c <f_read+0x316>
    1e12:	c9 82       	std	Y+1, r12	; 0x01
    1e14:	1a 83       	std	Y+2, r17	; 0x02
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    1e16:	ab 81       	ldd	r26, Y+3	; 0x03
    1e18:	bc 81       	ldd	r27, Y+4	; 0x04
    1e1a:	16 96       	adiw	r26, 0x06	; 6
    1e1c:	4d 91       	ld	r20, X+
    1e1e:	5d 91       	ld	r21, X+
    1e20:	6d 91       	ld	r22, X+
    1e22:	7c 91       	ld	r23, X
    1e24:	19 97       	sbiw	r26, 0x09	; 9
    1e26:	db 01       	movw	r26, r22
    1e28:	ca 01       	movw	r24, r20
    1e2a:	91 70       	andi	r25, 0x01	; 1
    1e2c:	a0 70       	andi	r26, 0x00	; 0
    1e2e:	b0 70       	andi	r27, 0x00	; 0
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	a1 05       	cpc	r26, r1
    1e34:	b1 05       	cpc	r27, r1
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <f_read+0xb4>
    1e38:	d0 c0       	rjmp	.+416    	; 0x1fda <f_read+0x254>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    1e3a:	ab 81       	ldd	r26, Y+3	; 0x03
    1e3c:	bc 81       	ldd	r27, Y+4	; 0x04
    1e3e:	ed 91       	ld	r30, X+
    1e40:	fc 91       	ld	r31, X
    1e42:	db 01       	movw	r26, r22
    1e44:	ca 01       	movw	r24, r20
    1e46:	07 2e       	mov	r0, r23
    1e48:	79 e0       	ldi	r23, 0x09	; 9
    1e4a:	b6 95       	lsr	r27
    1e4c:	a7 95       	ror	r26
    1e4e:	97 95       	ror	r25
    1e50:	87 95       	ror	r24
    1e52:	7a 95       	dec	r23
    1e54:	d1 f7       	brne	.-12     	; 0x1e4a <f_read+0xc4>
    1e56:	70 2d       	mov	r23, r0
    1e58:	12 81       	ldd	r17, Z+2	; 0x02
    1e5a:	11 50       	subi	r17, 0x01	; 1
    1e5c:	18 23       	and	r17, r24
			if (!csect) {						/* On the cluster boundary? */
    1e5e:	e9 f5       	brne	.+122    	; 0x1eda <f_read+0x154>
				if (fp->fptr == 0) {			/* On the top of the file? */
    1e60:	41 15       	cp	r20, r1
    1e62:	51 05       	cpc	r21, r1
    1e64:	61 05       	cpc	r22, r1
    1e66:	71 05       	cpc	r23, r1
    1e68:	39 f4       	brne	.+14     	; 0x1e78 <f_read+0xf2>
					clst = fp->sclust;			/* Follow from the origin */
    1e6a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e6c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e6e:	86 85       	ldd	r24, Z+14	; 0x0e
    1e70:	97 85       	ldd	r25, Z+15	; 0x0f
    1e72:	a0 89       	ldd	r26, Z+16	; 0x10
    1e74:	b1 89       	ldd	r27, Z+17	; 0x11
    1e76:	0d c0       	rjmp	.+26     	; 0x1e92 <f_read+0x10c>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    1e78:	ab 81       	ldd	r26, Y+3	; 0x03
    1e7a:	bc 81       	ldd	r27, Y+4	; 0x04
    1e7c:	52 96       	adiw	r26, 0x12	; 18
    1e7e:	4d 91       	ld	r20, X+
    1e80:	5d 91       	ld	r21, X+
    1e82:	6d 91       	ld	r22, X+
    1e84:	7c 91       	ld	r23, X
    1e86:	55 97       	sbiw	r26, 0x15	; 21
    1e88:	cf 01       	movw	r24, r30
    1e8a:	0e 94 87 05 	call	0xb0e	; 0xb0e <get_fat>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    1e92:	82 30       	cpi	r24, 0x02	; 2
    1e94:	91 05       	cpc	r25, r1
    1e96:	a1 05       	cpc	r26, r1
    1e98:	b1 05       	cpc	r27, r1
    1e9a:	40 f4       	brcc	.+16     	; 0x1eac <f_read+0x126>
    1e9c:	82 e0       	ldi	r24, 0x02	; 2
    1e9e:	eb 81       	ldd	r30, Y+3	; 0x03
    1ea0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea2:	85 83       	std	Z+5, r24	; 0x05
    1ea4:	bb 24       	eor	r11, r11
    1ea6:	68 94       	set
    1ea8:	b1 f8       	bld	r11, 1
    1eaa:	f8 c0       	rjmp	.+496    	; 0x209c <f_read+0x316>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1eac:	8f 3f       	cpi	r24, 0xFF	; 255
    1eae:	ff ef       	ldi	r31, 0xFF	; 255
    1eb0:	9f 07       	cpc	r25, r31
    1eb2:	ff ef       	ldi	r31, 0xFF	; 255
    1eb4:	af 07       	cpc	r26, r31
    1eb6:	ff ef       	ldi	r31, 0xFF	; 255
    1eb8:	bf 07       	cpc	r27, r31
    1eba:	49 f4       	brne	.+18     	; 0x1ece <f_read+0x148>
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	ab 81       	ldd	r26, Y+3	; 0x03
    1ec0:	bc 81       	ldd	r27, Y+4	; 0x04
    1ec2:	15 96       	adiw	r26, 0x05	; 5
    1ec4:	8c 93       	st	X, r24
    1ec6:	15 97       	sbiw	r26, 0x05	; 5
    1ec8:	bb 24       	eor	r11, r11
    1eca:	b3 94       	inc	r11
    1ecc:	e7 c0       	rjmp	.+462    	; 0x209c <f_read+0x316>
				fp->clust = clst;				/* Update current cluster */
    1ece:	eb 81       	ldd	r30, Y+3	; 0x03
    1ed0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ed2:	82 8b       	std	Z+18, r24	; 0x12
    1ed4:	93 8b       	std	Z+19, r25	; 0x13
    1ed6:	a4 8b       	std	Z+20, r26	; 0x14
    1ed8:	b5 8b       	std	Z+21, r27	; 0x15
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    1eda:	ab 81       	ldd	r26, Y+3	; 0x03
    1edc:	bc 81       	ldd	r27, Y+4	; 0x04
    1ede:	ed 90       	ld	r14, X+
    1ee0:	fc 90       	ld	r15, X
    1ee2:	11 97       	sbiw	r26, 0x01	; 1
    1ee4:	52 96       	adiw	r26, 0x12	; 18
    1ee6:	4d 91       	ld	r20, X+
    1ee8:	5d 91       	ld	r21, X+
    1eea:	6d 91       	ld	r22, X+
    1eec:	7c 91       	ld	r23, X
    1eee:	55 97       	sbiw	r26, 0x15	; 21
    1ef0:	c7 01       	movw	r24, r14
    1ef2:	0e 94 51 05 	call	0xaa2	; 0xaa2 <clust2sect>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	a1 05       	cpc	r26, r1
    1efe:	b1 05       	cpc	r27, r1
    1f00:	41 f4       	brne	.+16     	; 0x1f12 <f_read+0x18c>
    1f02:	82 e0       	ldi	r24, 0x02	; 2
    1f04:	eb 81       	ldd	r30, Y+3	; 0x03
    1f06:	fc 81       	ldd	r31, Y+4	; 0x04
    1f08:	85 83       	std	Z+5, r24	; 0x05
    1f0a:	bb 24       	eor	r11, r11
    1f0c:	68 94       	set
    1f0e:	b1 f8       	bld	r11, 1
    1f10:	c5 c0       	rjmp	.+394    	; 0x209c <f_read+0x316>
			sect += csect;
    1f12:	2c 01       	movw	r4, r24
    1f14:	3d 01       	movw	r6, r26
    1f16:	41 0e       	add	r4, r17
    1f18:	51 1c       	adc	r5, r1
    1f1a:	61 1c       	adc	r6, r1
    1f1c:	71 1c       	adc	r7, r1
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    1f1e:	64 01       	movw	r12, r8
    1f20:	cd 2c       	mov	r12, r13
    1f22:	dd 24       	eor	r13, r13
    1f24:	c6 94       	lsr	r12
			if (cc) {							/* Read maximum contiguous sectors directly */
    1f26:	c1 14       	cp	r12, r1
    1f28:	d1 04       	cpc	r13, r1
    1f2a:	09 f4       	brne	.+2      	; 0x1f2e <f_read+0x1a8>
    1f2c:	4e c0       	rjmp	.+156    	; 0x1fca <f_read+0x244>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    1f2e:	d7 01       	movw	r26, r14
    1f30:	12 96       	adiw	r26, 0x02	; 2
    1f32:	4c 91       	ld	r20, X
    1f34:	12 97       	sbiw	r26, 0x02	; 2
    1f36:	c6 01       	movw	r24, r12
    1f38:	81 0f       	add	r24, r17
    1f3a:	91 1d       	adc	r25, r1
    1f3c:	24 2f       	mov	r18, r20
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	28 17       	cp	r18, r24
    1f42:	39 07       	cpc	r19, r25
    1f44:	20 f4       	brcc	.+8      	; 0x1f4e <f_read+0x1c8>
					cc = fp->fs->csize - csect;
    1f46:	c9 01       	movw	r24, r18
    1f48:	6c 01       	movw	r12, r24
    1f4a:	c1 1a       	sub	r12, r17
    1f4c:	d1 08       	sbc	r13, r1
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
    1f4e:	f7 01       	movw	r30, r14
    1f50:	81 81       	ldd	r24, Z+1	; 0x01
    1f52:	69 81       	ldd	r22, Y+1	; 0x01
    1f54:	7a 81       	ldd	r23, Y+2	; 0x02
    1f56:	a3 01       	movw	r20, r6
    1f58:	92 01       	movw	r18, r4
    1f5a:	86 01       	movw	r16, r12
    1f5c:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <disk_read>
    1f60:	88 23       	and	r24, r24
    1f62:	49 f0       	breq	.+18     	; 0x1f76 <f_read+0x1f0>
					ABORT(fp->fs, FR_DISK_ERR);
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	ab 81       	ldd	r26, Y+3	; 0x03
    1f68:	bc 81       	ldd	r27, Y+4	; 0x04
    1f6a:	15 96       	adiw	r26, 0x05	; 5
    1f6c:	8c 93       	st	X, r24
    1f6e:	15 97       	sbiw	r26, 0x05	; 5
    1f70:	bb 24       	eor	r11, r11
    1f72:	b3 94       	inc	r11
    1f74:	93 c0       	rjmp	.+294    	; 0x209c <f_read+0x316>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    1f76:	ab 81       	ldd	r26, Y+3	; 0x03
    1f78:	bc 81       	ldd	r27, Y+4	; 0x04
    1f7a:	ed 91       	ld	r30, X+
    1f7c:	fc 91       	ld	r31, X
    1f7e:	11 97       	sbiw	r26, 0x01	; 1
    1f80:	84 81       	ldd	r24, Z+4	; 0x04
    1f82:	88 23       	and	r24, r24
    1f84:	f1 f0       	breq	.+60     	; 0x1fc2 <f_read+0x23c>
    1f86:	86 a5       	lds	r24, 0x66
    1f88:	97 a5       	lds	r25, 0x67
    1f8a:	a0 a9       	sts	0x40, r26
    1f8c:	b1 a9       	sts	0x41, r27
    1f8e:	84 19       	sub	r24, r4
    1f90:	95 09       	sbc	r25, r5
    1f92:	a6 09       	sbc	r26, r6
    1f94:	b7 09       	sbc	r27, r7
    1f96:	a6 01       	movw	r20, r12
    1f98:	60 e0       	ldi	r22, 0x00	; 0
    1f9a:	70 e0       	ldi	r23, 0x00	; 0
    1f9c:	84 17       	cp	r24, r20
    1f9e:	95 07       	cpc	r25, r21
    1fa0:	a6 07       	cpc	r26, r22
    1fa2:	b7 07       	cpc	r27, r23
    1fa4:	70 f4       	brcc	.+28     	; 0x1fc2 <f_read+0x23c>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    1fa6:	98 2f       	mov	r25, r24
    1fa8:	88 27       	eor	r24, r24
    1faa:	99 0f       	add	r25, r25
    1fac:	bf 01       	movw	r22, r30
    1fae:	6e 5c       	subi	r22, 0xCE	; 206
    1fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb6:	8e 0f       	add	r24, r30
    1fb8:	9f 1f       	adc	r25, r31
    1fba:	40 e0       	ldi	r20, 0x00	; 0
    1fbc:	52 e0       	ldi	r21, 0x02	; 2
    1fbe:	0e 94 67 00 	call	0xce	; 0xce <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    1fc2:	dc 2c       	mov	r13, r12
    1fc4:	cc 24       	eor	r12, r12
    1fc6:	dd 0c       	add	r13, r13
				continue;
    1fc8:	3e c0       	rjmp	.+124    	; 0x2046 <f_read+0x2c0>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    1fca:	ab 81       	ldd	r26, Y+3	; 0x03
    1fcc:	bc 81       	ldd	r27, Y+4	; 0x04
    1fce:	56 96       	adiw	r26, 0x16	; 22
    1fd0:	4d 92       	st	X+, r4
    1fd2:	5d 92       	st	X+, r5
    1fd4:	6d 92       	st	X+, r6
    1fd6:	7c 92       	st	X, r7
    1fd8:	59 97       	sbiw	r26, 0x19	; 25
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    1fda:	eb 81       	ldd	r30, Y+3	; 0x03
    1fdc:	fc 81       	ldd	r31, Y+4	; 0x04
    1fde:	c6 80       	ldd	r12, Z+6	; 0x06
    1fe0:	d7 80       	ldd	r13, Z+7	; 0x07
    1fe2:	e0 84       	ldd	r14, Z+8	; 0x08
    1fe4:	f1 84       	ldd	r15, Z+9	; 0x09
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
    1fe6:	46 89       	ldd	r20, Z+22	; 0x16
    1fe8:	57 89       	ldd	r21, Z+23	; 0x17
    1fea:	60 8d       	ldd	r22, Z+24	; 0x18
    1fec:	71 8d       	ldd	r23, Z+25	; 0x19
    1fee:	80 81       	ld	r24, Z
    1ff0:	91 81       	ldd	r25, Z+1	; 0x01
    1ff2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <move_window>
    1ff6:	88 23       	and	r24, r24
    1ff8:	49 f0       	breq	.+18     	; 0x200c <f_read+0x286>
			ABORT(fp->fs, FR_DISK_ERR);
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	ab 81       	ldd	r26, Y+3	; 0x03
    1ffe:	bc 81       	ldd	r27, Y+4	; 0x04
    2000:	15 96       	adiw	r26, 0x05	; 5
    2002:	8c 93       	st	X, r24
    2004:	15 97       	sbiw	r26, 0x05	; 5
    2006:	bb 24       	eor	r11, r11
    2008:	b3 94       	inc	r11
    200a:	48 c0       	rjmp	.+144    	; 0x209c <f_read+0x316>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    200c:	c6 01       	movw	r24, r12
    200e:	91 70       	andi	r25, 0x01	; 1
    2010:	e0 e0       	ldi	r30, 0x00	; 0
    2012:	f2 e0       	ldi	r31, 0x02	; 2
    2014:	e8 1b       	sub	r30, r24
    2016:	f9 0b       	sbc	r31, r25
    2018:	64 01       	movw	r12, r8
    201a:	e8 15       	cp	r30, r8
    201c:	f9 05       	cpc	r31, r9
    201e:	08 f4       	brcc	.+2      	; 0x2022 <f_read+0x29c>
    2020:	6f 01       	movw	r12, r30
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    2022:	ab 81       	ldd	r26, Y+3	; 0x03
    2024:	bc 81       	ldd	r27, Y+4	; 0x04
    2026:	16 96       	adiw	r26, 0x06	; 6
    2028:	6d 91       	ld	r22, X+
    202a:	7c 91       	ld	r23, X
    202c:	17 97       	sbiw	r26, 0x07	; 7
    202e:	71 70       	andi	r23, 0x01	; 1
    2030:	cb 01       	movw	r24, r22
    2032:	c2 96       	adiw	r24, 0x32	; 50
    2034:	6d 91       	ld	r22, X+
    2036:	7c 91       	ld	r23, X
    2038:	68 0f       	add	r22, r24
    203a:	79 1f       	adc	r23, r25
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	9a 81       	ldd	r25, Y+2	; 0x02
    2040:	a6 01       	movw	r20, r12
    2042:	0e 94 67 00 	call	0xce	; 0xce <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    2046:	e9 81       	ldd	r30, Y+1	; 0x01
    2048:	fa 81       	ldd	r31, Y+2	; 0x02
    204a:	ec 0d       	add	r30, r12
    204c:	fd 1d       	adc	r31, r13
    204e:	fa 83       	std	Y+2, r31	; 0x02
    2050:	e9 83       	std	Y+1, r30	; 0x01
    2052:	a6 01       	movw	r20, r12
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	eb 81       	ldd	r30, Y+3	; 0x03
    205a:	fc 81       	ldd	r31, Y+4	; 0x04
    205c:	86 81       	ldd	r24, Z+6	; 0x06
    205e:	97 81       	ldd	r25, Z+7	; 0x07
    2060:	a0 85       	ldd	r26, Z+8	; 0x08
    2062:	b1 85       	ldd	r27, Z+9	; 0x09
    2064:	84 0f       	add	r24, r20
    2066:	95 1f       	adc	r25, r21
    2068:	a6 1f       	adc	r26, r22
    206a:	b7 1f       	adc	r27, r23
    206c:	86 83       	std	Z+6, r24	; 0x06
    206e:	97 83       	std	Z+7, r25	; 0x07
    2070:	a0 87       	std	Z+8, r26	; 0x08
    2072:	b1 87       	std	Z+9, r27	; 0x09
    2074:	d1 01       	movw	r26, r2
    2076:	8d 91       	ld	r24, X+
    2078:	9c 91       	ld	r25, X
    207a:	11 97       	sbiw	r26, 0x01	; 1
    207c:	8c 0d       	add	r24, r12
    207e:	9d 1d       	adc	r25, r13
    2080:	11 96       	adiw	r26, 0x01	; 1
    2082:	9c 93       	st	X, r25
    2084:	8e 93       	st	-X, r24
    2086:	8c 18       	sub	r8, r12
    2088:	9d 08       	sbc	r9, r13
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    208a:	09 f0       	breq	.+2      	; 0x208e <f_read+0x308>
    208c:	c4 ce       	rjmp	.-632    	; 0x1e16 <f_read+0x90>
    208e:	06 c0       	rjmp	.+12     	; 0x209c <f_read+0x316>
	*br = 0;	/* Clear read byte counter */

	res = validate(fp);							/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)								/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
    2090:	b8 2e       	mov	r11, r24
    2092:	04 c0       	rjmp	.+8      	; 0x209c <f_read+0x316>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    2094:	0f 2e       	mov	r0, r31
    2096:	f7 e0       	ldi	r31, 0x07	; 7
    2098:	bf 2e       	mov	r11, r31
    209a:	f0 2d       	mov	r31, r0
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    209c:	8b 2d       	mov	r24, r11
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	df 91       	pop	r29
    20a8:	cf 91       	pop	r28
    20aa:	1f 91       	pop	r17
    20ac:	0f 91       	pop	r16
    20ae:	ff 90       	pop	r15
    20b0:	ef 90       	pop	r14
    20b2:	df 90       	pop	r13
    20b4:	cf 90       	pop	r12
    20b6:	bf 90       	pop	r11
    20b8:	9f 90       	pop	r9
    20ba:	8f 90       	pop	r8
    20bc:	7f 90       	pop	r7
    20be:	6f 90       	pop	r6
    20c0:	5f 90       	pop	r5
    20c2:	4f 90       	pop	r4
    20c4:	3f 90       	pop	r3
    20c6:	2f 90       	pop	r2
    20c8:	08 95       	ret

000020ca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    20ca:	2f 92       	push	r2
    20cc:	3f 92       	push	r3
    20ce:	4f 92       	push	r4
    20d0:	5f 92       	push	r5
    20d2:	6f 92       	push	r6
    20d4:	7f 92       	push	r7
    20d6:	8f 92       	push	r8
    20d8:	9f 92       	push	r9
    20da:	af 92       	push	r10
    20dc:	bf 92       	push	r11
    20de:	cf 92       	push	r12
    20e0:	df 92       	push	r13
    20e2:	ef 92       	push	r14
    20e4:	ff 92       	push	r15
    20e6:	0f 93       	push	r16
    20e8:	1f 93       	push	r17
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <f_write+0x26>
    20f0:	00 d0       	rcall	.+0      	; 0x20f2 <f_write+0x28>
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	9c 83       	std	Y+4, r25	; 0x04
    20f8:	8b 83       	std	Y+3, r24	; 0x03
    20fa:	c6 2e       	mov	r12, r22
    20fc:	17 2f       	mov	r17, r23
    20fe:	4a 01       	movw	r8, r20
    2100:	19 01       	movw	r2, r18
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    2102:	d9 01       	movw	r26, r18
    2104:	1d 92       	st	X+, r1
    2106:	1c 92       	st	X, r1

	res = validate(fp);						/* Check validity */
    2108:	0e 94 43 01 	call	0x286	; 0x286 <validate>
    210c:	b8 2e       	mov	r11, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    210e:	88 23       	and	r24, r24
    2110:	09 f0       	breq	.+2      	; 0x2114 <f_write+0x4a>
    2112:	ec c1       	rjmp	.+984    	; 0x24ec <f_write+0x422>
	if (fp->err)							/* Check error */
    2114:	eb 81       	ldd	r30, Y+3	; 0x03
    2116:	fc 81       	ldd	r31, Y+4	; 0x04
    2118:	85 81       	ldd	r24, Z+5	; 0x05
    211a:	88 23       	and	r24, r24
    211c:	09 f0       	breq	.+2      	; 0x2120 <f_write+0x56>
    211e:	e0 c1       	rjmp	.+960    	; 0x24e0 <f_write+0x416>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    2120:	84 81       	ldd	r24, Z+4	; 0x04
    2122:	81 ff       	sbrs	r24, 1
    2124:	df c1       	rjmp	.+958    	; 0x24e4 <f_write+0x41a>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    2126:	46 81       	ldd	r20, Z+6	; 0x06
    2128:	57 81       	ldd	r21, Z+7	; 0x07
    212a:	60 85       	ldd	r22, Z+8	; 0x08
    212c:	71 85       	ldd	r23, Z+9	; 0x09
    212e:	c4 01       	movw	r24, r8
    2130:	a0 e0       	ldi	r26, 0x00	; 0
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	84 0f       	add	r24, r20
    2136:	95 1f       	adc	r25, r21
    2138:	a6 1f       	adc	r26, r22
    213a:	b7 1f       	adc	r27, r23
    213c:	84 17       	cp	r24, r20
    213e:	95 07       	cpc	r25, r21
    2140:	a6 07       	cpc	r26, r22
    2142:	b7 07       	cpc	r27, r23
    2144:	08 f4       	brcc	.+2      	; 0x2148 <f_write+0x7e>
    2146:	af c1       	rjmp	.+862    	; 0x24a6 <f_write+0x3dc>

	for ( ;  btw;							/* Repeat until all data written */
    2148:	81 14       	cp	r8, r1
    214a:	91 04       	cpc	r9, r1
    214c:	09 f4       	brne	.+2      	; 0x2150 <f_write+0x86>
    214e:	ab c1       	rjmp	.+854    	; 0x24a6 <f_write+0x3dc>
    2150:	c9 82       	std	Y+1, r12	; 0x01
    2152:	1a 83       	std	Y+2, r17	; 0x02
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
    2154:	aa 24       	eor	r10, r10
    2156:	a3 94       	inc	r10
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    2158:	ab 81       	ldd	r26, Y+3	; 0x03
    215a:	bc 81       	ldd	r27, Y+4	; 0x04
    215c:	16 96       	adiw	r26, 0x06	; 6
    215e:	4d 91       	ld	r20, X+
    2160:	5d 91       	ld	r21, X+
    2162:	6d 91       	ld	r22, X+
    2164:	7c 91       	ld	r23, X
    2166:	19 97       	sbiw	r26, 0x09	; 9
    2168:	db 01       	movw	r26, r22
    216a:	ca 01       	movw	r24, r20
    216c:	91 70       	andi	r25, 0x01	; 1
    216e:	a0 70       	andi	r26, 0x00	; 0
    2170:	b0 70       	andi	r27, 0x00	; 0
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	a1 05       	cpc	r26, r1
    2176:	b1 05       	cpc	r27, r1
    2178:	09 f0       	breq	.+2      	; 0x217c <f_write+0xb2>
    217a:	33 c1       	rjmp	.+614    	; 0x23e2 <f_write+0x318>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    217c:	eb 81       	ldd	r30, Y+3	; 0x03
    217e:	fc 81       	ldd	r31, Y+4	; 0x04
    2180:	20 81       	ld	r18, Z
    2182:	31 81       	ldd	r19, Z+1	; 0x01
    2184:	db 01       	movw	r26, r22
    2186:	ca 01       	movw	r24, r20
    2188:	07 2e       	mov	r0, r23
    218a:	79 e0       	ldi	r23, 0x09	; 9
    218c:	b6 95       	lsr	r27
    218e:	a7 95       	ror	r26
    2190:	97 95       	ror	r25
    2192:	87 95       	ror	r24
    2194:	7a 95       	dec	r23
    2196:	d1 f7       	brne	.-12     	; 0x218c <f_write+0xc2>
    2198:	70 2d       	mov	r23, r0
    219a:	f9 01       	movw	r30, r18
    219c:	12 81       	ldd	r17, Z+2	; 0x02
    219e:	11 50       	subi	r17, 0x01	; 1
    21a0:	18 23       	and	r17, r24
			if (!csect) {					/* On the cluster boundary? */
    21a2:	09 f0       	breq	.+2      	; 0x21a6 <f_write+0xdc>
    21a4:	5b c0       	rjmp	.+182    	; 0x225c <f_write+0x192>
				if (fp->fptr == 0) {		/* On the top of the file? */
    21a6:	41 15       	cp	r20, r1
    21a8:	51 05       	cpc	r21, r1
    21aa:	61 05       	cpc	r22, r1
    21ac:	71 05       	cpc	r23, r1
    21ae:	99 f4       	brne	.+38     	; 0x21d6 <f_write+0x10c>
					clst = fp->sclust;		/* Follow from the origin */
    21b0:	eb 81       	ldd	r30, Y+3	; 0x03
    21b2:	fc 81       	ldd	r31, Y+4	; 0x04
    21b4:	86 85       	ldd	r24, Z+14	; 0x0e
    21b6:	97 85       	ldd	r25, Z+15	; 0x0f
    21b8:	a0 89       	ldd	r26, Z+16	; 0x10
    21ba:	b1 89       	ldd	r27, Z+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	a1 05       	cpc	r26, r1
    21c0:	b1 05       	cpc	r27, r1
    21c2:	d9 f4       	brne	.+54     	; 0x21fa <f_write+0x130>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    21c4:	c9 01       	movw	r24, r18
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	ba 01       	movw	r22, r20
    21cc:	0e 94 2a 08 	call	0x1054	; 0x1054 <create_chain>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	0d c0       	rjmp	.+26     	; 0x21f0 <f_write+0x126>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    21d6:	ab 81       	ldd	r26, Y+3	; 0x03
    21d8:	bc 81       	ldd	r27, Y+4	; 0x04
    21da:	52 96       	adiw	r26, 0x12	; 18
    21dc:	4d 91       	ld	r20, X+
    21de:	5d 91       	ld	r21, X+
    21e0:	6d 91       	ld	r22, X+
    21e2:	7c 91       	ld	r23, X
    21e4:	55 97       	sbiw	r26, 0x15	; 21
    21e6:	c9 01       	movw	r24, r18
    21e8:	0e 94 2a 08 	call	0x1054	; 0x1054 <create_chain>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	a1 05       	cpc	r26, r1
    21f4:	b1 05       	cpc	r27, r1
    21f6:	09 f4       	brne	.+2      	; 0x21fa <f_write+0x130>
    21f8:	56 c1       	rjmp	.+684    	; 0x24a6 <f_write+0x3dc>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	91 05       	cpc	r25, r1
    21fe:	a1 05       	cpc	r26, r1
    2200:	b1 05       	cpc	r27, r1
    2202:	41 f4       	brne	.+16     	; 0x2214 <f_write+0x14a>
    2204:	82 e0       	ldi	r24, 0x02	; 2
    2206:	eb 81       	ldd	r30, Y+3	; 0x03
    2208:	fc 81       	ldd	r31, Y+4	; 0x04
    220a:	85 83       	std	Z+5, r24	; 0x05
    220c:	bb 24       	eor	r11, r11
    220e:	68 94       	set
    2210:	b1 f8       	bld	r11, 1
    2212:	6c c1       	rjmp	.+728    	; 0x24ec <f_write+0x422>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2214:	8f 3f       	cpi	r24, 0xFF	; 255
    2216:	ff ef       	ldi	r31, 0xFF	; 255
    2218:	9f 07       	cpc	r25, r31
    221a:	ff ef       	ldi	r31, 0xFF	; 255
    221c:	af 07       	cpc	r26, r31
    221e:	ff ef       	ldi	r31, 0xFF	; 255
    2220:	bf 07       	cpc	r27, r31
    2222:	49 f4       	brne	.+18     	; 0x2236 <f_write+0x16c>
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	ab 81       	ldd	r26, Y+3	; 0x03
    2228:	bc 81       	ldd	r27, Y+4	; 0x04
    222a:	15 96       	adiw	r26, 0x05	; 5
    222c:	8c 93       	st	X, r24
    222e:	15 97       	sbiw	r26, 0x05	; 5
    2230:	bb 24       	eor	r11, r11
    2232:	b3 94       	inc	r11
    2234:	5b c1       	rjmp	.+694    	; 0x24ec <f_write+0x422>
				fp->clust = clst;			/* Update current cluster */
    2236:	eb 81       	ldd	r30, Y+3	; 0x03
    2238:	fc 81       	ldd	r31, Y+4	; 0x04
    223a:	82 8b       	std	Z+18, r24	; 0x12
    223c:	93 8b       	std	Z+19, r25	; 0x13
    223e:	a4 8b       	std	Z+20, r26	; 0x14
    2240:	b5 8b       	std	Z+21, r27	; 0x15
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
    2242:	46 85       	ldd	r20, Z+14	; 0x0e
    2244:	57 85       	ldd	r21, Z+15	; 0x0f
    2246:	60 89       	ldd	r22, Z+16	; 0x10
    2248:	71 89       	ldd	r23, Z+17	; 0x11
    224a:	41 15       	cp	r20, r1
    224c:	51 05       	cpc	r21, r1
    224e:	61 05       	cpc	r22, r1
    2250:	71 05       	cpc	r23, r1
    2252:	21 f4       	brne	.+8      	; 0x225c <f_write+0x192>
    2254:	86 87       	std	Z+14, r24	; 0x0e
    2256:	97 87       	std	Z+15, r25	; 0x0f
    2258:	a0 8b       	std	Z+16, r26	; 0x10
    225a:	b1 8b       	std	Z+17, r27	; 0x11
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    225c:	ab 81       	ldd	r26, Y+3	; 0x03
    225e:	bc 81       	ldd	r27, Y+4	; 0x04
    2260:	2d 91       	ld	r18, X+
    2262:	3c 91       	ld	r19, X
    2264:	f9 01       	movw	r30, r18
    2266:	86 a5       	lds	r24, 0x66
    2268:	97 a5       	lds	r25, 0x67
    226a:	a0 a9       	sts	0x40, r26
    226c:	b1 a9       	sts	0x41, r27
    226e:	eb 81       	ldd	r30, Y+3	; 0x03
    2270:	fc 81       	ldd	r31, Y+4	; 0x04
    2272:	46 89       	ldd	r20, Z+22	; 0x16
    2274:	57 89       	ldd	r21, Z+23	; 0x17
    2276:	60 8d       	ldd	r22, Z+24	; 0x18
    2278:	71 8d       	ldd	r23, Z+25	; 0x19
    227a:	84 17       	cp	r24, r20
    227c:	95 07       	cpc	r25, r21
    227e:	a6 07       	cpc	r26, r22
    2280:	b7 07       	cpc	r27, r23
    2282:	71 f4       	brne	.+28     	; 0x22a0 <f_write+0x1d6>
    2284:	c9 01       	movw	r24, r18
    2286:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sync_window>
    228a:	88 23       	and	r24, r24
    228c:	49 f0       	breq	.+18     	; 0x22a0 <f_write+0x1d6>
				ABORT(fp->fs, FR_DISK_ERR);
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	ab 81       	ldd	r26, Y+3	; 0x03
    2292:	bc 81       	ldd	r27, Y+4	; 0x04
    2294:	15 96       	adiw	r26, 0x05	; 5
    2296:	8c 93       	st	X, r24
    2298:	15 97       	sbiw	r26, 0x05	; 5
    229a:	bb 24       	eor	r11, r11
    229c:	b3 94       	inc	r11
    229e:	26 c1       	rjmp	.+588    	; 0x24ec <f_write+0x422>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    22a0:	eb 81       	ldd	r30, Y+3	; 0x03
    22a2:	fc 81       	ldd	r31, Y+4	; 0x04
    22a4:	e0 80       	ld	r14, Z
    22a6:	f1 80       	ldd	r15, Z+1	; 0x01
    22a8:	42 89       	ldd	r20, Z+18	; 0x12
    22aa:	53 89       	ldd	r21, Z+19	; 0x13
    22ac:	64 89       	ldd	r22, Z+20	; 0x14
    22ae:	75 89       	ldd	r23, Z+21	; 0x15
    22b0:	c7 01       	movw	r24, r14
    22b2:	0e 94 51 05 	call	0xaa2	; 0xaa2 <clust2sect>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	a1 05       	cpc	r26, r1
    22be:	b1 05       	cpc	r27, r1
    22c0:	51 f4       	brne	.+20     	; 0x22d6 <f_write+0x20c>
    22c2:	82 e0       	ldi	r24, 0x02	; 2
    22c4:	ab 81       	ldd	r26, Y+3	; 0x03
    22c6:	bc 81       	ldd	r27, Y+4	; 0x04
    22c8:	15 96       	adiw	r26, 0x05	; 5
    22ca:	8c 93       	st	X, r24
    22cc:	15 97       	sbiw	r26, 0x05	; 5
    22ce:	bb 24       	eor	r11, r11
    22d0:	68 94       	set
    22d2:	b1 f8       	bld	r11, 1
    22d4:	0b c1       	rjmp	.+534    	; 0x24ec <f_write+0x422>
			sect += csect;
    22d6:	2c 01       	movw	r4, r24
    22d8:	3d 01       	movw	r6, r26
    22da:	41 0e       	add	r4, r17
    22dc:	51 1c       	adc	r5, r1
    22de:	61 1c       	adc	r6, r1
    22e0:	71 1c       	adc	r7, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    22e2:	64 01       	movw	r12, r8
    22e4:	cd 2c       	mov	r12, r13
    22e6:	dd 24       	eor	r13, r13
    22e8:	c6 94       	lsr	r12
			if (cc) {						/* Write maximum contiguous sectors directly */
    22ea:	c1 14       	cp	r12, r1
    22ec:	d1 04       	cpc	r13, r1
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <f_write+0x228>
    22f0:	4d c0       	rjmp	.+154    	; 0x238c <f_write+0x2c2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    22f2:	f7 01       	movw	r30, r14
    22f4:	42 81       	ldd	r20, Z+2	; 0x02
    22f6:	c6 01       	movw	r24, r12
    22f8:	81 0f       	add	r24, r17
    22fa:	91 1d       	adc	r25, r1
    22fc:	24 2f       	mov	r18, r20
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	28 17       	cp	r18, r24
    2302:	39 07       	cpc	r19, r25
    2304:	20 f4       	brcc	.+8      	; 0x230e <f_write+0x244>
					cc = fp->fs->csize - csect;
    2306:	c9 01       	movw	r24, r18
    2308:	6c 01       	movw	r12, r24
    230a:	c1 1a       	sub	r12, r17
    230c:	d1 08       	sbc	r13, r1
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
    230e:	d7 01       	movw	r26, r14
    2310:	11 96       	adiw	r26, 0x01	; 1
    2312:	8c 91       	ld	r24, X
    2314:	69 81       	ldd	r22, Y+1	; 0x01
    2316:	7a 81       	ldd	r23, Y+2	; 0x02
    2318:	a3 01       	movw	r20, r6
    231a:	92 01       	movw	r18, r4
    231c:	86 01       	movw	r16, r12
    231e:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <disk_write>
    2322:	88 23       	and	r24, r24
    2324:	39 f0       	breq	.+14     	; 0x2334 <f_write+0x26a>
					ABORT(fp->fs, FR_DISK_ERR);
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	eb 81       	ldd	r30, Y+3	; 0x03
    232a:	fc 81       	ldd	r31, Y+4	; 0x04
    232c:	85 83       	std	Z+5, r24	; 0x05
    232e:	bb 24       	eor	r11, r11
    2330:	b3 94       	inc	r11
    2332:	dc c0       	rjmp	.+440    	; 0x24ec <f_write+0x422>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    2334:	ab 81       	ldd	r26, Y+3	; 0x03
    2336:	bc 81       	ldd	r27, Y+4	; 0x04
    2338:	ed 91       	ld	r30, X+
    233a:	fc 91       	ld	r31, X
    233c:	86 a5       	lds	r24, 0x66
    233e:	97 a5       	lds	r25, 0x67
    2340:	a0 a9       	sts	0x40, r26
    2342:	b1 a9       	sts	0x41, r27
    2344:	84 19       	sub	r24, r4
    2346:	95 09       	sbc	r25, r5
    2348:	a6 09       	sbc	r26, r6
    234a:	b7 09       	sbc	r27, r7
    234c:	a6 01       	movw	r20, r12
    234e:	60 e0       	ldi	r22, 0x00	; 0
    2350:	70 e0       	ldi	r23, 0x00	; 0
    2352:	84 17       	cp	r24, r20
    2354:	95 07       	cpc	r25, r21
    2356:	a6 07       	cpc	r26, r22
    2358:	b7 07       	cpc	r27, r23
    235a:	a0 f4       	brcc	.+40     	; 0x2384 <f_write+0x2ba>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    235c:	bc 01       	movw	r22, r24
    235e:	76 2f       	mov	r23, r22
    2360:	66 27       	eor	r22, r22
    2362:	77 0f       	add	r23, r23
    2364:	29 81       	ldd	r18, Y+1	; 0x01
    2366:	3a 81       	ldd	r19, Y+2	; 0x02
    2368:	62 0f       	add	r22, r18
    236a:	73 1f       	adc	r23, r19
    236c:	cf 01       	movw	r24, r30
    236e:	c2 96       	adiw	r24, 0x32	; 50
    2370:	40 e0       	ldi	r20, 0x00	; 0
    2372:	52 e0       	ldi	r21, 0x02	; 2
    2374:	0e 94 67 00 	call	0xce	; 0xce <mem_cpy>
					fp->fs->wflag = 0;
    2378:	ab 81       	ldd	r26, Y+3	; 0x03
    237a:	bc 81       	ldd	r27, Y+4	; 0x04
    237c:	ed 91       	ld	r30, X+
    237e:	fc 91       	ld	r31, X
    2380:	11 97       	sbiw	r26, 0x01	; 1
    2382:	14 82       	std	Z+4, r1	; 0x04
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    2384:	dc 2c       	mov	r13, r12
    2386:	cc 24       	eor	r12, r12
    2388:	dd 0c       	add	r13, r13
				continue;
    238a:	69 c0       	rjmp	.+210    	; 0x245e <f_write+0x394>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    238c:	eb 81       	ldd	r30, Y+3	; 0x03
    238e:	fc 81       	ldd	r31, Y+4	; 0x04
    2390:	86 81       	ldd	r24, Z+6	; 0x06
    2392:	97 81       	ldd	r25, Z+7	; 0x07
    2394:	a0 85       	ldd	r26, Z+8	; 0x08
    2396:	b1 85       	ldd	r27, Z+9	; 0x09
    2398:	42 85       	ldd	r20, Z+10	; 0x0a
    239a:	53 85       	ldd	r21, Z+11	; 0x0b
    239c:	64 85       	ldd	r22, Z+12	; 0x0c
    239e:	75 85       	ldd	r23, Z+13	; 0x0d
    23a0:	84 17       	cp	r24, r20
    23a2:	95 07       	cpc	r25, r21
    23a4:	a6 07       	cpc	r26, r22
    23a6:	b7 07       	cpc	r27, r23
    23a8:	b0 f0       	brcs	.+44     	; 0x23d6 <f_write+0x30c>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    23aa:	c7 01       	movw	r24, r14
    23ac:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sync_window>
    23b0:	88 23       	and	r24, r24
    23b2:	49 f0       	breq	.+18     	; 0x23c6 <f_write+0x2fc>
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	ab 81       	ldd	r26, Y+3	; 0x03
    23b8:	bc 81       	ldd	r27, Y+4	; 0x04
    23ba:	15 96       	adiw	r26, 0x05	; 5
    23bc:	8c 93       	st	X, r24
    23be:	15 97       	sbiw	r26, 0x05	; 5
    23c0:	bb 24       	eor	r11, r11
    23c2:	b3 94       	inc	r11
    23c4:	93 c0       	rjmp	.+294    	; 0x24ec <f_write+0x422>
				fp->fs->winsect = sect;
    23c6:	ab 81       	ldd	r26, Y+3	; 0x03
    23c8:	bc 81       	ldd	r27, Y+4	; 0x04
    23ca:	ed 91       	ld	r30, X+
    23cc:	fc 91       	ld	r31, X
    23ce:	46 a6       	lds	r20, 0xb6
    23d0:	57 a6       	lds	r21, 0xb7
    23d2:	60 aa       	sts	0x90, r22
    23d4:	71 aa       	sts	0x91, r23
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    23d6:	eb 81       	ldd	r30, Y+3	; 0x03
    23d8:	fc 81       	ldd	r31, Y+4	; 0x04
    23da:	46 8a       	std	Z+22, r4	; 0x16
    23dc:	57 8a       	std	Z+23, r5	; 0x17
    23de:	60 8e       	std	Z+24, r6	; 0x18
    23e0:	71 8e       	std	Z+25, r7	; 0x19
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    23e2:	ab 81       	ldd	r26, Y+3	; 0x03
    23e4:	bc 81       	ldd	r27, Y+4	; 0x04
    23e6:	16 96       	adiw	r26, 0x06	; 6
    23e8:	cd 90       	ld	r12, X+
    23ea:	dd 90       	ld	r13, X+
    23ec:	ed 90       	ld	r14, X+
    23ee:	fc 90       	ld	r15, X
    23f0:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
    23f2:	56 96       	adiw	r26, 0x16	; 22
    23f4:	4d 91       	ld	r20, X+
    23f6:	5d 91       	ld	r21, X+
    23f8:	6d 91       	ld	r22, X+
    23fa:	7c 91       	ld	r23, X
    23fc:	59 97       	sbiw	r26, 0x19	; 25
    23fe:	8d 91       	ld	r24, X+
    2400:	9c 91       	ld	r25, X
    2402:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <move_window>
    2406:	88 23       	and	r24, r24
    2408:	39 f0       	breq	.+14     	; 0x2418 <f_write+0x34e>
			ABORT(fp->fs, FR_DISK_ERR);
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	eb 81       	ldd	r30, Y+3	; 0x03
    240e:	fc 81       	ldd	r31, Y+4	; 0x04
    2410:	85 83       	std	Z+5, r24	; 0x05
    2412:	bb 24       	eor	r11, r11
    2414:	b3 94       	inc	r11
    2416:	6a c0       	rjmp	.+212    	; 0x24ec <f_write+0x422>
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    2418:	c6 01       	movw	r24, r12
    241a:	91 70       	andi	r25, 0x01	; 1
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	32 e0       	ldi	r19, 0x02	; 2
    2420:	28 1b       	sub	r18, r24
    2422:	39 0b       	sbc	r19, r25
    2424:	64 01       	movw	r12, r8
    2426:	28 15       	cp	r18, r8
    2428:	39 05       	cpc	r19, r9
    242a:	08 f4       	brcc	.+2      	; 0x242e <f_write+0x364>
    242c:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    242e:	ab 81       	ldd	r26, Y+3	; 0x03
    2430:	bc 81       	ldd	r27, Y+4	; 0x04
    2432:	16 96       	adiw	r26, 0x06	; 6
    2434:	8d 91       	ld	r24, X+
    2436:	9c 91       	ld	r25, X
    2438:	17 97       	sbiw	r26, 0x07	; 7
    243a:	91 70       	andi	r25, 0x01	; 1
    243c:	9c 01       	movw	r18, r24
    243e:	2e 5c       	subi	r18, 0xCE	; 206
    2440:	3f 4f       	sbci	r19, 0xFF	; 255
    2442:	8d 91       	ld	r24, X+
    2444:	9c 91       	ld	r25, X
    2446:	82 0f       	add	r24, r18
    2448:	93 1f       	adc	r25, r19
    244a:	69 81       	ldd	r22, Y+1	; 0x01
    244c:	7a 81       	ldd	r23, Y+2	; 0x02
    244e:	a6 01       	movw	r20, r12
    2450:	0e 94 67 00 	call	0xce	; 0xce <mem_cpy>
		fp->fs->wflag = 1;
    2454:	ab 81       	ldd	r26, Y+3	; 0x03
    2456:	bc 81       	ldd	r27, Y+4	; 0x04
    2458:	ed 91       	ld	r30, X+
    245a:	fc 91       	ld	r31, X
    245c:	a4 82       	std	Z+4, r10	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    245e:	e9 81       	ldd	r30, Y+1	; 0x01
    2460:	fa 81       	ldd	r31, Y+2	; 0x02
    2462:	ec 0d       	add	r30, r12
    2464:	fd 1d       	adc	r31, r13
    2466:	fa 83       	std	Y+2, r31	; 0x02
    2468:	e9 83       	std	Y+1, r30	; 0x01
    246a:	a6 01       	movw	r20, r12
    246c:	60 e0       	ldi	r22, 0x00	; 0
    246e:	70 e0       	ldi	r23, 0x00	; 0
    2470:	eb 81       	ldd	r30, Y+3	; 0x03
    2472:	fc 81       	ldd	r31, Y+4	; 0x04
    2474:	86 81       	ldd	r24, Z+6	; 0x06
    2476:	97 81       	ldd	r25, Z+7	; 0x07
    2478:	a0 85       	ldd	r26, Z+8	; 0x08
    247a:	b1 85       	ldd	r27, Z+9	; 0x09
    247c:	84 0f       	add	r24, r20
    247e:	95 1f       	adc	r25, r21
    2480:	a6 1f       	adc	r26, r22
    2482:	b7 1f       	adc	r27, r23
    2484:	86 83       	std	Z+6, r24	; 0x06
    2486:	97 83       	std	Z+7, r25	; 0x07
    2488:	a0 87       	std	Z+8, r26	; 0x08
    248a:	b1 87       	std	Z+9, r27	; 0x09
    248c:	d1 01       	movw	r26, r2
    248e:	8d 91       	ld	r24, X+
    2490:	9c 91       	ld	r25, X
    2492:	11 97       	sbiw	r26, 0x01	; 1
    2494:	8c 0d       	add	r24, r12
    2496:	9d 1d       	adc	r25, r13
    2498:	11 96       	adiw	r26, 0x01	; 1
    249a:	9c 93       	st	X, r25
    249c:	8e 93       	st	-X, r24
    249e:	8c 18       	sub	r8, r12
    24a0:	9d 08       	sbc	r9, r13
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    24a2:	09 f0       	breq	.+2      	; 0x24a6 <f_write+0x3dc>
    24a4:	59 ce       	rjmp	.-846    	; 0x2158 <f_write+0x8e>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    24a6:	eb 81       	ldd	r30, Y+3	; 0x03
    24a8:	fc 81       	ldd	r31, Y+4	; 0x04
    24aa:	86 81       	ldd	r24, Z+6	; 0x06
    24ac:	97 81       	ldd	r25, Z+7	; 0x07
    24ae:	a0 85       	ldd	r26, Z+8	; 0x08
    24b0:	b1 85       	ldd	r27, Z+9	; 0x09
    24b2:	42 85       	ldd	r20, Z+10	; 0x0a
    24b4:	53 85       	ldd	r21, Z+11	; 0x0b
    24b6:	64 85       	ldd	r22, Z+12	; 0x0c
    24b8:	75 85       	ldd	r23, Z+13	; 0x0d
    24ba:	48 17       	cp	r20, r24
    24bc:	59 07       	cpc	r21, r25
    24be:	6a 07       	cpc	r22, r26
    24c0:	7b 07       	cpc	r23, r27
    24c2:	20 f4       	brcc	.+8      	; 0x24cc <f_write+0x402>
    24c4:	82 87       	std	Z+10, r24	; 0x0a
    24c6:	93 87       	std	Z+11, r25	; 0x0b
    24c8:	a4 87       	std	Z+12, r26	; 0x0c
    24ca:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    24cc:	ab 81       	ldd	r26, Y+3	; 0x03
    24ce:	bc 81       	ldd	r27, Y+4	; 0x04
    24d0:	14 96       	adiw	r26, 0x04	; 4
    24d2:	8c 91       	ld	r24, X
    24d4:	14 97       	sbiw	r26, 0x04	; 4
    24d6:	80 62       	ori	r24, 0x20	; 32
    24d8:	14 96       	adiw	r26, 0x04	; 4
    24da:	8c 93       	st	X, r24
    24dc:	14 97       	sbiw	r26, 0x04	; 4

	LEAVE_FF(fp->fs, FR_OK);
    24de:	06 c0       	rjmp	.+12     	; 0x24ec <f_write+0x422>
	*bw = 0;	/* Clear write byte counter */

	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
    24e0:	b8 2e       	mov	r11, r24
    24e2:	04 c0       	rjmp	.+8      	; 0x24ec <f_write+0x422>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    24e4:	0f 2e       	mov	r0, r31
    24e6:	f7 e0       	ldi	r31, 0x07	; 7
    24e8:	bf 2e       	mov	r11, r31
    24ea:	f0 2d       	mov	r31, r0

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    24ec:	8b 2d       	mov	r24, r11
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	df 91       	pop	r29
    24f8:	cf 91       	pop	r28
    24fa:	1f 91       	pop	r17
    24fc:	0f 91       	pop	r16
    24fe:	ff 90       	pop	r15
    2500:	ef 90       	pop	r14
    2502:	df 90       	pop	r13
    2504:	cf 90       	pop	r12
    2506:	bf 90       	pop	r11
    2508:	af 90       	pop	r10
    250a:	9f 90       	pop	r9
    250c:	8f 90       	pop	r8
    250e:	7f 90       	pop	r7
    2510:	6f 90       	pop	r6
    2512:	5f 90       	pop	r5
    2514:	4f 90       	pop	r4
    2516:	3f 90       	pop	r3
    2518:	2f 90       	pop	r2
    251a:	08 95       	ret

0000251c <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
    251c:	ef 92       	push	r14
    251e:	ff 92       	push	r15
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	00 d0       	rcall	.+0      	; 0x252a <putc_bfd+0xe>
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	8c 01       	movw	r16, r24


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');

	i = pb->idx;	/* Buffer write index (-1:error) */
    2530:	fc 01       	movw	r30, r24
    2532:	e2 80       	ldd	r14, Z+2	; 0x02
    2534:	f3 80       	ldd	r15, Z+3	; 0x03
	if (i < 0) return;
    2536:	ff 20       	and	r15, r15
    2538:	4c f1       	brlt	.+82     	; 0x258c <putc_bfd+0x70>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
    253a:	ee 0d       	add	r30, r14
    253c:	ff 1d       	adc	r31, r15
    253e:	66 83       	std	Z+6, r22	; 0x06
    2540:	08 94       	sec
    2542:	e1 1c       	adc	r14, r1
    2544:	f1 1c       	adc	r15, r1
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
    2546:	fd e3       	ldi	r31, 0x3D	; 61
    2548:	ef 16       	cp	r14, r31
    254a:	f1 04       	cpc	r15, r1
    254c:	bc f0       	brlt	.+46     	; 0x257c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
    254e:	bc 01       	movw	r22, r24
    2550:	6a 5f       	subi	r22, 0xFA	; 250
    2552:	7f 4f       	sbci	r23, 0xFF	; 255
    2554:	fc 01       	movw	r30, r24
    2556:	80 81       	ld	r24, Z
    2558:	91 81       	ldd	r25, Z+1	; 0x01
    255a:	a7 01       	movw	r20, r14
    255c:	9e 01       	movw	r18, r28
    255e:	2f 5f       	subi	r18, 0xFF	; 255
    2560:	3f 4f       	sbci	r19, 0xFF	; 255
    2562:	0e 94 65 10 	call	0x20ca	; 0x20ca <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	9a 81       	ldd	r25, Y+2	; 0x02
    256a:	e8 16       	cp	r14, r24
    256c:	f9 06       	cpc	r15, r25
    256e:	19 f4       	brne	.+6      	; 0x2576 <putc_bfd+0x5a>
    2570:	ee 24       	eor	r14, r14
    2572:	ff 24       	eor	r15, r15
    2574:	03 c0       	rjmp	.+6      	; 0x257c <putc_bfd+0x60>
    2576:	ee 24       	eor	r14, r14
    2578:	ea 94       	dec	r14
    257a:	fe 2c       	mov	r15, r14
	}
	pb->idx = i;
    257c:	f8 01       	movw	r30, r16
    257e:	f3 82       	std	Z+3, r15	; 0x03
    2580:	e2 82       	std	Z+2, r14	; 0x02
	pb->nchr++;
    2582:	84 81       	ldd	r24, Z+4	; 0x04
    2584:	95 81       	ldd	r25, Z+5	; 0x05
    2586:	01 96       	adiw	r24, 0x01	; 1
    2588:	95 83       	std	Z+5, r25	; 0x05
    258a:	84 83       	std	Z+4, r24	; 0x04
}
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	df 91       	pop	r29
    2592:	cf 91       	pop	r28
    2594:	1f 91       	pop	r17
    2596:	0f 91       	pop	r16
    2598:	ff 90       	pop	r15
    259a:	ef 90       	pop	r14
    259c:	08 95       	ret

0000259e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    259e:	ef 92       	push	r14
    25a0:	ff 92       	push	r15
    25a2:	0f 93       	push	r16
    25a4:	1f 93       	push	r17
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	8c 01       	movw	r16, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    25ac:	0e 94 43 01 	call	0x286	; 0x286 <validate>
    25b0:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
    25b2:	88 23       	and	r24, r24
    25b4:	09 f0       	breq	.+2      	; 0x25b8 <f_sync+0x1a>
    25b6:	b1 c0       	rjmp	.+354    	; 0x271a <f_sync+0x17c>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    25b8:	d8 01       	movw	r26, r16
    25ba:	14 96       	adiw	r26, 0x04	; 4
    25bc:	8c 91       	ld	r24, X
    25be:	14 97       	sbiw	r26, 0x04	; 4
    25c0:	85 ff       	sbrs	r24, 5
    25c2:	ab c0       	rjmp	.+342    	; 0x271a <f_sync+0x17c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    25c4:	5a 96       	adiw	r26, 0x1a	; 26
    25c6:	4d 91       	ld	r20, X+
    25c8:	5d 91       	ld	r21, X+
    25ca:	6d 91       	ld	r22, X+
    25cc:	7c 91       	ld	r23, X
    25ce:	5d 97       	sbiw	r26, 0x1d	; 29
    25d0:	8d 91       	ld	r24, X+
    25d2:	9c 91       	ld	r25, X
    25d4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <move_window>
    25d8:	c8 2f       	mov	r28, r24
			if (res == FR_OK) {
    25da:	88 23       	and	r24, r24
    25dc:	09 f0       	breq	.+2      	; 0x25e0 <f_sync+0x42>
    25de:	9d c0       	rjmp	.+314    	; 0x271a <f_sync+0x17c>
				dir = fp->dir_ptr;
    25e0:	f8 01       	movw	r30, r16
    25e2:	c6 8d       	ldd	r28, Z+30	; 0x1e
    25e4:	d7 8d       	ldd	r29, Z+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    25e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    25e8:	80 62       	ori	r24, 0x20	; 32
    25ea:	8b 87       	std	Y+11, r24	; 0x0b
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
    25ec:	82 85       	ldd	r24, Z+10	; 0x0a
    25ee:	93 85       	ldd	r25, Z+11	; 0x0b
    25f0:	a4 85       	ldd	r26, Z+12	; 0x0c
    25f2:	b5 85       	ldd	r27, Z+13	; 0x0d
    25f4:	8c 8f       	std	Y+28, r24	; 0x1c
    25f6:	9d 8f       	std	Y+29, r25	; 0x1d
    25f8:	ae 8f       	std	Y+30, r26	; 0x1e
    25fa:	bf 8f       	std	Y+31, r27	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    25fc:	46 85       	ldd	r20, Z+14	; 0x0e
    25fe:	57 85       	ldd	r21, Z+15	; 0x0f
    2600:	60 89       	ldd	r22, Z+16	; 0x10
    2602:	71 89       	ldd	r23, Z+17	; 0x11
    2604:	ce 01       	movw	r24, r28
    2606:	0e 94 b9 00 	call	0x172	; 0x172 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
    260a:	0e 94 76 1b 	call	0x36ec	; 0x36ec <get_fattime>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
				ST_DWORD(dir + DIR_WrtTime, tm);
    2612:	8e 8b       	std	Y+22, r24	; 0x16
    2614:	9f 8b       	std	Y+23, r25	; 0x17
    2616:	a8 8f       	std	Y+24, r26	; 0x18
    2618:	b9 8f       	std	Y+25, r27	; 0x19
				ST_WORD(dir + DIR_LstAccDate, 0);
    261a:	1b 8a       	std	Y+19, r1	; 0x13
    261c:	1a 8a       	std	Y+18, r1	; 0x12
				fp->flag &= ~FA__WRITTEN;
    261e:	d8 01       	movw	r26, r16
    2620:	14 96       	adiw	r26, 0x04	; 4
    2622:	8c 91       	ld	r24, X
    2624:	14 97       	sbiw	r26, 0x04	; 4
    2626:	8f 7d       	andi	r24, 0xDF	; 223
    2628:	14 96       	adiw	r26, 0x04	; 4
    262a:	8c 93       	st	X, r24
    262c:	14 97       	sbiw	r26, 0x04	; 4
				fp->fs->wflag = 1;
    262e:	ed 91       	ld	r30, X+
    2630:	fc 91       	ld	r31, X
    2632:	11 97       	sbiw	r26, 0x01	; 1
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    2638:	ed 90       	ld	r14, X+
    263a:	fc 90       	ld	r15, X
)
{
	FRESULT res;


	res = sync_window(fs);
    263c:	c7 01       	movw	r24, r14
    263e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <sync_window>
    2642:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
    2644:	88 23       	and	r24, r24
    2646:	09 f0       	breq	.+2      	; 0x264a <f_sync+0xac>
    2648:	68 c0       	rjmp	.+208    	; 0x271a <f_sync+0x17c>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    264a:	f7 01       	movw	r30, r14
    264c:	80 81       	ld	r24, Z
    264e:	83 30       	cpi	r24, 0x03	; 3
    2650:	09 f0       	breq	.+2      	; 0x2654 <f_sync+0xb6>
    2652:	59 c0       	rjmp	.+178    	; 0x2706 <f_sync+0x168>
    2654:	85 81       	ldd	r24, Z+5	; 0x05
    2656:	81 30       	cpi	r24, 0x01	; 1
    2658:	09 f0       	breq	.+2      	; 0x265c <f_sync+0xbe>
    265a:	55 c0       	rjmp	.+170    	; 0x2706 <f_sync+0x168>
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
    265c:	87 01       	movw	r16, r14
    265e:	0e 5c       	subi	r16, 0xCE	; 206
    2660:	1f 4f       	sbci	r17, 0xFF	; 255
    2662:	c8 01       	movw	r24, r16
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	70 e0       	ldi	r23, 0x00	; 0
    2668:	40 e0       	ldi	r20, 0x00	; 0
    266a:	52 e0       	ldi	r21, 0x02	; 2
    266c:	0e 94 92 00 	call	0x124	; 0x124 <mem_set>
			ST_WORD(fs->win + BS_55AA, 0xAA55);
    2670:	f7 01       	movw	r30, r14
    2672:	e0 5d       	subi	r30, 0xD0	; 208
    2674:	fd 4f       	sbci	r31, 0xFD	; 253
    2676:	85 e5       	ldi	r24, 0x55	; 85
    2678:	9a ea       	ldi	r25, 0xAA	; 170
    267a:	91 83       	std	Z+1, r25	; 0x01
    267c:	80 83       	st	Z, r24
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
    267e:	82 e5       	ldi	r24, 0x52	; 82
    2680:	92 e5       	ldi	r25, 0x52	; 82
    2682:	a1 e6       	ldi	r26, 0x61	; 97
    2684:	b1 e4       	ldi	r27, 0x41	; 65
    2686:	f7 01       	movw	r30, r14
    2688:	82 ab       	sts	0x52, r24
    268a:	93 ab       	sts	0x53, r25
    268c:	a4 ab       	sts	0x54, r26
    268e:	b5 ab       	sts	0x55, r27
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
    2690:	ea 5e       	subi	r30, 0xEA	; 234
    2692:	fd 4f       	sbci	r31, 0xFD	; 253
    2694:	82 e7       	ldi	r24, 0x72	; 114
    2696:	92 e7       	ldi	r25, 0x72	; 114
    2698:	a1 e4       	ldi	r26, 0x41	; 65
    269a:	b1 e6       	ldi	r27, 0x61	; 97
    269c:	80 83       	st	Z, r24
    269e:	91 83       	std	Z+1, r25	; 0x01
    26a0:	a2 83       	std	Z+2, r26	; 0x02
    26a2:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
    26a4:	97 01       	movw	r18, r14
    26a6:	26 5e       	subi	r18, 0xE6	; 230
    26a8:	3d 4f       	sbci	r19, 0xFD	; 253
    26aa:	f7 01       	movw	r30, r14
    26ac:	86 85       	ldd	r24, Z+14	; 0x0e
    26ae:	97 85       	ldd	r25, Z+15	; 0x0f
    26b0:	a0 89       	ldd	r26, Z+16	; 0x10
    26b2:	b1 89       	ldd	r27, Z+17	; 0x11
    26b4:	f9 01       	movw	r30, r18
    26b6:	80 83       	st	Z, r24
    26b8:	91 83       	std	Z+1, r25	; 0x01
    26ba:	a2 83       	std	Z+2, r26	; 0x02
    26bc:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
    26be:	97 01       	movw	r18, r14
    26c0:	22 5e       	subi	r18, 0xE2	; 226
    26c2:	3d 4f       	sbci	r19, 0xFD	; 253
    26c4:	f7 01       	movw	r30, r14
    26c6:	82 85       	ldd	r24, Z+10	; 0x0a
    26c8:	93 85       	ldd	r25, Z+11	; 0x0b
    26ca:	a4 85       	ldd	r26, Z+12	; 0x0c
    26cc:	b5 85       	ldd	r27, Z+13	; 0x0d
    26ce:	f9 01       	movw	r30, r18
    26d0:	80 83       	st	Z, r24
    26d2:	91 83       	std	Z+1, r25	; 0x01
    26d4:	a2 83       	std	Z+2, r26	; 0x02
    26d6:	b3 83       	std	Z+3, r27	; 0x03
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
    26d8:	f7 01       	movw	r30, r14
    26da:	86 8d       	ldd	r24, Z+30	; 0x1e
    26dc:	97 8d       	ldd	r25, Z+31	; 0x1f
    26de:	a0 a1       	lds	r26, 0x40
    26e0:	b1 a1       	lds	r27, 0x41
    26e2:	9c 01       	movw	r18, r24
    26e4:	ad 01       	movw	r20, r26
    26e6:	2f 5f       	subi	r18, 0xFF	; 255
    26e8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ea:	4f 4f       	sbci	r20, 0xFF	; 255
    26ec:	5f 4f       	sbci	r21, 0xFF	; 255
    26ee:	26 a7       	lds	r18, 0x76
    26f0:	37 a7       	lds	r19, 0x77
    26f2:	40 ab       	sts	0x50, r20
    26f4:	51 ab       	sts	0x51, r21
			disk_write(fs->drv, fs->win, fs->winsect, 1);
    26f6:	81 81       	ldd	r24, Z+1	; 0x01
    26f8:	b8 01       	movw	r22, r16
    26fa:	01 e0       	ldi	r16, 0x01	; 1
    26fc:	10 e0       	ldi	r17, 0x00	; 0
    26fe:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <disk_write>
			fs->fsi_flag = 0;
    2702:	f7 01       	movw	r30, r14
    2704:	15 82       	std	Z+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    2706:	d7 01       	movw	r26, r14
    2708:	11 96       	adiw	r26, 0x01	; 1
    270a:	8c 91       	ld	r24, X
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	40 e0       	ldi	r20, 0x00	; 0
    2710:	50 e0       	ldi	r21, 0x00	; 0
    2712:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <disk_ioctl>
    2716:	81 11       	cpse	r24, r1
			res = FR_DISK_ERR;
    2718:	c1 e0       	ldi	r28, 0x01	; 1
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    271a:	8c 2f       	mov	r24, r28
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	1f 91       	pop	r17
    2722:	0f 91       	pop	r16
    2724:	ff 90       	pop	r15
    2726:	ef 90       	pop	r14
    2728:	08 95       	ret

0000272a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    2730:	0e 94 cf 12 	call	0x259e	; 0x259e <f_sync>
	if (res == FR_OK)
    2734:	88 23       	and	r24, r24
    2736:	39 f4       	brne	.+14     	; 0x2746 <f_close+0x1c>
#endif
	{
		res = validate(fp);				/* Lock volume */
    2738:	ce 01       	movw	r24, r28
    273a:	0e 94 43 01 	call	0x286	; 0x286 <validate>
		if (res == FR_OK) {
    273e:	88 23       	and	r24, r24
    2740:	11 f4       	brne	.+4      	; 0x2746 <f_close+0x1c>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    2742:	19 82       	std	Y+1, r1	; 0x01
    2744:	18 82       	st	Y, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    2746:	df 91       	pop	r29
    2748:	cf 91       	pop	r28
    274a:	08 95       	ret

0000274c <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
    274c:	ef 92       	push	r14
    274e:	ff 92       	push	r15
    2750:	1f 93       	push	r17
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	a4 97       	sbiw	r28, 0x24	; 36
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	9c a3       	lds	r25, 0x5c
    2768:	8b a3       	lds	r24, 0x5b
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
    276a:	ce 01       	movw	r24, r28
    276c:	01 96       	adiw	r24, 0x01	; 1
    276e:	be 01       	movw	r22, r28
    2770:	6d 5d       	subi	r22, 0xDD	; 221
    2772:	7f 4f       	sbci	r23, 0xFF	; 255
    2774:	40 e0       	ldi	r20, 0x00	; 0
    2776:	0e 94 57 02 	call	0x4ae	; 0x4ae <find_volume>
    277a:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    277c:	88 23       	and	r24, r24
    277e:	81 f5       	brne	.+96     	; 0x27e0 <f_chdir+0x94>
		INIT_BUF(dj);
    2780:	ce 01       	movw	r24, r28
    2782:	47 96       	adiw	r24, 0x17	; 23
    2784:	9e 8b       	std	Y+22, r25	; 0x16
    2786:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the path */
    2788:	6b a1       	lds	r22, 0x4b
    278a:	7c a1       	lds	r23, 0x4c
    278c:	ce 01       	movw	r24, r28
    278e:	01 96       	adiw	r24, 0x01	; 1
    2790:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <follow_path>
    2794:	18 2f       	mov	r17, r24
		FREE_BUF();
		if (res == FR_OK) {					/* Follow completed */
    2796:	88 23       	and	r24, r24
    2798:	01 f5       	brne	.+64     	; 0x27da <f_chdir+0x8e>
			if (!dj.dir) {
    279a:	eb 89       	ldd	r30, Y+19	; 0x13
    279c:	fc 89       	ldd	r31, Y+20	; 0x14
    279e:	30 97       	sbiw	r30, 0x00	; 0
    27a0:	59 f4       	brne	.+22     	; 0x27b8 <f_chdir+0x6c>
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
    27a2:	e9 81       	ldd	r30, Y+1	; 0x01
    27a4:	fa 81       	ldd	r31, Y+2	; 0x02
    27a6:	8f 81       	ldd	r24, Y+7	; 0x07
    27a8:	98 85       	ldd	r25, Y+8	; 0x08
    27aa:	a9 85       	ldd	r26, Y+9	; 0x09
    27ac:	ba 85       	ldd	r27, Y+10	; 0x0a
    27ae:	82 8b       	std	Z+18, r24	; 0x12
    27b0:	93 8b       	std	Z+19, r25	; 0x13
    27b2:	a4 8b       	std	Z+20, r26	; 0x14
    27b4:	b5 8b       	std	Z+21, r27	; 0x15
    27b6:	14 c0       	rjmp	.+40     	; 0x27e0 <f_chdir+0x94>
			} else {
				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
    27b8:	83 85       	ldd	r24, Z+11	; 0x0b
    27ba:	84 ff       	sbrs	r24, 4
    27bc:	1e c0       	rjmp	.+60     	; 0x27fa <f_chdir+0xae>
					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
    27be:	e9 80       	ldd	r14, Y+1	; 0x01
    27c0:	fa 80       	ldd	r15, Y+2	; 0x02
    27c2:	c7 01       	movw	r24, r14
    27c4:	bf 01       	movw	r22, r30
    27c6:	0e 94 9c 00 	call	0x138	; 0x138 <ld_clust>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	f7 01       	movw	r30, r14
    27d0:	82 8b       	std	Z+18, r24	; 0x12
    27d2:	93 8b       	std	Z+19, r25	; 0x13
    27d4:	a4 8b       	std	Z+20, r26	; 0x14
    27d6:	b5 8b       	std	Z+21, r27	; 0x15
    27d8:	03 c0       	rjmp	.+6      	; 0x27e0 <f_chdir+0x94>
				else
					res = FR_NO_PATH;		/* Reached but a file */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    27da:	84 30       	cpi	r24, 0x04	; 4
    27dc:	09 f4       	brne	.+2      	; 0x27e0 <f_chdir+0x94>
    27de:	15 e0       	ldi	r17, 0x05	; 5
	}

	LEAVE_FF(dj.fs, res);
}
    27e0:	81 2f       	mov	r24, r17
    27e2:	a4 96       	adiw	r28, 0x24	; 36
    27e4:	0f b6       	in	r0, 0x3f	; 63
    27e6:	f8 94       	cli
    27e8:	de bf       	out	0x3e, r29	; 62
    27ea:	0f be       	out	0x3f, r0	; 63
    27ec:	cd bf       	out	0x3d, r28	; 61
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	1f 91       	pop	r17
    27f4:	ff 90       	pop	r15
    27f6:	ef 90       	pop	r14
    27f8:	08 95       	ret
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
			} else {
				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
				else
					res = FR_NO_PATH;		/* Reached but a file */
    27fa:	15 e0       	ldi	r17, 0x05	; 5
    27fc:	f1 cf       	rjmp	.-30     	; 0x27e0 <f_chdir+0x94>

000027fe <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR* buff,	/* Pointer to the directory path */
	UINT len		/* Size of path */
)
{
    27fe:	8f 92       	push	r8
    2800:	9f 92       	push	r9
    2802:	af 92       	push	r10
    2804:	bf 92       	push	r11
    2806:	cf 92       	push	r12
    2808:	df 92       	push	r13
    280a:	ef 92       	push	r14
    280c:	ff 92       	push	r15
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
    281a:	ea 97       	sbiw	r28, 0x3a	; 58
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	de bf       	out	0x3e, r29	; 62
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	cd bf       	out	0x3d, r28	; 61
    2826:	9a af       	sts	0x7a, r25
    2828:	89 af       	sts	0x79, r24
    282a:	6b 01       	movw	r12, r22
	TCHAR *tp;
	FILINFO fno;
	DEFINE_NAMEBUF;


	*buff = 0;
    282c:	fc 01       	movw	r30, r24
    282e:	10 82       	st	Z, r1
	/* Get logical drive number */
	res = find_volume(&dj.fs, (const TCHAR**)&buff, 0);	/* Get current volume */
    2830:	ce 01       	movw	r24, r28
    2832:	01 96       	adiw	r24, 0x01	; 1
    2834:	be 01       	movw	r22, r28
    2836:	67 5c       	subi	r22, 0xC7	; 199
    2838:	7f 4f       	sbci	r23, 0xFF	; 255
    283a:	40 e0       	ldi	r20, 0x00	; 0
    283c:	0e 94 57 02 	call	0x4ae	; 0x4ae <find_volume>
    2840:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    2842:	88 23       	and	r24, r24
    2844:	09 f0       	breq	.+2      	; 0x2848 <f_getcwd+0x4a>
    2846:	c6 c0       	rjmp	.+396    	; 0x29d4 <f_getcwd+0x1d6>
		INIT_BUF(dj);
    2848:	ce 01       	movw	r24, r28
    284a:	8d 96       	adiw	r24, 0x2d	; 45
    284c:	9e 8b       	std	Y+22, r25	; 0x16
    284e:	8d 8b       	std	Y+21, r24	; 0x15
		i = len;			/* Bottom of buffer (directory stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper directory from current directory */
    2850:	e9 81       	ldd	r30, Y+1	; 0x01
    2852:	fa 81       	ldd	r31, Y+2	; 0x02
    2854:	82 88       	ldd	r8, Z+18	; 0x12
    2856:	93 88       	ldd	r9, Z+19	; 0x13
    2858:	a4 88       	ldd	r10, Z+20	; 0x14
    285a:	b5 88       	ldd	r11, Z+21	; 0x15
    285c:	8f 82       	std	Y+7, r8	; 0x07
    285e:	98 86       	std	Y+8, r9	; 0x08
    2860:	a9 86       	std	Y+9, r10	; 0x09
    2862:	ba 86       	std	Y+10, r11	; 0x0a
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
    2864:	81 14       	cp	r8, r1
    2866:	91 04       	cpc	r9, r1
    2868:	a1 04       	cpc	r10, r1
    286a:	b1 04       	cpc	r11, r1
    286c:	09 f4       	brne	.+2      	; 0x2870 <f_getcwd+0x72>
    286e:	ce c0       	rjmp	.+412    	; 0x2a0c <f_getcwd+0x20e>
	*buff = 0;
	/* Get logical drive number */
	res = find_volume(&dj.fs, (const TCHAR**)&buff, 0);	/* Get current volume */
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = len;			/* Bottom of buffer (directory stack base) */
    2870:	76 01       	movw	r14, r12
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) buff[--i] = tp[--n];
			buff[--i] = '/';
    2872:	0f e2       	ldi	r16, 0x2F	; 47
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = len;			/* Bottom of buffer (directory stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper directory from current directory */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
			res = dir_sdi(&dj, 1);			/* Get parent directory */
    2874:	ce 01       	movw	r24, r28
    2876:	01 96       	adiw	r24, 0x01	; 1
    2878:	61 e0       	ldi	r22, 0x01	; 1
    287a:	70 e0       	ldi	r23, 0x00	; 0
    287c:	0e 94 6f 06 	call	0xcde	; 0xcde <dir_sdi>
    2880:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    2882:	88 23       	and	r24, r24
    2884:	09 f0       	breq	.+2      	; 0x2888 <f_getcwd+0x8a>
    2886:	90 c0       	rjmp	.+288    	; 0x29a8 <f_getcwd+0x1aa>
			res = dir_read(&dj, 0);
    2888:	ce 01       	movw	r24, r28
    288a:	01 96       	adiw	r24, 0x01	; 1
    288c:	60 e0       	ldi	r22, 0x00	; 0
    288e:	70 e0       	ldi	r23, 0x00	; 0
    2890:	0e 94 9c 0a 	call	0x1538	; 0x1538 <dir_read>
    2894:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    2896:	88 23       	and	r24, r24
    2898:	09 f0       	breq	.+2      	; 0x289c <f_getcwd+0x9e>
    289a:	86 c0       	rjmp	.+268    	; 0x29a8 <f_getcwd+0x1aa>
			dj.sclust = ld_clust(dj.fs, dj.dir);	/* Goto parent directory */
    289c:	6b 89       	ldd	r22, Y+19	; 0x13
    289e:	7c 89       	ldd	r23, Y+20	; 0x14
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	9a 81       	ldd	r25, Y+2	; 0x02
    28a4:	0e 94 9c 00 	call	0x138	; 0x138 <ld_clust>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	8f 83       	std	Y+7, r24	; 0x07
    28ae:	98 87       	std	Y+8, r25	; 0x08
    28b0:	a9 87       	std	Y+9, r26	; 0x09
    28b2:	ba 87       	std	Y+10, r27	; 0x0a
			res = dir_sdi(&dj, 0);
    28b4:	ce 01       	movw	r24, r28
    28b6:	01 96       	adiw	r24, 0x01	; 1
    28b8:	60 e0       	ldi	r22, 0x00	; 0
    28ba:	70 e0       	ldi	r23, 0x00	; 0
    28bc:	0e 94 6f 06 	call	0xcde	; 0xcde <dir_sdi>
    28c0:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    28c2:	88 23       	and	r24, r24
    28c4:	09 f0       	breq	.+2      	; 0x28c8 <f_getcwd+0xca>
    28c6:	70 c0       	rjmp	.+224    	; 0x29a8 <f_getcwd+0x1aa>
			do {							/* Find the entry links to the child directory */
				res = dir_read(&dj, 0);
    28c8:	ce 01       	movw	r24, r28
    28ca:	01 96       	adiw	r24, 0x01	; 1
    28cc:	60 e0       	ldi	r22, 0x00	; 0
    28ce:	70 e0       	ldi	r23, 0x00	; 0
    28d0:	0e 94 9c 0a 	call	0x1538	; 0x1538 <dir_read>
    28d4:	18 2f       	mov	r17, r24
				if (res != FR_OK) break;
    28d6:	88 23       	and	r24, r24
    28d8:	b1 f4       	brne	.+44     	; 0x2906 <f_getcwd+0x108>
				if (ccl == ld_clust(dj.fs, dj.dir)) break;	/* Found the entry */
    28da:	6b 89       	ldd	r22, Y+19	; 0x13
    28dc:	7c 89       	ldd	r23, Y+20	; 0x14
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	9a 81       	ldd	r25, Y+2	; 0x02
    28e2:	0e 94 9c 00 	call	0x138	; 0x138 <ld_clust>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	88 15       	cp	r24, r8
    28ec:	99 05       	cpc	r25, r9
    28ee:	aa 05       	cpc	r26, r10
    28f0:	bb 05       	cpc	r27, r11
    28f2:	79 f0       	breq	.+30     	; 0x2912 <f_getcwd+0x114>
				res = dir_next(&dj, 0);	
    28f4:	ce 01       	movw	r24, r28
    28f6:	01 96       	adiw	r24, 0x01	; 1
    28f8:	60 e0       	ldi	r22, 0x00	; 0
    28fa:	70 e0       	ldi	r23, 0x00	; 0
    28fc:	0e 94 57 09 	call	0x12ae	; 0x12ae <dir_next>
    2900:	18 2f       	mov	r17, r24
			} while (res == FR_OK);
    2902:	88 23       	and	r24, r24
    2904:	09 f3       	breq	.-62     	; 0x28c8 <f_getcwd+0xca>
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    2906:	14 30       	cpi	r17, 0x04	; 4
    2908:	09 f4       	brne	.+2      	; 0x290c <f_getcwd+0x10e>
    290a:	4b c0       	rjmp	.+150    	; 0x29a2 <f_getcwd+0x1a4>
			if (res != FR_OK) break;
    290c:	11 23       	and	r17, r17
    290e:	09 f0       	breq	.+2      	; 0x2912 <f_getcwd+0x114>
    2910:	4b c0       	rjmp	.+150    	; 0x29a8 <f_getcwd+0x1aa>
#if _USE_LFN
			fno.lfname = buff;
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
    2912:	ce 01       	movw	r24, r28
    2914:	01 96       	adiw	r24, 0x01	; 1
    2916:	be 01       	movw	r22, r28
    2918:	69 5e       	subi	r22, 0xE9	; 233
    291a:	7f 4f       	sbci	r23, 0xFF	; 255
    291c:	0e 94 bf 00 	call	0x17e	; 0x17e <get_fileinfo>
			tp = fno.fname;
#if _USE_LFN
			if (*buff) tp = buff;
#endif
			for (n = 0; tp[n]; n++) ;
    2920:	88 a1       	lds	r24, 0x48
    2922:	88 23       	and	r24, r24
    2924:	49 f0       	breq	.+18     	; 0x2938 <f_getcwd+0x13a>
	LEAVE_FF(dj.fs, res);
}


#if _FS_RPATH >= 2
FRESULT f_getcwd (
    2926:	fe 01       	movw	r30, r28
    2928:	b1 96       	adiw	r30, 0x21	; 33
			get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
			tp = fno.fname;
#if _USE_LFN
			if (*buff) tp = buff;
#endif
			for (n = 0; tp[n]; n++) ;
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	01 96       	adiw	r24, 0x01	; 1
    2930:	21 91       	ld	r18, Z+
    2932:	22 23       	and	r18, r18
    2934:	e1 f7       	brne	.-8      	; 0x292e <f_getcwd+0x130>
    2936:	02 c0       	rjmp	.+4      	; 0x293c <f_getcwd+0x13e>
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	90 e0       	ldi	r25, 0x00	; 0
			if (i < n + 3) {
    293c:	9c 01       	movw	r18, r24
    293e:	2d 5f       	subi	r18, 0xFD	; 253
    2940:	3f 4f       	sbci	r19, 0xFF	; 255
    2942:	e2 16       	cp	r14, r18
    2944:	f3 06       	cpc	r15, r19
    2946:	78 f1       	brcs	.+94     	; 0x29a6 <f_getcwd+0x1a8>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) buff[--i] = tp[--n];
    2948:	00 97       	sbiw	r24, 0x00	; 0
    294a:	c1 f0       	breq	.+48     	; 0x297c <f_getcwd+0x17e>
	LEAVE_FF(dj.fs, res);
}


#if _FS_RPATH >= 2
FRESULT f_getcwd (
    294c:	dc 01       	movw	r26, r24
    294e:	19 96       	adiw	r26, 0x09	; 9
    2950:	27 e1       	ldi	r18, 0x17	; 23
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	2c 0f       	add	r18, r28
    2956:	3d 1f       	adc	r19, r29
    2958:	a2 0f       	add	r26, r18
    295a:	b3 1f       	adc	r27, r19
    295c:	f7 01       	movw	r30, r14
    295e:	e8 1b       	sub	r30, r24
    2960:	f9 0b       	sbc	r31, r25
    2962:	cf 01       	movw	r24, r30
#endif
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) buff[--i] = tp[--n];
    2964:	08 94       	sec
    2966:	e1 08       	sbc	r14, r1
    2968:	f1 08       	sbc	r15, r1
    296a:	2e 91       	ld	r18, -X
    296c:	e9 ad       	sts	0x69, r30
    296e:	fa ad       	sts	0x6a, r31
    2970:	ee 0d       	add	r30, r14
    2972:	ff 1d       	adc	r31, r15
    2974:	20 83       	st	Z, r18
    2976:	e8 16       	cp	r14, r24
    2978:	f9 06       	cpc	r15, r25
    297a:	a1 f7       	brne	.-24     	; 0x2964 <f_getcwd+0x166>
			buff[--i] = '/';
    297c:	08 94       	sec
    297e:	e1 08       	sbc	r14, r1
    2980:	f1 08       	sbc	r15, r1
    2982:	e9 ad       	sts	0x69, r30
    2984:	fa ad       	sts	0x6a, r31
    2986:	ee 0d       	add	r30, r14
    2988:	ff 1d       	adc	r31, r15
    298a:	00 83       	st	Z, r16
	res = find_volume(&dj.fs, (const TCHAR**)&buff, 0);	/* Get current volume */
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = len;			/* Bottom of buffer (directory stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper directory from current directory */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
    298c:	8f 80       	ldd	r8, Y+7	; 0x07
    298e:	98 84       	ldd	r9, Y+8	; 0x08
    2990:	a9 84       	ldd	r10, Y+9	; 0x09
    2992:	ba 84       	ldd	r11, Y+10	; 0x0a
    2994:	81 14       	cp	r8, r1
    2996:	91 04       	cpc	r9, r1
    2998:	a1 04       	cpc	r10, r1
    299a:	b1 04       	cpc	r11, r1
    299c:	09 f0       	breq	.+2      	; 0x29a0 <f_getcwd+0x1a2>
    299e:	6a cf       	rjmp	.-300    	; 0x2874 <f_getcwd+0x76>
    29a0:	2d c0       	rjmp	.+90     	; 0x29fc <f_getcwd+0x1fe>
				res = dir_read(&dj, 0);
				if (res != FR_OK) break;
				if (ccl == ld_clust(dj.fs, dj.dir)) break;	/* Found the entry */
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
    29a2:	12 e0       	ldi	r17, 0x02	; 2
    29a4:	01 c0       	rjmp	.+2      	; 0x29a8 <f_getcwd+0x1aa>
#if _USE_LFN
			if (*buff) tp = buff;
#endif
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
    29a6:	11 e1       	ldi	r17, 0x11	; 17
			}
			while (n) buff[--i] = tp[--n];
			buff[--i] = '/';
		}
		tp = buff;
    29a8:	e9 ad       	sts	0x69, r30
    29aa:	fa ad       	sts	0x6a, r31
    29ac:	12 c0       	rjmp	.+36     	; 0x29d2 <f_getcwd+0x1d4>
#if _VOLUMES >= 2
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
#endif
			if (i == len) {					/* Root-directory */
				*tp++ = '/';
    29ae:	e9 2f       	mov	r30, r25
    29b0:	f8 2f       	mov	r31, r24
    29b2:	8f e2       	ldi	r24, 0x2F	; 47
    29b4:	81 93       	st	Z+, r24
    29b6:	0d c0       	rjmp	.+26     	; 0x29d2 <f_getcwd+0x1d4>
			} else {						/* Sub-directroy */
				do		/* Add stacked path str */
					*tp++ = buff[i++];
    29b8:	e9 ad       	sts	0x69, r30
    29ba:	fa ad       	sts	0x6a, r31
    29bc:	ee 0d       	add	r30, r14
    29be:	ff 1d       	adc	r31, r15
    29c0:	80 81       	ld	r24, Z
    29c2:	8d 93       	st	X+, r24
    29c4:	fd 01       	movw	r30, r26
    29c6:	08 94       	sec
    29c8:	e1 1c       	adc	r14, r1
    29ca:	f1 1c       	adc	r15, r1
				while (i < len);
    29cc:	ec 14       	cp	r14, r12
    29ce:	fd 04       	cpc	r15, r13
    29d0:	98 f3       	brcs	.-26     	; 0x29b8 <f_getcwd+0x1ba>
			}
		}
		*tp = 0;
    29d2:	10 82       	st	Z, r1
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    29d4:	81 2f       	mov	r24, r17
    29d6:	ea 96       	adiw	r28, 0x3a	; 58
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	cd bf       	out	0x3d, r28	; 61
    29e2:	df 91       	pop	r29
    29e4:	cf 91       	pop	r28
    29e6:	1f 91       	pop	r17
    29e8:	0f 91       	pop	r16
    29ea:	ff 90       	pop	r15
    29ec:	ef 90       	pop	r14
    29ee:	df 90       	pop	r13
    29f0:	cf 90       	pop	r12
    29f2:	bf 90       	pop	r11
    29f4:	af 90       	pop	r10
    29f6:	9f 90       	pop	r9
    29f8:	8f 90       	pop	r8
    29fa:	08 95       	ret
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) buff[--i] = tp[--n];
			buff[--i] = '/';
		}
		tp = buff;
    29fc:	99 ad       	sts	0x69, r25
    29fe:	8a ad       	sts	0x6a, r24
		if (res == FR_OK) {
#if _VOLUMES >= 2
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
#endif
			if (i == len) {					/* Root-directory */
    2a00:	ec 14       	cp	r14, r12
    2a02:	fd 04       	cpc	r15, r13
    2a04:	a1 f2       	breq	.-88     	; 0x29ae <f_getcwd+0x1b0>
    2a06:	a9 2f       	mov	r26, r25
    2a08:	b8 2f       	mov	r27, r24
    2a0a:	d6 cf       	rjmp	.-84     	; 0x29b8 <f_getcwd+0x1ba>
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) buff[--i] = tp[--n];
			buff[--i] = '/';
		}
		tp = buff;
    2a0c:	99 ad       	sts	0x69, r25
    2a0e:	8a ad       	sts	0x6a, r24
    2a10:	ce cf       	rjmp	.-100    	; 0x29ae <f_getcwd+0x1b0>

00002a12 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    2a12:	2f 92       	push	r2
    2a14:	3f 92       	push	r3
    2a16:	4f 92       	push	r4
    2a18:	5f 92       	push	r5
    2a1a:	6f 92       	push	r6
    2a1c:	7f 92       	push	r7
    2a1e:	8f 92       	push	r8
    2a20:	9f 92       	push	r9
    2a22:	af 92       	push	r10
    2a24:	bf 92       	push	r11
    2a26:	cf 92       	push	r12
    2a28:	df 92       	push	r13
    2a2a:	ef 92       	push	r14
    2a2c:	ff 92       	push	r15
    2a2e:	1f 93       	push	r17
    2a30:	cf 93       	push	r28
    2a32:	df 93       	push	r29
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <f_lseek+0x24>
    2a36:	00 d0       	rcall	.+0      	; 0x2a38 <f_lseek+0x26>
    2a38:	00 d0       	rcall	.+0      	; 0x2a3a <f_lseek+0x28>
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
    2a3e:	9e 83       	std	Y+6, r25	; 0x06
    2a40:	8d 83       	std	Y+5, r24	; 0x05
    2a42:	6a 01       	movw	r12, r20
    2a44:	7b 01       	movw	r14, r22
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
    2a46:	0e 94 43 01 	call	0x286	; 0x286 <validate>
    2a4a:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2a4c:	88 23       	and	r24, r24
    2a4e:	09 f0       	breq	.+2      	; 0x2a52 <f_lseek+0x40>
    2a50:	9f c1       	rjmp	.+830    	; 0x2d90 <f_lseek+0x37e>
	if (fp->err)						/* Check error */
    2a52:	ad 81       	ldd	r26, Y+5	; 0x05
    2a54:	be 81       	ldd	r27, Y+6	; 0x06
    2a56:	15 96       	adiw	r26, 0x05	; 5
    2a58:	8c 91       	ld	r24, X
    2a5a:	15 97       	sbiw	r26, 0x05	; 5
    2a5c:	88 23       	and	r24, r24
    2a5e:	09 f0       	breq	.+2      	; 0x2a62 <f_lseek+0x50>
    2a60:	96 c1       	rjmp	.+812    	; 0x2d8e <f_lseek+0x37c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    2a62:	1a 96       	adiw	r26, 0x0a	; 10
    2a64:	8d 91       	ld	r24, X+
    2a66:	9d 91       	ld	r25, X+
    2a68:	0d 90       	ld	r0, X+
    2a6a:	bc 91       	ld	r27, X
    2a6c:	a0 2d       	mov	r26, r0
    2a6e:	8c 15       	cp	r24, r12
    2a70:	9d 05       	cpc	r25, r13
    2a72:	ae 05       	cpc	r26, r14
    2a74:	bf 05       	cpc	r27, r15
    2a76:	38 f4       	brcc	.+14     	; 0x2a86 <f_lseek+0x74>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    2a78:	ed 81       	ldd	r30, Y+5	; 0x05
    2a7a:	fe 81       	ldd	r31, Y+6	; 0x06
    2a7c:	24 81       	ldd	r18, Z+4	; 0x04
    2a7e:	21 fd       	sbrc	r18, 1
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <f_lseek+0x74>
#endif
			) ofs = fp->fsize;
    2a82:	6c 01       	movw	r12, r24
    2a84:	7d 01       	movw	r14, r26

		ifptr = fp->fptr;
    2a86:	ad 81       	ldd	r26, Y+5	; 0x05
    2a88:	be 81       	ldd	r27, Y+6	; 0x06
    2a8a:	16 96       	adiw	r26, 0x06	; 6
    2a8c:	4d 91       	ld	r20, X+
    2a8e:	5d 91       	ld	r21, X+
    2a90:	6d 91       	ld	r22, X+
    2a92:	7c 91       	ld	r23, X
    2a94:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    2a96:	fd 01       	movw	r30, r26
    2a98:	16 82       	std	Z+6, r1	; 0x06
    2a9a:	17 82       	std	Z+7, r1	; 0x07
    2a9c:	10 86       	std	Z+8, r1	; 0x08
    2a9e:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    2aa0:	c1 14       	cp	r12, r1
    2aa2:	d1 04       	cpc	r13, r1
    2aa4:	e1 04       	cpc	r14, r1
    2aa6:	f1 04       	cpc	r15, r1
    2aa8:	09 f4       	brne	.+2      	; 0x2aac <f_lseek+0x9a>
    2aaa:	72 c1       	rjmp	.+740    	; 0x2d90 <f_lseek+0x37e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    2aac:	20 80       	ld	r2, Z
    2aae:	31 80       	ldd	r3, Z+1	; 0x01
    2ab0:	d1 01       	movw	r26, r2
    2ab2:	12 96       	adiw	r26, 0x02	; 2
    2ab4:	8c 91       	ld	r24, X
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	a0 e0       	ldi	r26, 0x00	; 0
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	4c 01       	movw	r8, r24
    2abe:	5d 01       	movw	r10, r26
    2ac0:	07 2e       	mov	r0, r23
    2ac2:	79 e0       	ldi	r23, 0x09	; 9
    2ac4:	88 0c       	add	r8, r8
    2ac6:	99 1c       	adc	r9, r9
    2ac8:	aa 1c       	adc	r10, r10
    2aca:	bb 1c       	adc	r11, r11
    2acc:	7a 95       	dec	r23
    2ace:	d1 f7       	brne	.-12     	; 0x2ac4 <f_lseek+0xb2>
    2ad0:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    2ad2:	41 15       	cp	r20, r1
    2ad4:	51 05       	cpc	r21, r1
    2ad6:	61 05       	cpc	r22, r1
    2ad8:	71 05       	cpc	r23, r1
    2ada:	f1 f1       	breq	.+124    	; 0x2b58 <f_lseek+0x146>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    2adc:	2a 01       	movw	r4, r20
    2ade:	3b 01       	movw	r6, r22
    2ae0:	08 94       	sec
    2ae2:	41 08       	sbc	r4, r1
    2ae4:	51 08       	sbc	r5, r1
    2ae6:	61 08       	sbc	r6, r1
    2ae8:	71 08       	sbc	r7, r1
    2aea:	c7 01       	movw	r24, r14
    2aec:	b6 01       	movw	r22, r12
    2aee:	61 50       	subi	r22, 0x01	; 1
    2af0:	70 40       	sbci	r23, 0x00	; 0
    2af2:	80 40       	sbci	r24, 0x00	; 0
    2af4:	90 40       	sbci	r25, 0x00	; 0
    2af6:	a5 01       	movw	r20, r10
    2af8:	94 01       	movw	r18, r8
    2afa:	0e 94 b0 20 	call	0x4160	; 0x4160 <__udivmodsi4>
    2afe:	29 83       	std	Y+1, r18	; 0x01
    2b00:	3a 83       	std	Y+2, r19	; 0x02
    2b02:	4b 83       	std	Y+3, r20	; 0x03
    2b04:	5c 83       	std	Y+4, r21	; 0x04
    2b06:	c3 01       	movw	r24, r6
    2b08:	b2 01       	movw	r22, r4
    2b0a:	a5 01       	movw	r20, r10
    2b0c:	94 01       	movw	r18, r8
    2b0e:	0e 94 b0 20 	call	0x4160	; 0x4160 <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	9a 81       	ldd	r25, Y+2	; 0x02
    2b16:	ab 81       	ldd	r26, Y+3	; 0x03
    2b18:	bc 81       	ldd	r27, Y+4	; 0x04
    2b1a:	82 17       	cp	r24, r18
    2b1c:	93 07       	cpc	r25, r19
    2b1e:	a4 07       	cpc	r26, r20
    2b20:	b5 07       	cpc	r27, r21
    2b22:	d0 f0       	brcs	.+52     	; 0x2b58 <f_lseek+0x146>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    2b24:	88 27       	eor	r24, r24
    2b26:	99 27       	eor	r25, r25
    2b28:	dc 01       	movw	r26, r24
    2b2a:	88 19       	sub	r24, r8
    2b2c:	99 09       	sbc	r25, r9
    2b2e:	aa 09       	sbc	r26, r10
    2b30:	bb 09       	sbc	r27, r11
    2b32:	84 21       	and	r24, r4
    2b34:	95 21       	and	r25, r5
    2b36:	a6 21       	and	r26, r6
    2b38:	b7 21       	and	r27, r7
    2b3a:	ed 81       	ldd	r30, Y+5	; 0x05
    2b3c:	fe 81       	ldd	r31, Y+6	; 0x06
    2b3e:	86 83       	std	Z+6, r24	; 0x06
    2b40:	97 83       	std	Z+7, r25	; 0x07
    2b42:	a0 87       	std	Z+8, r26	; 0x08
    2b44:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    2b46:	c8 1a       	sub	r12, r24
    2b48:	d9 0a       	sbc	r13, r25
    2b4a:	ea 0a       	sbc	r14, r26
    2b4c:	fb 0a       	sbc	r15, r27
				clst = fp->clust;
    2b4e:	42 89       	ldd	r20, Z+18	; 0x12
    2b50:	53 89       	ldd	r21, Z+19	; 0x13
    2b52:	64 89       	ldd	r22, Z+20	; 0x14
    2b54:	75 89       	ldd	r23, Z+21	; 0x15
    2b56:	3e c0       	rjmp	.+124    	; 0x2bd4 <f_lseek+0x1c2>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    2b58:	ad 81       	ldd	r26, Y+5	; 0x05
    2b5a:	be 81       	ldd	r27, Y+6	; 0x06
    2b5c:	1e 96       	adiw	r26, 0x0e	; 14
    2b5e:	4d 91       	ld	r20, X+
    2b60:	5d 91       	ld	r21, X+
    2b62:	6d 91       	ld	r22, X+
    2b64:	7c 91       	ld	r23, X
    2b66:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    2b68:	41 15       	cp	r20, r1
    2b6a:	51 05       	cpc	r21, r1
    2b6c:	61 05       	cpc	r22, r1
    2b6e:	71 05       	cpc	r23, r1
    2b70:	49 f5       	brne	.+82     	; 0x2bc4 <f_lseek+0x1b2>
					clst = create_chain(fp->fs, 0);
    2b72:	c1 01       	movw	r24, r2
    2b74:	40 e0       	ldi	r20, 0x00	; 0
    2b76:	50 e0       	ldi	r21, 0x00	; 0
    2b78:	ba 01       	movw	r22, r20
    2b7a:	0e 94 2a 08 	call	0x1054	; 0x1054 <create_chain>
    2b7e:	ab 01       	movw	r20, r22
    2b80:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2b82:	41 30       	cpi	r20, 0x01	; 1
    2b84:	51 05       	cpc	r21, r1
    2b86:	61 05       	cpc	r22, r1
    2b88:	71 05       	cpc	r23, r1
    2b8a:	31 f4       	brne	.+12     	; 0x2b98 <f_lseek+0x186>
    2b8c:	82 e0       	ldi	r24, 0x02	; 2
    2b8e:	ed 81       	ldd	r30, Y+5	; 0x05
    2b90:	fe 81       	ldd	r31, Y+6	; 0x06
    2b92:	85 83       	std	Z+5, r24	; 0x05
    2b94:	12 e0       	ldi	r17, 0x02	; 2
    2b96:	fc c0       	rjmp	.+504    	; 0x2d90 <f_lseek+0x37e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2b98:	4f 3f       	cpi	r20, 0xFF	; 255
    2b9a:	ff ef       	ldi	r31, 0xFF	; 255
    2b9c:	5f 07       	cpc	r21, r31
    2b9e:	ff ef       	ldi	r31, 0xFF	; 255
    2ba0:	6f 07       	cpc	r22, r31
    2ba2:	ff ef       	ldi	r31, 0xFF	; 255
    2ba4:	7f 07       	cpc	r23, r31
    2ba6:	41 f4       	brne	.+16     	; 0x2bb8 <f_lseek+0x1a6>
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	ad 81       	ldd	r26, Y+5	; 0x05
    2bac:	be 81       	ldd	r27, Y+6	; 0x06
    2bae:	15 96       	adiw	r26, 0x05	; 5
    2bb0:	8c 93       	st	X, r24
    2bb2:	15 97       	sbiw	r26, 0x05	; 5
    2bb4:	11 e0       	ldi	r17, 0x01	; 1
    2bb6:	ec c0       	rjmp	.+472    	; 0x2d90 <f_lseek+0x37e>
					fp->sclust = clst;
    2bb8:	ed 81       	ldd	r30, Y+5	; 0x05
    2bba:	fe 81       	ldd	r31, Y+6	; 0x06
    2bbc:	46 87       	std	Z+14, r20	; 0x0e
    2bbe:	57 87       	std	Z+15, r21	; 0x0f
    2bc0:	60 8b       	std	Z+16, r22	; 0x10
    2bc2:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->clust = clst;
    2bc4:	ad 81       	ldd	r26, Y+5	; 0x05
    2bc6:	be 81       	ldd	r27, Y+6	; 0x06
    2bc8:	52 96       	adiw	r26, 0x12	; 18
    2bca:	4d 93       	st	X+, r20
    2bcc:	5d 93       	st	X+, r21
    2bce:	6d 93       	st	X+, r22
    2bd0:	7c 93       	st	X, r23
    2bd2:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    2bd4:	41 15       	cp	r20, r1
    2bd6:	51 05       	cpc	r21, r1
    2bd8:	61 05       	cpc	r22, r1
    2bda:	71 05       	cpc	r23, r1
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <f_lseek+0x1ce>
    2bde:	9f c0       	rjmp	.+318    	; 0x2d1e <f_lseek+0x30c>
				while (ofs > bcs) {						/* Cluster following loop */
    2be0:	8c 14       	cp	r8, r12
    2be2:	9d 04       	cpc	r9, r13
    2be4:	ae 04       	cpc	r10, r14
    2be6:	bf 04       	cpc	r11, r15
    2be8:	08 f0       	brcs	.+2      	; 0x2bec <f_lseek+0x1da>
    2bea:	62 c0       	rjmp	.+196    	; 0x2cb0 <f_lseek+0x29e>
    2bec:	4d 80       	ldd	r4, Y+5	; 0x05
    2bee:	5e 80       	ldd	r5, Y+6	; 0x06
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2bf0:	f2 01       	movw	r30, r4
    2bf2:	84 81       	ldd	r24, Z+4	; 0x04
    2bf4:	81 ff       	sbrs	r24, 1
    2bf6:	0c c0       	rjmp	.+24     	; 0x2c10 <f_lseek+0x1fe>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    2bf8:	80 81       	ld	r24, Z
    2bfa:	91 81       	ldd	r25, Z+1	; 0x01
    2bfc:	0e 94 2a 08 	call	0x1054	; 0x1054 <create_chain>
    2c00:	ab 01       	movw	r20, r22
    2c02:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    2c04:	41 15       	cp	r20, r1
    2c06:	51 05       	cpc	r21, r1
    2c08:	61 05       	cpc	r22, r1
    2c0a:	71 05       	cpc	r23, r1
    2c0c:	39 f4       	brne	.+14     	; 0x2c1c <f_lseek+0x20a>
    2c0e:	4c c0       	rjmp	.+152    	; 0x2ca8 <f_lseek+0x296>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    2c10:	80 81       	ld	r24, Z
    2c12:	91 81       	ldd	r25, Z+1	; 0x01
    2c14:	0e 94 87 05 	call	0xb0e	; 0xb0e <get_fat>
    2c18:	ab 01       	movw	r20, r22
    2c1a:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2c1c:	4f 3f       	cpi	r20, 0xFF	; 255
    2c1e:	bf ef       	ldi	r27, 0xFF	; 255
    2c20:	5b 07       	cpc	r21, r27
    2c22:	bf ef       	ldi	r27, 0xFF	; 255
    2c24:	6b 07       	cpc	r22, r27
    2c26:	bf ef       	ldi	r27, 0xFF	; 255
    2c28:	7b 07       	cpc	r23, r27
    2c2a:	29 f4       	brne	.+10     	; 0x2c36 <f_lseek+0x224>
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	f2 01       	movw	r30, r4
    2c30:	85 83       	std	Z+5, r24	; 0x05
    2c32:	11 e0       	ldi	r17, 0x01	; 1
    2c34:	ad c0       	rjmp	.+346    	; 0x2d90 <f_lseek+0x37e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    2c36:	42 30       	cpi	r20, 0x02	; 2
    2c38:	51 05       	cpc	r21, r1
    2c3a:	61 05       	cpc	r22, r1
    2c3c:	71 05       	cpc	r23, r1
    2c3e:	60 f0       	brcs	.+24     	; 0x2c58 <f_lseek+0x246>
    2c40:	d2 01       	movw	r26, r4
    2c42:	ed 91       	ld	r30, X+
    2c44:	fc 91       	ld	r31, X
    2c46:	86 89       	ldd	r24, Z+22	; 0x16
    2c48:	97 89       	ldd	r25, Z+23	; 0x17
    2c4a:	a0 8d       	ldd	r26, Z+24	; 0x18
    2c4c:	b1 8d       	ldd	r27, Z+25	; 0x19
    2c4e:	48 17       	cp	r20, r24
    2c50:	59 07       	cpc	r21, r25
    2c52:	6a 07       	cpc	r22, r26
    2c54:	7b 07       	cpc	r23, r27
    2c56:	28 f0       	brcs	.+10     	; 0x2c62 <f_lseek+0x250>
    2c58:	82 e0       	ldi	r24, 0x02	; 2
    2c5a:	f2 01       	movw	r30, r4
    2c5c:	85 83       	std	Z+5, r24	; 0x05
    2c5e:	12 e0       	ldi	r17, 0x02	; 2
    2c60:	97 c0       	rjmp	.+302    	; 0x2d90 <f_lseek+0x37e>
					fp->clust = clst;
    2c62:	d2 01       	movw	r26, r4
    2c64:	52 96       	adiw	r26, 0x12	; 18
    2c66:	4d 93       	st	X+, r20
    2c68:	5d 93       	st	X+, r21
    2c6a:	6d 93       	st	X+, r22
    2c6c:	7c 93       	st	X, r23
    2c6e:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    2c70:	16 96       	adiw	r26, 0x06	; 6
    2c72:	8d 91       	ld	r24, X+
    2c74:	9d 91       	ld	r25, X+
    2c76:	0d 90       	ld	r0, X+
    2c78:	bc 91       	ld	r27, X
    2c7a:	a0 2d       	mov	r26, r0
    2c7c:	88 0d       	add	r24, r8
    2c7e:	99 1d       	adc	r25, r9
    2c80:	aa 1d       	adc	r26, r10
    2c82:	bb 1d       	adc	r27, r11
    2c84:	f2 01       	movw	r30, r4
    2c86:	86 83       	std	Z+6, r24	; 0x06
    2c88:	97 83       	std	Z+7, r25	; 0x07
    2c8a:	a0 87       	std	Z+8, r26	; 0x08
    2c8c:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    2c8e:	c8 18       	sub	r12, r8
    2c90:	d9 08       	sbc	r13, r9
    2c92:	ea 08       	sbc	r14, r10
    2c94:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    2c96:	8c 14       	cp	r8, r12
    2c98:	9d 04       	cpc	r9, r13
    2c9a:	ae 04       	cpc	r10, r14
    2c9c:	bf 04       	cpc	r11, r15
    2c9e:	08 f4       	brcc	.+2      	; 0x2ca2 <f_lseek+0x290>
    2ca0:	a7 cf       	rjmp	.-178    	; 0x2bf0 <f_lseek+0x1de>
    2ca2:	5e 82       	std	Y+6, r5	; 0x06
    2ca4:	4d 82       	std	Y+5, r4	; 0x05
    2ca6:	04 c0       	rjmp	.+8      	; 0x2cb0 <f_lseek+0x29e>
    2ca8:	5e 82       	std	Y+6, r5	; 0x06
    2caa:	4d 82       	std	Y+5, r4	; 0x05
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    2cac:	75 01       	movw	r14, r10
    2cae:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    2cb0:	ed 81       	ldd	r30, Y+5	; 0x05
    2cb2:	fe 81       	ldd	r31, Y+6	; 0x06
    2cb4:	86 81       	ldd	r24, Z+6	; 0x06
    2cb6:	97 81       	ldd	r25, Z+7	; 0x07
    2cb8:	a0 85       	ldd	r26, Z+8	; 0x08
    2cba:	b1 85       	ldd	r27, Z+9	; 0x09
    2cbc:	8c 0d       	add	r24, r12
    2cbe:	9d 1d       	adc	r25, r13
    2cc0:	ae 1d       	adc	r26, r14
    2cc2:	bf 1d       	adc	r27, r15
    2cc4:	86 83       	std	Z+6, r24	; 0x06
    2cc6:	97 83       	std	Z+7, r25	; 0x07
    2cc8:	a0 87       	std	Z+8, r26	; 0x08
    2cca:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    2ccc:	d7 01       	movw	r26, r14
    2cce:	c6 01       	movw	r24, r12
    2cd0:	91 70       	andi	r25, 0x01	; 1
    2cd2:	a0 70       	andi	r26, 0x00	; 0
    2cd4:	b0 70       	andi	r27, 0x00	; 0
    2cd6:	00 97       	sbiw	r24, 0x00	; 0
    2cd8:	a1 05       	cpc	r26, r1
    2cda:	b1 05       	cpc	r27, r1
    2cdc:	21 f1       	breq	.+72     	; 0x2d26 <f_lseek+0x314>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    2cde:	80 81       	ld	r24, Z
    2ce0:	91 81       	ldd	r25, Z+1	; 0x01
    2ce2:	0e 94 51 05 	call	0xaa2	; 0xaa2 <clust2sect>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	a1 05       	cpc	r26, r1
    2cee:	b1 05       	cpc	r27, r1
    2cf0:	41 f4       	brne	.+16     	; 0x2d02 <f_lseek+0x2f0>
    2cf2:	82 e0       	ldi	r24, 0x02	; 2
    2cf4:	ad 81       	ldd	r26, Y+5	; 0x05
    2cf6:	be 81       	ldd	r27, Y+6	; 0x06
    2cf8:	15 96       	adiw	r26, 0x05	; 5
    2cfa:	8c 93       	st	X, r24
    2cfc:	15 97       	sbiw	r26, 0x05	; 5
    2cfe:	12 e0       	ldi	r17, 0x02	; 2
    2d00:	47 c0       	rjmp	.+142    	; 0x2d90 <f_lseek+0x37e>
					nsect += ofs / SS(fp->fs);
    2d02:	0b 2e       	mov	r0, r27
    2d04:	b9 e0       	ldi	r27, 0x09	; 9
    2d06:	f6 94       	lsr	r15
    2d08:	e7 94       	ror	r14
    2d0a:	d7 94       	ror	r13
    2d0c:	c7 94       	ror	r12
    2d0e:	ba 95       	dec	r27
    2d10:	d1 f7       	brne	.-12     	; 0x2d06 <f_lseek+0x2f4>
    2d12:	b0 2d       	mov	r27, r0
    2d14:	c8 0e       	add	r12, r24
    2d16:	d9 1e       	adc	r13, r25
    2d18:	ea 1e       	adc	r14, r26
    2d1a:	fb 1e       	adc	r15, r27
    2d1c:	07 c0       	rjmp	.+14     	; 0x2d2c <f_lseek+0x31a>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2d1e:	cc 24       	eor	r12, r12
    2d20:	dd 24       	eor	r13, r13
    2d22:	76 01       	movw	r14, r12
    2d24:	03 c0       	rjmp	.+6      	; 0x2d2c <f_lseek+0x31a>
    2d26:	cc 24       	eor	r12, r12
    2d28:	dd 24       	eor	r13, r13
    2d2a:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    2d2c:	ed 81       	ldd	r30, Y+5	; 0x05
    2d2e:	fe 81       	ldd	r31, Y+6	; 0x06
    2d30:	86 81       	ldd	r24, Z+6	; 0x06
    2d32:	97 81       	ldd	r25, Z+7	; 0x07
    2d34:	a0 85       	ldd	r26, Z+8	; 0x08
    2d36:	b1 85       	ldd	r27, Z+9	; 0x09
    2d38:	91 70       	andi	r25, 0x01	; 1
    2d3a:	a0 70       	andi	r26, 0x00	; 0
    2d3c:	b0 70       	andi	r27, 0x00	; 0
    2d3e:	00 97       	sbiw	r24, 0x00	; 0
    2d40:	a1 05       	cpc	r26, r1
    2d42:	b1 05       	cpc	r27, r1
    2d44:	69 f0       	breq	.+26     	; 0x2d60 <f_lseek+0x34e>
    2d46:	86 89       	ldd	r24, Z+22	; 0x16
    2d48:	97 89       	ldd	r25, Z+23	; 0x17
    2d4a:	a0 8d       	ldd	r26, Z+24	; 0x18
    2d4c:	b1 8d       	ldd	r27, Z+25	; 0x19
    2d4e:	8c 15       	cp	r24, r12
    2d50:	9d 05       	cpc	r25, r13
    2d52:	ae 05       	cpc	r26, r14
    2d54:	bf 05       	cpc	r27, r15
    2d56:	21 f0       	breq	.+8      	; 0x2d60 <f_lseek+0x34e>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    2d58:	c6 8a       	std	Z+22, r12	; 0x16
    2d5a:	d7 8a       	std	Z+23, r13	; 0x17
    2d5c:	e0 8e       	std	Z+24, r14	; 0x18
    2d5e:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    2d60:	ed 81       	ldd	r30, Y+5	; 0x05
    2d62:	fe 81       	ldd	r31, Y+6	; 0x06
    2d64:	86 81       	ldd	r24, Z+6	; 0x06
    2d66:	97 81       	ldd	r25, Z+7	; 0x07
    2d68:	a0 85       	ldd	r26, Z+8	; 0x08
    2d6a:	b1 85       	ldd	r27, Z+9	; 0x09
    2d6c:	42 85       	ldd	r20, Z+10	; 0x0a
    2d6e:	53 85       	ldd	r21, Z+11	; 0x0b
    2d70:	64 85       	ldd	r22, Z+12	; 0x0c
    2d72:	75 85       	ldd	r23, Z+13	; 0x0d
    2d74:	48 17       	cp	r20, r24
    2d76:	59 07       	cpc	r21, r25
    2d78:	6a 07       	cpc	r22, r26
    2d7a:	7b 07       	cpc	r23, r27
    2d7c:	48 f4       	brcc	.+18     	; 0x2d90 <f_lseek+0x37e>
			fp->fsize = fp->fptr;
    2d7e:	82 87       	std	Z+10, r24	; 0x0a
    2d80:	93 87       	std	Z+11, r25	; 0x0b
    2d82:	a4 87       	std	Z+12, r26	; 0x0c
    2d84:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    2d86:	84 81       	ldd	r24, Z+4	; 0x04
    2d88:	80 62       	ori	r24, 0x20	; 32
    2d8a:	84 83       	std	Z+4, r24	; 0x04
    2d8c:	01 c0       	rjmp	.+2      	; 0x2d90 <f_lseek+0x37e>


	res = validate(fp);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)						/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
    2d8e:	18 2f       	mov	r17, r24
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    2d90:	81 2f       	mov	r24, r17
    2d92:	26 96       	adiw	r28, 0x06	; 6
    2d94:	0f b6       	in	r0, 0x3f	; 63
    2d96:	f8 94       	cli
    2d98:	de bf       	out	0x3e, r29	; 62
    2d9a:	0f be       	out	0x3f, r0	; 63
    2d9c:	cd bf       	out	0x3d, r28	; 61
    2d9e:	df 91       	pop	r29
    2da0:	cf 91       	pop	r28
    2da2:	1f 91       	pop	r17
    2da4:	ff 90       	pop	r15
    2da6:	ef 90       	pop	r14
    2da8:	df 90       	pop	r13
    2daa:	cf 90       	pop	r12
    2dac:	bf 90       	pop	r11
    2dae:	af 90       	pop	r10
    2db0:	9f 90       	pop	r9
    2db2:	8f 90       	pop	r8
    2db4:	7f 90       	pop	r7
    2db6:	6f 90       	pop	r6
    2db8:	5f 90       	pop	r5
    2dba:	4f 90       	pop	r4
    2dbc:	3f 90       	pop	r3
    2dbe:	2f 90       	pop	r2
    2dc0:	08 95       	ret

00002dc2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
    2dc2:	0f 93       	push	r16
    2dc4:	1f 93       	push	r17
    2dc6:	cf 93       	push	r28
    2dc8:	df 93       	push	r29
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    2dce:	60 97       	sbiw	r28, 0x10	; 16
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	de bf       	out	0x3e, r29	; 62
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	8c 01       	movw	r16, r24
    2ddc:	78 8b       	std	Y+16, r23	; 0x10
    2dde:	6f 87       	std	Y+15, r22	; 0x0f
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
    2de0:	00 97       	sbiw	r24, 0x00	; 0
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <f_opendir+0x24>
    2de4:	4b c0       	rjmp	.+150    	; 0x2e7c <f_opendir+0xba>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
    2de6:	ce 01       	movw	r24, r28
    2de8:	01 96       	adiw	r24, 0x01	; 1
    2dea:	be 01       	movw	r22, r28
    2dec:	61 5f       	subi	r22, 0xF1	; 241
    2dee:	7f 4f       	sbci	r23, 0xFF	; 255
    2df0:	40 e0       	ldi	r20, 0x00	; 0
    2df2:	0e 94 57 02 	call	0x4ae	; 0x4ae <find_volume>
	if (res == FR_OK) {
    2df6:	88 23       	and	r24, r24
    2df8:	e9 f5       	brne	.+122    	; 0x2e74 <f_opendir+0xb2>
		dp->fs = fs;
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dfe:	d8 01       	movw	r26, r16
    2e00:	11 96       	adiw	r26, 0x01	; 1
    2e02:	9c 93       	st	X, r25
    2e04:	8e 93       	st	-X, r24
		INIT_BUF(*dp);
    2e06:	ce 01       	movw	r24, r28
    2e08:	03 96       	adiw	r24, 0x03	; 3
    2e0a:	55 96       	adiw	r26, 0x15	; 21
    2e0c:	9c 93       	st	X, r25
    2e0e:	8e 93       	st	-X, r24
    2e10:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dp, path);			/* Follow the path to the directory */
    2e12:	6f 85       	ldd	r22, Y+15	; 0x0f
    2e14:	78 89       	ldd	r23, Y+16	; 0x10
    2e16:	c8 01       	movw	r24, r16
    2e18:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    2e1c:	88 23       	and	r24, r24
    2e1e:	21 f5       	brne	.+72     	; 0x2e68 <f_opendir+0xa6>
			if (dp->dir) {						/* It is not the origin directory itself */
    2e20:	d8 01       	movw	r26, r16
    2e22:	52 96       	adiw	r26, 0x12	; 18
    2e24:	ed 91       	ld	r30, X+
    2e26:	fc 91       	ld	r31, X
    2e28:	53 97       	sbiw	r26, 0x13	; 19
    2e2a:	30 97       	sbiw	r30, 0x00	; 0
    2e2c:	79 f0       	breq	.+30     	; 0x2e4c <f_opendir+0x8a>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
    2e2e:	83 85       	ldd	r24, Z+11	; 0x0b
    2e30:	84 ff       	sbrs	r24, 4
    2e32:	1d c0       	rjmp	.+58     	; 0x2e6e <f_opendir+0xac>
					dp->sclust = ld_clust(fs, dp->dir);
    2e34:	89 81       	ldd	r24, Y+1	; 0x01
    2e36:	9a 81       	ldd	r25, Y+2	; 0x02
    2e38:	bf 01       	movw	r22, r30
    2e3a:	0e 94 9c 00 	call	0x138	; 0x138 <ld_clust>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	f8 01       	movw	r30, r16
    2e44:	86 83       	std	Z+6, r24	; 0x06
    2e46:	97 83       	std	Z+7, r25	; 0x07
    2e48:	a0 87       	std	Z+8, r26	; 0x08
    2e4a:	b1 87       	std	Z+9, r27	; 0x09
				else							/* The object is a file */
					res = FR_NO_PATH;
			}
			if (res == FR_OK) {
				dp->id = fs->id;
    2e4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e50:	86 81       	ldd	r24, Z+6	; 0x06
    2e52:	97 81       	ldd	r25, Z+7	; 0x07
    2e54:	d8 01       	movw	r26, r16
    2e56:	13 96       	adiw	r26, 0x03	; 3
    2e58:	9c 93       	st	X, r25
    2e5a:	8e 93       	st	-X, r24
    2e5c:	12 97       	sbiw	r26, 0x02	; 2
				res = dir_sdi(dp, 0);			/* Rewind directory */
    2e5e:	c8 01       	movw	r24, r16
    2e60:	60 e0       	ldi	r22, 0x00	; 0
    2e62:	70 e0       	ldi	r23, 0x00	; 0
    2e64:	0e 94 6f 06 	call	0xcde	; 0xcde <dir_sdi>
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2e68:	84 30       	cpi	r24, 0x04	; 4
    2e6a:	11 f4       	brne	.+4      	; 0x2e70 <f_opendir+0xae>
    2e6c:	13 c0       	rjmp	.+38     	; 0x2e94 <f_opendir+0xd2>
		if (res == FR_OK) {						/* Follow completed */
			if (dp->dir) {						/* It is not the origin directory itself */
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
					dp->sclust = ld_clust(fs, dp->dir);
				else							/* The object is a file */
					res = FR_NO_PATH;
    2e6e:	85 e0       	ldi	r24, 0x05	; 5
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
    2e70:	88 23       	and	r24, r24
    2e72:	29 f0       	breq	.+10     	; 0x2e7e <f_opendir+0xbc>
    2e74:	f8 01       	movw	r30, r16
    2e76:	11 82       	std	Z+1, r1	; 0x01
    2e78:	10 82       	st	Z, r1
    2e7a:	01 c0       	rjmp	.+2      	; 0x2e7e <f_opendir+0xbc>
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
    2e7c:	89 e0       	ldi	r24, 0x09	; 9
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */

	LEAVE_FF(fs, res);
}
    2e7e:	60 96       	adiw	r28, 0x10	; 16
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	f8 94       	cli
    2e84:	de bf       	out	0x3e, r29	; 62
    2e86:	0f be       	out	0x3f, r0	; 63
    2e88:	cd bf       	out	0x3d, r28	; 61
    2e8a:	df 91       	pop	r29
    2e8c:	cf 91       	pop	r28
    2e8e:	1f 91       	pop	r17
    2e90:	0f 91       	pop	r16
    2e92:	08 95       	ret
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2e94:	85 e0       	ldi	r24, 0x05	; 5
    2e96:	ee cf       	rjmp	.-36     	; 0x2e74 <f_opendir+0xb2>

00002e98 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
    2e98:	cf 93       	push	r28
    2e9a:	df 93       	push	r29
    2e9c:	ec 01       	movw	r28, r24
	FRESULT res;


	res = validate(dp);
    2e9e:	0e 94 43 01 	call	0x286	; 0x286 <validate>
	if (res == FR_OK) {
    2ea2:	88 23       	and	r24, r24
    2ea4:	11 f4       	brne	.+4      	; 0x2eaa <f_closedir+0x12>
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
			res = dec_lock(dp->lockid);
		if (res == FR_OK)
#endif
			dp->fs = 0;				/* Invalidate directory object */
    2ea6:	19 82       	std	Y+1, r1	; 0x01
    2ea8:	18 82       	st	Y, r1
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
    2eaa:	df 91       	pop	r29
    2eac:	cf 91       	pop	r28
    2eae:	08 95       	ret

00002eb0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    2eb0:	cf 92       	push	r12
    2eb2:	df 92       	push	r13
    2eb4:	ef 92       	push	r14
    2eb6:	ff 92       	push	r15
    2eb8:	1f 93       	push	r17
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	2c 97       	sbiw	r28, 0x0c	; 12
    2ec4:	0f b6       	in	r0, 0x3f	; 63
    2ec6:	f8 94       	cli
    2ec8:	de bf       	out	0x3e, r29	; 62
    2eca:	0f be       	out	0x3f, r0	; 63
    2ecc:	cd bf       	out	0x3d, r28	; 61
    2ece:	7c 01       	movw	r14, r24
    2ed0:	6b 01       	movw	r12, r22
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
    2ed2:	0e 94 43 01 	call	0x286	; 0x286 <validate>
    2ed6:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    2ed8:	88 23       	and	r24, r24
    2eda:	91 f5       	brne	.+100    	; 0x2f40 <f_readdir+0x90>
		if (!fno) {
    2edc:	c1 14       	cp	r12, r1
    2ede:	d1 04       	cpc	r13, r1
    2ee0:	39 f4       	brne	.+14     	; 0x2ef0 <f_readdir+0x40>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    2ee2:	c7 01       	movw	r24, r14
    2ee4:	60 e0       	ldi	r22, 0x00	; 0
    2ee6:	70 e0       	ldi	r23, 0x00	; 0
    2ee8:	0e 94 6f 06 	call	0xcde	; 0xcde <dir_sdi>
    2eec:	18 2f       	mov	r17, r24
    2eee:	28 c0       	rjmp	.+80     	; 0x2f40 <f_readdir+0x90>
		} else {
			INIT_BUF(*dp);
    2ef0:	ce 01       	movw	r24, r28
    2ef2:	01 96       	adiw	r24, 0x01	; 1
    2ef4:	f7 01       	movw	r30, r14
    2ef6:	95 8b       	std	Z+21, r25	; 0x15
    2ef8:	84 8b       	std	Z+20, r24	; 0x14
			res = dir_read(dp, 0);			/* Read an item */
    2efa:	c7 01       	movw	r24, r14
    2efc:	60 e0       	ldi	r22, 0x00	; 0
    2efe:	70 e0       	ldi	r23, 0x00	; 0
    2f00:	0e 94 9c 0a 	call	0x1538	; 0x1538 <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of directory */
    2f04:	84 30       	cpi	r24, 0x04	; 4
    2f06:	31 f4       	brne	.+12     	; 0x2f14 <f_readdir+0x64>
				dp->sect = 0;
    2f08:	f7 01       	movw	r30, r14
    2f0a:	16 86       	std	Z+14, r1	; 0x0e
    2f0c:	17 86       	std	Z+15, r1	; 0x0f
    2f0e:	10 8a       	std	Z+16, r1	; 0x10
    2f10:	11 8a       	std	Z+17, r1	; 0x11
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <f_readdir+0x68>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    2f14:	88 23       	and	r24, r24
    2f16:	89 f4       	brne	.+34     	; 0x2f3a <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
    2f18:	c7 01       	movw	r24, r14
    2f1a:	b6 01       	movw	r22, r12
    2f1c:	0e 94 bf 00 	call	0x17e	; 0x17e <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
    2f20:	c7 01       	movw	r24, r14
    2f22:	60 e0       	ldi	r22, 0x00	; 0
    2f24:	70 e0       	ldi	r23, 0x00	; 0
    2f26:	0e 94 57 09 	call	0x12ae	; 0x12ae <dir_next>
				if (res == FR_NO_FILE) {
    2f2a:	84 30       	cpi	r24, 0x04	; 4
    2f2c:	41 f4       	brne	.+16     	; 0x2f3e <f_readdir+0x8e>
					dp->sect = 0;
    2f2e:	f7 01       	movw	r30, r14
    2f30:	16 86       	std	Z+14, r1	; 0x0e
    2f32:	17 86       	std	Z+15, r1	; 0x0f
    2f34:	10 8a       	std	Z+16, r1	; 0x10
    2f36:	11 8a       	std	Z+17, r1	; 0x11
    2f38:	03 c0       	rjmp	.+6      	; 0x2f40 <f_readdir+0x90>
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dp);
			res = dir_read(dp, 0);			/* Read an item */
    2f3a:	18 2f       	mov	r17, r24
    2f3c:	01 c0       	rjmp	.+2      	; 0x2f40 <f_readdir+0x90>
				dp->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
				res = dir_next(dp, 0);		/* Increment index for next */
    2f3e:	18 2f       	mov	r17, r24
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
}
    2f40:	81 2f       	mov	r24, r17
    2f42:	2c 96       	adiw	r28, 0x0c	; 12
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	f8 94       	cli
    2f48:	de bf       	out	0x3e, r29	; 62
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	cd bf       	out	0x3d, r28	; 61
    2f4e:	df 91       	pop	r29
    2f50:	cf 91       	pop	r28
    2f52:	1f 91       	pop	r17
    2f54:	ff 90       	pop	r15
    2f56:	ef 90       	pop	r14
    2f58:	df 90       	pop	r13
    2f5a:	cf 90       	pop	r12
    2f5c:	08 95       	ret

00002f5e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
    2f5e:	6f 92       	push	r6
    2f60:	7f 92       	push	r7
    2f62:	8f 92       	push	r8
    2f64:	9f 92       	push	r9
    2f66:	af 92       	push	r10
    2f68:	bf 92       	push	r11
    2f6a:	cf 92       	push	r12
    2f6c:	df 92       	push	r13
    2f6e:	ef 92       	push	r14
    2f70:	ff 92       	push	r15
    2f72:	0f 93       	push	r16
    2f74:	1f 93       	push	r17
    2f76:	cf 93       	push	r28
    2f78:	df 93       	push	r29
    2f7a:	00 d0       	rcall	.+0      	; 0x2f7c <f_gets+0x1e>
    2f7c:	00 d0       	rcall	.+0      	; 0x2f7e <f_gets+0x20>
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
    2f82:	3c 01       	movw	r6, r24
    2f84:	4a 01       	movw	r8, r20
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    2f86:	8c 01       	movw	r16, r24
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
	int n = 0;
    2f88:	cc 24       	eor	r12, r12
    2f8a:	dd 24       	eor	r13, r13
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
    2f8c:	5b 01       	movw	r10, r22
    2f8e:	08 94       	sec
    2f90:	a1 08       	sbc	r10, r1
    2f92:	b1 08       	sbc	r11, r1
    2f94:	1b c0       	rjmp	.+54     	; 0x2fcc <f_gets+0x6e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
    2f96:	c4 01       	movw	r24, r8
    2f98:	be 01       	movw	r22, r28
    2f9a:	6f 5f       	subi	r22, 0xFF	; 255
    2f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f9e:	41 e0       	ldi	r20, 0x01	; 1
    2fa0:	50 e0       	ldi	r21, 0x00	; 0
    2fa2:	9e 01       	movw	r18, r28
    2fa4:	2d 5f       	subi	r18, 0xFD	; 253
    2fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa8:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <f_read>
		if (rc != 1) break;
    2fac:	8b 81       	ldd	r24, Y+3	; 0x03
    2fae:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb0:	81 30       	cpi	r24, 0x01	; 1
    2fb2:	91 05       	cpc	r25, r1
    2fb4:	79 f4       	brne	.+30     	; 0x2fd4 <f_gets+0x76>
		c = s[0];
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
    2fb8:	f7 01       	movw	r30, r14
    2fba:	80 83       	st	Z, r24
    2fbc:	0f 5f       	subi	r16, 0xFF	; 255
    2fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc0:	78 01       	movw	r14, r16
		n++;
    2fc2:	08 94       	sec
    2fc4:	c1 1c       	adc	r12, r1
    2fc6:	d1 1c       	adc	r13, r1
		if (c == '\n') break;		/* Break on EOL */
    2fc8:	8a 30       	cpi	r24, 0x0A	; 10
    2fca:	21 f0       	breq	.+8      	; 0x2fd4 <f_gets+0x76>
    2fcc:	78 01       	movw	r14, r16
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
    2fce:	ca 14       	cp	r12, r10
    2fd0:	db 04       	cpc	r13, r11
    2fd2:	0c f3       	brlt	.-62     	; 0x2f96 <f_gets+0x38>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
    2fd4:	f7 01       	movw	r30, r14
    2fd6:	10 82       	st	Z, r1
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    2fd8:	c1 14       	cp	r12, r1
    2fda:	d1 04       	cpc	r13, r1
    2fdc:	11 f4       	brne	.+4      	; 0x2fe2 <f_gets+0x84>
    2fde:	66 24       	eor	r6, r6
    2fe0:	77 24       	eor	r7, r7
}
    2fe2:	86 2d       	mov	r24, r6
    2fe4:	97 2d       	mov	r25, r7
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
    2fec:	0f 90       	pop	r0
    2fee:	df 91       	pop	r29
    2ff0:	cf 91       	pop	r28
    2ff2:	1f 91       	pop	r17
    2ff4:	0f 91       	pop	r16
    2ff6:	ff 90       	pop	r15
    2ff8:	ef 90       	pop	r14
    2ffa:	df 90       	pop	r13
    2ffc:	cf 90       	pop	r12
    2ffe:	bf 90       	pop	r11
    3000:	af 90       	pop	r10
    3002:	9f 90       	pop	r9
    3004:	8f 90       	pop	r8
    3006:	7f 90       	pop	r7
    3008:	6f 90       	pop	r6
    300a:	08 95       	ret

0000300c <f_putc>:

int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fp		/* Pointer to the file object */
)
{
    300c:	cf 93       	push	r28
    300e:	df 93       	push	r29
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	c8 54       	subi	r28, 0x48	; 72
    3016:	d0 40       	sbci	r29, 0x00	; 0
    3018:	0f b6       	in	r0, 0x3f	; 63
    301a:	f8 94       	cli
    301c:	de bf       	out	0x3e, r29	; 62
    301e:	0f be       	out	0x3f, r0	; 63
    3020:	cd bf       	out	0x3d, r28	; 61
    3022:	48 2f       	mov	r20, r24
	putbuff pb;
	UINT nw;


	pb.fp = fp;			/* Initialize output buffer */
    3024:	7a 83       	std	Y+2, r23	; 0x02
    3026:	69 83       	std	Y+1, r22	; 0x01
	pb.nchr = pb.idx = 0;
    3028:	1c 82       	std	Y+4, r1	; 0x04
    302a:	1b 82       	std	Y+3, r1	; 0x03
    302c:	1e 82       	std	Y+6, r1	; 0x06
    302e:	1d 82       	std	Y+5, r1	; 0x05

	putc_bfd(&pb, c);	/* Put a character */
    3030:	ce 01       	movw	r24, r28
    3032:	01 96       	adiw	r24, 0x01	; 1
    3034:	64 2f       	mov	r22, r20
    3036:	0e 94 8e 12 	call	0x251c	; 0x251c <putc_bfd>

	if (   pb.idx >= 0	/* Flush buffered characters to the file */
    303a:	4b 81       	ldd	r20, Y+3	; 0x03
    303c:	5c 81       	ldd	r21, Y+4	; 0x04
    303e:	55 23       	and	r21, r21
    3040:	c4 f0       	brlt	.+48     	; 0x3072 <f_putc+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
    3042:	89 81       	ldd	r24, Y+1	; 0x01
    3044:	9a 81       	ldd	r25, Y+2	; 0x02
    3046:	be 01       	movw	r22, r28
    3048:	69 5f       	subi	r22, 0xF9	; 249
    304a:	7f 4f       	sbci	r23, 0xFF	; 255
    304c:	9e 01       	movw	r18, r28
    304e:	29 5b       	subi	r18, 0xB9	; 185
    3050:	3f 4f       	sbci	r19, 0xFF	; 255
    3052:	0e 94 65 10 	call	0x20ca	; 0x20ca <f_write>
    3056:	88 23       	and	r24, r24
    3058:	79 f4       	brne	.+30     	; 0x3078 <f_putc+0x6c>
		&& (UINT)pb.idx == nw) return pb.nchr;
    305a:	2b 81       	ldd	r18, Y+3	; 0x03
    305c:	3c 81       	ldd	r19, Y+4	; 0x04
    305e:	29 96       	adiw	r28, 0x09	; 9
    3060:	8e ad       	sts	0x6e, r24
    3062:	9f ad       	sts	0x6f, r25
    3064:	29 97       	sbiw	r28, 0x09	; 9
    3066:	28 17       	cp	r18, r24
    3068:	39 07       	cpc	r19, r25
    306a:	49 f4       	brne	.+18     	; 0x307e <f_putc+0x72>
    306c:	8d 81       	ldd	r24, Y+5	; 0x05
    306e:	9e 81       	ldd	r25, Y+6	; 0x06
    3070:	08 c0       	rjmp	.+16     	; 0x3082 <f_putc+0x76>
	return EOF;
    3072:	8f ef       	ldi	r24, 0xFF	; 255
    3074:	9f ef       	ldi	r25, 0xFF	; 255
    3076:	05 c0       	rjmp	.+10     	; 0x3082 <f_putc+0x76>
    3078:	8f ef       	ldi	r24, 0xFF	; 255
    307a:	9f ef       	ldi	r25, 0xFF	; 255
    307c:	02 c0       	rjmp	.+4      	; 0x3082 <f_putc+0x76>
    307e:	8f ef       	ldi	r24, 0xFF	; 255
    3080:	9f ef       	ldi	r25, 0xFF	; 255
}
    3082:	c8 5b       	subi	r28, 0xB8	; 184
    3084:	df 4f       	sbci	r29, 0xFF	; 255
    3086:	0f b6       	in	r0, 0x3f	; 63
    3088:	f8 94       	cli
    308a:	de bf       	out	0x3e, r29	; 62
    308c:	0f be       	out	0x3f, r0	; 63
    308e:	cd bf       	out	0x3d, r28	; 61
    3090:	df 91       	pop	r29
    3092:	cf 91       	pop	r28
    3094:	08 95       	ret

00003096 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
    3096:	0f 93       	push	r16
    3098:	1f 93       	push	r17
    309a:	cf 93       	push	r28
    309c:	df 93       	push	r29
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
    30a2:	c8 54       	subi	r28, 0x48	; 72
    30a4:	d0 40       	sbci	r29, 0x00	; 0
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	f8 94       	cli
    30aa:	de bf       	out	0x3e, r29	; 62
    30ac:	0f be       	out	0x3f, r0	; 63
    30ae:	cd bf       	out	0x3d, r28	; 61
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
    30b0:	7a 83       	std	Y+2, r23	; 0x02
    30b2:	69 83       	std	Y+1, r22	; 0x01
	pb.nchr = pb.idx = 0;
    30b4:	1c 82       	std	Y+4, r1	; 0x04
    30b6:	1b 82       	std	Y+3, r1	; 0x03
    30b8:	1e 82       	std	Y+6, r1	; 0x06
    30ba:	1d 82       	std	Y+5, r1	; 0x05

	while (*str)			/* Put the string */
    30bc:	fc 01       	movw	r30, r24
    30be:	60 81       	ld	r22, Z
    30c0:	66 23       	and	r22, r22
    30c2:	61 f0       	breq	.+24     	; 0x30dc <f_puts+0x46>

/*-----------------------------------------------------------------------*/
/* Put a string to the file                                              */
/*-----------------------------------------------------------------------*/

int f_puts (
    30c4:	8c 01       	movw	r16, r24
    30c6:	0f 5f       	subi	r16, 0xFF	; 255
    30c8:	1f 4f       	sbci	r17, 0xFF	; 255

	pb.fp = fp;				/* Initialize output buffer */
	pb.nchr = pb.idx = 0;

	while (*str)			/* Put the string */
		putc_bfd(&pb, *str++);
    30ca:	ce 01       	movw	r24, r28
    30cc:	01 96       	adiw	r24, 0x01	; 1
    30ce:	0e 94 8e 12 	call	0x251c	; 0x251c <putc_bfd>


	pb.fp = fp;				/* Initialize output buffer */
	pb.nchr = pb.idx = 0;

	while (*str)			/* Put the string */
    30d2:	f8 01       	movw	r30, r16
    30d4:	61 91       	ld	r22, Z+
    30d6:	8f 01       	movw	r16, r30
    30d8:	66 23       	and	r22, r22
    30da:	b9 f7       	brne	.-18     	; 0x30ca <f_puts+0x34>
		putc_bfd(&pb, *str++);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
    30dc:	4b 81       	ldd	r20, Y+3	; 0x03
    30de:	5c 81       	ldd	r21, Y+4	; 0x04
    30e0:	55 23       	and	r21, r21
    30e2:	c4 f0       	brlt	.+48     	; 0x3114 <f_puts+0x7e>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	9a 81       	ldd	r25, Y+2	; 0x02
    30e8:	be 01       	movw	r22, r28
    30ea:	69 5f       	subi	r22, 0xF9	; 249
    30ec:	7f 4f       	sbci	r23, 0xFF	; 255
    30ee:	9e 01       	movw	r18, r28
    30f0:	29 5b       	subi	r18, 0xB9	; 185
    30f2:	3f 4f       	sbci	r19, 0xFF	; 255
    30f4:	0e 94 65 10 	call	0x20ca	; 0x20ca <f_write>
    30f8:	88 23       	and	r24, r24
    30fa:	79 f4       	brne	.+30     	; 0x311a <f_puts+0x84>
		&& (UINT)pb.idx == nw) return pb.nchr;
    30fc:	2b 81       	ldd	r18, Y+3	; 0x03
    30fe:	3c 81       	ldd	r19, Y+4	; 0x04
    3100:	29 96       	adiw	r28, 0x09	; 9
    3102:	8e ad       	sts	0x6e, r24
    3104:	9f ad       	sts	0x6f, r25
    3106:	29 97       	sbiw	r28, 0x09	; 9
    3108:	28 17       	cp	r18, r24
    310a:	39 07       	cpc	r19, r25
    310c:	49 f4       	brne	.+18     	; 0x3120 <f_puts+0x8a>
    310e:	8d 81       	ldd	r24, Y+5	; 0x05
    3110:	9e 81       	ldd	r25, Y+6	; 0x06
    3112:	08 c0       	rjmp	.+16     	; 0x3124 <f_puts+0x8e>
	return EOF;
    3114:	8f ef       	ldi	r24, 0xFF	; 255
    3116:	9f ef       	ldi	r25, 0xFF	; 255
    3118:	05 c0       	rjmp	.+10     	; 0x3124 <f_puts+0x8e>
    311a:	8f ef       	ldi	r24, 0xFF	; 255
    311c:	9f ef       	ldi	r25, 0xFF	; 255
    311e:	02 c0       	rjmp	.+4      	; 0x3124 <f_puts+0x8e>
    3120:	8f ef       	ldi	r24, 0xFF	; 255
    3122:	9f ef       	ldi	r25, 0xFF	; 255
}
    3124:	c8 5b       	subi	r28, 0xB8	; 184
    3126:	df 4f       	sbci	r29, 0xFF	; 255
    3128:	0f b6       	in	r0, 0x3f	; 63
    312a:	f8 94       	cli
    312c:	de bf       	out	0x3e, r29	; 62
    312e:	0f be       	out	0x3f, r0	; 63
    3130:	cd bf       	out	0x3d, r28	; 61
    3132:	df 91       	pop	r29
    3134:	cf 91       	pop	r28
    3136:	1f 91       	pop	r17
    3138:	0f 91       	pop	r16
    313a:	08 95       	ret

0000313c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    313c:	2f 92       	push	r2
    313e:	3f 92       	push	r3
    3140:	4f 92       	push	r4
    3142:	5f 92       	push	r5
    3144:	6f 92       	push	r6
    3146:	7f 92       	push	r7
    3148:	8f 92       	push	r8
    314a:	9f 92       	push	r9
    314c:	af 92       	push	r10
    314e:	bf 92       	push	r11
    3150:	cf 92       	push	r12
    3152:	df 92       	push	r13
    3154:	ef 92       	push	r14
    3156:	ff 92       	push	r15
    3158:	0f 93       	push	r16
    315a:	1f 93       	push	r17
    315c:	cf 93       	push	r28
    315e:	df 93       	push	r29
    3160:	cd b7       	in	r28, 0x3d	; 61
    3162:	de b7       	in	r29, 0x3e	; 62
    3164:	cb 55       	subi	r28, 0x5B	; 91
    3166:	d0 40       	sbci	r29, 0x00	; 0
    3168:	0f b6       	in	r0, 0x3f	; 63
    316a:	f8 94       	cli
    316c:	de bf       	out	0x3e, r29	; 62
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	cd bf       	out	0x3d, r28	; 61
    3172:	e4 96       	adiw	r28, 0x34	; 52
    3174:	2e ac       	sts	0xae, r18
    3176:	3f ac       	sts	0xaf, r19
    3178:	e4 97       	sbiw	r28, 0x34	; 52
	DWORD v;
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
    317a:	e2 96       	adiw	r28, 0x32	; 50
    317c:	8e ad       	sts	0x6e, r24
    317e:	9f ad       	sts	0x6f, r25
    3180:	e2 97       	sbiw	r28, 0x32	; 50
    3182:	9c 8b       	std	Y+20, r25	; 0x14
    3184:	8b 8b       	std	Y+19, r24	; 0x13
	pb.nchr = pb.idx = 0;
    3186:	1e 8a       	std	Y+22, r1	; 0x16
    3188:	1d 8a       	std	Y+21, r1	; 0x15
    318a:	18 8e       	std	Y+24, r1	; 0x18
    318c:	1f 8a       	std	Y+23, r1	; 0x17

	va_start(arp, fmt);
    318e:	9e 01       	movw	r18, r28
    3190:	2c 58       	subi	r18, 0x8C	; 140
    3192:	3f 4f       	sbci	r19, 0xFF	; 255
    3194:	6c 96       	adiw	r28, 0x1c	; 28
    3196:	3f af       	sts	0x7f, r19
    3198:	2e af       	sts	0x7e, r18
    319a:	6c 97       	sbiw	r28, 0x1c	; 28

	for (;;) {
		c = *fmt++;
    319c:	f1 01       	movw	r30, r2
    319e:	60 81       	ld	r22, Z
		if (c == 0) break;			/* End of string */
    31a0:	66 23       	and	r22, r22
    31a2:	09 f4       	brne	.+2      	; 0x31a6 <f_printf+0x6a>
    31a4:	dc c1       	rjmp	.+952    	; 0x355e <f_printf+0x422>
		if (c != '%') {				/* Non escape character */
    31a6:	65 32       	cpi	r22, 0x25	; 37
    31a8:	41 f0       	breq	.+16     	; 0x31ba <f_printf+0x7e>
	pb.nchr = pb.idx = 0;

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
    31aa:	08 94       	sec
    31ac:	21 1c       	adc	r2, r1
    31ae:	31 1c       	adc	r3, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
    31b0:	ce 01       	movw	r24, r28
    31b2:	43 96       	adiw	r24, 0x13	; 19
    31b4:	0e 94 8e 12 	call	0x251c	; 0x251c <putc_bfd>
			continue;
    31b8:	f1 cf       	rjmp	.-30     	; 0x319c <f_printf+0x60>
		}
		w = f = 0;
		c = *fmt++;
    31ba:	f1 01       	movw	r30, r2
    31bc:	01 81       	ldd	r16, Z+1	; 0x01
		if (c == '0') {				/* Flag: '0' padding */
    31be:	00 33       	cpi	r16, 0x30	; 48
    31c0:	51 f4       	brne	.+20     	; 0x31d6 <f_printf+0x9a>
			f = 1; c = *fmt++;
    31c2:	02 81       	ldd	r16, Z+2	; 0x02
    31c4:	23 e0       	ldi	r18, 0x03	; 3
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	22 0e       	add	r2, r18
    31ca:	33 1e       	adc	r3, r19
    31cc:	31 e0       	ldi	r19, 0x01	; 1
    31ce:	6a 96       	adiw	r28, 0x1a	; 26
    31d0:	3f af       	sts	0x7f, r19
    31d2:	6a 97       	sbiw	r28, 0x1a	; 26
    31d4:	14 c0       	rjmp	.+40     	; 0x31fe <f_printf+0xc2>
		} else {
			if (c == '-') {			/* Flag: left justified */
    31d6:	0d 32       	cpi	r16, 0x2D	; 45
    31d8:	41 f0       	breq	.+16     	; 0x31ea <f_printf+0xae>
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
		c = *fmt++;
    31da:	82 e0       	ldi	r24, 0x02	; 2
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	28 0e       	add	r2, r24
    31e0:	39 1e       	adc	r3, r25
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
    31e2:	6a 96       	adiw	r28, 0x1a	; 26
    31e4:	1f ae       	sts	0xbf, r17
    31e6:	6a 97       	sbiw	r28, 0x1a	; 26
    31e8:	0a c0       	rjmp	.+20     	; 0x31fe <f_printf+0xc2>
		c = *fmt++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
    31ea:	f1 01       	movw	r30, r2
    31ec:	02 81       	ldd	r16, Z+2	; 0x02
    31ee:	23 e0       	ldi	r18, 0x03	; 3
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	22 0e       	add	r2, r18
    31f4:	33 1e       	adc	r3, r19
    31f6:	32 e0       	ldi	r19, 0x02	; 2
    31f8:	6a 96       	adiw	r28, 0x1a	; 26
    31fa:	3f af       	sts	0x7f, r19
    31fc:	6a 97       	sbiw	r28, 0x1a	; 26
			}
		}
		while (IsDigit(c)) {		/* Precision */
    31fe:	80 2f       	mov	r24, r16
    3200:	80 53       	subi	r24, 0x30	; 48
    3202:	8a 30       	cpi	r24, 0x0A	; 10
    3204:	d0 f4       	brcc	.+52     	; 0x323a <f_printf+0xfe>
    3206:	f1 01       	movw	r30, r2
    3208:	aa 24       	eor	r10, r10
    320a:	bb 24       	eor	r11, r11
    320c:	c5 01       	movw	r24, r10
			w = w * 10 + c - '0';
    320e:	9c 01       	movw	r18, r24
    3210:	22 0f       	add	r18, r18
    3212:	33 1f       	adc	r19, r19
    3214:	88 0f       	add	r24, r24
    3216:	99 1f       	adc	r25, r25
    3218:	88 0f       	add	r24, r24
    321a:	99 1f       	adc	r25, r25
    321c:	88 0f       	add	r24, r24
    321e:	99 1f       	adc	r25, r25
    3220:	82 0f       	add	r24, r18
    3222:	93 1f       	adc	r25, r19
    3224:	80 0f       	add	r24, r16
    3226:	91 1d       	adc	r25, r1
    3228:	c0 97       	sbiw	r24, 0x30	; 48
			c = *fmt++;
    322a:	01 91       	ld	r16, Z+
    322c:	1f 01       	movw	r2, r30
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
    322e:	20 2f       	mov	r18, r16
    3230:	20 53       	subi	r18, 0x30	; 48
    3232:	2a 30       	cpi	r18, 0x0A	; 10
    3234:	60 f3       	brcs	.-40     	; 0x320e <f_printf+0xd2>
    3236:	5c 01       	movw	r10, r24
    3238:	02 c0       	rjmp	.+4      	; 0x323e <f_printf+0x102>
    323a:	aa 24       	eor	r10, r10
    323c:	bb 24       	eor	r11, r11
			w = w * 10 + c - '0';
			c = *fmt++;
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
    323e:	0c 36       	cpi	r16, 0x6C	; 108
    3240:	11 f0       	breq	.+4      	; 0x3246 <f_printf+0x10a>
    3242:	0c 34       	cpi	r16, 0x4C	; 76
    3244:	51 f4       	brne	.+20     	; 0x325a <f_printf+0x11e>
			f |= 4; c = *fmt++;
    3246:	6a 96       	adiw	r28, 0x1a	; 26
    3248:	8f ad       	sts	0x6f, r24
    324a:	6a 97       	sbiw	r28, 0x1a	; 26
    324c:	84 60       	ori	r24, 0x04	; 4
    324e:	6a 96       	adiw	r28, 0x1a	; 26
    3250:	8f af       	sts	0x7f, r24
    3252:	6a 97       	sbiw	r28, 0x1a	; 26
    3254:	f1 01       	movw	r30, r2
    3256:	01 91       	ld	r16, Z+
    3258:	1f 01       	movw	r2, r30
		}
		if (!c) break;
    325a:	00 23       	and	r16, r16
    325c:	09 f4       	brne	.+2      	; 0x3260 <f_printf+0x124>
    325e:	7f c1       	rjmp	.+766    	; 0x355e <f_printf+0x422>
		d = c;
		if (IsLower(d)) d -= 0x20;
    3260:	80 2f       	mov	r24, r16
    3262:	81 56       	subi	r24, 0x61	; 97
    3264:	8a 31       	cpi	r24, 0x1A	; 26
    3266:	18 f4       	brcc	.+6      	; 0x326e <f_printf+0x132>
    3268:	20 2f       	mov	r18, r16
    326a:	20 52       	subi	r18, 0x20	; 32
    326c:	01 c0       	rjmp	.+2      	; 0x3270 <f_printf+0x134>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
			f |= 4; c = *fmt++;
		}
		if (!c) break;
		d = c;
    326e:	20 2f       	mov	r18, r16
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
    3270:	2f 34       	cpi	r18, 0x4F	; 79
    3272:	09 f4       	brne	.+2      	; 0x3276 <f_printf+0x13a>
    3274:	95 c0       	rjmp	.+298    	; 0x33a0 <f_printf+0x264>
    3276:	20 35       	cpi	r18, 0x50	; 80
    3278:	50 f4       	brcc	.+20     	; 0x328e <f_printf+0x152>
    327a:	23 34       	cpi	r18, 0x43	; 67
    327c:	09 f4       	brne	.+2      	; 0x3280 <f_printf+0x144>
    327e:	6c c0       	rjmp	.+216    	; 0x3358 <f_printf+0x21c>
    3280:	24 34       	cpi	r18, 0x44	; 68
    3282:	09 f4       	brne	.+2      	; 0x3286 <f_printf+0x14a>
    3284:	7a c0       	rjmp	.+244    	; 0x337a <f_printf+0x23e>
    3286:	22 34       	cpi	r18, 0x42	; 66
    3288:	09 f0       	breq	.+2      	; 0x328c <f_printf+0x150>
    328a:	80 c0       	rjmp	.+256    	; 0x338c <f_printf+0x250>
    328c:	85 c0       	rjmp	.+266    	; 0x3398 <f_printf+0x25c>
    328e:	25 35       	cpi	r18, 0x55	; 85
    3290:	09 f4       	brne	.+2      	; 0x3294 <f_printf+0x158>
    3292:	73 c0       	rjmp	.+230    	; 0x337a <f_printf+0x23e>
    3294:	28 35       	cpi	r18, 0x58	; 88
    3296:	09 f4       	brne	.+2      	; 0x329a <f_printf+0x15e>
    3298:	75 c0       	rjmp	.+234    	; 0x3384 <f_printf+0x248>
    329a:	23 35       	cpi	r18, 0x53	; 83
    329c:	09 f0       	breq	.+2      	; 0x32a0 <f_printf+0x164>
    329e:	76 c0       	rjmp	.+236    	; 0x338c <f_printf+0x250>
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
    32a0:	6c 96       	adiw	r28, 0x1c	; 28
    32a2:	ee ad       	sts	0x6e, r30
    32a4:	ff ad       	sts	0x6f, r31
    32a6:	6c 97       	sbiw	r28, 0x1c	; 28
    32a8:	9f 01       	movw	r18, r30
    32aa:	2e 5f       	subi	r18, 0xFE	; 254
    32ac:	3f 4f       	sbci	r19, 0xFF	; 255
    32ae:	6c 96       	adiw	r28, 0x1c	; 28
    32b0:	3f af       	sts	0x7f, r19
    32b2:	2e af       	sts	0x7e, r18
    32b4:	6c 97       	sbiw	r28, 0x1c	; 28
    32b6:	c0 80       	ld	r12, Z
    32b8:	d1 80       	ldd	r13, Z+1	; 0x01
			for (j = 0; p[j]; j++) ;
    32ba:	f6 01       	movw	r30, r12
    32bc:	80 81       	ld	r24, Z
    32be:	88 23       	and	r24, r24
    32c0:	49 f0       	breq	.+18     	; 0x32d4 <f_printf+0x198>

/*-----------------------------------------------------------------------*/
/* Put a formatted string to the file                                    */
/*-----------------------------------------------------------------------*/

int f_printf (
    32c2:	31 96       	adiw	r30, 0x01	; 1
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
    32c4:	00 e0       	ldi	r16, 0x00	; 0
    32c6:	10 e0       	ldi	r17, 0x00	; 0
    32c8:	0f 5f       	subi	r16, 0xFF	; 255
    32ca:	1f 4f       	sbci	r17, 0xFF	; 255
    32cc:	81 91       	ld	r24, Z+
    32ce:	88 23       	and	r24, r24
    32d0:	d9 f7       	brne	.-10     	; 0x32c8 <f_printf+0x18c>
    32d2:	02 c0       	rjmp	.+4      	; 0x32d8 <f_printf+0x19c>
    32d4:	00 e0       	ldi	r16, 0x00	; 0
    32d6:	10 e0       	ldi	r17, 0x00	; 0
			if (!(f & 2)) {
    32d8:	6a 96       	adiw	r28, 0x1a	; 26
    32da:	ff ad       	sts	0x6f, r31
    32dc:	6a 97       	sbiw	r28, 0x1a	; 26
    32de:	f1 fd       	sbrc	r31, 1
    32e0:	1b c0       	rjmp	.+54     	; 0x3318 <f_printf+0x1dc>
				while (j++ < w) putc_bfd(&pb, ' ');
    32e2:	48 01       	movw	r8, r16
    32e4:	08 94       	sec
    32e6:	81 1c       	adc	r8, r1
    32e8:	91 1c       	adc	r9, r1
    32ea:	0a 15       	cp	r16, r10
    32ec:	1b 05       	cpc	r17, r11
    32ee:	98 f4       	brcc	.+38     	; 0x3316 <f_printf+0x1da>
    32f0:	78 01       	movw	r14, r16
    32f2:	ce 01       	movw	r24, r28
    32f4:	43 96       	adiw	r24, 0x13	; 19
    32f6:	60 e2       	ldi	r22, 0x20	; 32
    32f8:	0e 94 8e 12 	call	0x251c	; 0x251c <putc_bfd>
    32fc:	08 94       	sec
    32fe:	e1 1c       	adc	r14, r1
    3300:	f1 1c       	adc	r15, r1
    3302:	ea 14       	cp	r14, r10
    3304:	fb 04       	cpc	r15, r11
    3306:	a8 f3       	brcs	.-22     	; 0x32f2 <f_printf+0x1b6>

/*-----------------------------------------------------------------------*/
/* Put a formatted string to the file                                    */
/*-----------------------------------------------------------------------*/

int f_printf (
    3308:	c5 01       	movw	r24, r10
    330a:	80 1b       	sub	r24, r16
    330c:	91 0b       	sbc	r25, r17
    330e:	8c 01       	movw	r16, r24
    3310:	08 0d       	add	r16, r8
    3312:	19 1d       	adc	r17, r9
    3314:	01 c0       	rjmp	.+2      	; 0x3318 <f_printf+0x1dc>
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
    3316:	84 01       	movw	r16, r8
			}
			while (*p) putc_bfd(&pb, *p++);
    3318:	f6 01       	movw	r30, r12
    331a:	60 81       	ld	r22, Z
    331c:	66 23       	and	r22, r22
    331e:	69 f0       	breq	.+26     	; 0x333a <f_printf+0x1fe>

/*-----------------------------------------------------------------------*/
/* Put a formatted string to the file                                    */
/*-----------------------------------------------------------------------*/

int f_printf (
    3320:	76 01       	movw	r14, r12
    3322:	08 94       	sec
    3324:	e1 1c       	adc	r14, r1
    3326:	f1 1c       	adc	r15, r1
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
			}
			while (*p) putc_bfd(&pb, *p++);
    3328:	ce 01       	movw	r24, r28
    332a:	43 96       	adiw	r24, 0x13	; 19
    332c:	0e 94 8e 12 	call	0x251c	; 0x251c <putc_bfd>
    3330:	f7 01       	movw	r30, r14
    3332:	61 91       	ld	r22, Z+
    3334:	7f 01       	movw	r14, r30
    3336:	66 23       	and	r22, r22
    3338:	b9 f7       	brne	.-18     	; 0x3328 <f_printf+0x1ec>
			while (j++ < w) putc_bfd(&pb, ' ');
    333a:	0a 15       	cp	r16, r10
    333c:	1b 05       	cpc	r17, r11
    333e:	08 f0       	brcs	.+2      	; 0x3342 <f_printf+0x206>
    3340:	2d cf       	rjmp	.-422    	; 0x319c <f_printf+0x60>
    3342:	ce 01       	movw	r24, r28
    3344:	43 96       	adiw	r24, 0x13	; 19
    3346:	60 e2       	ldi	r22, 0x20	; 32
    3348:	0e 94 8e 12 	call	0x251c	; 0x251c <putc_bfd>
    334c:	0f 5f       	subi	r16, 0xFF	; 255
    334e:	1f 4f       	sbci	r17, 0xFF	; 255
    3350:	0a 15       	cp	r16, r10
    3352:	1b 05       	cpc	r17, r11
    3354:	b0 f3       	brcs	.-20     	; 0x3342 <f_printf+0x206>
    3356:	22 cf       	rjmp	.-444    	; 0x319c <f_printf+0x60>
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
    3358:	6c 96       	adiw	r28, 0x1c	; 28
    335a:	ee ad       	sts	0x6e, r30
    335c:	ff ad       	sts	0x6f, r31
    335e:	6c 97       	sbiw	r28, 0x1c	; 28
    3360:	9f 01       	movw	r18, r30
    3362:	2e 5f       	subi	r18, 0xFE	; 254
    3364:	3f 4f       	sbci	r19, 0xFF	; 255
    3366:	6c 96       	adiw	r28, 0x1c	; 28
    3368:	3f af       	sts	0x7f, r19
    336a:	2e af       	sts	0x7e, r18
    336c:	6c 97       	sbiw	r28, 0x1c	; 28
    336e:	ce 01       	movw	r24, r28
    3370:	43 96       	adiw	r24, 0x13	; 19
    3372:	60 81       	ld	r22, Z
    3374:	0e 94 8e 12 	call	0x251c	; 0x251c <putc_bfd>
    3378:	11 cf       	rjmp	.-478    	; 0x319c <f_printf+0x60>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    337a:	0f 2e       	mov	r0, r31
    337c:	fa e0       	ldi	r31, 0x0A	; 10
    337e:	4f 2e       	mov	r4, r31
    3380:	f0 2d       	mov	r31, r0
    3382:	11 c0       	rjmp	.+34     	; 0x33a6 <f_printf+0x26a>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    3384:	44 24       	eor	r4, r4
    3386:	68 94       	set
    3388:	44 f8       	bld	r4, 4
    338a:	0d c0       	rjmp	.+26     	; 0x33a6 <f_printf+0x26a>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
    338c:	ce 01       	movw	r24, r28
    338e:	43 96       	adiw	r24, 0x13	; 19
    3390:	60 2f       	mov	r22, r16
    3392:	0e 94 8e 12 	call	0x251c	; 0x251c <putc_bfd>
    3396:	02 cf       	rjmp	.-508    	; 0x319c <f_printf+0x60>
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
    3398:	44 24       	eor	r4, r4
    339a:	68 94       	set
    339c:	41 f8       	bld	r4, 1
    339e:	03 c0       	rjmp	.+6      	; 0x33a6 <f_printf+0x26a>
		case 'O' :					/* Octal */
			r = 8; break;
    33a0:	44 24       	eor	r4, r4
    33a2:	68 94       	set
    33a4:	43 f8       	bld	r4, 3
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    33a6:	6a 96       	adiw	r28, 0x1a	; 26
    33a8:	3f ad       	sts	0x6f, r19
    33aa:	6a 97       	sbiw	r28, 0x1a	; 26
    33ac:	32 ff       	sbrs	r19, 2
    33ae:	11 c0       	rjmp	.+34     	; 0x33d2 <f_printf+0x296>
    33b0:	6c 96       	adiw	r28, 0x1c	; 28
    33b2:	ee ad       	sts	0x6e, r30
    33b4:	ff ad       	sts	0x6f, r31
    33b6:	6c 97       	sbiw	r28, 0x1c	; 28
    33b8:	cf 01       	movw	r24, r30
    33ba:	04 96       	adiw	r24, 0x04	; 4
    33bc:	6c 96       	adiw	r28, 0x1c	; 28
    33be:	9f af       	sts	0x7f, r25
    33c0:	8e af       	sts	0x7e, r24
    33c2:	6c 97       	sbiw	r28, 0x1c	; 28
    33c4:	80 81       	ld	r24, Z
    33c6:	91 81       	ldd	r25, Z+1	; 0x01
    33c8:	a2 81       	ldd	r26, Z+2	; 0x02
    33ca:	b3 81       	ldd	r27, Z+3	; 0x03
		if (d == 'D' && (v & 0x80000000)) {
    33cc:	24 34       	cpi	r18, 0x44	; 68
    33ce:	99 f5       	brne	.+102    	; 0x3436 <f_printf+0x2fa>
    33d0:	22 c0       	rjmp	.+68     	; 0x3416 <f_printf+0x2da>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    33d2:	24 34       	cpi	r18, 0x44	; 68
    33d4:	91 f4       	brne	.+36     	; 0x33fa <f_printf+0x2be>
    33d6:	6c 96       	adiw	r28, 0x1c	; 28
    33d8:	ee ad       	sts	0x6e, r30
    33da:	ff ad       	sts	0x6f, r31
    33dc:	6c 97       	sbiw	r28, 0x1c	; 28
    33de:	9f 01       	movw	r18, r30
    33e0:	2e 5f       	subi	r18, 0xFE	; 254
    33e2:	3f 4f       	sbci	r19, 0xFF	; 255
    33e4:	6c 96       	adiw	r28, 0x1c	; 28
    33e6:	3f af       	sts	0x7f, r19
    33e8:	2e af       	sts	0x7e, r18
    33ea:	6c 97       	sbiw	r28, 0x1c	; 28
    33ec:	80 81       	ld	r24, Z
    33ee:	91 81       	ldd	r25, Z+1	; 0x01
    33f0:	aa 27       	eor	r26, r26
    33f2:	97 fd       	sbrc	r25, 7
    33f4:	a0 95       	com	r26
    33f6:	ba 2f       	mov	r27, r26
    33f8:	0e c0       	rjmp	.+28     	; 0x3416 <f_printf+0x2da>
    33fa:	6c 96       	adiw	r28, 0x1c	; 28
    33fc:	ee ad       	sts	0x6e, r30
    33fe:	ff ad       	sts	0x6f, r31
    3400:	6c 97       	sbiw	r28, 0x1c	; 28
    3402:	80 81       	ld	r24, Z
    3404:	91 81       	ldd	r25, Z+1	; 0x01
    3406:	a0 e0       	ldi	r26, 0x00	; 0
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	32 96       	adiw	r30, 0x02	; 2
    340c:	6c 96       	adiw	r28, 0x1c	; 28
    340e:	ff af       	sts	0x7f, r31
    3410:	ee af       	sts	0x7e, r30
    3412:	6c 97       	sbiw	r28, 0x1c	; 28
    3414:	10 c0       	rjmp	.+32     	; 0x3436 <f_printf+0x2fa>
		if (d == 'D' && (v & 0x80000000)) {
    3416:	bb 23       	and	r27, r27
    3418:	74 f4       	brge	.+28     	; 0x3436 <f_printf+0x2fa>
			v = 0 - v;
    341a:	b0 95       	com	r27
    341c:	a0 95       	com	r26
    341e:	90 95       	com	r25
    3420:	81 95       	neg	r24
    3422:	9f 4f       	sbci	r25, 0xFF	; 255
    3424:	af 4f       	sbci	r26, 0xFF	; 255
    3426:	bf 4f       	sbci	r27, 0xFF	; 255
			f |= 8;
    3428:	6a 96       	adiw	r28, 0x1a	; 26
    342a:	ff ad       	sts	0x6f, r31
    342c:	6a 97       	sbiw	r28, 0x1a	; 26
    342e:	f8 60       	ori	r31, 0x08	; 8
    3430:	6a 96       	adiw	r28, 0x1a	; 26
    3432:	ff af       	sts	0x7f, r31
    3434:	6a 97       	sbiw	r28, 0x1a	; 26
    3436:	0f 2e       	mov	r0, r31
    3438:	f3 e0       	ldi	r31, 0x03	; 3
    343a:	cf 2e       	mov	r12, r31
    343c:	dd 24       	eor	r13, r13
    343e:	f0 2d       	mov	r31, r0
    3440:	cc 0e       	add	r12, r28
    3442:	dd 1e       	adc	r13, r29
		}
		i = 0;
    3444:	88 24       	eor	r8, r8
    3446:	99 24       	eor	r9, r9
		do {
			d = (TCHAR)(v % r); v /= r;
    3448:	55 24       	eor	r5, r5
    344a:	66 24       	eor	r6, r6
    344c:	77 24       	eor	r7, r7
    344e:	01 c0       	rjmp	.+2      	; 0x3452 <f_printf+0x316>
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
    3450:	47 01       	movw	r8, r14
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
    3452:	bc 01       	movw	r22, r24
    3454:	cd 01       	movw	r24, r26
    3456:	a3 01       	movw	r20, r6
    3458:	92 01       	movw	r18, r4
    345a:	0e 94 b0 20 	call	0x4160	; 0x4160 <__udivmodsi4>
    345e:	82 2f       	mov	r24, r18
    3460:	93 2f       	mov	r25, r19
    3462:	a4 2f       	mov	r26, r20
    3464:	b5 2f       	mov	r27, r21
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    3466:	6a 30       	cpi	r22, 0x0A	; 10
    3468:	30 f0       	brcs	.+12     	; 0x3476 <f_printf+0x33a>
    346a:	08 37       	cpi	r16, 0x78	; 120
    346c:	11 f4       	brne	.+4      	; 0x3472 <f_printf+0x336>
    346e:	27 e2       	ldi	r18, 0x27	; 39
    3470:	01 c0       	rjmp	.+2      	; 0x3474 <f_printf+0x338>
    3472:	27 e0       	ldi	r18, 0x07	; 7
    3474:	62 0f       	add	r22, r18
			s[i++] = d + '0';
    3476:	60 5d       	subi	r22, 0xD0	; 208
    3478:	f6 01       	movw	r30, r12
    347a:	61 93       	st	Z+, r22
    347c:	6f 01       	movw	r12, r30
    347e:	74 01       	movw	r14, r8
    3480:	08 94       	sec
    3482:	e1 1c       	adc	r14, r1
    3484:	f1 1c       	adc	r15, r1
		} while (v && i < sizeof s / sizeof s[0]);
    3486:	00 97       	sbiw	r24, 0x00	; 0
    3488:	a1 05       	cpc	r26, r1
    348a:	b1 05       	cpc	r27, r1
    348c:	31 f0       	breq	.+12     	; 0x349a <f_printf+0x35e>
    348e:	f0 e1       	ldi	r31, 0x10	; 16
    3490:	ef 16       	cp	r14, r31
    3492:	f1 04       	cpc	r15, r1
    3494:	e9 f6       	brne	.-70     	; 0x3450 <f_printf+0x314>
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
    3496:	f7 01       	movw	r30, r14
    3498:	01 c0       	rjmp	.+2      	; 0x349c <f_printf+0x360>
    349a:	f7 01       	movw	r30, r14
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
    349c:	6a 96       	adiw	r28, 0x1a	; 26
    349e:	8f ad       	sts	0x6f, r24
    34a0:	6a 97       	sbiw	r28, 0x1a	; 26
    34a2:	83 ff       	sbrs	r24, 3
    34a4:	0e c0       	rjmp	.+28     	; 0x34c2 <f_printf+0x386>
    34a6:	23 e0       	ldi	r18, 0x03	; 3
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	2c 0f       	add	r18, r28
    34ac:	3d 1f       	adc	r19, r29
    34ae:	e2 0f       	add	r30, r18
    34b0:	f3 1f       	adc	r31, r19
    34b2:	3d e2       	ldi	r19, 0x2D	; 45
    34b4:	30 83       	st	Z, r19
    34b6:	ee 24       	eor	r14, r14
    34b8:	ff 24       	eor	r15, r15
    34ba:	68 94       	set
    34bc:	e1 f8       	bld	r14, 1
    34be:	e8 0c       	add	r14, r8
    34c0:	f9 1c       	adc	r15, r9
		j = i; d = (f & 1) ? '0' : ' ';
    34c2:	80 ff       	sbrs	r24, 0
    34c4:	05 c0       	rjmp	.+10     	; 0x34d0 <f_printf+0x394>
    34c6:	0f 2e       	mov	r0, r31
    34c8:	f0 e3       	ldi	r31, 0x30	; 48
    34ca:	9f 2e       	mov	r9, r31
    34cc:	f0 2d       	mov	r31, r0
    34ce:	03 c0       	rjmp	.+6      	; 0x34d6 <f_printf+0x39a>
    34d0:	99 24       	eor	r9, r9
    34d2:	68 94       	set
    34d4:	95 f8       	bld	r9, 5
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    34d6:	81 fd       	sbrc	r24, 1
    34d8:	1e c0       	rjmp	.+60     	; 0x3516 <f_printf+0x3da>
    34da:	67 01       	movw	r12, r14
    34dc:	08 94       	sec
    34de:	c1 1c       	adc	r12, r1
    34e0:	d1 1c       	adc	r13, r1
    34e2:	ea 14       	cp	r14, r10
    34e4:	fb 04       	cpc	r15, r11
    34e6:	c0 f4       	brcc	.+48     	; 0x3518 <f_printf+0x3dc>
    34e8:	ce 01       	movw	r24, r28
    34ea:	43 96       	adiw	r24, 0x13	; 19
    34ec:	69 2d       	mov	r22, r9
    34ee:	0e 94 8e 12 	call	0x251c	; 0x251c <putc_bfd>
    34f2:	87 01       	movw	r16, r14
    34f4:	0f 5f       	subi	r16, 0xFF	; 255
    34f6:	1f 4f       	sbci	r17, 0xFF	; 255
    34f8:	0a 15       	cp	r16, r10
    34fa:	1b 05       	cpc	r17, r11
    34fc:	08 f4       	brcc	.+2      	; 0x3500 <f_printf+0x3c4>
    34fe:	6b c0       	rjmp	.+214    	; 0x35d6 <f_printf+0x49a>

/*-----------------------------------------------------------------------*/
/* Put a formatted string to the file                                    */
/*-----------------------------------------------------------------------*/

int f_printf (
    3500:	c5 01       	movw	r24, r10
    3502:	01 96       	adiw	r24, 0x01	; 1
    3504:	8c 0d       	add	r24, r12
    3506:	9d 1d       	adc	r25, r13
    3508:	97 01       	movw	r18, r14
    350a:	20 95       	com	r18
    350c:	30 95       	com	r19
    350e:	6c 01       	movw	r12, r24
    3510:	c2 0e       	add	r12, r18
    3512:	d3 1e       	adc	r13, r19
    3514:	01 c0       	rjmp	.+2      	; 0x3518 <f_printf+0x3dc>
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
    3516:	67 01       	movw	r12, r14

/*-----------------------------------------------------------------------*/
/* Put a formatted string to the file                                    */
/*-----------------------------------------------------------------------*/

int f_printf (
    3518:	03 e0       	ldi	r16, 0x03	; 3
    351a:	10 e0       	ldi	r17, 0x00	; 0
    351c:	0c 0f       	add	r16, r28
    351e:	1d 1f       	adc	r17, r29
    3520:	0e 0d       	add	r16, r14
    3522:	1f 1d       	adc	r17, r15
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
		do putc_bfd(&pb, s[--i]); while (i);
    3524:	08 94       	sec
    3526:	e1 08       	sbc	r14, r1
    3528:	f1 08       	sbc	r15, r1
    352a:	ce 01       	movw	r24, r28
    352c:	43 96       	adiw	r24, 0x13	; 19
    352e:	f8 01       	movw	r30, r16
    3530:	62 91       	ld	r22, -Z
    3532:	8f 01       	movw	r16, r30
    3534:	0e 94 8e 12 	call	0x251c	; 0x251c <putc_bfd>
    3538:	e1 14       	cp	r14, r1
    353a:	f1 04       	cpc	r15, r1
    353c:	99 f7       	brne	.-26     	; 0x3524 <f_printf+0x3e8>
		while (j++ < w) putc_bfd(&pb, d);
    353e:	ca 14       	cp	r12, r10
    3540:	db 04       	cpc	r13, r11
    3542:	08 f0       	brcs	.+2      	; 0x3546 <f_printf+0x40a>
    3544:	2b ce       	rjmp	.-938    	; 0x319c <f_printf+0x60>
    3546:	ce 01       	movw	r24, r28
    3548:	43 96       	adiw	r24, 0x13	; 19
    354a:	69 2d       	mov	r22, r9
    354c:	0e 94 8e 12 	call	0x251c	; 0x251c <putc_bfd>
    3550:	08 94       	sec
    3552:	c1 1c       	adc	r12, r1
    3554:	d1 1c       	adc	r13, r1
    3556:	ca 14       	cp	r12, r10
    3558:	db 04       	cpc	r13, r11
    355a:	a8 f3       	brcs	.-22     	; 0x3546 <f_printf+0x40a>
    355c:	1f ce       	rjmp	.-962    	; 0x319c <f_printf+0x60>
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
    355e:	4d 89       	ldd	r20, Y+21	; 0x15
    3560:	5e 89       	ldd	r21, Y+22	; 0x16
    3562:	55 23       	and	r21, r21
    3564:	b4 f0       	brlt	.+44     	; 0x3592 <f_printf+0x456>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
    3566:	8b 89       	ldd	r24, Y+19	; 0x13
    3568:	9c 89       	ldd	r25, Y+20	; 0x14
    356a:	be 01       	movw	r22, r28
    356c:	67 5e       	subi	r22, 0xE7	; 231
    356e:	7f 4f       	sbci	r23, 0xFF	; 255
    3570:	9e 01       	movw	r18, r28
    3572:	2f 5f       	subi	r18, 0xFF	; 255
    3574:	3f 4f       	sbci	r19, 0xFF	; 255
    3576:	0e 94 65 10 	call	0x20ca	; 0x20ca <f_write>
    357a:	88 23       	and	r24, r24
    357c:	69 f4       	brne	.+26     	; 0x3598 <f_printf+0x45c>
		&& (UINT)pb.idx == nw) return pb.nchr;
    357e:	2d 89       	ldd	r18, Y+21	; 0x15
    3580:	3e 89       	ldd	r19, Y+22	; 0x16
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	9a 81       	ldd	r25, Y+2	; 0x02
    3586:	28 17       	cp	r18, r24
    3588:	39 07       	cpc	r19, r25
    358a:	49 f4       	brne	.+18     	; 0x359e <f_printf+0x462>
    358c:	8f 89       	ldd	r24, Y+23	; 0x17
    358e:	98 8d       	ldd	r25, Y+24	; 0x18
    3590:	08 c0       	rjmp	.+16     	; 0x35a2 <f_printf+0x466>
	return EOF;
    3592:	8f ef       	ldi	r24, 0xFF	; 255
    3594:	9f ef       	ldi	r25, 0xFF	; 255
    3596:	05 c0       	rjmp	.+10     	; 0x35a2 <f_printf+0x466>
    3598:	8f ef       	ldi	r24, 0xFF	; 255
    359a:	9f ef       	ldi	r25, 0xFF	; 255
    359c:	02 c0       	rjmp	.+4      	; 0x35a2 <f_printf+0x466>
    359e:	8f ef       	ldi	r24, 0xFF	; 255
    35a0:	9f ef       	ldi	r25, 0xFF	; 255
}
    35a2:	c5 5a       	subi	r28, 0xA5	; 165
    35a4:	df 4f       	sbci	r29, 0xFF	; 255
    35a6:	0f b6       	in	r0, 0x3f	; 63
    35a8:	f8 94       	cli
    35aa:	de bf       	out	0x3e, r29	; 62
    35ac:	0f be       	out	0x3f, r0	; 63
    35ae:	cd bf       	out	0x3d, r28	; 61
    35b0:	df 91       	pop	r29
    35b2:	cf 91       	pop	r28
    35b4:	1f 91       	pop	r17
    35b6:	0f 91       	pop	r16
    35b8:	ff 90       	pop	r15
    35ba:	ef 90       	pop	r14
    35bc:	df 90       	pop	r13
    35be:	cf 90       	pop	r12
    35c0:	bf 90       	pop	r11
    35c2:	af 90       	pop	r10
    35c4:	9f 90       	pop	r9
    35c6:	8f 90       	pop	r8
    35c8:	7f 90       	pop	r7
    35ca:	6f 90       	pop	r6
    35cc:	5f 90       	pop	r5
    35ce:	4f 90       	pop	r4
    35d0:	3f 90       	pop	r3
    35d2:	2f 90       	pop	r2
    35d4:	08 95       	ret
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    35d6:	ce 01       	movw	r24, r28
    35d8:	43 96       	adiw	r24, 0x13	; 19
    35da:	69 2d       	mov	r22, r9
    35dc:	0e 94 8e 12 	call	0x251c	; 0x251c <putc_bfd>
    35e0:	89 cf       	rjmp	.-238    	; 0x34f4 <f_printf+0x3b8>

000035e2 <fat_init>:
int main(void)
{
	fat_init();
}

void fat_init(void){
    35e2:	cf 92       	push	r12
    35e4:	df 92       	push	r13
    35e6:	ef 92       	push	r14
    35e8:	ff 92       	push	r15
    35ea:	0f 93       	push	r16
    35ec:	1f 93       	push	r17
    35ee:	cf 93       	push	r28
    35f0:	df 93       	push	r29
	
	while (errCode == FR_OK){                               
		//go until f_open returns FR_OK (function successful)
		errCode = f_mount(&fatfs, "", 0);                       //mount drive number 0
    35f2:	cd e6       	ldi	r28, 0x6D	; 109
    35f4:	d1 e0       	ldi	r29, 0x01	; 1
    35f6:	0f e0       	ldi	r16, 0x0F	; 15
    35f8:	11 e0       	ldi	r17, 0x01	; 1
		//errCode = f_mkfs("",0,0);
		//errCode = f_opendir(&dir, "/");                                 //root directory

		errCode = f_open(&file, "/data.txt", FA_CREATE_ALWAYS | FA_WRITE);
    35fa:	0f 2e       	mov	r0, r31
    35fc:	f4 e3       	ldi	r31, 0x34	; 52
    35fe:	ef 2e       	mov	r14, r31
    3600:	f1 e0       	ldi	r31, 0x01	; 1
    3602:	ff 2e       	mov	r15, r31
    3604:	f0 2d       	mov	r31, r0
    3606:	0f 2e       	mov	r0, r31
    3608:	f0 e1       	ldi	r31, 0x10	; 16
    360a:	cf 2e       	mov	r12, r31
    360c:	f1 e0       	ldi	r31, 0x01	; 1
    360e:	df 2e       	mov	r13, r31
    3610:	f0 2d       	mov	r31, r0
	fat_init();
}

void fat_init(void){
	
	while (errCode == FR_OK){                               
    3612:	15 c0       	rjmp	.+42     	; 0x363e <fat_init+0x5c>
		//go until f_open returns FR_OK (function successful)
		errCode = f_mount(&fatfs, "", 0);                       //mount drive number 0
    3614:	ce 01       	movw	r24, r28
    3616:	b8 01       	movw	r22, r16
    3618:	40 e0       	ldi	r20, 0x00	; 0
    361a:	0e 94 92 0c 	call	0x1924	; 0x1924 <f_mount>
    361e:	80 93 33 01 	sts	0x0133, r24
		//errCode = f_mkfs("",0,0);
		//errCode = f_opendir(&dir, "/");                                 //root directory

		errCode = f_open(&file, "/data.txt", FA_CREATE_ALWAYS | FA_WRITE);
    3622:	c7 01       	movw	r24, r14
    3624:	b6 01       	movw	r22, r12
    3626:	4a e0       	ldi	r20, 0x0A	; 10
    3628:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <f_open>
    362c:	80 93 33 01 	sts	0x0133, r24
		if(errCode != FR_OK){
    3630:	88 23       	and	r24, r24
    3632:	29 f0       	breq	.+10     	; 0x363e <fat_init+0x5c>
			result=0;                                       //used as a debugging flag
    3634:	10 92 27 01 	sts	0x0127, r1
    3638:	10 92 26 01 	sts	0x0126, r1
			break;
    363c:	04 c0       	rjmp	.+8      	; 0x3646 <fat_init+0x64>
	fat_init();
}

void fat_init(void){
	
	while (errCode == FR_OK){                               
    363e:	80 91 33 01 	lds	r24, 0x0133
    3642:	88 23       	and	r24, r24
    3644:	39 f3       	breq	.-50     	; 0x3614 <fat_init+0x32>
		if(errCode != FR_OK){
			result=0;                                       //used as a debugging flag
			break;
		}
	}
}	
    3646:	df 91       	pop	r29
    3648:	cf 91       	pop	r28
    364a:	1f 91       	pop	r17
    364c:	0f 91       	pop	r16
    364e:	ff 90       	pop	r15
    3650:	ef 90       	pop	r14
    3652:	df 90       	pop	r13
    3654:	cf 90       	pop	r12
    3656:	08 95       	ret

00003658 <main>:



int main(void)
{
	fat_init();
    3658:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <fat_init>
}
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	08 95       	ret

00003662 <fat_init2>:
			break;
		}
	}
}	

void fat_init2(void){
    3662:	0f 93       	push	r16
    3664:	1f 93       	push	r17
    3666:	cf 93       	push	r28
    3668:	df 93       	push	r29
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
    366e:	c2 57       	subi	r28, 0x72	; 114
    3670:	d0 40       	sbci	r29, 0x00	; 0
    3672:	0f b6       	in	r0, 0x3f	; 63
    3674:	f8 94       	cli
    3676:	de bf       	out	0x3e, r29	; 62
    3678:	0f be       	out	0x3f, r0	; 63
    367a:	cd bf       	out	0x3d, r28	; 61
    char line[82]; /* Line buffer */
    FRESULT fr;    /* FatFs return code */


    /* Register work area to the default drive */
    f_mount(&fatfs, "", 0);
    367c:	8d e6       	ldi	r24, 0x6D	; 109
    367e:	91 e0       	ldi	r25, 0x01	; 1
    3680:	6f e0       	ldi	r22, 0x0F	; 15
    3682:	71 e0       	ldi	r23, 0x01	; 1
    3684:	40 e0       	ldi	r20, 0x00	; 0
    3686:	0e 94 92 0c 	call	0x1924	; 0x1924 <f_mount>

    /* Open a text file */
    fr = f_open(&fil, "message.txt", FA_READ);
    368a:	ce 01       	movw	r24, r28
    368c:	01 96       	adiw	r24, 0x01	; 1
    368e:	6a e1       	ldi	r22, 0x1A	; 26
    3690:	71 e0       	ldi	r23, 0x01	; 1
    3692:	41 e0       	ldi	r20, 0x01	; 1
    3694:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <f_open>
    if (fr) return (int)fr;
    3698:	88 23       	and	r24, r24
    369a:	59 f0       	breq	.+22     	; 0x36b2 <fat_init2+0x50>
    369c:	1b c0       	rjmp	.+54     	; 0x36d4 <fat_init2+0x72>

    /* Read all lines and display it */
    while (f_gets(line, sizeof line, &fil))
    printf(line);
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <fat_init2+0x3e>
    36a0:	ed b7       	in	r30, 0x3d	; 61
    36a2:	fe b7       	in	r31, 0x3e	; 62
    36a4:	12 83       	std	Z+2, r17	; 0x02
    36a6:	01 83       	std	Z+1, r16	; 0x01
    36a8:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <printf>
    36ac:	0f 90       	pop	r0
    36ae:	0f 90       	pop	r0
    36b0:	03 c0       	rjmp	.+6      	; 0x36b8 <fat_init2+0x56>
    /* Open a text file */
    fr = f_open(&fil, "message.txt", FA_READ);
    if (fr) return (int)fr;

    /* Read all lines and display it */
    while (f_gets(line, sizeof line, &fil))
    36b2:	8e 01       	movw	r16, r28
    36b4:	0f 5d       	subi	r16, 0xDF	; 223
    36b6:	1f 4f       	sbci	r17, 0xFF	; 255
    36b8:	c8 01       	movw	r24, r16
    36ba:	62 e5       	ldi	r22, 0x52	; 82
    36bc:	70 e0       	ldi	r23, 0x00	; 0
    36be:	ae 01       	movw	r20, r28
    36c0:	4f 5f       	subi	r20, 0xFF	; 255
    36c2:	5f 4f       	sbci	r21, 0xFF	; 255
    36c4:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <f_gets>
    36c8:	00 97       	sbiw	r24, 0x00	; 0
    36ca:	49 f7       	brne	.-46     	; 0x369e <fat_init2+0x3c>
    printf(line);

    /* Close the file */
    f_close(&fil);
    36cc:	ce 01       	movw	r24, r28
    36ce:	01 96       	adiw	r24, 0x01	; 1
    36d0:	0e 94 95 13 	call	0x272a	; 0x272a <f_close>

    return 0;
}
    36d4:	ce 58       	subi	r28, 0x8E	; 142
    36d6:	df 4f       	sbci	r29, 0xFF	; 255
    36d8:	0f b6       	in	r0, 0x3f	; 63
    36da:	f8 94       	cli
    36dc:	de bf       	out	0x3e, r29	; 62
    36de:	0f be       	out	0x3f, r0	; 63
    36e0:	cd bf       	out	0x3d, r28	; 61
    36e2:	df 91       	pop	r29
    36e4:	cf 91       	pop	r28
    36e6:	1f 91       	pop	r17
    36e8:	0f 91       	pop	r16
    36ea:	08 95       	ret

000036ec <get_fattime>:
	| ((DWORD)3 << 21)
	| ((DWORD)23 << 16)
	| ((DWORD)12 << 11)
	| ((DWORD)0 << 5)
	| ((DWORD)0 >> 1);
}
    36ec:	60 e0       	ldi	r22, 0x00	; 0
    36ee:	70 e6       	ldi	r23, 0x60	; 96
    36f0:	87 e7       	ldi	r24, 0x77	; 119
    36f2:	92 e4       	ldi	r25, 0x42	; 66
    36f4:	08 95       	ret

000036f6 <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
    36f6:	1c bc       	out	0x2c, r1	; 44

	DDRB  &= ~((1<<SS)|(1<<MOSI)|(1<<SCK));	/* Set SCK/MOSI/CS as hi-z, INS#/WP as pull-up */
    36f8:	84 b1       	in	r24, 0x04	; 4
    36fa:	8f 74       	andi	r24, 0x4F	; 79
    36fc:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1<<SS)|(1<<MOSI)|(1<<SCK));
    36fe:	85 b1       	in	r24, 0x05	; 5
    3700:	8f 74       	andi	r24, 0x4F	; 79
    3702:	85 b9       	out	0x05, r24	; 5
	#if 0	// not using CP / WP
		PORTB |=  0b00110000;
	#endif


}
    3704:	08 95       	ret

00003706 <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    3706:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)))
    3708:	0d b4       	in	r0, 0x2d	; 45
    370a:	07 fc       	sbrc	r0, 7
    370c:	02 c0       	rjmp	.+4      	; 0x3712 <xchg_spi+0xc>
	return SPDR;
    370e:	8e b5       	in	r24, 0x2e	; 46
    3710:	08 95       	ret
}
    3712:	08 95       	ret

00003714 <wait_ready>:
)
{
	BYTE d;


	Timer2 = wt / 10;
    3714:	6a e0       	ldi	r22, 0x0A	; 10
    3716:	70 e0       	ldi	r23, 0x00	; 0
    3718:	0e 94 9c 20 	call	0x4138	; 0x4138 <__udivmodhi4>
    371c:	60 93 2e 01 	sts	0x012E, r22
	do
		d = xchg_spi(0xFF);
    3720:	8f ef       	ldi	r24, 0xFF	; 255
    3722:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
	while (d != 0xFF && Timer2);
    3726:	8f 3f       	cpi	r24, 0xFF	; 255
    3728:	21 f0       	breq	.+8      	; 0x3732 <wait_ready+0x1e>
    372a:	90 91 2e 01 	lds	r25, 0x012E
    372e:	99 23       	and	r25, r25
    3730:	b9 f7       	brne	.-18     	; 0x3720 <wait_ready+0xc>

	return (d == 0xFF) ? 1 : 0;
    3732:	21 e0       	ldi	r18, 0x01	; 1
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	8f 3f       	cpi	r24, 0xFF	; 255
    3738:	11 f0       	breq	.+4      	; 0x373e <wait_ready+0x2a>
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
}
    373e:	82 2f       	mov	r24, r18
    3740:	93 2f       	mov	r25, r19
    3742:	08 95       	ret

00003744 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    3744:	2c 9a       	sbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    3746:	8f ef       	ldi	r24, 0xFF	; 255
    3748:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
}
    374c:	08 95       	ret

0000374e <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
    374e:	2c 98       	cbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    3750:	8f ef       	ldi	r24, 0xFF	; 255
    3752:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    3756:	84 ef       	ldi	r24, 0xF4	; 244
    3758:	91 e0       	ldi	r25, 0x01	; 1
    375a:	0e 94 8a 1b 	call	0x3714	; 0x3714 <wait_ready>
    375e:	00 97       	sbiw	r24, 0x00	; 0
    3760:	29 f4       	brne	.+10     	; 0x376c <select+0x1e>

	deselect();
    3762:	0e 94 a2 1b 	call	0x3744	; 0x3744 <deselect>
	return 0;	/* Timeout */
    3766:	80 e0       	ldi	r24, 0x00	; 0
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	08 95       	ret
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    376c:	81 e0       	ldi	r24, 0x01	; 1
    376e:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
    3770:	08 95       	ret

00003772 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    3772:	0f 93       	push	r16
    3774:	1f 93       	push	r17
    3776:	cf 93       	push	r28
    3778:	df 93       	push	r29
    377a:	ec 01       	movw	r28, r24
    377c:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    377e:	84 e1       	ldi	r24, 0x14	; 20
    3780:	80 93 2f 01 	sts	0x012F, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    3784:	8f ef       	ldi	r24, 0xFF	; 255
    3786:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    378a:	8f 3f       	cpi	r24, 0xFF	; 255
    378c:	39 f4       	brne	.+14     	; 0x379c <rcvr_datablock+0x2a>
    378e:	80 91 2f 01 	lds	r24, 0x012F
    3792:	88 23       	and	r24, r24
    3794:	b9 f7       	brne	.-18     	; 0x3784 <rcvr_datablock+0x12>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    3796:	80 e0       	ldi	r24, 0x00	; 0
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	1e c0       	rjmp	.+60     	; 0x37d8 <rcvr_datablock+0x66>
    379c:	8e 3f       	cpi	r24, 0xFE	; 254
    379e:	d1 f4       	brne	.+52     	; 0x37d4 <rcvr_datablock+0x62>
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = 0xFF; while(!(SPSR & (1<<SPIF))); *p++ = SPDR;
    37a0:	8f ef       	ldi	r24, 0xFF	; 255
    37a2:	8e bd       	out	0x2e, r24	; 46
    37a4:	0d b4       	in	r0, 0x2d	; 45
    37a6:	07 fe       	sbrs	r0, 7
    37a8:	fd cf       	rjmp	.-6      	; 0x37a4 <rcvr_datablock+0x32>
    37aa:	9e b5       	in	r25, 0x2e	; 46
    37ac:	98 83       	st	Y, r25
		SPDR = 0xFF; while(!(SPSR & (1<<SPIF))); *p++ = SPDR;
    37ae:	8e bd       	out	0x2e, r24	; 46
    37b0:	0d b4       	in	r0, 0x2d	; 45
    37b2:	07 fe       	sbrs	r0, 7
    37b4:	fd cf       	rjmp	.-6      	; 0x37b0 <rcvr_datablock+0x3e>
    37b6:	9e b5       	in	r25, 0x2e	; 46
    37b8:	99 83       	std	Y+1, r25	; 0x01
/*-----------------------------------------------------------------------*/
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static
int rcvr_datablock (
    37ba:	22 96       	adiw	r28, 0x02	; 2
)
{
	do {
		SPDR = 0xFF; while(!(SPSR & (1<<SPIF))); *p++ = SPDR;
		SPDR = 0xFF; while(!(SPSR & (1<<SPIF))); *p++ = SPDR;
	} while (cnt -= 2);
    37bc:	02 50       	subi	r16, 0x02	; 2
    37be:	10 40       	sbci	r17, 0x00	; 0
    37c0:	81 f7       	brne	.-32     	; 0x37a2 <rcvr_datablock+0x30>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    37c2:	8f ef       	ldi	r24, 0xFF	; 255
    37c4:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
	xchg_spi(0xFF);
    37c8:	8f ef       	ldi	r24, 0xFF	; 255
    37ca:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>

	return 1;						/* Return with success */
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	02 c0       	rjmp	.+4      	; 0x37d8 <rcvr_datablock+0x66>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    37d8:	df 91       	pop	r29
    37da:	cf 91       	pop	r28
    37dc:	1f 91       	pop	r17
    37de:	0f 91       	pop	r16
    37e0:	08 95       	ret

000037e2 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    37e2:	1f 93       	push	r17
    37e4:	cf 93       	push	r28
    37e6:	df 93       	push	r29
    37e8:	ec 01       	movw	r28, r24
    37ea:	16 2f       	mov	r17, r22
	BYTE resp;


	if (!wait_ready(500)) return 0;
    37ec:	84 ef       	ldi	r24, 0xF4	; 244
    37ee:	91 e0       	ldi	r25, 0x01	; 1
    37f0:	0e 94 8a 1b 	call	0x3714	; 0x3714 <wait_ready>
    37f4:	00 97       	sbiw	r24, 0x00	; 0
    37f6:	41 f1       	breq	.+80     	; 0x3848 <xmit_datablock+0x66>

	xchg_spi(token);					/* Xmit data token */
    37f8:	81 2f       	mov	r24, r17
    37fa:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
    37fe:	1d 3f       	cpi	r17, 0xFD	; 253
    3800:	31 f1       	breq	.+76     	; 0x384e <xmit_datablock+0x6c>
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if	_USE_WRITE
static
int xmit_datablock (
    3802:	ce 01       	movw	r24, r28
    3804:	80 50       	subi	r24, 0x00	; 0
    3806:	9e 4f       	sbci	r25, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = *p++; while(!(SPSR & (1<<SPIF)));
    3808:	28 81       	ld	r18, Y
    380a:	2e bd       	out	0x2e, r18	; 46
    380c:	0d b4       	in	r0, 0x2d	; 45
    380e:	07 fe       	sbrs	r0, 7
    3810:	fd cf       	rjmp	.-6      	; 0x380c <xmit_datablock+0x2a>
		SPDR = *p++; while(!(SPSR & (1<<SPIF)));
    3812:	29 81       	ldd	r18, Y+1	; 0x01
    3814:	2e bd       	out	0x2e, r18	; 46
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if	_USE_WRITE
static
int xmit_datablock (
    3816:	22 96       	adiw	r28, 0x02	; 2
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = *p++; while(!(SPSR & (1<<SPIF)));
		SPDR = *p++; while(!(SPSR & (1<<SPIF)));
    3818:	0d b4       	in	r0, 0x2d	; 45
    381a:	07 fe       	sbrs	r0, 7
    381c:	fd cf       	rjmp	.-6      	; 0x3818 <xmit_datablock+0x36>
	} while (cnt -= 2);
    381e:	8c 17       	cp	r24, r28
    3820:	9d 07       	cpc	r25, r29
    3822:	91 f7       	brne	.-28     	; 0x3808 <xmit_datablock+0x26>
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
    3824:	8f ef       	ldi	r24, 0xFF	; 255
    3826:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
		xchg_spi(0xFF);
    382a:	8f ef       	ldi	r24, 0xFF	; 255
    382c:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
    3830:	8f ef       	ldi	r24, 0xFF	; 255
    3832:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    3836:	8f 71       	andi	r24, 0x1F	; 31
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if	_USE_WRITE
static
int xmit_datablock (
    3838:	21 e0       	ldi	r18, 0x01	; 1
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	85 30       	cpi	r24, 0x05	; 5
    383e:	11 f0       	breq	.+4      	; 0x3844 <xmit_datablock+0x62>
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	30 e0       	ldi	r19, 0x00	; 0
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    3844:	c9 01       	movw	r24, r18
    3846:	05 c0       	rjmp	.+10     	; 0x3852 <xmit_datablock+0x70>
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	02 c0       	rjmp	.+4      	; 0x3852 <xmit_datablock+0x70>
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    384e:	81 e0       	ldi	r24, 0x01	; 1
    3850:	90 e0       	ldi	r25, 0x00	; 0
}
    3852:	df 91       	pop	r29
    3854:	cf 91       	pop	r28
    3856:	1f 91       	pop	r17
    3858:	08 95       	ret

0000385a <send_cmd>:

/*-----------------------------------------------------------------------*/
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

unsigned char send_cmd(BYTE cmd,DWORD arg){
    385a:	5f 92       	push	r5
    385c:	6f 92       	push	r6
    385e:	7f 92       	push	r7
    3860:	8f 92       	push	r8
    3862:	9f 92       	push	r9
    3864:	af 92       	push	r10
    3866:	bf 92       	push	r11
    3868:	cf 92       	push	r12
    386a:	df 92       	push	r13
    386c:	ef 92       	push	r14
    386e:	ff 92       	push	r15
    3870:	0f 93       	push	r16
    3872:	1f 93       	push	r17
    3874:	cf 93       	push	r28
    3876:	df 93       	push	r29
    3878:	cd b7       	in	r28, 0x3d	; 61
    387a:	de b7       	in	r29, 0x3e	; 62
    387c:	27 97       	sbiw	r28, 0x07	; 7
    387e:	0f b6       	in	r0, 0x3f	; 63
    3880:	f8 94       	cli
    3882:	de bf       	out	0x3e, r29	; 62
    3884:	0f be       	out	0x3f, r0	; 63
    3886:	cd bf       	out	0x3d, r28	; 61
    3888:	b8 2e       	mov	r11, r24
    388a:	74 2e       	mov	r7, r20
    388c:	95 2e       	mov	r9, r21
    388e:	a6 2e       	mov	r10, r22
    3890:	07 2f       	mov	r16, r23
	volatile BYTE n;
	volatile unsigned char r1, r2, r3, r4, r5, r6;
	select();
    3892:	0e 94 a7 1b 	call	0x374e	; 0x374e <select>
	while(r1!=0x01){
		if (cmd == CMD0) n = 0x95;
		xchg_spi(0xff);
		xchg_spi(cmd|0x40);
		xchg_spi(arg>>24);
    3896:	60 2e       	mov	r6, r16
unsigned char send_cmd(BYTE cmd,DWORD arg){
	volatile BYTE n;
	volatile unsigned char r1, r2, r3, r4, r5, r6;
	select();
	while(r1!=0x01){
		if (cmd == CMD0) n = 0x95;
    3898:	0f 2e       	mov	r0, r31
    389a:	f5 e9       	ldi	r31, 0x95	; 149
    389c:	5f 2e       	mov	r5, r31
    389e:	f0 2d       	mov	r31, r0
		xchg_spi(0xff);
		xchg_spi(cmd|0x40);
    38a0:	88 24       	eor	r8, r8
    38a2:	68 94       	set
    38a4:	86 f8       	bld	r8, 6
    38a6:	8b 28       	or	r8, r11
		r2=xchg_spi(0xff);
		r3=xchg_spi(0xff);
		r4=xchg_spi(0xff);
		r5=xchg_spi(0xff);
		r6=xchg_spi(0xff);
		if((r1==1)|(r2==1)|(r3==1)|(r4==1)|(r5==1)|(r6==1)){
    38a8:	01 e0       	ldi	r16, 0x01	; 1
    38aa:	10 e0       	ldi	r17, 0x00	; 0
    38ac:	ee 24       	eor	r14, r14
    38ae:	ff 24       	eor	r15, r15
    38b0:	dd 24       	eor	r13, r13
    38b2:	d3 94       	inc	r13
    38b4:	cc 24       	eor	r12, r12

unsigned char send_cmd(BYTE cmd,DWORD arg){
	volatile BYTE n;
	volatile unsigned char r1, r2, r3, r4, r5, r6;
	select();
	while(r1!=0x01){
    38b6:	5b c0       	rjmp	.+182    	; 0x396e <send_cmd+0x114>
		if (cmd == CMD0) n = 0x95;
    38b8:	bb 20       	and	r11, r11
    38ba:	09 f4       	brne	.+2      	; 0x38be <send_cmd+0x64>
    38bc:	59 82       	std	Y+1, r5	; 0x01
		xchg_spi(0xff);
    38be:	8f ef       	ldi	r24, 0xFF	; 255
    38c0:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
		xchg_spi(cmd|0x40);
    38c4:	88 2d       	mov	r24, r8
    38c6:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
		xchg_spi(arg>>24);
    38ca:	86 2d       	mov	r24, r6
    38cc:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
		xchg_spi(arg>>16);
    38d0:	8a 2d       	mov	r24, r10
    38d2:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
		xchg_spi(arg>>8);
    38d6:	89 2d       	mov	r24, r9
    38d8:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
		xchg_spi(arg);
    38dc:	87 2d       	mov	r24, r7
    38de:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
		xchg_spi(n);
    38e2:	89 81       	ldd	r24, Y+1	; 0x01
    38e4:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
		r1=xchg_spi(0xff);
    38e8:	8f ef       	ldi	r24, 0xFF	; 255
    38ea:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
    38ee:	8a 83       	std	Y+2, r24	; 0x02
		r2=xchg_spi(0xff);
    38f0:	8f ef       	ldi	r24, 0xFF	; 255
    38f2:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
    38f6:	8b 83       	std	Y+3, r24	; 0x03
		r3=xchg_spi(0xff);
    38f8:	8f ef       	ldi	r24, 0xFF	; 255
    38fa:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
    38fe:	8c 83       	std	Y+4, r24	; 0x04
		r4=xchg_spi(0xff);
    3900:	8f ef       	ldi	r24, 0xFF	; 255
    3902:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
    3906:	8d 83       	std	Y+5, r24	; 0x05
		r5=xchg_spi(0xff);
    3908:	8f ef       	ldi	r24, 0xFF	; 255
    390a:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
    390e:	8e 83       	std	Y+6, r24	; 0x06
		r6=xchg_spi(0xff);
    3910:	8f ef       	ldi	r24, 0xFF	; 255
    3912:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
    3916:	8f 83       	std	Y+7, r24	; 0x07
		if((r1==1)|(r2==1)|(r3==1)|(r4==1)|(r5==1)|(r6==1)){
    3918:	7a 81       	ldd	r23, Y+2	; 0x02
    391a:	eb 81       	ldd	r30, Y+3	; 0x03
    391c:	9c 81       	ldd	r25, Y+4	; 0x04
    391e:	4d 81       	ldd	r20, Y+5	; 0x05
    3920:	8e 81       	ldd	r24, Y+6	; 0x06
    3922:	6f 81       	ldd	r22, Y+7	; 0x07
    3924:	98 01       	movw	r18, r16
    3926:	41 30       	cpi	r20, 0x01	; 1
    3928:	09 f0       	breq	.+2      	; 0x392c <send_cmd+0xd2>
    392a:	97 01       	movw	r18, r14
    392c:	a8 01       	movw	r20, r16
    392e:	91 30       	cpi	r25, 0x01	; 1
    3930:	09 f0       	breq	.+2      	; 0x3934 <send_cmd+0xda>
    3932:	a7 01       	movw	r20, r14
    3934:	42 2b       	or	r20, r18
    3936:	53 2b       	or	r21, r19
    3938:	98 01       	movw	r18, r16
    393a:	81 30       	cpi	r24, 0x01	; 1
    393c:	09 f0       	breq	.+2      	; 0x3940 <send_cmd+0xe6>
    393e:	97 01       	movw	r18, r14
    3940:	24 2b       	or	r18, r20
    3942:	35 2b       	or	r19, r21
    3944:	c8 01       	movw	r24, r16
    3946:	61 30       	cpi	r22, 0x01	; 1
    3948:	09 f0       	breq	.+2      	; 0x394c <send_cmd+0xf2>
    394a:	c7 01       	movw	r24, r14
    394c:	28 2b       	or	r18, r24
    394e:	39 2b       	or	r19, r25
    3950:	6d 2d       	mov	r22, r13
    3952:	71 30       	cpi	r23, 0x01	; 1
    3954:	09 f0       	breq	.+2      	; 0x3958 <send_cmd+0xfe>
    3956:	6c 2d       	mov	r22, r12
    3958:	8d 2d       	mov	r24, r13
    395a:	e1 30       	cpi	r30, 0x01	; 1
    395c:	09 f0       	breq	.+2      	; 0x3960 <send_cmd+0x106>
    395e:	8c 2d       	mov	r24, r12
    3960:	68 2b       	or	r22, r24
    3962:	70 e0       	ldi	r23, 0x00	; 0
    3964:	26 2b       	or	r18, r22
    3966:	37 2b       	or	r19, r23
    3968:	21 15       	cp	r18, r1
    396a:	31 05       	cpc	r19, r1
    396c:	31 f4       	brne	.+12     	; 0x397a <send_cmd+0x120>

unsigned char send_cmd(BYTE cmd,DWORD arg){
	volatile BYTE n;
	volatile unsigned char r1, r2, r3, r4, r5, r6;
	select();
	while(r1!=0x01){
    396e:	8a 81       	ldd	r24, Y+2	; 0x02
    3970:	81 30       	cpi	r24, 0x01	; 1
    3972:	09 f0       	breq	.+2      	; 0x3976 <send_cmd+0x11c>
    3974:	a1 cf       	rjmp	.-190    	; 0x38b8 <send_cmd+0x5e>
		r6=xchg_spi(0xff);
		if((r1==1)|(r2==1)|(r3==1)|(r4==1)|(r5==1)|(r6==1)){
			return 1;
		}
	}	
	return r1;
    3976:	8a 81       	ldd	r24, Y+2	; 0x02
    3978:	01 c0       	rjmp	.+2      	; 0x397c <send_cmd+0x122>
		r3=xchg_spi(0xff);
		r4=xchg_spi(0xff);
		r5=xchg_spi(0xff);
		r6=xchg_spi(0xff);
		if((r1==1)|(r2==1)|(r3==1)|(r4==1)|(r5==1)|(r6==1)){
			return 1;
    397a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}	
	return r1;
}
    397c:	27 96       	adiw	r28, 0x07	; 7
    397e:	0f b6       	in	r0, 0x3f	; 63
    3980:	f8 94       	cli
    3982:	de bf       	out	0x3e, r29	; 62
    3984:	0f be       	out	0x3f, r0	; 63
    3986:	cd bf       	out	0x3d, r28	; 61
    3988:	df 91       	pop	r29
    398a:	cf 91       	pop	r28
    398c:	1f 91       	pop	r17
    398e:	0f 91       	pop	r16
    3990:	ff 90       	pop	r15
    3992:	ef 90       	pop	r14
    3994:	df 90       	pop	r13
    3996:	cf 90       	pop	r12
    3998:	bf 90       	pop	r11
    399a:	af 90       	pop	r10
    399c:	9f 90       	pop	r9
    399e:	8f 90       	pop	r8
    39a0:	7f 90       	pop	r7
    39a2:	6f 90       	pop	r6
    39a4:	5f 90       	pop	r5
    39a6:	08 95       	ret

000039a8 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive number (0) */
)
{
    39a8:	cf 92       	push	r12
    39aa:	df 92       	push	r13
    39ac:	ef 92       	push	r14
    39ae:	ff 92       	push	r15
    39b0:	0f 93       	push	r16
    39b2:	1f 93       	push	r17
    39b4:	cf 93       	push	r28
    39b6:	df 93       	push	r29
    39b8:	00 d0       	rcall	.+0      	; 0x39ba <disk_initialize+0x12>
    39ba:	00 d0       	rcall	.+0      	; 0x39bc <disk_initialize+0x14>
    39bc:	cd b7       	in	r28, 0x3d	; 61
    39be:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    39c0:	88 23       	and	r24, r24
    39c2:	09 f0       	breq	.+2      	; 0x39c6 <disk_initialize+0x1e>
    39c4:	ab c0       	rjmp	.+342    	; 0x3b1c <disk_initialize+0x174>
	
	//power_off();						/* Turn off the socket power to reset the card */
	SPCR = 0;				/* Disable SPI function */
    39c6:	1c bc       	out	0x2c, r1	; 44
	DDRB  &= ~((1<<SS)|(1<<MOSI)|(1<<SCK));	/* Set SCK/MOSI/CS as hi-z, INS#/WP as pull-up */
    39c8:	84 b1       	in	r24, 0x04	; 4
    39ca:	8f 74       	andi	r24, 0x4F	; 79
    39cc:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1<<SS)|(1<<MOSI)|(1<<SCK));
    39ce:	85 b1       	in	r24, 0x05	; 5
    39d0:	8f 74       	andi	r24, 0x4F	; 79
    39d2:	85 b9       	out	0x05, r24	; 5
	#if 0	// not using CP / WP
		PORTB |=  0b00110000;
	#endif
	
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    39d4:	80 91 28 01 	lds	r24, 0x0128
    39d8:	81 ff       	sbrs	r24, 1
    39da:	03 c0       	rjmp	.+6      	; 0x39e2 <disk_initialize+0x3a>
    39dc:	80 91 28 01 	lds	r24, 0x0128
    39e0:	9e c0       	rjmp	.+316    	; 0x3b1e <disk_initialize+0x176>
	
	//power_on();							/* Turn on the socket power */
	PORTB |= (1<<SS)|(1<<MOSI);	/* Configure SCK/MOSI/CS as output */
    39e2:	85 b1       	in	r24, 0x05	; 5
    39e4:	80 63       	ori	r24, 0x30	; 48
    39e6:	85 b9       	out	0x05, r24	; 5
	DDRB  |= (1<<SS)|(1<<MOSI)|(1<<SCK);
    39e8:	84 b1       	in	r24, 0x04	; 4
    39ea:	80 6b       	ori	r24, 0xB0	; 176
    39ec:	84 b9       	out	0x04, r24	; 4
	SPCR = 0x52;			/* Enable SPI function in mode 0 */
    39ee:	82 e5       	ldi	r24, 0x52	; 82
    39f0:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0x01;			/* SPI 2x mode */
    39f2:	91 e0       	ldi	r25, 0x01	; 1
    39f4:	9d bd       	out	0x2d, r25	; 45
	
	FCLK_SLOW();
    39f6:	8c bd       	out	0x2c, r24	; 44
    39f8:	0a e0       	ldi	r16, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    39fa:	8f ef       	ldi	r24, 0xFF	; 255
    39fc:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
    3a00:	01 50       	subi	r16, 0x01	; 1
    3a02:	d9 f7       	brne	.-10     	; 0x39fa <disk_initialize+0x52>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    3a04:	80 e0       	ldi	r24, 0x00	; 0
    3a06:	40 e0       	ldi	r20, 0x00	; 0
    3a08:	50 e0       	ldi	r21, 0x00	; 0
    3a0a:	ba 01       	movw	r22, r20
    3a0c:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
    3a10:	81 30       	cpi	r24, 0x01	; 1
    3a12:	09 f0       	breq	.+2      	; 0x3a16 <disk_initialize+0x6e>
    3a14:	97 c0       	rjmp	.+302    	; 0x3b44 <disk_initialize+0x19c>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    3a16:	84 e6       	ldi	r24, 0x64	; 100
    3a18:	80 93 2f 01 	sts	0x012F, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    3a1c:	88 e0       	ldi	r24, 0x08	; 8
    3a1e:	4a ea       	ldi	r20, 0xAA	; 170
    3a20:	51 e0       	ldi	r21, 0x01	; 1
    3a22:	60 e0       	ldi	r22, 0x00	; 0
    3a24:	70 e0       	ldi	r23, 0x00	; 0
    3a26:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
    3a2a:	81 30       	cpi	r24, 0x01	; 1
    3a2c:	f1 f5       	brne	.+124    	; 0x3aaa <disk_initialize+0x102>
    3a2e:	6e 01       	movw	r12, r28
    3a30:	08 94       	sec
    3a32:	c1 1c       	adc	r12, r1
    3a34:	d1 1c       	adc	r13, r1

/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
    3a36:	0f 2e       	mov	r0, r31
    3a38:	f5 e0       	ldi	r31, 0x05	; 5
    3a3a:	ef 2e       	mov	r14, r31
    3a3c:	ff 24       	eor	r15, r15
    3a3e:	f0 2d       	mov	r31, r0
    3a40:	ec 0e       	add	r14, r28
    3a42:	fd 1e       	adc	r15, r29
    3a44:	86 01       	movw	r16, r12

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    3a46:	8f ef       	ldi	r24, 0xFF	; 255
    3a48:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
    3a4c:	f8 01       	movw	r30, r16
    3a4e:	81 93       	st	Z+, r24
    3a50:	8f 01       	movw	r16, r30
    3a52:	ee 15       	cp	r30, r14
    3a54:	ff 05       	cpc	r31, r15
    3a56:	b9 f7       	brne	.-18     	; 0x3a46 <disk_initialize+0x9e>
			//if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
			  if (1) {	
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    3a58:	80 91 2f 01 	lds	r24, 0x012F
    3a5c:	88 23       	and	r24, r24
    3a5e:	49 f0       	breq	.+18     	; 0x3a72 <disk_initialize+0xca>
    3a60:	89 ea       	ldi	r24, 0xA9	; 169
    3a62:	40 e0       	ldi	r20, 0x00	; 0
    3a64:	50 e0       	ldi	r21, 0x00	; 0
    3a66:	60 e0       	ldi	r22, 0x00	; 0
    3a68:	70 e4       	ldi	r23, 0x40	; 64
    3a6a:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
    3a6e:	88 23       	and	r24, r24
    3a70:	99 f7       	brne	.-26     	; 0x3a58 <disk_initialize+0xb0>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    3a72:	80 91 2f 01 	lds	r24, 0x012F
    3a76:	88 23       	and	r24, r24
    3a78:	09 f4       	brne	.+2      	; 0x3a7c <disk_initialize+0xd4>
    3a7a:	64 c0       	rjmp	.+200    	; 0x3b44 <disk_initialize+0x19c>
    3a7c:	8a e3       	ldi	r24, 0x3A	; 58
    3a7e:	40 e0       	ldi	r20, 0x00	; 0
    3a80:	50 e0       	ldi	r21, 0x00	; 0
    3a82:	ba 01       	movw	r22, r20
    3a84:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
    3a88:	88 23       	and	r24, r24
    3a8a:	09 f0       	breq	.+2      	; 0x3a8e <disk_initialize+0xe6>
    3a8c:	5b c0       	rjmp	.+182    	; 0x3b44 <disk_initialize+0x19c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    3a8e:	8f ef       	ldi	r24, 0xFF	; 255
    3a90:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
    3a94:	f6 01       	movw	r30, r12
    3a96:	81 93       	st	Z+, r24
    3a98:	6f 01       	movw	r12, r30
    3a9a:	ee 15       	cp	r30, r14
    3a9c:	ff 05       	cpc	r31, r15
    3a9e:	b9 f7       	brne	.-18     	; 0x3a8e <disk_initialize+0xe6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    3aa0:	89 81       	ldd	r24, Y+1	; 0x01
    3aa2:	86 fd       	sbrc	r24, 6
    3aa4:	49 c0       	rjmp	.+146    	; 0x3b38 <disk_initialize+0x190>
    3aa6:	84 e0       	ldi	r24, 0x04	; 4
    3aa8:	48 c0       	rjmp	.+144    	; 0x3b3a <disk_initialize+0x192>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    3aaa:	89 ea       	ldi	r24, 0xA9	; 169
    3aac:	40 e0       	ldi	r20, 0x00	; 0
    3aae:	50 e0       	ldi	r21, 0x00	; 0
    3ab0:	ba 01       	movw	r22, r20
    3ab2:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
    3ab6:	82 30       	cpi	r24, 0x02	; 2
    3ab8:	18 f4       	brcc	.+6      	; 0x3ac0 <disk_initialize+0x118>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    3aba:	12 e0       	ldi	r17, 0x02	; 2
    3abc:	09 ea       	ldi	r16, 0xA9	; 169
    3abe:	02 c0       	rjmp	.+4      	; 0x3ac4 <disk_initialize+0x11c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    3ac0:	11 e0       	ldi	r17, 0x01	; 1
    3ac2:	01 e0       	ldi	r16, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    3ac4:	80 91 2f 01 	lds	r24, 0x012F
    3ac8:	88 23       	and	r24, r24
    3aca:	41 f0       	breq	.+16     	; 0x3adc <disk_initialize+0x134>
    3acc:	80 2f       	mov	r24, r16
    3ace:	40 e0       	ldi	r20, 0x00	; 0
    3ad0:	50 e0       	ldi	r21, 0x00	; 0
    3ad2:	ba 01       	movw	r22, r20
    3ad4:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
    3ad8:	88 23       	and	r24, r24
    3ada:	a1 f7       	brne	.-24     	; 0x3ac4 <disk_initialize+0x11c>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    3adc:	80 91 2f 01 	lds	r24, 0x012F
    3ae0:	88 23       	and	r24, r24
    3ae2:	81 f1       	breq	.+96     	; 0x3b44 <disk_initialize+0x19c>
    3ae4:	80 e1       	ldi	r24, 0x10	; 16
    3ae6:	40 e0       	ldi	r20, 0x00	; 0
    3ae8:	52 e0       	ldi	r21, 0x02	; 2
    3aea:	60 e0       	ldi	r22, 0x00	; 0
    3aec:	70 e0       	ldi	r23, 0x00	; 0
    3aee:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
    3af2:	88 23       	and	r24, r24
    3af4:	39 f5       	brne	.+78     	; 0x3b44 <disk_initialize+0x19c>
				ty = 0;
		}
	}
	CardType = ty;
    3af6:	10 93 30 01 	sts	0x0130, r17
	deselect();
    3afa:	0e 94 a2 1b 	call	0x3744	; 0x3744 <deselect>

	if (ty) {			/* Initialization succeeded */
    3afe:	11 23       	and	r17, r17
    3b00:	41 f0       	breq	.+16     	; 0x3b12 <disk_initialize+0x16a>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    3b02:	80 91 28 01 	lds	r24, 0x0128
    3b06:	8e 7f       	andi	r24, 0xFE	; 254
    3b08:	80 93 28 01 	sts	0x0128, r24
		FCLK_FAST();
    3b0c:	80 e5       	ldi	r24, 0x50	; 80
    3b0e:	8c bd       	out	0x2c, r24	; 44
    3b10:	02 c0       	rjmp	.+4      	; 0x3b16 <disk_initialize+0x16e>
	} else {			/* Initialization failed */
		power_off();
    3b12:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <power_off>
	}

	return Stat;
    3b16:	80 91 28 01 	lds	r24, 0x0128
    3b1a:	01 c0       	rjmp	.+2      	; 0x3b1e <disk_initialize+0x176>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    3b1e:	0f 90       	pop	r0
    3b20:	0f 90       	pop	r0
    3b22:	0f 90       	pop	r0
    3b24:	0f 90       	pop	r0
    3b26:	df 91       	pop	r29
    3b28:	cf 91       	pop	r28
    3b2a:	1f 91       	pop	r17
    3b2c:	0f 91       	pop	r16
    3b2e:	ff 90       	pop	r15
    3b30:	ef 90       	pop	r14
    3b32:	df 90       	pop	r13
    3b34:	cf 90       	pop	r12
    3b36:	08 95       	ret
			//if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
			  if (1) {	
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    3b38:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    3b3a:	80 93 30 01 	sts	0x0130, r24
	deselect();
    3b3e:	0e 94 a2 1b 	call	0x3744	; 0x3744 <deselect>
    3b42:	df cf       	rjmp	.-66     	; 0x3b02 <disk_initialize+0x15a>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    3b44:	10 92 30 01 	sts	0x0130, r1
	deselect();
    3b48:	0e 94 a2 1b 	call	0x3744	; 0x3744 <deselect>
    3b4c:	e2 cf       	rjmp	.-60     	; 0x3b12 <disk_initialize+0x16a>

00003b4e <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    3b4e:	88 23       	and	r24, r24
    3b50:	19 f4       	brne	.+6      	; 0x3b58 <disk_status+0xa>
	return Stat;
    3b52:	80 91 28 01 	lds	r24, 0x0128
    3b56:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    3b58:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    3b5a:	08 95       	ret

00003b5c <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3b5c:	ff 92       	push	r15
    3b5e:	0f 93       	push	r16
    3b60:	1f 93       	push	r17
    3b62:	cf 93       	push	r28
    3b64:	df 93       	push	r29
    3b66:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    3b68:	88 23       	and	r24, r24
    3b6a:	09 f0       	breq	.+2      	; 0x3b6e <disk_read+0x12>
    3b6c:	45 c0       	rjmp	.+138    	; 0x3bf8 <disk_read+0x9c>
    3b6e:	01 15       	cp	r16, r1
    3b70:	11 05       	cpc	r17, r1
    3b72:	09 f4       	brne	.+2      	; 0x3b76 <disk_read+0x1a>
    3b74:	43 c0       	rjmp	.+134    	; 0x3bfc <disk_read+0xa0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3b76:	80 91 28 01 	lds	r24, 0x0128
    3b7a:	80 fd       	sbrc	r24, 0
    3b7c:	41 c0       	rjmp	.+130    	; 0x3c00 <disk_read+0xa4>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    3b7e:	80 91 30 01 	lds	r24, 0x0130
    3b82:	83 fd       	sbrc	r24, 3
    3b84:	09 c0       	rjmp	.+18     	; 0x3b98 <disk_read+0x3c>
    3b86:	01 2e       	mov	r0, r17
    3b88:	19 e0       	ldi	r17, 0x09	; 9
    3b8a:	22 0f       	add	r18, r18
    3b8c:	33 1f       	adc	r19, r19
    3b8e:	44 1f       	adc	r20, r20
    3b90:	55 1f       	adc	r21, r21
    3b92:	1a 95       	dec	r17
    3b94:	d1 f7       	brne	.-12     	; 0x3b8a <disk_read+0x2e>
    3b96:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    3b98:	02 30       	cpi	r16, 0x02	; 2
    3b9a:	11 05       	cpc	r17, r1
    3b9c:	28 f0       	brcs	.+10     	; 0x3ba8 <disk_read+0x4c>
    3b9e:	0f 2e       	mov	r0, r31
    3ba0:	f2 e1       	ldi	r31, 0x12	; 18
    3ba2:	ff 2e       	mov	r15, r31
    3ba4:	f0 2d       	mov	r31, r0
    3ba6:	04 c0       	rjmp	.+8      	; 0x3bb0 <disk_read+0x54>
    3ba8:	0f 2e       	mov	r0, r31
    3baa:	f1 e1       	ldi	r31, 0x11	; 17
    3bac:	ff 2e       	mov	r15, r31
    3bae:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    3bb0:	8f 2d       	mov	r24, r15
    3bb2:	ba 01       	movw	r22, r20
    3bb4:	a9 01       	movw	r20, r18
    3bb6:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
    3bba:	88 23       	and	r24, r24
    3bbc:	a9 f4       	brne	.+42     	; 0x3be8 <disk_read+0x8c>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    3bbe:	ce 01       	movw	r24, r28
    3bc0:	60 e0       	ldi	r22, 0x00	; 0
    3bc2:	72 e0       	ldi	r23, 0x02	; 2
    3bc4:	0e 94 b9 1b 	call	0x3772	; 0x3772 <rcvr_datablock>
    3bc8:	00 97       	sbiw	r24, 0x00	; 0
    3bca:	29 f0       	breq	.+10     	; 0x3bd6 <disk_read+0x7a>
			buff += 512;
    3bcc:	c0 50       	subi	r28, 0x00	; 0
    3bce:	de 4f       	sbci	r29, 0xFE	; 254
		} while (--count);
    3bd0:	01 50       	subi	r16, 0x01	; 1
    3bd2:	10 40       	sbci	r17, 0x00	; 0
    3bd4:	a1 f7       	brne	.-24     	; 0x3bbe <disk_read+0x62>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    3bd6:	82 e1       	ldi	r24, 0x12	; 18
    3bd8:	f8 16       	cp	r15, r24
    3bda:	31 f4       	brne	.+12     	; 0x3be8 <disk_read+0x8c>
    3bdc:	8c e0       	ldi	r24, 0x0C	; 12
    3bde:	40 e0       	ldi	r20, 0x00	; 0
    3be0:	50 e0       	ldi	r21, 0x00	; 0
    3be2:	ba 01       	movw	r22, r20
    3be4:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
	}
	deselect();
    3be8:	0e 94 a2 1b 	call	0x3744	; 0x3744 <deselect>

	return count ? RES_ERROR : RES_OK;
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	01 15       	cp	r16, r1
    3bf0:	11 05       	cpc	r17, r1
    3bf2:	39 f4       	brne	.+14     	; 0x3c02 <disk_read+0xa6>
    3bf4:	80 e0       	ldi	r24, 0x00	; 0
    3bf6:	05 c0       	rjmp	.+10     	; 0x3c02 <disk_read+0xa6>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    3bf8:	84 e0       	ldi	r24, 0x04	; 4
    3bfa:	03 c0       	rjmp	.+6      	; 0x3c02 <disk_read+0xa6>
    3bfc:	84 e0       	ldi	r24, 0x04	; 4
    3bfe:	01 c0       	rjmp	.+2      	; 0x3c02 <disk_read+0xa6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3c00:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    3c02:	df 91       	pop	r29
    3c04:	cf 91       	pop	r28
    3c06:	1f 91       	pop	r17
    3c08:	0f 91       	pop	r16
    3c0a:	ff 90       	pop	r15
    3c0c:	08 95       	ret

00003c0e <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3c0e:	cf 92       	push	r12
    3c10:	df 92       	push	r13
    3c12:	ef 92       	push	r14
    3c14:	ff 92       	push	r15
    3c16:	0f 93       	push	r16
    3c18:	1f 93       	push	r17
    3c1a:	cf 93       	push	r28
    3c1c:	df 93       	push	r29
    3c1e:	eb 01       	movw	r28, r22
    3c20:	69 01       	movw	r12, r18
    3c22:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    3c24:	88 23       	and	r24, r24
    3c26:	09 f0       	breq	.+2      	; 0x3c2a <disk_write+0x1c>
    3c28:	5c c0       	rjmp	.+184    	; 0x3ce2 <disk_write+0xd4>
    3c2a:	01 15       	cp	r16, r1
    3c2c:	11 05       	cpc	r17, r1
    3c2e:	09 f4       	brne	.+2      	; 0x3c32 <disk_write+0x24>
    3c30:	5a c0       	rjmp	.+180    	; 0x3ce6 <disk_write+0xd8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3c32:	80 91 28 01 	lds	r24, 0x0128
    3c36:	80 fd       	sbrc	r24, 0
    3c38:	58 c0       	rjmp	.+176    	; 0x3cea <disk_write+0xdc>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    3c3a:	80 91 28 01 	lds	r24, 0x0128
    3c3e:	82 fd       	sbrc	r24, 2
    3c40:	56 c0       	rjmp	.+172    	; 0x3cee <disk_write+0xe0>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    3c42:	80 91 30 01 	lds	r24, 0x0130
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	83 fd       	sbrc	r24, 3
    3c4a:	09 c0       	rjmp	.+18     	; 0x3c5e <disk_write+0x50>
    3c4c:	0b 2e       	mov	r0, r27
    3c4e:	b9 e0       	ldi	r27, 0x09	; 9
    3c50:	cc 0c       	add	r12, r12
    3c52:	dd 1c       	adc	r13, r13
    3c54:	ee 1c       	adc	r14, r14
    3c56:	ff 1c       	adc	r15, r15
    3c58:	ba 95       	dec	r27
    3c5a:	d1 f7       	brne	.-12     	; 0x3c50 <disk_write+0x42>
    3c5c:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    3c5e:	01 30       	cpi	r16, 0x01	; 1
    3c60:	11 05       	cpc	r17, r1
    3c62:	71 f4       	brne	.+28     	; 0x3c80 <disk_write+0x72>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    3c64:	88 e1       	ldi	r24, 0x18	; 24
    3c66:	b7 01       	movw	r22, r14
    3c68:	a6 01       	movw	r20, r12
    3c6a:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
    3c6e:	88 23       	and	r24, r24
    3c70:	81 f5       	brne	.+96     	; 0x3cd2 <disk_write+0xc4>
			&& xmit_datablock(buff, 0xFE))
    3c72:	ce 01       	movw	r24, r28
    3c74:	6e ef       	ldi	r22, 0xFE	; 254
    3c76:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <xmit_datablock>
    3c7a:	00 97       	sbiw	r24, 0x00	; 0
    3c7c:	29 f5       	brne	.+74     	; 0x3cc8 <disk_write+0xba>
    3c7e:	29 c0       	rjmp	.+82     	; 0x3cd2 <disk_write+0xc4>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    3c80:	86 70       	andi	r24, 0x06	; 6
    3c82:	90 70       	andi	r25, 0x00	; 0
    3c84:	00 97       	sbiw	r24, 0x00	; 0
    3c86:	31 f0       	breq	.+12     	; 0x3c94 <disk_write+0x86>
    3c88:	a8 01       	movw	r20, r16
    3c8a:	60 e0       	ldi	r22, 0x00	; 0
    3c8c:	70 e0       	ldi	r23, 0x00	; 0
    3c8e:	87 e9       	ldi	r24, 0x97	; 151
    3c90:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    3c94:	89 e1       	ldi	r24, 0x19	; 25
    3c96:	b7 01       	movw	r22, r14
    3c98:	a6 01       	movw	r20, r12
    3c9a:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
    3c9e:	88 23       	and	r24, r24
    3ca0:	c1 f4       	brne	.+48     	; 0x3cd2 <disk_write+0xc4>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    3ca2:	ce 01       	movw	r24, r28
    3ca4:	6c ef       	ldi	r22, 0xFC	; 252
    3ca6:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <xmit_datablock>
    3caa:	00 97       	sbiw	r24, 0x00	; 0
    3cac:	29 f0       	breq	.+10     	; 0x3cb8 <disk_write+0xaa>
				buff += 512;
    3cae:	c0 50       	subi	r28, 0x00	; 0
    3cb0:	de 4f       	sbci	r29, 0xFE	; 254
			} while (--count);
    3cb2:	01 50       	subi	r16, 0x01	; 1
    3cb4:	10 40       	sbci	r17, 0x00	; 0
    3cb6:	a9 f7       	brne	.-22     	; 0x3ca2 <disk_write+0x94>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    3cb8:	80 e0       	ldi	r24, 0x00	; 0
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	6d ef       	ldi	r22, 0xFD	; 253
    3cbe:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <xmit_datablock>
    3cc2:	00 97       	sbiw	r24, 0x00	; 0
    3cc4:	21 f0       	breq	.+8      	; 0x3cce <disk_write+0xc0>
    3cc6:	05 c0       	rjmp	.+10     	; 0x3cd2 <disk_write+0xc4>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
    3cc8:	00 e0       	ldi	r16, 0x00	; 0
    3cca:	10 e0       	ldi	r17, 0x00	; 0
    3ccc:	02 c0       	rjmp	.+4      	; 0x3cd2 <disk_write+0xc4>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
    3cce:	01 e0       	ldi	r16, 0x01	; 1
    3cd0:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    3cd2:	0e 94 a2 1b 	call	0x3744	; 0x3744 <deselect>

	return count ? RES_ERROR : RES_OK;
    3cd6:	81 e0       	ldi	r24, 0x01	; 1
    3cd8:	01 15       	cp	r16, r1
    3cda:	11 05       	cpc	r17, r1
    3cdc:	49 f4       	brne	.+18     	; 0x3cf0 <disk_write+0xe2>
    3cde:	80 e0       	ldi	r24, 0x00	; 0
    3ce0:	07 c0       	rjmp	.+14     	; 0x3cf0 <disk_write+0xe2>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    3ce2:	84 e0       	ldi	r24, 0x04	; 4
    3ce4:	05 c0       	rjmp	.+10     	; 0x3cf0 <disk_write+0xe2>
    3ce6:	84 e0       	ldi	r24, 0x04	; 4
    3ce8:	03 c0       	rjmp	.+6      	; 0x3cf0 <disk_write+0xe2>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3cea:	83 e0       	ldi	r24, 0x03	; 3
    3cec:	01 c0       	rjmp	.+2      	; 0x3cf0 <disk_write+0xe2>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    3cee:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    3cf0:	df 91       	pop	r29
    3cf2:	cf 91       	pop	r28
    3cf4:	1f 91       	pop	r17
    3cf6:	0f 91       	pop	r16
    3cf8:	ff 90       	pop	r15
    3cfa:	ef 90       	pop	r14
    3cfc:	df 90       	pop	r13
    3cfe:	cf 90       	pop	r12
    3d00:	08 95       	ret

00003d02 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    3d02:	ef 92       	push	r14
    3d04:	ff 92       	push	r15
    3d06:	0f 93       	push	r16
    3d08:	1f 93       	push	r17
    3d0a:	cf 93       	push	r28
    3d0c:	df 93       	push	r29
    3d0e:	cd b7       	in	r28, 0x3d	; 61
    3d10:	de b7       	in	r29, 0x3e	; 62
    3d12:	60 97       	sbiw	r28, 0x10	; 16
    3d14:	0f b6       	in	r0, 0x3f	; 63
    3d16:	f8 94       	cli
    3d18:	de bf       	out	0x3e, r29	; 62
    3d1a:	0f be       	out	0x3f, r0	; 63
    3d1c:	cd bf       	out	0x3d, r28	; 61
    3d1e:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    3d20:	88 23       	and	r24, r24
    3d22:	09 f0       	breq	.+2      	; 0x3d26 <disk_ioctl+0x24>
    3d24:	bc c1       	rjmp	.+888    	; 0x409e <disk_ioctl+0x39c>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    3d26:	80 91 28 01 	lds	r24, 0x0128
    3d2a:	80 fd       	sbrc	r24, 0
    3d2c:	ba c1       	rjmp	.+884    	; 0x40a2 <disk_ioctl+0x3a0>

	switch (cmd) {
    3d2e:	62 33       	cpi	r22, 0x32	; 50
    3d30:	09 f4       	brne	.+2      	; 0x3d34 <disk_ioctl+0x32>
    3d32:	35 c1       	rjmp	.+618    	; 0x3f9e <disk_ioctl+0x29c>
    3d34:	63 33       	cpi	r22, 0x33	; 51
    3d36:	58 f4       	brcc	.+22     	; 0x3d4e <disk_ioctl+0x4c>
    3d38:	61 30       	cpi	r22, 0x01	; 1
    3d3a:	e9 f0       	breq	.+58     	; 0x3d76 <disk_ioctl+0x74>
    3d3c:	61 30       	cpi	r22, 0x01	; 1
    3d3e:	a0 f0       	brcs	.+40     	; 0x3d68 <disk_ioctl+0x66>
    3d40:	63 30       	cpi	r22, 0x03	; 3
    3d42:	09 f4       	brne	.+2      	; 0x3d46 <disk_ioctl+0x44>
    3d44:	94 c0       	rjmp	.+296    	; 0x3e6e <disk_ioctl+0x16c>
    3d46:	67 30       	cpi	r22, 0x07	; 7
    3d48:	09 f0       	breq	.+2      	; 0x3d4c <disk_ioctl+0x4a>
    3d4a:	89 c1       	rjmp	.+786    	; 0x405e <disk_ioctl+0x35c>
    3d4c:	7f c1       	rjmp	.+766    	; 0x404c <disk_ioctl+0x34a>
    3d4e:	64 33       	cpi	r22, 0x34	; 52
    3d50:	09 f4       	brne	.+2      	; 0x3d54 <disk_ioctl+0x52>
    3d52:	3e c1       	rjmp	.+636    	; 0x3fd0 <disk_ioctl+0x2ce>
    3d54:	64 33       	cpi	r22, 0x34	; 52
    3d56:	08 f4       	brcc	.+2      	; 0x3d5a <disk_ioctl+0x58>
    3d58:	28 c1       	rjmp	.+592    	; 0x3faa <disk_ioctl+0x2a8>
    3d5a:	65 33       	cpi	r22, 0x35	; 53
    3d5c:	09 f4       	brne	.+2      	; 0x3d60 <disk_ioctl+0x5e>
    3d5e:	4b c1       	rjmp	.+662    	; 0x3ff6 <disk_ioctl+0x2f4>
    3d60:	66 33       	cpi	r22, 0x36	; 54
    3d62:	09 f0       	breq	.+2      	; 0x3d66 <disk_ioctl+0x64>
    3d64:	7c c1       	rjmp	.+760    	; 0x405e <disk_ioctl+0x35c>
    3d66:	5e c1       	rjmp	.+700    	; 0x4024 <disk_ioctl+0x322>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    3d68:	0e 94 a7 1b 	call	0x374e	; 0x374e <select>
    3d6c:	00 97       	sbiw	r24, 0x00	; 0
    3d6e:	09 f0       	breq	.+2      	; 0x3d72 <disk_ioctl+0x70>
    3d70:	78 c1       	rjmp	.+752    	; 0x4062 <disk_ioctl+0x360>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    3d72:	01 e0       	ldi	r16, 0x01	; 1
    3d74:	91 c1       	rjmp	.+802    	; 0x4098 <disk_ioctl+0x396>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    3d76:	89 e0       	ldi	r24, 0x09	; 9
    3d78:	40 e0       	ldi	r20, 0x00	; 0
    3d7a:	50 e0       	ldi	r21, 0x00	; 0
    3d7c:	ba 01       	movw	r22, r20
    3d7e:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
    3d82:	88 23       	and	r24, r24
    3d84:	09 f0       	breq	.+2      	; 0x3d88 <disk_ioctl+0x86>
    3d86:	6f c1       	rjmp	.+734    	; 0x4066 <disk_ioctl+0x364>
    3d88:	ce 01       	movw	r24, r28
    3d8a:	01 96       	adiw	r24, 0x01	; 1
    3d8c:	60 e1       	ldi	r22, 0x10	; 16
    3d8e:	70 e0       	ldi	r23, 0x00	; 0
    3d90:	0e 94 b9 1b 	call	0x3772	; 0x3772 <rcvr_datablock>
    3d94:	00 97       	sbiw	r24, 0x00	; 0
    3d96:	09 f4       	brne	.+2      	; 0x3d9a <disk_ioctl+0x98>
    3d98:	68 c1       	rjmp	.+720    	; 0x406a <disk_ioctl+0x368>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    3d9a:	89 81       	ldd	r24, Y+1	; 0x01
    3d9c:	82 95       	swap	r24
    3d9e:	86 95       	lsr	r24
    3da0:	86 95       	lsr	r24
    3da2:	83 70       	andi	r24, 0x03	; 3
    3da4:	81 30       	cpi	r24, 0x01	; 1
    3da6:	51 f5       	brne	.+84     	; 0x3dfc <disk_ioctl+0xfa>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    3da8:	48 85       	ldd	r20, Y+8	; 0x08
    3daa:	50 e0       	ldi	r21, 0x00	; 0
    3dac:	60 e0       	ldi	r22, 0x00	; 0
    3dae:	70 e0       	ldi	r23, 0x00	; 0
    3db0:	4f 73       	andi	r20, 0x3F	; 63
    3db2:	50 70       	andi	r21, 0x00	; 0
    3db4:	60 70       	andi	r22, 0x00	; 0
    3db6:	70 70       	andi	r23, 0x00	; 0
    3db8:	ba 01       	movw	r22, r20
    3dba:	55 27       	eor	r21, r21
    3dbc:	44 27       	eor	r20, r20
    3dbe:	4f 5f       	subi	r20, 0xFF	; 255
    3dc0:	5f 4f       	sbci	r21, 0xFF	; 255
    3dc2:	6f 4f       	sbci	r22, 0xFF	; 255
    3dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc6:	99 85       	ldd	r25, Y+9	; 0x09
    3dc8:	80 e0       	ldi	r24, 0x00	; 0
    3dca:	2a 85       	ldd	r18, Y+10	; 0x0a
    3dcc:	82 0f       	add	r24, r18
    3dce:	91 1d       	adc	r25, r1
    3dd0:	a0 e0       	ldi	r26, 0x00	; 0
    3dd2:	b0 e0       	ldi	r27, 0x00	; 0
    3dd4:	84 0f       	add	r24, r20
    3dd6:	95 1f       	adc	r25, r21
    3dd8:	a6 1f       	adc	r26, r22
    3dda:	b7 1f       	adc	r27, r23
				*(DWORD*)buff = csize << 10;
    3ddc:	07 2e       	mov	r0, r23
    3dde:	7a e0       	ldi	r23, 0x0A	; 10
    3de0:	88 0f       	add	r24, r24
    3de2:	99 1f       	adc	r25, r25
    3de4:	aa 1f       	adc	r26, r26
    3de6:	bb 1f       	adc	r27, r27
    3de8:	7a 95       	dec	r23
    3dea:	d1 f7       	brne	.-12     	; 0x3de0 <disk_ioctl+0xde>
    3dec:	70 2d       	mov	r23, r0
    3dee:	f7 01       	movw	r30, r14
    3df0:	80 83       	st	Z, r24
    3df2:	91 83       	std	Z+1, r25	; 0x01
    3df4:	a2 83       	std	Z+2, r26	; 0x02
    3df6:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    3df8:	00 e0       	ldi	r16, 0x00	; 0
    3dfa:	4e c1       	rjmp	.+668    	; 0x4098 <disk_ioctl+0x396>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    3dfc:	29 85       	ldd	r18, Y+9	; 0x09
    3dfe:	22 95       	swap	r18
    3e00:	26 95       	lsr	r18
    3e02:	26 95       	lsr	r18
    3e04:	23 70       	andi	r18, 0x03	; 3
    3e06:	88 85       	ldd	r24, Y+8	; 0x08
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	88 0f       	add	r24, r24
    3e0c:	99 1f       	adc	r25, r25
    3e0e:	88 0f       	add	r24, r24
    3e10:	99 1f       	adc	r25, r25
    3e12:	82 0f       	add	r24, r18
    3e14:	91 1d       	adc	r25, r1
    3e16:	01 96       	adiw	r24, 0x01	; 1
    3e18:	2f 81       	ldd	r18, Y+7	; 0x07
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	23 70       	andi	r18, 0x03	; 3
    3e1e:	30 70       	andi	r19, 0x00	; 0
    3e20:	32 2f       	mov	r19, r18
    3e22:	22 27       	eor	r18, r18
    3e24:	33 0f       	add	r19, r19
    3e26:	33 0f       	add	r19, r19
    3e28:	82 0f       	add	r24, r18
    3e2a:	93 1f       	adc	r25, r19
    3e2c:	ac 01       	movw	r20, r24
    3e2e:	60 e0       	ldi	r22, 0x00	; 0
    3e30:	70 e0       	ldi	r23, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    3e32:	9e 81       	ldd	r25, Y+6	; 0x06
    3e34:	9f 70       	andi	r25, 0x0F	; 15
    3e36:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e38:	88 1f       	adc	r24, r24
    3e3a:	88 27       	eor	r24, r24
    3e3c:	88 1f       	adc	r24, r24
    3e3e:	98 0f       	add	r25, r24
    3e40:	9e 5f       	subi	r25, 0xFE	; 254
    3e42:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e44:	83 70       	andi	r24, 0x03	; 3
    3e46:	88 0f       	add	r24, r24
    3e48:	89 0f       	add	r24, r25
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	09 97       	sbiw	r24, 0x09	; 9
    3e4e:	8a 01       	movw	r16, r20
    3e50:	9b 01       	movw	r18, r22
    3e52:	04 c0       	rjmp	.+8      	; 0x3e5c <disk_ioctl+0x15a>
    3e54:	00 0f       	add	r16, r16
    3e56:	11 1f       	adc	r17, r17
    3e58:	22 1f       	adc	r18, r18
    3e5a:	33 1f       	adc	r19, r19
    3e5c:	8a 95       	dec	r24
    3e5e:	d2 f7       	brpl	.-12     	; 0x3e54 <disk_ioctl+0x152>
    3e60:	f7 01       	movw	r30, r14
    3e62:	00 83       	st	Z, r16
    3e64:	11 83       	std	Z+1, r17	; 0x01
    3e66:	22 83       	std	Z+2, r18	; 0x02
    3e68:	33 83       	std	Z+3, r19	; 0x03
			}
			res = RES_OK;
    3e6a:	00 e0       	ldi	r16, 0x00	; 0
    3e6c:	15 c1       	rjmp	.+554    	; 0x4098 <disk_ioctl+0x396>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    3e6e:	00 91 30 01 	lds	r16, 0x0130
    3e72:	02 ff       	sbrs	r16, 2
    3e74:	2f c0       	rjmp	.+94     	; 0x3ed4 <disk_ioctl+0x1d2>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    3e76:	8d e8       	ldi	r24, 0x8D	; 141
    3e78:	40 e0       	ldi	r20, 0x00	; 0
    3e7a:	50 e0       	ldi	r21, 0x00	; 0
    3e7c:	ba 01       	movw	r22, r20
    3e7e:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
    3e82:	88 23       	and	r24, r24
    3e84:	09 f0       	breq	.+2      	; 0x3e88 <disk_ioctl+0x186>
    3e86:	f3 c0       	rjmp	.+486    	; 0x406e <disk_ioctl+0x36c>
				xchg_spi(0xFF);
    3e88:	8f ef       	ldi	r24, 0xFF	; 255
    3e8a:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    3e8e:	ce 01       	movw	r24, r28
    3e90:	01 96       	adiw	r24, 0x01	; 1
    3e92:	60 e1       	ldi	r22, 0x10	; 16
    3e94:	70 e0       	ldi	r23, 0x00	; 0
    3e96:	0e 94 b9 1b 	call	0x3772	; 0x3772 <rcvr_datablock>
    3e9a:	00 97       	sbiw	r24, 0x00	; 0
    3e9c:	09 f4       	brne	.+2      	; 0x3ea0 <disk_ioctl+0x19e>
    3e9e:	e9 c0       	rjmp	.+466    	; 0x4072 <disk_ioctl+0x370>
    3ea0:	00 e3       	ldi	r16, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    3ea2:	8f ef       	ldi	r24, 0xFF	; 255
    3ea4:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
    3ea8:	01 50       	subi	r16, 0x01	; 1
    3eaa:	d9 f7       	brne	.-10     	; 0x3ea2 <disk_ioctl+0x1a0>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    3eac:	2b 85       	ldd	r18, Y+11	; 0x0b
    3eae:	22 95       	swap	r18
    3eb0:	2f 70       	andi	r18, 0x0F	; 15
    3eb2:	80 e1       	ldi	r24, 0x10	; 16
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	a0 e0       	ldi	r26, 0x00	; 0
    3eb8:	b0 e0       	ldi	r27, 0x00	; 0
    3eba:	04 c0       	rjmp	.+8      	; 0x3ec4 <disk_ioctl+0x1c2>
    3ebc:	88 0f       	add	r24, r24
    3ebe:	99 1f       	adc	r25, r25
    3ec0:	aa 1f       	adc	r26, r26
    3ec2:	bb 1f       	adc	r27, r27
    3ec4:	2a 95       	dec	r18
    3ec6:	d2 f7       	brpl	.-12     	; 0x3ebc <disk_ioctl+0x1ba>
    3ec8:	f7 01       	movw	r30, r14
    3eca:	80 83       	st	Z, r24
    3ecc:	91 83       	std	Z+1, r25	; 0x01
    3ece:	a2 83       	std	Z+2, r26	; 0x02
    3ed0:	b3 83       	std	Z+3, r27	; 0x03
    3ed2:	e2 c0       	rjmp	.+452    	; 0x4098 <disk_ioctl+0x396>
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    3ed4:	89 e0       	ldi	r24, 0x09	; 9
    3ed6:	40 e0       	ldi	r20, 0x00	; 0
    3ed8:	50 e0       	ldi	r21, 0x00	; 0
    3eda:	ba 01       	movw	r22, r20
    3edc:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
    3ee0:	88 23       	and	r24, r24
    3ee2:	09 f0       	breq	.+2      	; 0x3ee6 <disk_ioctl+0x1e4>
    3ee4:	c8 c0       	rjmp	.+400    	; 0x4076 <disk_ioctl+0x374>
    3ee6:	ce 01       	movw	r24, r28
    3ee8:	01 96       	adiw	r24, 0x01	; 1
    3eea:	60 e1       	ldi	r22, 0x10	; 16
    3eec:	70 e0       	ldi	r23, 0x00	; 0
    3eee:	0e 94 b9 1b 	call	0x3772	; 0x3772 <rcvr_datablock>
    3ef2:	00 97       	sbiw	r24, 0x00	; 0
    3ef4:	09 f4       	brne	.+2      	; 0x3ef8 <disk_ioctl+0x1f6>
    3ef6:	c1 c0       	rjmp	.+386    	; 0x407a <disk_ioctl+0x378>
				if (CardType & CT_SD1) {	/* SDv1 */
    3ef8:	01 ff       	sbrs	r16, 1
    3efa:	25 c0       	rjmp	.+74     	; 0x3f46 <disk_ioctl+0x244>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    3efc:	8c 85       	ldd	r24, Y+12	; 0x0c
    3efe:	88 1f       	adc	r24, r24
    3f00:	88 27       	eor	r24, r24
    3f02:	88 1f       	adc	r24, r24
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	01 96       	adiw	r24, 0x01	; 1
    3f08:	2b 85       	ldd	r18, Y+11	; 0x0b
    3f0a:	30 e0       	ldi	r19, 0x00	; 0
    3f0c:	2f 73       	andi	r18, 0x3F	; 63
    3f0e:	30 70       	andi	r19, 0x00	; 0
    3f10:	22 0f       	add	r18, r18
    3f12:	33 1f       	adc	r19, r19
    3f14:	28 0f       	add	r18, r24
    3f16:	39 1f       	adc	r19, r25
    3f18:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f1a:	82 95       	swap	r24
    3f1c:	86 95       	lsr	r24
    3f1e:	86 95       	lsr	r24
    3f20:	83 70       	andi	r24, 0x03	; 3
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	01 97       	sbiw	r24, 0x01	; 1
    3f26:	89 01       	movw	r16, r18
    3f28:	02 c0       	rjmp	.+4      	; 0x3f2e <disk_ioctl+0x22c>
    3f2a:	00 0f       	add	r16, r16
    3f2c:	11 1f       	adc	r17, r17
    3f2e:	8a 95       	dec	r24
    3f30:	e2 f7       	brpl	.-8      	; 0x3f2a <disk_ioctl+0x228>
    3f32:	c8 01       	movw	r24, r16
    3f34:	a0 e0       	ldi	r26, 0x00	; 0
    3f36:	b0 e0       	ldi	r27, 0x00	; 0
    3f38:	f7 01       	movw	r30, r14
    3f3a:	80 83       	st	Z, r24
    3f3c:	91 83       	std	Z+1, r25	; 0x01
    3f3e:	a2 83       	std	Z+2, r26	; 0x02
    3f40:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    3f42:	00 e0       	ldi	r16, 0x00	; 0
    3f44:	a9 c0       	rjmp	.+338    	; 0x4098 <disk_ioctl+0x396>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    3f46:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f48:	48 2f       	mov	r20, r24
    3f4a:	50 e0       	ldi	r21, 0x00	; 0
    3f4c:	43 70       	andi	r20, 0x03	; 3
    3f4e:	50 70       	andi	r21, 0x00	; 0
    3f50:	44 0f       	add	r20, r20
    3f52:	55 1f       	adc	r21, r21
    3f54:	44 0f       	add	r20, r20
    3f56:	55 1f       	adc	r21, r21
    3f58:	44 0f       	add	r20, r20
    3f5a:	55 1f       	adc	r21, r21
    3f5c:	82 95       	swap	r24
    3f5e:	86 95       	lsr	r24
    3f60:	87 70       	andi	r24, 0x07	; 7
    3f62:	48 0f       	add	r20, r24
    3f64:	51 1d       	adc	r21, r1
    3f66:	4f 5f       	subi	r20, 0xFF	; 255
    3f68:	5f 4f       	sbci	r21, 0xFF	; 255
    3f6a:	2b 85       	ldd	r18, Y+11	; 0x0b
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	2c 77       	andi	r18, 0x7C	; 124
    3f70:	30 70       	andi	r19, 0x00	; 0
    3f72:	35 95       	asr	r19
    3f74:	27 95       	ror	r18
    3f76:	35 95       	asr	r19
    3f78:	27 95       	ror	r18
    3f7a:	2f 5f       	subi	r18, 0xFF	; 255
    3f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f7e:	42 9f       	mul	r20, r18
    3f80:	c0 01       	movw	r24, r0
    3f82:	43 9f       	mul	r20, r19
    3f84:	90 0d       	add	r25, r0
    3f86:	52 9f       	mul	r21, r18
    3f88:	90 0d       	add	r25, r0
    3f8a:	11 24       	eor	r1, r1
    3f8c:	a0 e0       	ldi	r26, 0x00	; 0
    3f8e:	b0 e0       	ldi	r27, 0x00	; 0
    3f90:	f7 01       	movw	r30, r14
    3f92:	80 83       	st	Z, r24
    3f94:	91 83       	std	Z+1, r25	; 0x01
    3f96:	a2 83       	std	Z+2, r26	; 0x02
    3f98:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    3f9a:	00 e0       	ldi	r16, 0x00	; 0
    3f9c:	7d c0       	rjmp	.+250    	; 0x4098 <disk_ioctl+0x396>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    3f9e:	80 91 30 01 	lds	r24, 0x0130
    3fa2:	fa 01       	movw	r30, r20
    3fa4:	80 83       	st	Z, r24
		res = RES_OK;
    3fa6:	00 e0       	ldi	r16, 0x00	; 0
		break;
    3fa8:	77 c0       	rjmp	.+238    	; 0x4098 <disk_ioctl+0x396>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    3faa:	89 e0       	ldi	r24, 0x09	; 9
    3fac:	40 e0       	ldi	r20, 0x00	; 0
    3fae:	50 e0       	ldi	r21, 0x00	; 0
    3fb0:	ba 01       	movw	r22, r20
    3fb2:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
    3fb6:	88 23       	and	r24, r24
    3fb8:	09 f0       	breq	.+2      	; 0x3fbc <disk_ioctl+0x2ba>
    3fba:	61 c0       	rjmp	.+194    	; 0x407e <disk_ioctl+0x37c>
			&& rcvr_datablock(ptr, 16))
    3fbc:	c7 01       	movw	r24, r14
    3fbe:	60 e1       	ldi	r22, 0x10	; 16
    3fc0:	70 e0       	ldi	r23, 0x00	; 0
    3fc2:	0e 94 b9 1b 	call	0x3772	; 0x3772 <rcvr_datablock>
    3fc6:	00 97       	sbiw	r24, 0x00	; 0
    3fc8:	09 f0       	breq	.+2      	; 0x3fcc <disk_ioctl+0x2ca>
    3fca:	5b c0       	rjmp	.+182    	; 0x4082 <disk_ioctl+0x380>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    3fcc:	01 e0       	ldi	r16, 0x01	; 1
    3fce:	64 c0       	rjmp	.+200    	; 0x4098 <disk_ioctl+0x396>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    3fd0:	8a e0       	ldi	r24, 0x0A	; 10
    3fd2:	40 e0       	ldi	r20, 0x00	; 0
    3fd4:	50 e0       	ldi	r21, 0x00	; 0
    3fd6:	ba 01       	movw	r22, r20
    3fd8:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
    3fdc:	88 23       	and	r24, r24
    3fde:	09 f0       	breq	.+2      	; 0x3fe2 <disk_ioctl+0x2e0>
    3fe0:	52 c0       	rjmp	.+164    	; 0x4086 <disk_ioctl+0x384>
			&& rcvr_datablock(ptr, 16))
    3fe2:	c7 01       	movw	r24, r14
    3fe4:	60 e1       	ldi	r22, 0x10	; 16
    3fe6:	70 e0       	ldi	r23, 0x00	; 0
    3fe8:	0e 94 b9 1b 	call	0x3772	; 0x3772 <rcvr_datablock>
    3fec:	00 97       	sbiw	r24, 0x00	; 0
    3fee:	09 f0       	breq	.+2      	; 0x3ff2 <disk_ioctl+0x2f0>
    3ff0:	4c c0       	rjmp	.+152    	; 0x408a <disk_ioctl+0x388>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    3ff2:	01 e0       	ldi	r16, 0x01	; 1
    3ff4:	51 c0       	rjmp	.+162    	; 0x4098 <disk_ioctl+0x396>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    3ff6:	8a e3       	ldi	r24, 0x3A	; 58
    3ff8:	40 e0       	ldi	r20, 0x00	; 0
    3ffa:	50 e0       	ldi	r21, 0x00	; 0
    3ffc:	ba 01       	movw	r22, r20
    3ffe:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
    4002:	88 23       	and	r24, r24
    4004:	09 f0       	breq	.+2      	; 0x4008 <disk_ioctl+0x306>
    4006:	43 c0       	rjmp	.+134    	; 0x408e <disk_ioctl+0x38c>
/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

#if _USE_IOCTL
DRESULT disk_ioctl (
    4008:	87 01       	movw	r16, r14
    400a:	0c 5f       	subi	r16, 0xFC	; 252
    400c:	1f 4f       	sbci	r17, 0xFF	; 255
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    400e:	8f ef       	ldi	r24, 0xFF	; 255
    4010:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
    4014:	f7 01       	movw	r30, r14
    4016:	81 93       	st	Z+, r24
    4018:	7f 01       	movw	r14, r30
    401a:	e0 17       	cp	r30, r16
    401c:	f1 07       	cpc	r31, r17
    401e:	b9 f7       	brne	.-18     	; 0x400e <disk_ioctl+0x30c>
			res = RES_OK;
    4020:	00 e0       	ldi	r16, 0x00	; 0
    4022:	3a c0       	rjmp	.+116    	; 0x4098 <disk_ioctl+0x396>
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    4024:	8d e8       	ldi	r24, 0x8D	; 141
    4026:	40 e0       	ldi	r20, 0x00	; 0
    4028:	50 e0       	ldi	r21, 0x00	; 0
    402a:	ba 01       	movw	r22, r20
    402c:	0e 94 2d 1c 	call	0x385a	; 0x385a <send_cmd>
    4030:	88 23       	and	r24, r24
    4032:	79 f5       	brne	.+94     	; 0x4092 <disk_ioctl+0x390>
			xchg_spi(0xFF);
    4034:	8f ef       	ldi	r24, 0xFF	; 255
    4036:	0e 94 83 1b 	call	0x3706	; 0x3706 <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    403a:	c7 01       	movw	r24, r14
    403c:	60 e4       	ldi	r22, 0x40	; 64
    403e:	70 e0       	ldi	r23, 0x00	; 0
    4040:	0e 94 b9 1b 	call	0x3772	; 0x3772 <rcvr_datablock>
    4044:	00 97       	sbiw	r24, 0x00	; 0
    4046:	39 f5       	brne	.+78     	; 0x4096 <disk_ioctl+0x394>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    4048:	01 e0       	ldi	r16, 0x01	; 1
    404a:	26 c0       	rjmp	.+76     	; 0x4098 <disk_ioctl+0x396>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
    404c:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <power_off>
		Stat |= STA_NOINIT;
    4050:	80 91 28 01 	lds	r24, 0x0128
    4054:	81 60       	ori	r24, 0x01	; 1
    4056:	80 93 28 01 	sts	0x0128, r24
		res = RES_OK;
    405a:	00 e0       	ldi	r16, 0x00	; 0
		break;
    405c:	1d c0       	rjmp	.+58     	; 0x4098 <disk_ioctl+0x396>

	default:
		res = RES_PARERR;
    405e:	04 e0       	ldi	r16, 0x04	; 4
    4060:	1b c0       	rjmp	.+54     	; 0x4098 <disk_ioctl+0x396>

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    4062:	00 e0       	ldi	r16, 0x00	; 0
    4064:	19 c0       	rjmp	.+50     	; 0x4098 <disk_ioctl+0x396>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    4066:	01 e0       	ldi	r16, 0x01	; 1
    4068:	17 c0       	rjmp	.+46     	; 0x4098 <disk_ioctl+0x396>
    406a:	01 e0       	ldi	r16, 0x01	; 1
    406c:	15 c0       	rjmp	.+42     	; 0x4098 <disk_ioctl+0x396>
    406e:	01 e0       	ldi	r16, 0x01	; 1
    4070:	13 c0       	rjmp	.+38     	; 0x4098 <disk_ioctl+0x396>
    4072:	01 e0       	ldi	r16, 0x01	; 1
    4074:	11 c0       	rjmp	.+34     	; 0x4098 <disk_ioctl+0x396>
    4076:	01 e0       	ldi	r16, 0x01	; 1
    4078:	0f c0       	rjmp	.+30     	; 0x4098 <disk_ioctl+0x396>
    407a:	01 e0       	ldi	r16, 0x01	; 1
    407c:	0d c0       	rjmp	.+26     	; 0x4098 <disk_ioctl+0x396>
    407e:	01 e0       	ldi	r16, 0x01	; 1
    4080:	0b c0       	rjmp	.+22     	; 0x4098 <disk_ioctl+0x396>
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
    4082:	00 e0       	ldi	r16, 0x00	; 0
    4084:	09 c0       	rjmp	.+18     	; 0x4098 <disk_ioctl+0x396>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    4086:	01 e0       	ldi	r16, 0x01	; 1
    4088:	07 c0       	rjmp	.+14     	; 0x4098 <disk_ioctl+0x396>
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
    408a:	00 e0       	ldi	r16, 0x00	; 0
    408c:	05 c0       	rjmp	.+10     	; 0x4098 <disk_ioctl+0x396>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    408e:	01 e0       	ldi	r16, 0x01	; 1
    4090:	03 c0       	rjmp	.+6      	; 0x4098 <disk_ioctl+0x396>
    4092:	01 e0       	ldi	r16, 0x01	; 1
    4094:	01 c0       	rjmp	.+2      	; 0x4098 <disk_ioctl+0x396>

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
			xchg_spi(0xFF);
			if (rcvr_datablock(ptr, 64))
				res = RES_OK;
    4096:	00 e0       	ldi	r16, 0x00	; 0

	default:
		res = RES_PARERR;
	}

	deselect();
    4098:	0e 94 a2 1b 	call	0x3744	; 0x3744 <deselect>

	return res;
    409c:	03 c0       	rjmp	.+6      	; 0x40a4 <disk_ioctl+0x3a2>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    409e:	04 e0       	ldi	r16, 0x04	; 4
    40a0:	01 c0       	rjmp	.+2      	; 0x40a4 <disk_ioctl+0x3a2>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    40a2:	03 e0       	ldi	r16, 0x03	; 3
	}

	deselect();

	return res;
}
    40a4:	80 2f       	mov	r24, r16
    40a6:	60 96       	adiw	r28, 0x10	; 16
    40a8:	0f b6       	in	r0, 0x3f	; 63
    40aa:	f8 94       	cli
    40ac:	de bf       	out	0x3e, r29	; 62
    40ae:	0f be       	out	0x3f, r0	; 63
    40b0:	cd bf       	out	0x3d, r28	; 61
    40b2:	df 91       	pop	r29
    40b4:	cf 91       	pop	r28
    40b6:	1f 91       	pop	r17
    40b8:	0f 91       	pop	r16
    40ba:	ff 90       	pop	r15
    40bc:	ef 90       	pop	r14
    40be:	08 95       	ret

000040c0 <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    40c0:	80 91 2f 01 	lds	r24, 0x012F
	if (n) Timer1 = --n;
    40c4:	88 23       	and	r24, r24
    40c6:	19 f0       	breq	.+6      	; 0x40ce <disk_timerproc+0xe>
    40c8:	81 50       	subi	r24, 0x01	; 1
    40ca:	80 93 2f 01 	sts	0x012F, r24
	n = Timer2;
    40ce:	80 91 2e 01 	lds	r24, 0x012E
	if (n) Timer2 = --n;
    40d2:	88 23       	and	r24, r24
    40d4:	19 f0       	breq	.+6      	; 0x40dc <disk_timerproc+0x1c>
    40d6:	81 50       	subi	r24, 0x01	; 1
    40d8:	80 93 2e 01 	sts	0x012E, r24

	s = Stat;
    40dc:	80 91 28 01 	lds	r24, 0x0128

	if (MMC_WP)				/* Write protected */
    40e0:	1d 9b       	sbis	0x03, 5	; 3
    40e2:	02 c0       	rjmp	.+4      	; 0x40e8 <disk_timerproc+0x28>
		s |= STA_PROTECT;
    40e4:	84 60       	ori	r24, 0x04	; 4
    40e6:	01 c0       	rjmp	.+2      	; 0x40ea <disk_timerproc+0x2a>
	else					/* Write enabled */
		s &= ~STA_PROTECT;
    40e8:	8b 7f       	andi	r24, 0xFB	; 251

	if (MMC_CD)				/* Card inserted */
    40ea:	1c 99       	sbic	0x03, 4	; 3
    40ec:	02 c0       	rjmp	.+4      	; 0x40f2 <disk_timerproc+0x32>
		s &= ~STA_NODISK;
    40ee:	8d 7f       	andi	r24, 0xFD	; 253
    40f0:	01 c0       	rjmp	.+2      	; 0x40f4 <disk_timerproc+0x34>
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
    40f2:	83 60       	ori	r24, 0x03	; 3

	Stat = s;				/* Update MMC status */
    40f4:	80 93 28 01 	sts	0x0128, r24
}
    40f8:	08 95       	ret

000040fa <__mulsi3>:
    40fa:	62 9f       	mul	r22, r18
    40fc:	d0 01       	movw	r26, r0
    40fe:	73 9f       	mul	r23, r19
    4100:	f0 01       	movw	r30, r0
    4102:	82 9f       	mul	r24, r18
    4104:	e0 0d       	add	r30, r0
    4106:	f1 1d       	adc	r31, r1
    4108:	64 9f       	mul	r22, r20
    410a:	e0 0d       	add	r30, r0
    410c:	f1 1d       	adc	r31, r1
    410e:	92 9f       	mul	r25, r18
    4110:	f0 0d       	add	r31, r0
    4112:	83 9f       	mul	r24, r19
    4114:	f0 0d       	add	r31, r0
    4116:	74 9f       	mul	r23, r20
    4118:	f0 0d       	add	r31, r0
    411a:	65 9f       	mul	r22, r21
    411c:	f0 0d       	add	r31, r0
    411e:	99 27       	eor	r25, r25
    4120:	72 9f       	mul	r23, r18
    4122:	b0 0d       	add	r27, r0
    4124:	e1 1d       	adc	r30, r1
    4126:	f9 1f       	adc	r31, r25
    4128:	63 9f       	mul	r22, r19
    412a:	b0 0d       	add	r27, r0
    412c:	e1 1d       	adc	r30, r1
    412e:	f9 1f       	adc	r31, r25
    4130:	bd 01       	movw	r22, r26
    4132:	cf 01       	movw	r24, r30
    4134:	11 24       	eor	r1, r1
    4136:	08 95       	ret

00004138 <__udivmodhi4>:
    4138:	aa 1b       	sub	r26, r26
    413a:	bb 1b       	sub	r27, r27
    413c:	51 e1       	ldi	r21, 0x11	; 17
    413e:	07 c0       	rjmp	.+14     	; 0x414e <__udivmodhi4_ep>

00004140 <__udivmodhi4_loop>:
    4140:	aa 1f       	adc	r26, r26
    4142:	bb 1f       	adc	r27, r27
    4144:	a6 17       	cp	r26, r22
    4146:	b7 07       	cpc	r27, r23
    4148:	10 f0       	brcs	.+4      	; 0x414e <__udivmodhi4_ep>
    414a:	a6 1b       	sub	r26, r22
    414c:	b7 0b       	sbc	r27, r23

0000414e <__udivmodhi4_ep>:
    414e:	88 1f       	adc	r24, r24
    4150:	99 1f       	adc	r25, r25
    4152:	5a 95       	dec	r21
    4154:	a9 f7       	brne	.-22     	; 0x4140 <__udivmodhi4_loop>
    4156:	80 95       	com	r24
    4158:	90 95       	com	r25
    415a:	bc 01       	movw	r22, r24
    415c:	cd 01       	movw	r24, r26
    415e:	08 95       	ret

00004160 <__udivmodsi4>:
    4160:	a1 e2       	ldi	r26, 0x21	; 33
    4162:	1a 2e       	mov	r1, r26
    4164:	aa 1b       	sub	r26, r26
    4166:	bb 1b       	sub	r27, r27
    4168:	fd 01       	movw	r30, r26
    416a:	0d c0       	rjmp	.+26     	; 0x4186 <__udivmodsi4_ep>

0000416c <__udivmodsi4_loop>:
    416c:	aa 1f       	adc	r26, r26
    416e:	bb 1f       	adc	r27, r27
    4170:	ee 1f       	adc	r30, r30
    4172:	ff 1f       	adc	r31, r31
    4174:	a2 17       	cp	r26, r18
    4176:	b3 07       	cpc	r27, r19
    4178:	e4 07       	cpc	r30, r20
    417a:	f5 07       	cpc	r31, r21
    417c:	20 f0       	brcs	.+8      	; 0x4186 <__udivmodsi4_ep>
    417e:	a2 1b       	sub	r26, r18
    4180:	b3 0b       	sbc	r27, r19
    4182:	e4 0b       	sbc	r30, r20
    4184:	f5 0b       	sbc	r31, r21

00004186 <__udivmodsi4_ep>:
    4186:	66 1f       	adc	r22, r22
    4188:	77 1f       	adc	r23, r23
    418a:	88 1f       	adc	r24, r24
    418c:	99 1f       	adc	r25, r25
    418e:	1a 94       	dec	r1
    4190:	69 f7       	brne	.-38     	; 0x416c <__udivmodsi4_loop>
    4192:	60 95       	com	r22
    4194:	70 95       	com	r23
    4196:	80 95       	com	r24
    4198:	90 95       	com	r25
    419a:	9b 01       	movw	r18, r22
    419c:	ac 01       	movw	r20, r24
    419e:	bd 01       	movw	r22, r26
    41a0:	cf 01       	movw	r24, r30
    41a2:	08 95       	ret

000041a4 <printf>:
    41a4:	cf 93       	push	r28
    41a6:	df 93       	push	r29
    41a8:	cd b7       	in	r28, 0x3d	; 61
    41aa:	de b7       	in	r29, 0x3e	; 62
    41ac:	fe 01       	movw	r30, r28
    41ae:	35 96       	adiw	r30, 0x05	; 5
    41b0:	61 91       	ld	r22, Z+
    41b2:	71 91       	ld	r23, Z+
    41b4:	80 91 a1 03 	lds	r24, 0x03A1
    41b8:	90 91 a2 03 	lds	r25, 0x03A2
    41bc:	af 01       	movw	r20, r30
    41be:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <vfprintf>
    41c2:	df 91       	pop	r29
    41c4:	cf 91       	pop	r28
    41c6:	08 95       	ret

000041c8 <vfprintf>:
    41c8:	2f 92       	push	r2
    41ca:	3f 92       	push	r3
    41cc:	4f 92       	push	r4
    41ce:	5f 92       	push	r5
    41d0:	6f 92       	push	r6
    41d2:	7f 92       	push	r7
    41d4:	8f 92       	push	r8
    41d6:	9f 92       	push	r9
    41d8:	af 92       	push	r10
    41da:	bf 92       	push	r11
    41dc:	cf 92       	push	r12
    41de:	df 92       	push	r13
    41e0:	ef 92       	push	r14
    41e2:	ff 92       	push	r15
    41e4:	0f 93       	push	r16
    41e6:	1f 93       	push	r17
    41e8:	cf 93       	push	r28
    41ea:	df 93       	push	r29
    41ec:	cd b7       	in	r28, 0x3d	; 61
    41ee:	de b7       	in	r29, 0x3e	; 62
    41f0:	2d 97       	sbiw	r28, 0x0d	; 13
    41f2:	0f b6       	in	r0, 0x3f	; 63
    41f4:	f8 94       	cli
    41f6:	de bf       	out	0x3e, r29	; 62
    41f8:	0f be       	out	0x3f, r0	; 63
    41fa:	cd bf       	out	0x3d, r28	; 61
    41fc:	3c 01       	movw	r6, r24
    41fe:	7d 87       	std	Y+13, r23	; 0x0d
    4200:	6c 87       	std	Y+12, r22	; 0x0c
    4202:	5a 01       	movw	r10, r20
    4204:	fc 01       	movw	r30, r24
    4206:	17 82       	std	Z+7, r1	; 0x07
    4208:	16 82       	std	Z+6, r1	; 0x06
    420a:	83 81       	ldd	r24, Z+3	; 0x03
    420c:	81 ff       	sbrs	r24, 1
    420e:	c8 c1       	rjmp	.+912    	; 0x45a0 <vfprintf+0x3d8>
    4210:	2e 01       	movw	r4, r28
    4212:	08 94       	sec
    4214:	41 1c       	adc	r4, r1
    4216:	51 1c       	adc	r5, r1
    4218:	f3 01       	movw	r30, r6
    421a:	93 81       	ldd	r25, Z+3	; 0x03
    421c:	ec 85       	ldd	r30, Y+12	; 0x0c
    421e:	fd 85       	ldd	r31, Y+13	; 0x0d
    4220:	93 fd       	sbrc	r25, 3
    4222:	85 91       	lpm	r24, Z+
    4224:	93 ff       	sbrs	r25, 3
    4226:	81 91       	ld	r24, Z+
    4228:	fd 87       	std	Y+13, r31	; 0x0d
    422a:	ec 87       	std	Y+12, r30	; 0x0c
    422c:	88 23       	and	r24, r24
    422e:	09 f4       	brne	.+2      	; 0x4232 <vfprintf+0x6a>
    4230:	b3 c1       	rjmp	.+870    	; 0x4598 <vfprintf+0x3d0>
    4232:	85 32       	cpi	r24, 0x25	; 37
    4234:	41 f4       	brne	.+16     	; 0x4246 <vfprintf+0x7e>
    4236:	93 fd       	sbrc	r25, 3
    4238:	85 91       	lpm	r24, Z+
    423a:	93 ff       	sbrs	r25, 3
    423c:	81 91       	ld	r24, Z+
    423e:	fd 87       	std	Y+13, r31	; 0x0d
    4240:	ec 87       	std	Y+12, r30	; 0x0c
    4242:	85 32       	cpi	r24, 0x25	; 37
    4244:	29 f4       	brne	.+10     	; 0x4250 <vfprintf+0x88>
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	b3 01       	movw	r22, r6
    424a:	0e 94 01 23 	call	0x4602	; 0x4602 <fputc>
    424e:	e4 cf       	rjmp	.-56     	; 0x4218 <vfprintf+0x50>
    4250:	ff 24       	eor	r15, r15
    4252:	ee 24       	eor	r14, r14
    4254:	10 e0       	ldi	r17, 0x00	; 0
    4256:	10 32       	cpi	r17, 0x20	; 32
    4258:	b0 f4       	brcc	.+44     	; 0x4286 <vfprintf+0xbe>
    425a:	8b 32       	cpi	r24, 0x2B	; 43
    425c:	69 f0       	breq	.+26     	; 0x4278 <vfprintf+0xb0>
    425e:	8c 32       	cpi	r24, 0x2C	; 44
    4260:	28 f4       	brcc	.+10     	; 0x426c <vfprintf+0xa4>
    4262:	80 32       	cpi	r24, 0x20	; 32
    4264:	51 f0       	breq	.+20     	; 0x427a <vfprintf+0xb2>
    4266:	83 32       	cpi	r24, 0x23	; 35
    4268:	71 f4       	brne	.+28     	; 0x4286 <vfprintf+0xbe>
    426a:	0b c0       	rjmp	.+22     	; 0x4282 <vfprintf+0xba>
    426c:	8d 32       	cpi	r24, 0x2D	; 45
    426e:	39 f0       	breq	.+14     	; 0x427e <vfprintf+0xb6>
    4270:	80 33       	cpi	r24, 0x30	; 48
    4272:	49 f4       	brne	.+18     	; 0x4286 <vfprintf+0xbe>
    4274:	11 60       	ori	r17, 0x01	; 1
    4276:	2c c0       	rjmp	.+88     	; 0x42d0 <vfprintf+0x108>
    4278:	12 60       	ori	r17, 0x02	; 2
    427a:	14 60       	ori	r17, 0x04	; 4
    427c:	29 c0       	rjmp	.+82     	; 0x42d0 <vfprintf+0x108>
    427e:	18 60       	ori	r17, 0x08	; 8
    4280:	27 c0       	rjmp	.+78     	; 0x42d0 <vfprintf+0x108>
    4282:	10 61       	ori	r17, 0x10	; 16
    4284:	25 c0       	rjmp	.+74     	; 0x42d0 <vfprintf+0x108>
    4286:	17 fd       	sbrc	r17, 7
    4288:	2e c0       	rjmp	.+92     	; 0x42e6 <vfprintf+0x11e>
    428a:	28 2f       	mov	r18, r24
    428c:	20 53       	subi	r18, 0x30	; 48
    428e:	2a 30       	cpi	r18, 0x0A	; 10
    4290:	98 f4       	brcc	.+38     	; 0x42b8 <vfprintf+0xf0>
    4292:	16 ff       	sbrs	r17, 6
    4294:	08 c0       	rjmp	.+16     	; 0x42a6 <vfprintf+0xde>
    4296:	8f 2d       	mov	r24, r15
    4298:	88 0f       	add	r24, r24
    429a:	f8 2e       	mov	r15, r24
    429c:	ff 0c       	add	r15, r15
    429e:	ff 0c       	add	r15, r15
    42a0:	f8 0e       	add	r15, r24
    42a2:	f2 0e       	add	r15, r18
    42a4:	15 c0       	rjmp	.+42     	; 0x42d0 <vfprintf+0x108>
    42a6:	8e 2d       	mov	r24, r14
    42a8:	88 0f       	add	r24, r24
    42aa:	e8 2e       	mov	r14, r24
    42ac:	ee 0c       	add	r14, r14
    42ae:	ee 0c       	add	r14, r14
    42b0:	e8 0e       	add	r14, r24
    42b2:	e2 0e       	add	r14, r18
    42b4:	10 62       	ori	r17, 0x20	; 32
    42b6:	0c c0       	rjmp	.+24     	; 0x42d0 <vfprintf+0x108>
    42b8:	8e 32       	cpi	r24, 0x2E	; 46
    42ba:	21 f4       	brne	.+8      	; 0x42c4 <vfprintf+0xfc>
    42bc:	16 fd       	sbrc	r17, 6
    42be:	6c c1       	rjmp	.+728    	; 0x4598 <vfprintf+0x3d0>
    42c0:	10 64       	ori	r17, 0x40	; 64
    42c2:	06 c0       	rjmp	.+12     	; 0x42d0 <vfprintf+0x108>
    42c4:	8c 36       	cpi	r24, 0x6C	; 108
    42c6:	11 f4       	brne	.+4      	; 0x42cc <vfprintf+0x104>
    42c8:	10 68       	ori	r17, 0x80	; 128
    42ca:	02 c0       	rjmp	.+4      	; 0x42d0 <vfprintf+0x108>
    42cc:	88 36       	cpi	r24, 0x68	; 104
    42ce:	59 f4       	brne	.+22     	; 0x42e6 <vfprintf+0x11e>
    42d0:	ec 85       	ldd	r30, Y+12	; 0x0c
    42d2:	fd 85       	ldd	r31, Y+13	; 0x0d
    42d4:	93 fd       	sbrc	r25, 3
    42d6:	85 91       	lpm	r24, Z+
    42d8:	93 ff       	sbrs	r25, 3
    42da:	81 91       	ld	r24, Z+
    42dc:	fd 87       	std	Y+13, r31	; 0x0d
    42de:	ec 87       	std	Y+12, r30	; 0x0c
    42e0:	88 23       	and	r24, r24
    42e2:	09 f0       	breq	.+2      	; 0x42e6 <vfprintf+0x11e>
    42e4:	b8 cf       	rjmp	.-144    	; 0x4256 <vfprintf+0x8e>
    42e6:	98 2f       	mov	r25, r24
    42e8:	95 54       	subi	r25, 0x45	; 69
    42ea:	93 30       	cpi	r25, 0x03	; 3
    42ec:	18 f0       	brcs	.+6      	; 0x42f4 <vfprintf+0x12c>
    42ee:	90 52       	subi	r25, 0x20	; 32
    42f0:	93 30       	cpi	r25, 0x03	; 3
    42f2:	38 f4       	brcc	.+14     	; 0x4302 <vfprintf+0x13a>
    42f4:	24 e0       	ldi	r18, 0x04	; 4
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	a2 0e       	add	r10, r18
    42fa:	b3 1e       	adc	r11, r19
    42fc:	3f e3       	ldi	r19, 0x3F	; 63
    42fe:	39 83       	std	Y+1, r19	; 0x01
    4300:	0f c0       	rjmp	.+30     	; 0x4320 <vfprintf+0x158>
    4302:	83 36       	cpi	r24, 0x63	; 99
    4304:	31 f0       	breq	.+12     	; 0x4312 <vfprintf+0x14a>
    4306:	83 37       	cpi	r24, 0x73	; 115
    4308:	81 f0       	breq	.+32     	; 0x432a <vfprintf+0x162>
    430a:	83 35       	cpi	r24, 0x53	; 83
    430c:	09 f0       	breq	.+2      	; 0x4310 <vfprintf+0x148>
    430e:	5a c0       	rjmp	.+180    	; 0x43c4 <vfprintf+0x1fc>
    4310:	22 c0       	rjmp	.+68     	; 0x4356 <vfprintf+0x18e>
    4312:	f5 01       	movw	r30, r10
    4314:	80 81       	ld	r24, Z
    4316:	89 83       	std	Y+1, r24	; 0x01
    4318:	22 e0       	ldi	r18, 0x02	; 2
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	a2 0e       	add	r10, r18
    431e:	b3 1e       	adc	r11, r19
    4320:	21 e0       	ldi	r18, 0x01	; 1
    4322:	c2 2e       	mov	r12, r18
    4324:	d1 2c       	mov	r13, r1
    4326:	42 01       	movw	r8, r4
    4328:	14 c0       	rjmp	.+40     	; 0x4352 <vfprintf+0x18a>
    432a:	92 e0       	ldi	r25, 0x02	; 2
    432c:	29 2e       	mov	r2, r25
    432e:	31 2c       	mov	r3, r1
    4330:	2a 0c       	add	r2, r10
    4332:	3b 1c       	adc	r3, r11
    4334:	f5 01       	movw	r30, r10
    4336:	80 80       	ld	r8, Z
    4338:	91 80       	ldd	r9, Z+1	; 0x01
    433a:	16 ff       	sbrs	r17, 6
    433c:	03 c0       	rjmp	.+6      	; 0x4344 <vfprintf+0x17c>
    433e:	6f 2d       	mov	r22, r15
    4340:	70 e0       	ldi	r23, 0x00	; 0
    4342:	02 c0       	rjmp	.+4      	; 0x4348 <vfprintf+0x180>
    4344:	6f ef       	ldi	r22, 0xFF	; 255
    4346:	7f ef       	ldi	r23, 0xFF	; 255
    4348:	c4 01       	movw	r24, r8
    434a:	0e 94 f6 22 	call	0x45ec	; 0x45ec <strnlen>
    434e:	6c 01       	movw	r12, r24
    4350:	51 01       	movw	r10, r2
    4352:	1f 77       	andi	r17, 0x7F	; 127
    4354:	15 c0       	rjmp	.+42     	; 0x4380 <vfprintf+0x1b8>
    4356:	82 e0       	ldi	r24, 0x02	; 2
    4358:	28 2e       	mov	r2, r24
    435a:	31 2c       	mov	r3, r1
    435c:	2a 0c       	add	r2, r10
    435e:	3b 1c       	adc	r3, r11
    4360:	f5 01       	movw	r30, r10
    4362:	80 80       	ld	r8, Z
    4364:	91 80       	ldd	r9, Z+1	; 0x01
    4366:	16 ff       	sbrs	r17, 6
    4368:	03 c0       	rjmp	.+6      	; 0x4370 <vfprintf+0x1a8>
    436a:	6f 2d       	mov	r22, r15
    436c:	70 e0       	ldi	r23, 0x00	; 0
    436e:	02 c0       	rjmp	.+4      	; 0x4374 <vfprintf+0x1ac>
    4370:	6f ef       	ldi	r22, 0xFF	; 255
    4372:	7f ef       	ldi	r23, 0xFF	; 255
    4374:	c4 01       	movw	r24, r8
    4376:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <strnlen_P>
    437a:	6c 01       	movw	r12, r24
    437c:	10 68       	ori	r17, 0x80	; 128
    437e:	51 01       	movw	r10, r2
    4380:	13 fd       	sbrc	r17, 3
    4382:	1c c0       	rjmp	.+56     	; 0x43bc <vfprintf+0x1f4>
    4384:	06 c0       	rjmp	.+12     	; 0x4392 <vfprintf+0x1ca>
    4386:	80 e2       	ldi	r24, 0x20	; 32
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	b3 01       	movw	r22, r6
    438c:	0e 94 01 23 	call	0x4602	; 0x4602 <fputc>
    4390:	ea 94       	dec	r14
    4392:	8e 2d       	mov	r24, r14
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	c8 16       	cp	r12, r24
    4398:	d9 06       	cpc	r13, r25
    439a:	a8 f3       	brcs	.-22     	; 0x4386 <vfprintf+0x1be>
    439c:	0f c0       	rjmp	.+30     	; 0x43bc <vfprintf+0x1f4>
    439e:	f4 01       	movw	r30, r8
    43a0:	17 fd       	sbrc	r17, 7
    43a2:	85 91       	lpm	r24, Z+
    43a4:	17 ff       	sbrs	r17, 7
    43a6:	81 91       	ld	r24, Z+
    43a8:	4f 01       	movw	r8, r30
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	b3 01       	movw	r22, r6
    43ae:	0e 94 01 23 	call	0x4602	; 0x4602 <fputc>
    43b2:	e1 10       	cpse	r14, r1
    43b4:	ea 94       	dec	r14
    43b6:	08 94       	sec
    43b8:	c1 08       	sbc	r12, r1
    43ba:	d1 08       	sbc	r13, r1
    43bc:	c1 14       	cp	r12, r1
    43be:	d1 04       	cpc	r13, r1
    43c0:	71 f7       	brne	.-36     	; 0x439e <vfprintf+0x1d6>
    43c2:	e7 c0       	rjmp	.+462    	; 0x4592 <vfprintf+0x3ca>
    43c4:	84 36       	cpi	r24, 0x64	; 100
    43c6:	11 f0       	breq	.+4      	; 0x43cc <vfprintf+0x204>
    43c8:	89 36       	cpi	r24, 0x69	; 105
    43ca:	51 f5       	brne	.+84     	; 0x4420 <vfprintf+0x258>
    43cc:	f5 01       	movw	r30, r10
    43ce:	17 ff       	sbrs	r17, 7
    43d0:	07 c0       	rjmp	.+14     	; 0x43e0 <vfprintf+0x218>
    43d2:	80 81       	ld	r24, Z
    43d4:	91 81       	ldd	r25, Z+1	; 0x01
    43d6:	a2 81       	ldd	r26, Z+2	; 0x02
    43d8:	b3 81       	ldd	r27, Z+3	; 0x03
    43da:	24 e0       	ldi	r18, 0x04	; 4
    43dc:	30 e0       	ldi	r19, 0x00	; 0
    43de:	08 c0       	rjmp	.+16     	; 0x43f0 <vfprintf+0x228>
    43e0:	80 81       	ld	r24, Z
    43e2:	91 81       	ldd	r25, Z+1	; 0x01
    43e4:	aa 27       	eor	r26, r26
    43e6:	97 fd       	sbrc	r25, 7
    43e8:	a0 95       	com	r26
    43ea:	ba 2f       	mov	r27, r26
    43ec:	22 e0       	ldi	r18, 0x02	; 2
    43ee:	30 e0       	ldi	r19, 0x00	; 0
    43f0:	a2 0e       	add	r10, r18
    43f2:	b3 1e       	adc	r11, r19
    43f4:	01 2f       	mov	r16, r17
    43f6:	0f 76       	andi	r16, 0x6F	; 111
    43f8:	b7 ff       	sbrs	r27, 7
    43fa:	08 c0       	rjmp	.+16     	; 0x440c <vfprintf+0x244>
    43fc:	b0 95       	com	r27
    43fe:	a0 95       	com	r26
    4400:	90 95       	com	r25
    4402:	81 95       	neg	r24
    4404:	9f 4f       	sbci	r25, 0xFF	; 255
    4406:	af 4f       	sbci	r26, 0xFF	; 255
    4408:	bf 4f       	sbci	r27, 0xFF	; 255
    440a:	00 68       	ori	r16, 0x80	; 128
    440c:	bc 01       	movw	r22, r24
    440e:	cd 01       	movw	r24, r26
    4410:	a2 01       	movw	r20, r4
    4412:	2a e0       	ldi	r18, 0x0A	; 10
    4414:	30 e0       	ldi	r19, 0x00	; 0
    4416:	0e 94 2d 23 	call	0x465a	; 0x465a <__ultoa_invert>
    441a:	d8 2e       	mov	r13, r24
    441c:	d4 18       	sub	r13, r4
    441e:	3f c0       	rjmp	.+126    	; 0x449e <vfprintf+0x2d6>
    4420:	85 37       	cpi	r24, 0x75	; 117
    4422:	21 f4       	brne	.+8      	; 0x442c <vfprintf+0x264>
    4424:	1f 7e       	andi	r17, 0xEF	; 239
    4426:	2a e0       	ldi	r18, 0x0A	; 10
    4428:	30 e0       	ldi	r19, 0x00	; 0
    442a:	20 c0       	rjmp	.+64     	; 0x446c <vfprintf+0x2a4>
    442c:	19 7f       	andi	r17, 0xF9	; 249
    442e:	8f 36       	cpi	r24, 0x6F	; 111
    4430:	a9 f0       	breq	.+42     	; 0x445c <vfprintf+0x294>
    4432:	80 37       	cpi	r24, 0x70	; 112
    4434:	20 f4       	brcc	.+8      	; 0x443e <vfprintf+0x276>
    4436:	88 35       	cpi	r24, 0x58	; 88
    4438:	09 f0       	breq	.+2      	; 0x443c <vfprintf+0x274>
    443a:	ae c0       	rjmp	.+348    	; 0x4598 <vfprintf+0x3d0>
    443c:	0b c0       	rjmp	.+22     	; 0x4454 <vfprintf+0x28c>
    443e:	80 37       	cpi	r24, 0x70	; 112
    4440:	21 f0       	breq	.+8      	; 0x444a <vfprintf+0x282>
    4442:	88 37       	cpi	r24, 0x78	; 120
    4444:	09 f0       	breq	.+2      	; 0x4448 <vfprintf+0x280>
    4446:	a8 c0       	rjmp	.+336    	; 0x4598 <vfprintf+0x3d0>
    4448:	01 c0       	rjmp	.+2      	; 0x444c <vfprintf+0x284>
    444a:	10 61       	ori	r17, 0x10	; 16
    444c:	14 ff       	sbrs	r17, 4
    444e:	09 c0       	rjmp	.+18     	; 0x4462 <vfprintf+0x29a>
    4450:	14 60       	ori	r17, 0x04	; 4
    4452:	07 c0       	rjmp	.+14     	; 0x4462 <vfprintf+0x29a>
    4454:	14 ff       	sbrs	r17, 4
    4456:	08 c0       	rjmp	.+16     	; 0x4468 <vfprintf+0x2a0>
    4458:	16 60       	ori	r17, 0x06	; 6
    445a:	06 c0       	rjmp	.+12     	; 0x4468 <vfprintf+0x2a0>
    445c:	28 e0       	ldi	r18, 0x08	; 8
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	05 c0       	rjmp	.+10     	; 0x446c <vfprintf+0x2a4>
    4462:	20 e1       	ldi	r18, 0x10	; 16
    4464:	30 e0       	ldi	r19, 0x00	; 0
    4466:	02 c0       	rjmp	.+4      	; 0x446c <vfprintf+0x2a4>
    4468:	20 e1       	ldi	r18, 0x10	; 16
    446a:	32 e0       	ldi	r19, 0x02	; 2
    446c:	f5 01       	movw	r30, r10
    446e:	17 ff       	sbrs	r17, 7
    4470:	07 c0       	rjmp	.+14     	; 0x4480 <vfprintf+0x2b8>
    4472:	60 81       	ld	r22, Z
    4474:	71 81       	ldd	r23, Z+1	; 0x01
    4476:	82 81       	ldd	r24, Z+2	; 0x02
    4478:	93 81       	ldd	r25, Z+3	; 0x03
    447a:	44 e0       	ldi	r20, 0x04	; 4
    447c:	50 e0       	ldi	r21, 0x00	; 0
    447e:	06 c0       	rjmp	.+12     	; 0x448c <vfprintf+0x2c4>
    4480:	60 81       	ld	r22, Z
    4482:	71 81       	ldd	r23, Z+1	; 0x01
    4484:	80 e0       	ldi	r24, 0x00	; 0
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	42 e0       	ldi	r20, 0x02	; 2
    448a:	50 e0       	ldi	r21, 0x00	; 0
    448c:	a4 0e       	add	r10, r20
    448e:	b5 1e       	adc	r11, r21
    4490:	a2 01       	movw	r20, r4
    4492:	0e 94 2d 23 	call	0x465a	; 0x465a <__ultoa_invert>
    4496:	d8 2e       	mov	r13, r24
    4498:	d4 18       	sub	r13, r4
    449a:	01 2f       	mov	r16, r17
    449c:	0f 77       	andi	r16, 0x7F	; 127
    449e:	06 ff       	sbrs	r16, 6
    44a0:	09 c0       	rjmp	.+18     	; 0x44b4 <vfprintf+0x2ec>
    44a2:	0e 7f       	andi	r16, 0xFE	; 254
    44a4:	df 14       	cp	r13, r15
    44a6:	30 f4       	brcc	.+12     	; 0x44b4 <vfprintf+0x2ec>
    44a8:	04 ff       	sbrs	r16, 4
    44aa:	06 c0       	rjmp	.+12     	; 0x44b8 <vfprintf+0x2f0>
    44ac:	02 fd       	sbrc	r16, 2
    44ae:	04 c0       	rjmp	.+8      	; 0x44b8 <vfprintf+0x2f0>
    44b0:	0f 7e       	andi	r16, 0xEF	; 239
    44b2:	02 c0       	rjmp	.+4      	; 0x44b8 <vfprintf+0x2f0>
    44b4:	1d 2d       	mov	r17, r13
    44b6:	01 c0       	rjmp	.+2      	; 0x44ba <vfprintf+0x2f2>
    44b8:	1f 2d       	mov	r17, r15
    44ba:	80 2f       	mov	r24, r16
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	04 ff       	sbrs	r16, 4
    44c0:	0c c0       	rjmp	.+24     	; 0x44da <vfprintf+0x312>
    44c2:	fe 01       	movw	r30, r28
    44c4:	ed 0d       	add	r30, r13
    44c6:	f1 1d       	adc	r31, r1
    44c8:	20 81       	ld	r18, Z
    44ca:	20 33       	cpi	r18, 0x30	; 48
    44cc:	11 f4       	brne	.+4      	; 0x44d2 <vfprintf+0x30a>
    44ce:	09 7e       	andi	r16, 0xE9	; 233
    44d0:	09 c0       	rjmp	.+18     	; 0x44e4 <vfprintf+0x31c>
    44d2:	02 ff       	sbrs	r16, 2
    44d4:	06 c0       	rjmp	.+12     	; 0x44e2 <vfprintf+0x31a>
    44d6:	1e 5f       	subi	r17, 0xFE	; 254
    44d8:	05 c0       	rjmp	.+10     	; 0x44e4 <vfprintf+0x31c>
    44da:	86 78       	andi	r24, 0x86	; 134
    44dc:	90 70       	andi	r25, 0x00	; 0
    44de:	00 97       	sbiw	r24, 0x00	; 0
    44e0:	09 f0       	breq	.+2      	; 0x44e4 <vfprintf+0x31c>
    44e2:	1f 5f       	subi	r17, 0xFF	; 255
    44e4:	80 2e       	mov	r8, r16
    44e6:	99 24       	eor	r9, r9
    44e8:	03 fd       	sbrc	r16, 3
    44ea:	12 c0       	rjmp	.+36     	; 0x4510 <vfprintf+0x348>
    44ec:	00 ff       	sbrs	r16, 0
    44ee:	0d c0       	rjmp	.+26     	; 0x450a <vfprintf+0x342>
    44f0:	fd 2c       	mov	r15, r13
    44f2:	1e 15       	cp	r17, r14
    44f4:	50 f4       	brcc	.+20     	; 0x450a <vfprintf+0x342>
    44f6:	fe 0c       	add	r15, r14
    44f8:	f1 1a       	sub	r15, r17
    44fa:	1e 2d       	mov	r17, r14
    44fc:	06 c0       	rjmp	.+12     	; 0x450a <vfprintf+0x342>
    44fe:	80 e2       	ldi	r24, 0x20	; 32
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	b3 01       	movw	r22, r6
    4504:	0e 94 01 23 	call	0x4602	; 0x4602 <fputc>
    4508:	1f 5f       	subi	r17, 0xFF	; 255
    450a:	1e 15       	cp	r17, r14
    450c:	c0 f3       	brcs	.-16     	; 0x44fe <vfprintf+0x336>
    450e:	04 c0       	rjmp	.+8      	; 0x4518 <vfprintf+0x350>
    4510:	1e 15       	cp	r17, r14
    4512:	10 f4       	brcc	.+4      	; 0x4518 <vfprintf+0x350>
    4514:	e1 1a       	sub	r14, r17
    4516:	01 c0       	rjmp	.+2      	; 0x451a <vfprintf+0x352>
    4518:	ee 24       	eor	r14, r14
    451a:	84 fe       	sbrs	r8, 4
    451c:	0f c0       	rjmp	.+30     	; 0x453c <vfprintf+0x374>
    451e:	80 e3       	ldi	r24, 0x30	; 48
    4520:	90 e0       	ldi	r25, 0x00	; 0
    4522:	b3 01       	movw	r22, r6
    4524:	0e 94 01 23 	call	0x4602	; 0x4602 <fputc>
    4528:	82 fe       	sbrs	r8, 2
    452a:	1f c0       	rjmp	.+62     	; 0x456a <vfprintf+0x3a2>
    452c:	81 fe       	sbrs	r8, 1
    452e:	03 c0       	rjmp	.+6      	; 0x4536 <vfprintf+0x36e>
    4530:	88 e5       	ldi	r24, 0x58	; 88
    4532:	90 e0       	ldi	r25, 0x00	; 0
    4534:	10 c0       	rjmp	.+32     	; 0x4556 <vfprintf+0x38e>
    4536:	88 e7       	ldi	r24, 0x78	; 120
    4538:	90 e0       	ldi	r25, 0x00	; 0
    453a:	0d c0       	rjmp	.+26     	; 0x4556 <vfprintf+0x38e>
    453c:	c4 01       	movw	r24, r8
    453e:	86 78       	andi	r24, 0x86	; 134
    4540:	90 70       	andi	r25, 0x00	; 0
    4542:	00 97       	sbiw	r24, 0x00	; 0
    4544:	91 f0       	breq	.+36     	; 0x456a <vfprintf+0x3a2>
    4546:	81 fc       	sbrc	r8, 1
    4548:	02 c0       	rjmp	.+4      	; 0x454e <vfprintf+0x386>
    454a:	80 e2       	ldi	r24, 0x20	; 32
    454c:	01 c0       	rjmp	.+2      	; 0x4550 <vfprintf+0x388>
    454e:	8b e2       	ldi	r24, 0x2B	; 43
    4550:	07 fd       	sbrc	r16, 7
    4552:	8d e2       	ldi	r24, 0x2D	; 45
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	b3 01       	movw	r22, r6
    4558:	0e 94 01 23 	call	0x4602	; 0x4602 <fputc>
    455c:	06 c0       	rjmp	.+12     	; 0x456a <vfprintf+0x3a2>
    455e:	80 e3       	ldi	r24, 0x30	; 48
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	b3 01       	movw	r22, r6
    4564:	0e 94 01 23 	call	0x4602	; 0x4602 <fputc>
    4568:	fa 94       	dec	r15
    456a:	df 14       	cp	r13, r15
    456c:	c0 f3       	brcs	.-16     	; 0x455e <vfprintf+0x396>
    456e:	da 94       	dec	r13
    4570:	f2 01       	movw	r30, r4
    4572:	ed 0d       	add	r30, r13
    4574:	f1 1d       	adc	r31, r1
    4576:	80 81       	ld	r24, Z
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	b3 01       	movw	r22, r6
    457c:	0e 94 01 23 	call	0x4602	; 0x4602 <fputc>
    4580:	dd 20       	and	r13, r13
    4582:	a9 f7       	brne	.-22     	; 0x456e <vfprintf+0x3a6>
    4584:	06 c0       	rjmp	.+12     	; 0x4592 <vfprintf+0x3ca>
    4586:	80 e2       	ldi	r24, 0x20	; 32
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	b3 01       	movw	r22, r6
    458c:	0e 94 01 23 	call	0x4602	; 0x4602 <fputc>
    4590:	ea 94       	dec	r14
    4592:	ee 20       	and	r14, r14
    4594:	c1 f7       	brne	.-16     	; 0x4586 <vfprintf+0x3be>
    4596:	40 ce       	rjmp	.-896    	; 0x4218 <vfprintf+0x50>
    4598:	f3 01       	movw	r30, r6
    459a:	86 81       	ldd	r24, Z+6	; 0x06
    459c:	97 81       	ldd	r25, Z+7	; 0x07
    459e:	02 c0       	rjmp	.+4      	; 0x45a4 <vfprintf+0x3dc>
    45a0:	8f ef       	ldi	r24, 0xFF	; 255
    45a2:	9f ef       	ldi	r25, 0xFF	; 255
    45a4:	2d 96       	adiw	r28, 0x0d	; 13
    45a6:	0f b6       	in	r0, 0x3f	; 63
    45a8:	f8 94       	cli
    45aa:	de bf       	out	0x3e, r29	; 62
    45ac:	0f be       	out	0x3f, r0	; 63
    45ae:	cd bf       	out	0x3d, r28	; 61
    45b0:	df 91       	pop	r29
    45b2:	cf 91       	pop	r28
    45b4:	1f 91       	pop	r17
    45b6:	0f 91       	pop	r16
    45b8:	ff 90       	pop	r15
    45ba:	ef 90       	pop	r14
    45bc:	df 90       	pop	r13
    45be:	cf 90       	pop	r12
    45c0:	bf 90       	pop	r11
    45c2:	af 90       	pop	r10
    45c4:	9f 90       	pop	r9
    45c6:	8f 90       	pop	r8
    45c8:	7f 90       	pop	r7
    45ca:	6f 90       	pop	r6
    45cc:	5f 90       	pop	r5
    45ce:	4f 90       	pop	r4
    45d0:	3f 90       	pop	r3
    45d2:	2f 90       	pop	r2
    45d4:	08 95       	ret

000045d6 <strnlen_P>:
    45d6:	fc 01       	movw	r30, r24
    45d8:	05 90       	lpm	r0, Z+
    45da:	61 50       	subi	r22, 0x01	; 1
    45dc:	70 40       	sbci	r23, 0x00	; 0
    45de:	01 10       	cpse	r0, r1
    45e0:	d8 f7       	brcc	.-10     	; 0x45d8 <strnlen_P+0x2>
    45e2:	80 95       	com	r24
    45e4:	90 95       	com	r25
    45e6:	8e 0f       	add	r24, r30
    45e8:	9f 1f       	adc	r25, r31
    45ea:	08 95       	ret

000045ec <strnlen>:
    45ec:	fc 01       	movw	r30, r24
    45ee:	61 50       	subi	r22, 0x01	; 1
    45f0:	70 40       	sbci	r23, 0x00	; 0
    45f2:	01 90       	ld	r0, Z+
    45f4:	01 10       	cpse	r0, r1
    45f6:	d8 f7       	brcc	.-10     	; 0x45ee <strnlen+0x2>
    45f8:	80 95       	com	r24
    45fa:	90 95       	com	r25
    45fc:	8e 0f       	add	r24, r30
    45fe:	9f 1f       	adc	r25, r31
    4600:	08 95       	ret

00004602 <fputc>:
    4602:	0f 93       	push	r16
    4604:	1f 93       	push	r17
    4606:	cf 93       	push	r28
    4608:	df 93       	push	r29
    460a:	8c 01       	movw	r16, r24
    460c:	eb 01       	movw	r28, r22
    460e:	8b 81       	ldd	r24, Y+3	; 0x03
    4610:	81 ff       	sbrs	r24, 1
    4612:	1b c0       	rjmp	.+54     	; 0x464a <fputc+0x48>
    4614:	82 ff       	sbrs	r24, 2
    4616:	0d c0       	rjmp	.+26     	; 0x4632 <fputc+0x30>
    4618:	2e 81       	ldd	r18, Y+6	; 0x06
    461a:	3f 81       	ldd	r19, Y+7	; 0x07
    461c:	8c 81       	ldd	r24, Y+4	; 0x04
    461e:	9d 81       	ldd	r25, Y+5	; 0x05
    4620:	28 17       	cp	r18, r24
    4622:	39 07       	cpc	r19, r25
    4624:	64 f4       	brge	.+24     	; 0x463e <fputc+0x3c>
    4626:	e8 81       	ld	r30, Y
    4628:	f9 81       	ldd	r31, Y+1	; 0x01
    462a:	01 93       	st	Z+, r16
    462c:	f9 83       	std	Y+1, r31	; 0x01
    462e:	e8 83       	st	Y, r30
    4630:	06 c0       	rjmp	.+12     	; 0x463e <fputc+0x3c>
    4632:	e8 85       	ldd	r30, Y+8	; 0x08
    4634:	f9 85       	ldd	r31, Y+9	; 0x09
    4636:	80 2f       	mov	r24, r16
    4638:	09 95       	icall
    463a:	00 97       	sbiw	r24, 0x00	; 0
    463c:	31 f4       	brne	.+12     	; 0x464a <fputc+0x48>
    463e:	8e 81       	ldd	r24, Y+6	; 0x06
    4640:	9f 81       	ldd	r25, Y+7	; 0x07
    4642:	01 96       	adiw	r24, 0x01	; 1
    4644:	9f 83       	std	Y+7, r25	; 0x07
    4646:	8e 83       	std	Y+6, r24	; 0x06
    4648:	02 c0       	rjmp	.+4      	; 0x464e <fputc+0x4c>
    464a:	0f ef       	ldi	r16, 0xFF	; 255
    464c:	1f ef       	ldi	r17, 0xFF	; 255
    464e:	c8 01       	movw	r24, r16
    4650:	df 91       	pop	r29
    4652:	cf 91       	pop	r28
    4654:	1f 91       	pop	r17
    4656:	0f 91       	pop	r16
    4658:	08 95       	ret

0000465a <__ultoa_invert>:
    465a:	fa 01       	movw	r30, r20
    465c:	aa 27       	eor	r26, r26
    465e:	28 30       	cpi	r18, 0x08	; 8
    4660:	51 f1       	breq	.+84     	; 0x46b6 <__ultoa_invert+0x5c>
    4662:	20 31       	cpi	r18, 0x10	; 16
    4664:	81 f1       	breq	.+96     	; 0x46c6 <__ultoa_invert+0x6c>
    4666:	e8 94       	clt
    4668:	6f 93       	push	r22
    466a:	6e 7f       	andi	r22, 0xFE	; 254
    466c:	6e 5f       	subi	r22, 0xFE	; 254
    466e:	7f 4f       	sbci	r23, 0xFF	; 255
    4670:	8f 4f       	sbci	r24, 0xFF	; 255
    4672:	9f 4f       	sbci	r25, 0xFF	; 255
    4674:	af 4f       	sbci	r26, 0xFF	; 255
    4676:	b1 e0       	ldi	r27, 0x01	; 1
    4678:	3e d0       	rcall	.+124    	; 0x46f6 <__ultoa_invert+0x9c>
    467a:	b4 e0       	ldi	r27, 0x04	; 4
    467c:	3c d0       	rcall	.+120    	; 0x46f6 <__ultoa_invert+0x9c>
    467e:	67 0f       	add	r22, r23
    4680:	78 1f       	adc	r23, r24
    4682:	89 1f       	adc	r24, r25
    4684:	9a 1f       	adc	r25, r26
    4686:	a1 1d       	adc	r26, r1
    4688:	68 0f       	add	r22, r24
    468a:	79 1f       	adc	r23, r25
    468c:	8a 1f       	adc	r24, r26
    468e:	91 1d       	adc	r25, r1
    4690:	a1 1d       	adc	r26, r1
    4692:	6a 0f       	add	r22, r26
    4694:	71 1d       	adc	r23, r1
    4696:	81 1d       	adc	r24, r1
    4698:	91 1d       	adc	r25, r1
    469a:	a1 1d       	adc	r26, r1
    469c:	20 d0       	rcall	.+64     	; 0x46de <__ultoa_invert+0x84>
    469e:	09 f4       	brne	.+2      	; 0x46a2 <__ultoa_invert+0x48>
    46a0:	68 94       	set
    46a2:	3f 91       	pop	r19
    46a4:	2a e0       	ldi	r18, 0x0A	; 10
    46a6:	26 9f       	mul	r18, r22
    46a8:	11 24       	eor	r1, r1
    46aa:	30 19       	sub	r19, r0
    46ac:	30 5d       	subi	r19, 0xD0	; 208
    46ae:	31 93       	st	Z+, r19
    46b0:	de f6       	brtc	.-74     	; 0x4668 <__ultoa_invert+0xe>
    46b2:	cf 01       	movw	r24, r30
    46b4:	08 95       	ret
    46b6:	46 2f       	mov	r20, r22
    46b8:	47 70       	andi	r20, 0x07	; 7
    46ba:	40 5d       	subi	r20, 0xD0	; 208
    46bc:	41 93       	st	Z+, r20
    46be:	b3 e0       	ldi	r27, 0x03	; 3
    46c0:	0f d0       	rcall	.+30     	; 0x46e0 <__ultoa_invert+0x86>
    46c2:	c9 f7       	brne	.-14     	; 0x46b6 <__ultoa_invert+0x5c>
    46c4:	f6 cf       	rjmp	.-20     	; 0x46b2 <__ultoa_invert+0x58>
    46c6:	46 2f       	mov	r20, r22
    46c8:	4f 70       	andi	r20, 0x0F	; 15
    46ca:	40 5d       	subi	r20, 0xD0	; 208
    46cc:	4a 33       	cpi	r20, 0x3A	; 58
    46ce:	18 f0       	brcs	.+6      	; 0x46d6 <__ultoa_invert+0x7c>
    46d0:	49 5d       	subi	r20, 0xD9	; 217
    46d2:	31 fd       	sbrc	r19, 1
    46d4:	40 52       	subi	r20, 0x20	; 32
    46d6:	41 93       	st	Z+, r20
    46d8:	02 d0       	rcall	.+4      	; 0x46de <__ultoa_invert+0x84>
    46da:	a9 f7       	brne	.-22     	; 0x46c6 <__ultoa_invert+0x6c>
    46dc:	ea cf       	rjmp	.-44     	; 0x46b2 <__ultoa_invert+0x58>
    46de:	b4 e0       	ldi	r27, 0x04	; 4
    46e0:	a6 95       	lsr	r26
    46e2:	97 95       	ror	r25
    46e4:	87 95       	ror	r24
    46e6:	77 95       	ror	r23
    46e8:	67 95       	ror	r22
    46ea:	ba 95       	dec	r27
    46ec:	c9 f7       	brne	.-14     	; 0x46e0 <__ultoa_invert+0x86>
    46ee:	00 97       	sbiw	r24, 0x00	; 0
    46f0:	61 05       	cpc	r22, r1
    46f2:	71 05       	cpc	r23, r1
    46f4:	08 95       	ret
    46f6:	9b 01       	movw	r18, r22
    46f8:	ac 01       	movw	r20, r24
    46fa:	0a 2e       	mov	r0, r26
    46fc:	06 94       	lsr	r0
    46fe:	57 95       	ror	r21
    4700:	47 95       	ror	r20
    4702:	37 95       	ror	r19
    4704:	27 95       	ror	r18
    4706:	ba 95       	dec	r27
    4708:	c9 f7       	brne	.-14     	; 0x46fc <__ultoa_invert+0xa2>
    470a:	62 0f       	add	r22, r18
    470c:	73 1f       	adc	r23, r19
    470e:	84 1f       	adc	r24, r20
    4710:	95 1f       	adc	r25, r21
    4712:	a0 1d       	adc	r26, r0
    4714:	08 95       	ret

00004716 <_exit>:
    4716:	f8 94       	cli

00004718 <__stop_program>:
    4718:	ff cf       	rjmp	.-2      	; 0x4718 <__stop_program>
