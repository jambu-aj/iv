
GccApplication1_IVFW2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00004f28  00004fbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004f28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000725  008001a0  008001a0  0000505c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000505c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00005728  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  000057b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003162  00000000  00000000  000058d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ff  00000000  00000000  00008a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000133a  00000000  00000000  00009331  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dac  00000000  00000000  0000a66c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000091a  00000000  00000000  0000b418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005a1b  00000000  00000000  0000bd32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0001174d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 e8 26 	jmp	0x4dd0	; 0x4dd0 <__vector_20>
      54:	0c 94 16 27 	jmp	0x4e2c	; 0x4e2c <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e2       	ldi	r30, 0x28	; 40
      a0:	ff e4       	ldi	r31, 0x4F	; 79
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 3a       	cpi	r26, 0xA0	; 160
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	18 e0       	ldi	r17, 0x08	; 8
      b4:	a0 ea       	ldi	r26, 0xA0	; 160
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a5 3c       	cpi	r26, 0xC5	; 197
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 2e 24 	call	0x485c	; 0x485c <main>
      c6:	0c 94 92 27 	jmp	0x4f24	; 0x4f24 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;	/* Disable SPI function */
      ce:	1c bc       	out	0x2c, r1	; 44
	PORTB &= ~(SS);	// SS high /*NOTE: MUST PULL UP ANY OTHER CS GPIO BEING USED TO PREVENT CROSSTALK*/
      d0:	2c 98       	cbi	0x05, 4	; 5
	PORTB &= ~(1<<PORTB2); // PULL UP AFE's CS BEFORE SD COMMUNICATION
      d2:	2a 98       	cbi	0x05, 2	; 5
	DDRB &= ~(SS|MOSI|SCK); // !SS,SCK and MOSI outputs
      d4:	84 b1       	in	r24, 0x04	; 4
      d6:	8f 74       	andi	r24, 0x4F	; 79
      d8:	84 b9       	out	0x04, r24	; 4
	
// 	{	/* Remove this block if no socket power control */
// 		PORTE |= _BV(7);		/* Socket power off (PE7=high) */
// 		for (Timer1 = 20; Timer1; );	/* Wait for 20ms */
// 	}
}
      da:	08 95       	ret

000000dc <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
      dc:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
      de:	0d b4       	in	r0, 0x2d	; 45
      e0:	07 fe       	sbrs	r0, 7
      e2:	fd cf       	rjmp	.-6      	; 0xde <xchg_spi+0x2>
	return SPDR;
      e4:	8e b5       	in	r24, 0x2e	; 46
}
      e6:	08 95       	ret

000000e8 <wait_ready>:
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	BYTE d;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
      e8:	82 e3       	ldi	r24, 0x32	; 50
      ea:	80 93 a0 01 	sts	0x01A0, r24
	do
		d = xchg_spi(0xFF);
      ee:	8f ef       	ldi	r24, 0xFF	; 255
      f0:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
	while (d != 0xFF && Timer2);
      f4:	8f 3f       	cpi	r24, 0xFF	; 255
      f6:	21 f0       	breq	.+8      	; 0x100 <wait_ready+0x18>
      f8:	90 91 a0 01 	lds	r25, 0x01A0
      fc:	99 23       	and	r25, r25
      fe:	b9 f7       	brne	.-18     	; 0xee <wait_ready+0x6>

	return (d == 0xFF) ? 1 : 0;
     100:	21 e0       	ldi	r18, 0x01	; 1
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	8f 3f       	cpi	r24, 0xFF	; 255
     106:	11 f0       	breq	.+4      	; 0x10c <wait_ready+0x24>
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	30 e0       	ldi	r19, 0x00	; 0
}
     10c:	82 2f       	mov	r24, r18
     10e:	93 2f       	mov	r25, r19
     110:	08 95       	ret

00000112 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
     112:	2c 9a       	sbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
     114:	8f ef       	ldi	r24, 0xFF	; 255
     116:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
}
     11a:	08 95       	ret

0000011c <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
     11c:	2c 98       	cbi	0x05, 4	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
     11e:	8f ef       	ldi	r24, 0xFF	; 255
     120:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>

	if (wait_ready()) return 1;	/* OK */
     124:	0e 94 74 00 	call	0xe8	; 0xe8 <wait_ready>
     128:	00 97       	sbiw	r24, 0x00	; 0
     12a:	29 f4       	brne	.+10     	; 0x136 <select+0x1a>
	deselect();
     12c:	0e 94 89 00 	call	0x112	; 0x112 <deselect>
	return 0;	/* Timeout */
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	08 95       	ret
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready()) return 1;	/* OK */
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
	deselect();
	return 0;	/* Timeout */
}
     13a:	08 95       	ret

0000013c <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	ec 01       	movw	r28, r24
     146:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
     148:	84 e1       	ldi	r24, 0x14	; 20
     14a:	80 93 a1 01 	sts	0x01A1, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
     14e:	8f ef       	ldi	r24, 0xFF	; 255
     150:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
	} while ((token == 0xFF) && Timer1);
     154:	8f 3f       	cpi	r24, 0xFF	; 255
     156:	39 f4       	brne	.+14     	; 0x166 <rcvr_datablock+0x2a>
     158:	80 91 a1 01 	lds	r24, 0x01A1
     15c:	88 23       	and	r24, r24
     15e:	b9 f7       	brne	.-18     	; 0x14e <rcvr_datablock+0x12>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	1e c0       	rjmp	.+60     	; 0x1a2 <rcvr_datablock+0x66>
     166:	8e 3f       	cpi	r24, 0xFE	; 254
     168:	d1 f4       	brne	.+52     	; 0x19e <rcvr_datablock+0x62>
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block */
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     16a:	8f ef       	ldi	r24, 0xFF	; 255
     16c:	8e bd       	out	0x2e, r24	; 46
     16e:	0d b4       	in	r0, 0x2d	; 45
     170:	07 fe       	sbrs	r0, 7
     172:	fd cf       	rjmp	.-6      	; 0x16e <rcvr_datablock+0x32>
     174:	9e b5       	in	r25, 0x2e	; 46
     176:	98 83       	st	Y, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
     178:	8e bd       	out	0x2e, r24	; 46
     17a:	0d b4       	in	r0, 0x2d	; 45
     17c:	07 fe       	sbrs	r0, 7
     17e:	fd cf       	rjmp	.-6      	; 0x17a <rcvr_datablock+0x3e>
     180:	9e b5       	in	r25, 0x2e	; 46
     182:	99 83       	std	Y+1, r25	; 0x01
/*-----------------------------------------------------------------------*/
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static
int rcvr_datablock (
     184:	22 96       	adiw	r28, 0x02	; 2
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
	} while (cnt -= 2);
     186:	02 50       	subi	r16, 0x02	; 2
     188:	10 40       	sbci	r17, 0x00	; 0
     18a:	81 f7       	brne	.-32     	; 0x16c <rcvr_datablock+0x30>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
     18c:	8f ef       	ldi	r24, 0xFF	; 255
     18e:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
	xchg_spi(0xFF);
     192:	8f ef       	ldi	r24, 0xFF	; 255
     194:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>

	return 1;						/* Return with success */
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <rcvr_datablock+0x66>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	1f 91       	pop	r17
     1a8:	0f 91       	pop	r16
     1aa:	08 95       	ret

000001ac <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     1ac:	1f 93       	push	r17
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	ec 01       	movw	r28, r24
     1b4:	16 2f       	mov	r17, r22
	BYTE resp;


	if (!wait_ready()) return 0;
     1b6:	0e 94 74 00 	call	0xe8	; 0xe8 <wait_ready>
     1ba:	00 97       	sbiw	r24, 0x00	; 0
     1bc:	41 f1       	breq	.+80     	; 0x20e <xmit_datablock+0x62>

	xchg_spi(token);					/* Xmit data token */
     1be:	81 2f       	mov	r24, r17
     1c0:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
     1c4:	1d 3f       	cpi	r17, 0xFD	; 253
     1c6:	31 f1       	breq	.+76     	; 0x214 <xmit_datablock+0x68>
/*-----------------------------------------------------------------------*/
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (
     1c8:	ce 01       	movw	r24, r28
     1ca:	80 50       	subi	r24, 0x00	; 0
     1cc:	9e 4f       	sbci	r25, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     1ce:	28 81       	ld	r18, Y
     1d0:	2e bd       	out	0x2e, r18	; 46
     1d2:	0d b4       	in	r0, 0x2d	; 45
     1d4:	07 fe       	sbrs	r0, 7
     1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <xmit_datablock+0x26>
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     1d8:	29 81       	ldd	r18, Y+1	; 0x01
     1da:	2e bd       	out	0x2e, r18	; 46
/*-----------------------------------------------------------------------*/
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (
     1dc:	22 96       	adiw	r28, 0x02	; 2
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
     1de:	0d b4       	in	r0, 0x2d	; 45
     1e0:	07 fe       	sbrs	r0, 7
     1e2:	fd cf       	rjmp	.-6      	; 0x1de <xmit_datablock+0x32>
	} while (cnt -= 2);
     1e4:	8c 17       	cp	r24, r28
     1e6:	9d 07       	cpc	r25, r29
     1e8:	91 f7       	brne	.-28     	; 0x1ce <xmit_datablock+0x22>
	if (!wait_ready()) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
     1ea:	8f ef       	ldi	r24, 0xFF	; 255
     1ec:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
		xchg_spi(0xFF);
     1f0:	8f ef       	ldi	r24, 0xFF	; 255
     1f2:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
     1fc:	8f 71       	andi	r24, 0x1F	; 31
/*-----------------------------------------------------------------------*/
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (
     1fe:	21 e0       	ldi	r18, 0x01	; 1
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	85 30       	cpi	r24, 0x05	; 5
     204:	11 f0       	breq	.+4      	; 0x20a <xmit_datablock+0x5e>
     206:	20 e0       	ldi	r18, 0x00	; 0
     208:	30 e0       	ldi	r19, 0x00	; 0
)
{
	BYTE resp;


	if (!wait_ready()) return 0;
     20a:	c9 01       	movw	r24, r18
     20c:	05 c0       	rjmp	.+10     	; 0x218 <xmit_datablock+0x6c>
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	02 c0       	rjmp	.+4      	; 0x218 <xmit_datablock+0x6c>
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	90 e0       	ldi	r25, 0x00	; 0
}
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	1f 91       	pop	r17
     21e:	08 95       	ret

00000220 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     220:	ff 92       	push	r15
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	c8 2f       	mov	r28, r24
     22c:	d4 2f       	mov	r29, r20
     22e:	15 2f       	mov	r17, r21
     230:	06 2f       	mov	r16, r22
     232:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     234:	88 23       	and	r24, r24
     236:	4c f4       	brge	.+18     	; 0x24a <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     238:	87 e3       	ldi	r24, 0x37	; 55
     23a:	40 e0       	ldi	r20, 0x00	; 0
     23c:	50 e0       	ldi	r21, 0x00	; 0
     23e:	ba 01       	movw	r22, r20
     240:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
		if (res > 1) return res;
     244:	82 30       	cpi	r24, 0x02	; 2
     246:	68 f5       	brcc	.+90     	; 0x2a2 <send_cmd+0x82>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     248:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
     24a:	0e 94 89 00 	call	0x112	; 0x112 <deselect>
	if (!select()) return 0xFF;
     24e:	0e 94 8e 00 	call	0x11c	; 0x11c <select>
     252:	00 97       	sbiw	r24, 0x00	; 0
     254:	29 f1       	breq	.+74     	; 0x2a0 <send_cmd+0x80>

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     256:	8c 2f       	mov	r24, r28
     258:	80 64       	ori	r24, 0x40	; 64
     25a:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     25e:	8f 2d       	mov	r24, r15
     260:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     264:	80 2f       	mov	r24, r16
     266:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     26a:	81 2f       	mov	r24, r17
     26c:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     270:	8d 2f       	mov	r24, r29
     272:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
     276:	cc 23       	and	r28, r28
     278:	f1 f0       	breq	.+60     	; 0x2b6 <send_cmd+0x96>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
     27a:	c8 30       	cpi	r28, 0x08	; 8
     27c:	c1 f0       	breq	.+48     	; 0x2ae <send_cmd+0x8e>
	xchg_spi(n);
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     284:	cc 30       	cpi	r28, 0x0C	; 12
     286:	19 f4       	brne	.+6      	; 0x28e <send_cmd+0x6e>
     288:	8f ef       	ldi	r24, 0xFF	; 255
     28a:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     28e:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
     290:	8f ef       	ldi	r24, 0xFF	; 255
     292:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
	while ((res & 0x80) && --n);
     296:	88 23       	and	r24, r24
     298:	24 f4       	brge	.+8      	; 0x2a2 <send_cmd+0x82>
     29a:	c1 50       	subi	r28, 0x01	; 1
     29c:	c9 f7       	brne	.-14     	; 0x290 <send_cmd+0x70>
     29e:	01 c0       	rjmp	.+2      	; 0x2a2 <send_cmd+0x82>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
     2a0:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	ff 90       	pop	r15
     2ac:	08 95       	ret
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
     2ae:	87 e8       	ldi	r24, 0x87	; 135
     2b0:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
     2b4:	ec cf       	rjmp	.-40     	; 0x28e <send_cmd+0x6e>
     2b6:	85 e9       	ldi	r24, 0x95	; 149
     2b8:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
     2bc:	e8 cf       	rjmp	.-48     	; 0x28e <send_cmd+0x6e>

000002be <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     2be:	cf 92       	push	r12
     2c0:	df 92       	push	r13
     2c2:	ef 92       	push	r14
     2c4:	ff 92       	push	r15
     2c6:	0f 93       	push	r16
     2c8:	1f 93       	push	r17
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
     2ce:	00 d0       	rcall	.+0      	; 0x2d0 <disk_initialize+0x12>
     2d0:	00 d0       	rcall	.+0      	; 0x2d2 <disk_initialize+0x14>
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
     2d6:	88 23       	and	r24, r24
     2d8:	09 f0       	breq	.+2      	; 0x2dc <disk_initialize+0x1e>
     2da:	ad c0       	rjmp	.+346    	; 0x436 <disk_initialize+0x178>
	power_off();						/* Turn off the socket power to reset the card */
     2dc:	0e 94 67 00 	call	0xce	; 0xce <power_off>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
     2e0:	80 91 00 01 	lds	r24, 0x0100
     2e4:	81 ff       	sbrs	r24, 1
     2e6:	03 c0       	rjmp	.+6      	; 0x2ee <disk_initialize+0x30>
     2e8:	80 91 00 01 	lds	r24, 0x0100
     2ec:	a5 c0       	rjmp	.+330    	; 0x438 <disk_initialize+0x17a>
	// 	{	/* Remove this block if no socket power control */
	// 		PORTE &= ~_BV(7);	/* Socket power on (PE7=low) */
	// 		DDRE |= _BV(7);
	// 		for (Timer1 = 2; Timer1; );	/* Wait for 20ms */
// 	}
	PORTB = 0xFF;
     2ee:	8f ef       	ldi	r24, 0xFF	; 255
     2f0:	85 b9       	out	0x05, r24	; 5
	PORTB |= SS|MOSI|MISO; // SS, MOSI, MISO HIGH /*NOTE: MUST PULL UP ANY OTHER CS GPIO BEING USED TO PREVENT CROSSTALK*/
     2f2:	85 b1       	in	r24, 0x05	; 5
     2f4:	80 67       	ori	r24, 0x70	; 112
     2f6:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1<<PORTB2); // PULL UP AFE's CS BEFORE SD COMMUNICATION
     2f8:	2a 9a       	sbi	0x05, 2	; 5
	DDRB  |= SS|MOSI|SCK; /* Configure SCK/MOSI/CS as output */
     2fa:	84 b1       	in	r24, 0x04	; 4
     2fc:	80 6b       	ori	r24, 0xB0	; 176
     2fe:	84 b9       	out	0x04, r24	; 4

	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     300:	81 e5       	ldi	r24, 0x51	; 81
     302:	8c bd       	out	0x2c, r24	; 44

	if (drv) return STA_NOINIT;			/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
     304:	82 e5       	ldi	r24, 0x52	; 82
     306:	8c bd       	out	0x2c, r24	; 44
     308:	0a e0       	ldi	r16, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
     30a:	8f ef       	ldi	r24, 0xFF	; 255
     30c:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
     310:	01 50       	subi	r16, 0x01	; 1
     312:	d9 f7       	brne	.-10     	; 0x30a <disk_initialize+0x4c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	40 e0       	ldi	r20, 0x00	; 0
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	ba 01       	movw	r22, r20
     31c:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     320:	81 30       	cpi	r24, 0x01	; 1
     322:	09 f0       	breq	.+2      	; 0x326 <disk_initialize+0x68>
     324:	9c c0       	rjmp	.+312    	; 0x45e <disk_initialize+0x1a0>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     326:	84 e6       	ldi	r24, 0x64	; 100
     328:	80 93 a1 01 	sts	0x01A1, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
     32c:	88 e0       	ldi	r24, 0x08	; 8
     32e:	4a ea       	ldi	r20, 0xAA	; 170
     330:	51 e0       	ldi	r21, 0x01	; 1
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     33a:	81 30       	cpi	r24, 0x01	; 1
     33c:	09 f0       	breq	.+2      	; 0x340 <disk_initialize+0x82>
     33e:	42 c0       	rjmp	.+132    	; 0x3c4 <disk_initialize+0x106>
     340:	6e 01       	movw	r12, r28
     342:	08 94       	sec
     344:	c1 1c       	adc	r12, r1
     346:	d1 1c       	adc	r13, r1

/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
     348:	8e 01       	movw	r16, r28
     34a:	0b 5f       	subi	r16, 0xFB	; 251
     34c:	1f 4f       	sbci	r17, 0xFF	; 255
     34e:	76 01       	movw	r14, r12

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
     350:	8f ef       	ldi	r24, 0xFF	; 255
     352:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
     356:	f7 01       	movw	r30, r14
     358:	81 93       	st	Z+, r24
     35a:	7f 01       	movw	r14, r30
     35c:	e0 17       	cp	r30, r16
     35e:	f1 07       	cpc	r31, r17
     360:	b9 f7       	brne	.-18     	; 0x350 <disk_initialize+0x92>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     362:	8b 81       	ldd	r24, Y+3	; 0x03
     364:	81 30       	cpi	r24, 0x01	; 1
     366:	09 f0       	breq	.+2      	; 0x36a <disk_initialize+0xac>
     368:	7a c0       	rjmp	.+244    	; 0x45e <disk_initialize+0x1a0>
     36a:	8c 81       	ldd	r24, Y+4	; 0x04
     36c:	8a 3a       	cpi	r24, 0xAA	; 170
     36e:	09 f0       	breq	.+2      	; 0x372 <disk_initialize+0xb4>
     370:	76 c0       	rjmp	.+236    	; 0x45e <disk_initialize+0x1a0>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     372:	80 91 a1 01 	lds	r24, 0x01A1
     376:	88 23       	and	r24, r24
     378:	49 f0       	breq	.+18     	; 0x38c <disk_initialize+0xce>
     37a:	89 ea       	ldi	r24, 0xA9	; 169
     37c:	40 e0       	ldi	r20, 0x00	; 0
     37e:	50 e0       	ldi	r21, 0x00	; 0
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	70 e4       	ldi	r23, 0x40	; 64
     384:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     388:	88 23       	and	r24, r24
     38a:	99 f7       	brne	.-26     	; 0x372 <disk_initialize+0xb4>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     38c:	80 91 a1 01 	lds	r24, 0x01A1
     390:	88 23       	and	r24, r24
     392:	09 f4       	brne	.+2      	; 0x396 <disk_initialize+0xd8>
     394:	64 c0       	rjmp	.+200    	; 0x45e <disk_initialize+0x1a0>
     396:	8a e3       	ldi	r24, 0x3A	; 58
     398:	40 e0       	ldi	r20, 0x00	; 0
     39a:	50 e0       	ldi	r21, 0x00	; 0
     39c:	ba 01       	movw	r22, r20
     39e:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     3a2:	88 23       	and	r24, r24
     3a4:	09 f0       	breq	.+2      	; 0x3a8 <disk_initialize+0xea>
     3a6:	5b c0       	rjmp	.+182    	; 0x45e <disk_initialize+0x1a0>
     3a8:	04 e0       	ldi	r16, 0x04	; 4
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
     3aa:	8f ef       	ldi	r24, 0xFF	; 255
     3ac:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
     3b0:	f6 01       	movw	r30, r12
     3b2:	81 93       	st	Z+, r24
     3b4:	6f 01       	movw	r12, r30
     3b6:	01 50       	subi	r16, 0x01	; 1
     3b8:	c1 f7       	brne	.-16     	; 0x3aa <disk_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	86 fd       	sbrc	r24, 6
     3be:	49 c0       	rjmp	.+146    	; 0x452 <disk_initialize+0x194>
     3c0:	84 e0       	ldi	r24, 0x04	; 4
     3c2:	48 c0       	rjmp	.+144    	; 0x454 <disk_initialize+0x196>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     3c4:	89 ea       	ldi	r24, 0xA9	; 169
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	50 e0       	ldi	r21, 0x00	; 0
     3ca:	ba 01       	movw	r22, r20
     3cc:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     3d0:	82 30       	cpi	r24, 0x02	; 2
     3d2:	18 f4       	brcc	.+6      	; 0x3da <disk_initialize+0x11c>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     3d4:	12 e0       	ldi	r17, 0x02	; 2
     3d6:	09 ea       	ldi	r16, 0xA9	; 169
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <disk_initialize+0x120>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     3da:	11 e0       	ldi	r17, 0x01	; 1
     3dc:	01 e0       	ldi	r16, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     3de:	80 91 a1 01 	lds	r24, 0x01A1
     3e2:	88 23       	and	r24, r24
     3e4:	41 f0       	breq	.+16     	; 0x3f6 <disk_initialize+0x138>
     3e6:	80 2f       	mov	r24, r16
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	50 e0       	ldi	r21, 0x00	; 0
     3ec:	ba 01       	movw	r22, r20
     3ee:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     3f2:	88 23       	and	r24, r24
     3f4:	a1 f7       	brne	.-24     	; 0x3de <disk_initialize+0x120>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     3f6:	80 91 a1 01 	lds	r24, 0x01A1
     3fa:	88 23       	and	r24, r24
     3fc:	81 f1       	breq	.+96     	; 0x45e <disk_initialize+0x1a0>
     3fe:	80 e1       	ldi	r24, 0x10	; 16
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	52 e0       	ldi	r21, 0x02	; 2
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     40c:	88 23       	and	r24, r24
     40e:	39 f5       	brne	.+78     	; 0x45e <disk_initialize+0x1a0>
				ty = 0;
		}
	}
	CardType = ty;
     410:	10 93 a2 01 	sts	0x01A2, r17
	deselect();
     414:	0e 94 89 00 	call	0x112	; 0x112 <deselect>

	if (ty) {			/* Initialization succeded */
     418:	11 23       	and	r17, r17
     41a:	41 f0       	breq	.+16     	; 0x42c <disk_initialize+0x16e>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     41c:	80 91 00 01 	lds	r24, 0x0100
     420:	8e 7f       	andi	r24, 0xFE	; 254
     422:	80 93 00 01 	sts	0x0100, r24
		FCLK_FAST();
     426:	80 e5       	ldi	r24, 0x50	; 80
     428:	8c bd       	out	0x2c, r24	; 44
     42a:	02 c0       	rjmp	.+4      	; 0x430 <disk_initialize+0x172>
	} else {			/* Initialization failed */
		power_off();
     42c:	0e 94 67 00 	call	0xce	; 0xce <power_off>
	}

	return Stat;
     430:	80 91 00 01 	lds	r24, 0x0100
     434:	01 c0       	rjmp	.+2      	; 0x438 <disk_initialize+0x17a>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
     436:	81 e0       	ldi	r24, 0x01	; 1
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	ff 90       	pop	r15
     44a:	ef 90       	pop	r14
     44c:	df 90       	pop	r13
     44e:	cf 90       	pop	r12
     450:	08 95       	ret
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     452:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
     454:	80 93 a2 01 	sts	0x01A2, r24
	deselect();
     458:	0e 94 89 00 	call	0x112	; 0x112 <deselect>
     45c:	df cf       	rjmp	.-66     	; 0x41c <disk_initialize+0x15e>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
     45e:	10 92 a2 01 	sts	0x01A2, r1
	deselect();
     462:	0e 94 89 00 	call	0x112	; 0x112 <deselect>
     466:	e2 cf       	rjmp	.-60     	; 0x42c <disk_initialize+0x16e>

00000468 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     468:	88 23       	and	r24, r24
     46a:	19 f4       	brne	.+6      	; 0x472 <disk_status+0xa>
	return Stat;
     46c:	80 91 00 01 	lds	r24, 0x0100
     470:	08 95       	ret

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
     472:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
     474:	08 95       	ret

00000476 <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     476:	0f 93       	push	r16
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
     47e:	88 23       	and	r24, r24
     480:	09 f0       	breq	.+2      	; 0x484 <disk_read+0xe>
     482:	46 c0       	rjmp	.+140    	; 0x510 <disk_read+0x9a>
     484:	00 23       	and	r16, r16
     486:	09 f4       	brne	.+2      	; 0x48a <disk_read+0x14>
     488:	45 c0       	rjmp	.+138    	; 0x514 <disk_read+0x9e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     48a:	80 91 00 01 	lds	r24, 0x0100
     48e:	80 fd       	sbrc	r24, 0
     490:	43 c0       	rjmp	.+134    	; 0x518 <disk_read+0xa2>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     492:	80 91 a2 01 	lds	r24, 0x01A2
     496:	83 fd       	sbrc	r24, 3
     498:	09 c0       	rjmp	.+18     	; 0x4ac <disk_read+0x36>
     49a:	01 2e       	mov	r0, r17
     49c:	19 e0       	ldi	r17, 0x09	; 9
     49e:	22 0f       	add	r18, r18
     4a0:	33 1f       	adc	r19, r19
     4a2:	44 1f       	adc	r20, r20
     4a4:	55 1f       	adc	r21, r21
     4a6:	1a 95       	dec	r17
     4a8:	d1 f7       	brne	.-12     	; 0x49e <disk_read+0x28>
     4aa:	10 2d       	mov	r17, r0

	if (count == 1) {	/* Single block read */
     4ac:	01 30       	cpi	r16, 0x01	; 1
     4ae:	79 f4       	brne	.+30     	; 0x4ce <disk_read+0x58>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
     4b0:	81 e1       	ldi	r24, 0x11	; 17
     4b2:	ba 01       	movw	r22, r20
     4b4:	a9 01       	movw	r20, r18
     4b6:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     4ba:	88 23       	and	r24, r24
     4bc:	11 f5       	brne	.+68     	; 0x502 <disk_read+0x8c>
			&& rcvr_datablock(buff, 512))
     4be:	ce 01       	movw	r24, r28
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	72 e0       	ldi	r23, 0x02	; 2
     4c4:	0e 94 9e 00 	call	0x13c	; 0x13c <rcvr_datablock>
     4c8:	00 97       	sbiw	r24, 0x00	; 0
     4ca:	d1 f4       	brne	.+52     	; 0x500 <disk_read+0x8a>
     4cc:	1a c0       	rjmp	.+52     	; 0x502 <disk_read+0x8c>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
     4ce:	82 e1       	ldi	r24, 0x12	; 18
     4d0:	ba 01       	movw	r22, r20
     4d2:	a9 01       	movw	r20, r18
     4d4:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     4d8:	88 23       	and	r24, r24
     4da:	99 f4       	brne	.+38     	; 0x502 <disk_read+0x8c>
			do {
				if (!rcvr_datablock(buff, 512)) break;
     4dc:	ce 01       	movw	r24, r28
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	72 e0       	ldi	r23, 0x02	; 2
     4e2:	0e 94 9e 00 	call	0x13c	; 0x13c <rcvr_datablock>
     4e6:	00 97       	sbiw	r24, 0x00	; 0
     4e8:	21 f0       	breq	.+8      	; 0x4f2 <disk_read+0x7c>
				buff += 512;
     4ea:	c0 50       	subi	r28, 0x00	; 0
     4ec:	de 4f       	sbci	r29, 0xFE	; 254
			} while (--count);
     4ee:	01 50       	subi	r16, 0x01	; 1
     4f0:	a9 f7       	brne	.-22     	; 0x4dc <disk_read+0x66>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
     4f2:	8c e0       	ldi	r24, 0x0C	; 12
     4f4:	40 e0       	ldi	r20, 0x00	; 0
     4f6:	50 e0       	ldi	r21, 0x00	; 0
     4f8:	ba 01       	movw	r22, r20
     4fa:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     4fe:	01 c0       	rjmp	.+2      	; 0x502 <disk_read+0x8c>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block read */
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
			&& rcvr_datablock(buff, 512))
			count = 0;
     500:	00 e0       	ldi	r16, 0x00	; 0
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
     502:	0e 94 89 00 	call	0x112	; 0x112 <deselect>

	return count ? RES_ERROR : RES_OK;
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	00 23       	and	r16, r16
     50a:	39 f4       	brne	.+14     	; 0x51a <disk_read+0xa4>
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	05 c0       	rjmp	.+10     	; 0x51a <disk_read+0xa4>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
     510:	84 e0       	ldi	r24, 0x04	; 4
     512:	03 c0       	rjmp	.+6      	; 0x51a <disk_read+0xa4>
     514:	84 e0       	ldi	r24, 0x04	; 4
     516:	01 c0       	rjmp	.+2      	; 0x51a <disk_read+0xa4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     518:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	0f 91       	pop	r16
     520:	08 95       	ret

00000522 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
     522:	cf 92       	push	r12
     524:	df 92       	push	r13
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	eb 01       	movw	r28, r22
     532:	69 01       	movw	r12, r18
     534:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
     536:	88 23       	and	r24, r24
     538:	09 f0       	breq	.+2      	; 0x53c <disk_write+0x1a>
     53a:	57 c0       	rjmp	.+174    	; 0x5ea <disk_write+0xc8>
     53c:	00 23       	and	r16, r16
     53e:	09 f4       	brne	.+2      	; 0x542 <disk_write+0x20>
     540:	56 c0       	rjmp	.+172    	; 0x5ee <disk_write+0xcc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     542:	80 91 00 01 	lds	r24, 0x0100
     546:	80 fd       	sbrc	r24, 0
     548:	54 c0       	rjmp	.+168    	; 0x5f2 <disk_write+0xd0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     54a:	80 91 00 01 	lds	r24, 0x0100
     54e:	82 fd       	sbrc	r24, 2
     550:	52 c0       	rjmp	.+164    	; 0x5f6 <disk_write+0xd4>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     552:	80 91 a2 01 	lds	r24, 0x01A2
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	83 fd       	sbrc	r24, 3
     55a:	09 c0       	rjmp	.+18     	; 0x56e <disk_write+0x4c>
     55c:	0b 2e       	mov	r0, r27
     55e:	b9 e0       	ldi	r27, 0x09	; 9
     560:	cc 0c       	add	r12, r12
     562:	dd 1c       	adc	r13, r13
     564:	ee 1c       	adc	r14, r14
     566:	ff 1c       	adc	r15, r15
     568:	ba 95       	dec	r27
     56a:	d1 f7       	brne	.-12     	; 0x560 <disk_write+0x3e>
     56c:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
     56e:	01 30       	cpi	r16, 0x01	; 1
     570:	71 f4       	brne	.+28     	; 0x58e <disk_write+0x6c>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     572:	88 e1       	ldi	r24, 0x18	; 24
     574:	b7 01       	movw	r22, r14
     576:	a6 01       	movw	r20, r12
     578:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     57c:	88 23       	and	r24, r24
     57e:	71 f5       	brne	.+92     	; 0x5dc <disk_write+0xba>
			&& xmit_datablock(buff, 0xFE))
     580:	ce 01       	movw	r24, r28
     582:	6e ef       	ldi	r22, 0xFE	; 254
     584:	0e 94 d6 00 	call	0x1ac	; 0x1ac <xmit_datablock>
     588:	00 97       	sbiw	r24, 0x00	; 0
     58a:	29 f5       	brne	.+74     	; 0x5d6 <disk_write+0xb4>
     58c:	27 c0       	rjmp	.+78     	; 0x5dc <disk_write+0xba>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     58e:	86 70       	andi	r24, 0x06	; 6
     590:	90 70       	andi	r25, 0x00	; 0
     592:	00 97       	sbiw	r24, 0x00	; 0
     594:	39 f0       	breq	.+14     	; 0x5a4 <disk_write+0x82>
     596:	40 2f       	mov	r20, r16
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	87 e9       	ldi	r24, 0x97	; 151
     5a0:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     5a4:	89 e1       	ldi	r24, 0x19	; 25
     5a6:	b7 01       	movw	r22, r14
     5a8:	a6 01       	movw	r20, r12
     5aa:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     5ae:	88 23       	and	r24, r24
     5b0:	a9 f4       	brne	.+42     	; 0x5dc <disk_write+0xba>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     5b2:	ce 01       	movw	r24, r28
     5b4:	6c ef       	ldi	r22, 0xFC	; 252
     5b6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <xmit_datablock>
     5ba:	00 97       	sbiw	r24, 0x00	; 0
     5bc:	21 f0       	breq	.+8      	; 0x5c6 <disk_write+0xa4>
				buff += 512;
     5be:	c0 50       	subi	r28, 0x00	; 0
     5c0:	de 4f       	sbci	r29, 0xFE	; 254
			} while (--count);
     5c2:	01 50       	subi	r16, 0x01	; 1
     5c4:	b1 f7       	brne	.-20     	; 0x5b2 <disk_write+0x90>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	6d ef       	ldi	r22, 0xFD	; 253
     5cc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <xmit_datablock>
     5d0:	00 97       	sbiw	r24, 0x00	; 0
     5d2:	19 f0       	breq	.+6      	; 0x5da <disk_write+0xb8>
     5d4:	03 c0       	rjmp	.+6      	; 0x5dc <disk_write+0xba>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
     5d6:	00 e0       	ldi	r16, 0x00	; 0
     5d8:	01 c0       	rjmp	.+2      	; 0x5dc <disk_write+0xba>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
     5da:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
     5dc:	0e 94 89 00 	call	0x112	; 0x112 <deselect>

	return count ? RES_ERROR : RES_OK;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	00 23       	and	r16, r16
     5e4:	49 f4       	brne	.+18     	; 0x5f8 <disk_write+0xd6>
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	07 c0       	rjmp	.+14     	; 0x5f8 <disk_write+0xd6>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
     5ea:	84 e0       	ldi	r24, 0x04	; 4
     5ec:	05 c0       	rjmp	.+10     	; 0x5f8 <disk_write+0xd6>
     5ee:	84 e0       	ldi	r24, 0x04	; 4
     5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <disk_write+0xd6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     5f2:	83 e0       	ldi	r24, 0x03	; 3
     5f4:	01 c0       	rjmp	.+2      	; 0x5f8 <disk_write+0xd6>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     5f6:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	08 95       	ret

00000608 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	cd b7       	in	r28, 0x3d	; 61
     616:	de b7       	in	r29, 0x3e	; 62
     618:	60 97       	sbiw	r28, 0x10	; 16
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	f8 94       	cli
     61e:	de bf       	out	0x3e, r29	; 62
     620:	0f be       	out	0x3f, r0	; 63
     622:	cd bf       	out	0x3d, r28	; 61
     624:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (drv) return RES_PARERR;
     626:	88 23       	and	r24, r24
     628:	09 f0       	breq	.+2      	; 0x62c <disk_ioctl+0x24>
     62a:	ce c1       	rjmp	.+924    	; 0x9c8 <disk_ioctl+0x3c0>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
     62c:	65 30       	cpi	r22, 0x05	; 5
     62e:	89 f4       	brne	.+34     	; 0x652 <disk_ioctl+0x4a>
		switch (ptr[0]) {
     630:	fa 01       	movw	r30, r20
     632:	80 81       	ld	r24, Z
     634:	88 23       	and	r24, r24
     636:	21 f0       	breq	.+8      	; 0x640 <disk_ioctl+0x38>
     638:	81 30       	cpi	r24, 0x01	; 1
     63a:	09 f0       	breq	.+2      	; 0x63e <disk_ioctl+0x36>
     63c:	c7 c1       	rjmp	.+910    	; 0x9cc <disk_ioctl+0x3c4>
     63e:	04 c0       	rjmp	.+8      	; 0x648 <disk_ioctl+0x40>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
     640:	0e 94 67 00 	call	0xce	; 0xce <power_off>
			res = RES_OK;
     644:	00 e0       	ldi	r16, 0x00	; 0
			break;
     646:	c5 c1       	rjmp	.+906    	; 0x9d2 <disk_ioctl+0x3ca>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	fa 01       	movw	r30, r20
     64c:	81 83       	std	Z+1, r24	; 0x01
			res = RES_OK;
     64e:	00 e0       	ldi	r16, 0x00	; 0
			break;
     650:	c0 c1       	rjmp	.+896    	; 0x9d2 <disk_ioctl+0x3ca>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     652:	80 91 00 01 	lds	r24, 0x0100
     656:	80 fd       	sbrc	r24, 0
     658:	bb c1       	rjmp	.+886    	; 0x9d0 <disk_ioctl+0x3c8>

		switch (ctrl) {
     65a:	6a 30       	cpi	r22, 0x0A	; 10
     65c:	09 f4       	brne	.+2      	; 0x660 <disk_ioctl+0x58>
     65e:	3e c1       	rjmp	.+636    	; 0x8dc <disk_ioctl+0x2d4>
     660:	6b 30       	cpi	r22, 0x0B	; 11
     662:	58 f4       	brcc	.+22     	; 0x67a <disk_ioctl+0x72>
     664:	61 30       	cpi	r22, 0x01	; 1
     666:	f9 f0       	breq	.+62     	; 0x6a6 <disk_ioctl+0x9e>
     668:	61 30       	cpi	r22, 0x01	; 1
     66a:	a0 f0       	brcs	.+40     	; 0x694 <disk_ioctl+0x8c>
     66c:	62 30       	cpi	r22, 0x02	; 2
     66e:	09 f4       	brne	.+2      	; 0x672 <disk_ioctl+0x6a>
     670:	96 c0       	rjmp	.+300    	; 0x79e <disk_ioctl+0x196>
     672:	63 30       	cpi	r22, 0x03	; 3
     674:	09 f0       	breq	.+2      	; 0x678 <disk_ioctl+0x70>
     676:	88 c1       	rjmp	.+784    	; 0x988 <disk_ioctl+0x380>
     678:	99 c0       	rjmp	.+306    	; 0x7ac <disk_ioctl+0x1a4>
     67a:	6c 30       	cpi	r22, 0x0C	; 12
     67c:	09 f4       	brne	.+2      	; 0x680 <disk_ioctl+0x78>
     67e:	47 c1       	rjmp	.+654    	; 0x90e <disk_ioctl+0x306>
     680:	6c 30       	cpi	r22, 0x0C	; 12
     682:	08 f4       	brcc	.+2      	; 0x686 <disk_ioctl+0x7e>
     684:	31 c1       	rjmp	.+610    	; 0x8e8 <disk_ioctl+0x2e0>
     686:	6d 30       	cpi	r22, 0x0D	; 13
     688:	09 f4       	brne	.+2      	; 0x68c <disk_ioctl+0x84>
     68a:	54 c1       	rjmp	.+680    	; 0x934 <disk_ioctl+0x32c>
     68c:	6e 30       	cpi	r22, 0x0E	; 14
     68e:	09 f0       	breq	.+2      	; 0x692 <disk_ioctl+0x8a>
     690:	7b c1       	rjmp	.+758    	; 0x988 <disk_ioctl+0x380>
     692:	66 c1       	rjmp	.+716    	; 0x960 <disk_ioctl+0x358>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
     694:	0e 94 8e 00 	call	0x11c	; 0x11c <select>
     698:	00 97       	sbiw	r24, 0x00	; 0
     69a:	09 f4       	brne	.+2      	; 0x69e <disk_ioctl+0x96>
     69c:	77 c1       	rjmp	.+750    	; 0x98c <disk_ioctl+0x384>
				deselect();
     69e:	0e 94 89 00 	call	0x112	; 0x112 <deselect>
				res = RES_OK;
     6a2:	00 e0       	ldi	r16, 0x00	; 0
     6a4:	8e c1       	rjmp	.+796    	; 0x9c2 <disk_ioctl+0x3ba>
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     6a6:	89 e0       	ldi	r24, 0x09	; 9
     6a8:	40 e0       	ldi	r20, 0x00	; 0
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	ba 01       	movw	r22, r20
     6ae:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     6b2:	88 23       	and	r24, r24
     6b4:	09 f0       	breq	.+2      	; 0x6b8 <disk_ioctl+0xb0>
     6b6:	6c c1       	rjmp	.+728    	; 0x990 <disk_ioctl+0x388>
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	60 e1       	ldi	r22, 0x10	; 16
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	0e 94 9e 00 	call	0x13c	; 0x13c <rcvr_datablock>
     6c4:	00 97       	sbiw	r24, 0x00	; 0
     6c6:	09 f4       	brne	.+2      	; 0x6ca <disk_ioctl+0xc2>
     6c8:	65 c1       	rjmp	.+714    	; 0x994 <disk_ioctl+0x38c>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	82 95       	swap	r24
     6ce:	86 95       	lsr	r24
     6d0:	86 95       	lsr	r24
     6d2:	83 70       	andi	r24, 0x03	; 3
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	51 f5       	brne	.+84     	; 0x72c <disk_ioctl+0x124>
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
     6d8:	48 85       	ldd	r20, Y+8	; 0x08
     6da:	50 e0       	ldi	r21, 0x00	; 0
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	4f 73       	andi	r20, 0x3F	; 63
     6e2:	50 70       	andi	r21, 0x00	; 0
     6e4:	60 70       	andi	r22, 0x00	; 0
     6e6:	70 70       	andi	r23, 0x00	; 0
     6e8:	ba 01       	movw	r22, r20
     6ea:	55 27       	eor	r21, r21
     6ec:	44 27       	eor	r20, r20
     6ee:	4f 5f       	subi	r20, 0xFF	; 255
     6f0:	5f 4f       	sbci	r21, 0xFF	; 255
     6f2:	6f 4f       	sbci	r22, 0xFF	; 255
     6f4:	7f 4f       	sbci	r23, 0xFF	; 255
     6f6:	99 85       	ldd	r25, Y+9	; 0x09
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	2a 85       	ldd	r18, Y+10	; 0x0a
     6fc:	82 0f       	add	r24, r18
     6fe:	91 1d       	adc	r25, r1
     700:	a0 e0       	ldi	r26, 0x00	; 0
     702:	b0 e0       	ldi	r27, 0x00	; 0
     704:	84 0f       	add	r24, r20
     706:	95 1f       	adc	r25, r21
     708:	a6 1f       	adc	r26, r22
     70a:	b7 1f       	adc	r27, r23
					*(DWORD*)buff = csize << 10;
     70c:	07 2e       	mov	r0, r23
     70e:	7a e0       	ldi	r23, 0x0A	; 10
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	aa 1f       	adc	r26, r26
     716:	bb 1f       	adc	r27, r27
     718:	7a 95       	dec	r23
     71a:	d1 f7       	brne	.-12     	; 0x710 <disk_ioctl+0x108>
     71c:	70 2d       	mov	r23, r0
     71e:	f7 01       	movw	r30, r14
     720:	80 83       	st	Z, r24
     722:	91 83       	std	Z+1, r25	; 0x01
     724:	a2 83       	std	Z+2, r26	; 0x02
     726:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = csize << (n - 9);
				}
				res = RES_OK;
     728:	00 e0       	ldi	r16, 0x00	; 0
     72a:	4b c1       	rjmp	.+662    	; 0x9c2 <disk_ioctl+0x3ba>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
     72c:	29 85       	ldd	r18, Y+9	; 0x09
     72e:	22 95       	swap	r18
     730:	26 95       	lsr	r18
     732:	26 95       	lsr	r18
     734:	23 70       	andi	r18, 0x03	; 3
     736:	88 85       	ldd	r24, Y+8	; 0x08
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	88 0f       	add	r24, r24
     73c:	99 1f       	adc	r25, r25
     73e:	88 0f       	add	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	82 0f       	add	r24, r18
     744:	91 1d       	adc	r25, r1
     746:	01 96       	adiw	r24, 0x01	; 1
     748:	2f 81       	ldd	r18, Y+7	; 0x07
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	23 70       	andi	r18, 0x03	; 3
     74e:	30 70       	andi	r19, 0x00	; 0
     750:	32 2f       	mov	r19, r18
     752:	22 27       	eor	r18, r18
     754:	33 0f       	add	r19, r19
     756:	33 0f       	add	r19, r19
     758:	82 0f       	add	r24, r18
     75a:	93 1f       	adc	r25, r19
     75c:	ac 01       	movw	r20, r24
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	70 e0       	ldi	r23, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
     762:	9e 81       	ldd	r25, Y+6	; 0x06
     764:	9f 70       	andi	r25, 0x0F	; 15
     766:	8b 85       	ldd	r24, Y+11	; 0x0b
     768:	88 1f       	adc	r24, r24
     76a:	88 27       	eor	r24, r24
     76c:	88 1f       	adc	r24, r24
     76e:	98 0f       	add	r25, r24
     770:	9e 5f       	subi	r25, 0xFE	; 254
     772:	8a 85       	ldd	r24, Y+10	; 0x0a
     774:	83 70       	andi	r24, 0x03	; 3
     776:	88 0f       	add	r24, r24
     778:	89 0f       	add	r24, r25
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = csize << (n - 9);
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	09 97       	sbiw	r24, 0x09	; 9
     77e:	8a 01       	movw	r16, r20
     780:	9b 01       	movw	r18, r22
     782:	04 c0       	rjmp	.+8      	; 0x78c <disk_ioctl+0x184>
     784:	00 0f       	add	r16, r16
     786:	11 1f       	adc	r17, r17
     788:	22 1f       	adc	r18, r18
     78a:	33 1f       	adc	r19, r19
     78c:	8a 95       	dec	r24
     78e:	d2 f7       	brpl	.-12     	; 0x784 <disk_ioctl+0x17c>
     790:	f7 01       	movw	r30, r14
     792:	00 83       	st	Z, r16
     794:	11 83       	std	Z+1, r17	; 0x01
     796:	22 83       	std	Z+2, r18	; 0x02
     798:	33 83       	std	Z+3, r19	; 0x03
				}
				res = RES_OK;
     79a:	00 e0       	ldi	r16, 0x00	; 0
     79c:	12 c1       	rjmp	.+548    	; 0x9c2 <disk_ioctl+0x3ba>
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	92 e0       	ldi	r25, 0x02	; 2
     7a2:	fa 01       	movw	r30, r20
     7a4:	91 83       	std	Z+1, r25	; 0x01
     7a6:	80 83       	st	Z, r24
			res = RES_OK;
     7a8:	00 e0       	ldi	r16, 0x00	; 0
			break;
     7aa:	0b c1       	rjmp	.+534    	; 0x9c2 <disk_ioctl+0x3ba>

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
     7ac:	00 91 a2 01 	lds	r16, 0x01A2
     7b0:	02 ff       	sbrs	r16, 2
     7b2:	2f c0       	rjmp	.+94     	; 0x812 <disk_ioctl+0x20a>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
     7b4:	8d e8       	ldi	r24, 0x8D	; 141
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	ba 01       	movw	r22, r20
     7bc:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     7c0:	88 23       	and	r24, r24
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <disk_ioctl+0x1be>
     7c4:	e9 c0       	rjmp	.+466    	; 0x998 <disk_ioctl+0x390>
					xchg_spi(0xFF);
     7c6:	8f ef       	ldi	r24, 0xFF	; 255
     7c8:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
     7cc:	ce 01       	movw	r24, r28
     7ce:	01 96       	adiw	r24, 0x01	; 1
     7d0:	60 e1       	ldi	r22, 0x10	; 16
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	0e 94 9e 00 	call	0x13c	; 0x13c <rcvr_datablock>
     7d8:	00 97       	sbiw	r24, 0x00	; 0
     7da:	09 f4       	brne	.+2      	; 0x7de <disk_ioctl+0x1d6>
     7dc:	df c0       	rjmp	.+446    	; 0x99c <disk_ioctl+0x394>
     7de:	00 e3       	ldi	r16, 0x30	; 48
						for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
     7e6:	01 50       	subi	r16, 0x01	; 1
     7e8:	d9 f7       	brne	.-10     	; 0x7e0 <disk_ioctl+0x1d8>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
     7ea:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ec:	22 95       	swap	r18
     7ee:	2f 70       	andi	r18, 0x0F	; 15
     7f0:	80 e1       	ldi	r24, 0x10	; 16
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	a0 e0       	ldi	r26, 0x00	; 0
     7f6:	b0 e0       	ldi	r27, 0x00	; 0
     7f8:	04 c0       	rjmp	.+8      	; 0x802 <disk_ioctl+0x1fa>
     7fa:	88 0f       	add	r24, r24
     7fc:	99 1f       	adc	r25, r25
     7fe:	aa 1f       	adc	r26, r26
     800:	bb 1f       	adc	r27, r27
     802:	2a 95       	dec	r18
     804:	d2 f7       	brpl	.-12     	; 0x7fa <disk_ioctl+0x1f2>
     806:	f7 01       	movw	r30, r14
     808:	80 83       	st	Z, r24
     80a:	91 83       	std	Z+1, r25	; 0x01
     80c:	a2 83       	std	Z+2, r26	; 0x02
     80e:	b3 83       	std	Z+3, r27	; 0x03
     810:	d8 c0       	rjmp	.+432    	; 0x9c2 <disk_ioctl+0x3ba>
						res = RES_OK;
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
     812:	89 e0       	ldi	r24, 0x09	; 9
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	ba 01       	movw	r22, r20
     81a:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     81e:	88 23       	and	r24, r24
     820:	09 f0       	breq	.+2      	; 0x824 <disk_ioctl+0x21c>
     822:	be c0       	rjmp	.+380    	; 0x9a0 <disk_ioctl+0x398>
     824:	ce 01       	movw	r24, r28
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	60 e1       	ldi	r22, 0x10	; 16
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	0e 94 9e 00 	call	0x13c	; 0x13c <rcvr_datablock>
     830:	00 97       	sbiw	r24, 0x00	; 0
     832:	09 f4       	brne	.+2      	; 0x836 <disk_ioctl+0x22e>
     834:	b7 c0       	rjmp	.+366    	; 0x9a4 <disk_ioctl+0x39c>
					if (CardType & CT_SD1) {	/* SDv1 */
     836:	01 ff       	sbrs	r16, 1
     838:	25 c0       	rjmp	.+74     	; 0x884 <disk_ioctl+0x27c>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
     83a:	8c 85       	ldd	r24, Y+12	; 0x0c
     83c:	88 1f       	adc	r24, r24
     83e:	88 27       	eor	r24, r24
     840:	88 1f       	adc	r24, r24
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	2b 85       	ldd	r18, Y+11	; 0x0b
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	2f 73       	andi	r18, 0x3F	; 63
     84c:	30 70       	andi	r19, 0x00	; 0
     84e:	22 0f       	add	r18, r18
     850:	33 1f       	adc	r19, r19
     852:	28 0f       	add	r18, r24
     854:	39 1f       	adc	r19, r25
     856:	8e 85       	ldd	r24, Y+14	; 0x0e
     858:	82 95       	swap	r24
     85a:	86 95       	lsr	r24
     85c:	86 95       	lsr	r24
     85e:	83 70       	andi	r24, 0x03	; 3
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	89 01       	movw	r16, r18
     866:	02 c0       	rjmp	.+4      	; 0x86c <disk_ioctl+0x264>
     868:	00 0f       	add	r16, r16
     86a:	11 1f       	adc	r17, r17
     86c:	8a 95       	dec	r24
     86e:	e2 f7       	brpl	.-8      	; 0x868 <disk_ioctl+0x260>
     870:	c8 01       	movw	r24, r16
     872:	a0 e0       	ldi	r26, 0x00	; 0
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	f7 01       	movw	r30, r14
     878:	80 83       	st	Z, r24
     87a:	91 83       	std	Z+1, r25	; 0x01
     87c:	a2 83       	std	Z+2, r26	; 0x02
     87e:	b3 83       	std	Z+3, r27	; 0x03
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
     880:	00 e0       	ldi	r16, 0x00	; 0
     882:	9f c0       	rjmp	.+318    	; 0x9c2 <disk_ioctl+0x3ba>
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDv1 */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
     884:	8c 85       	ldd	r24, Y+12	; 0x0c
     886:	48 2f       	mov	r20, r24
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	43 70       	andi	r20, 0x03	; 3
     88c:	50 70       	andi	r21, 0x00	; 0
     88e:	44 0f       	add	r20, r20
     890:	55 1f       	adc	r21, r21
     892:	44 0f       	add	r20, r20
     894:	55 1f       	adc	r21, r21
     896:	44 0f       	add	r20, r20
     898:	55 1f       	adc	r21, r21
     89a:	82 95       	swap	r24
     89c:	86 95       	lsr	r24
     89e:	87 70       	andi	r24, 0x07	; 7
     8a0:	48 0f       	add	r20, r24
     8a2:	51 1d       	adc	r21, r1
     8a4:	4f 5f       	subi	r20, 0xFF	; 255
     8a6:	5f 4f       	sbci	r21, 0xFF	; 255
     8a8:	2b 85       	ldd	r18, Y+11	; 0x0b
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	2c 77       	andi	r18, 0x7C	; 124
     8ae:	30 70       	andi	r19, 0x00	; 0
     8b0:	35 95       	asr	r19
     8b2:	27 95       	ror	r18
     8b4:	35 95       	asr	r19
     8b6:	27 95       	ror	r18
     8b8:	2f 5f       	subi	r18, 0xFF	; 255
     8ba:	3f 4f       	sbci	r19, 0xFF	; 255
     8bc:	42 9f       	mul	r20, r18
     8be:	c0 01       	movw	r24, r0
     8c0:	43 9f       	mul	r20, r19
     8c2:	90 0d       	add	r25, r0
     8c4:	52 9f       	mul	r21, r18
     8c6:	90 0d       	add	r25, r0
     8c8:	11 24       	eor	r1, r1
     8ca:	a0 e0       	ldi	r26, 0x00	; 0
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	f7 01       	movw	r30, r14
     8d0:	80 83       	st	Z, r24
     8d2:	91 83       	std	Z+1, r25	; 0x01
     8d4:	a2 83       	std	Z+2, r26	; 0x02
     8d6:	b3 83       	std	Z+3, r27	; 0x03
					}
					res = RES_OK;
     8d8:	00 e0       	ldi	r16, 0x00	; 0
     8da:	73 c0       	rjmp	.+230    	; 0x9c2 <disk_ioctl+0x3ba>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
     8dc:	80 91 a2 01 	lds	r24, 0x01A2
     8e0:	fa 01       	movw	r30, r20
     8e2:	80 83       	st	Z, r24
			res = RES_OK;
     8e4:	00 e0       	ldi	r16, 0x00	; 0
			break;
     8e6:	6d c0       	rjmp	.+218    	; 0x9c2 <disk_ioctl+0x3ba>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
     8e8:	89 e0       	ldi	r24, 0x09	; 9
     8ea:	40 e0       	ldi	r20, 0x00	; 0
     8ec:	50 e0       	ldi	r21, 0x00	; 0
     8ee:	ba 01       	movw	r22, r20
     8f0:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     8f4:	88 23       	and	r24, r24
     8f6:	09 f0       	breq	.+2      	; 0x8fa <disk_ioctl+0x2f2>
     8f8:	57 c0       	rjmp	.+174    	; 0x9a8 <disk_ioctl+0x3a0>
				&& rcvr_datablock(ptr, 16))
     8fa:	c7 01       	movw	r24, r14
     8fc:	60 e1       	ldi	r22, 0x10	; 16
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	0e 94 9e 00 	call	0x13c	; 0x13c <rcvr_datablock>
     904:	00 97       	sbiw	r24, 0x00	; 0
     906:	09 f0       	breq	.+2      	; 0x90a <disk_ioctl+0x302>
     908:	51 c0       	rjmp	.+162    	; 0x9ac <disk_ioctl+0x3a4>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     90a:	01 e0       	ldi	r16, 0x01	; 1
     90c:	5a c0       	rjmp	.+180    	; 0x9c2 <disk_ioctl+0x3ba>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
     90e:	8a e0       	ldi	r24, 0x0A	; 10
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	ba 01       	movw	r22, r20
     916:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     91a:	88 23       	and	r24, r24
     91c:	09 f0       	breq	.+2      	; 0x920 <disk_ioctl+0x318>
     91e:	48 c0       	rjmp	.+144    	; 0x9b0 <disk_ioctl+0x3a8>
				&& rcvr_datablock(ptr, 16))
     920:	c7 01       	movw	r24, r14
     922:	60 e1       	ldi	r22, 0x10	; 16
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	0e 94 9e 00 	call	0x13c	; 0x13c <rcvr_datablock>
     92a:	00 97       	sbiw	r24, 0x00	; 0
     92c:	09 f0       	breq	.+2      	; 0x930 <disk_ioctl+0x328>
     92e:	42 c0       	rjmp	.+132    	; 0x9b4 <disk_ioctl+0x3ac>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     930:	01 e0       	ldi	r16, 0x01	; 1
     932:	47 c0       	rjmp	.+142    	; 0x9c2 <disk_ioctl+0x3ba>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
     934:	8a e3       	ldi	r24, 0x3A	; 58
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	ba 01       	movw	r22, r20
     93c:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     940:	88 23       	and	r24, r24
     942:	d1 f5       	brne	.+116    	; 0x9b8 <disk_ioctl+0x3b0>
/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

#if _USE_IOCTL
DRESULT disk_ioctl (
     944:	87 01       	movw	r16, r14
     946:	0c 5f       	subi	r16, 0xFC	; 252
     948:	1f 4f       	sbci	r17, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
     94a:	8f ef       	ldi	r24, 0xFF	; 255
     94c:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
     950:	f7 01       	movw	r30, r14
     952:	81 93       	st	Z+, r24
     954:	7f 01       	movw	r14, r30
     956:	e0 17       	cp	r30, r16
     958:	f1 07       	cpc	r31, r17
     95a:	b9 f7       	brne	.-18     	; 0x94a <disk_ioctl+0x342>
				res = RES_OK;
     95c:	00 e0       	ldi	r16, 0x00	; 0
     95e:	31 c0       	rjmp	.+98     	; 0x9c2 <disk_ioctl+0x3ba>
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
     960:	8d e8       	ldi	r24, 0x8D	; 141
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	ba 01       	movw	r22, r20
     968:	0e 94 10 01 	call	0x220	; 0x220 <send_cmd>
     96c:	88 23       	and	r24, r24
     96e:	31 f5       	brne	.+76     	; 0x9bc <disk_ioctl+0x3b4>
				xchg_spi(0xFF);
     970:	8f ef       	ldi	r24, 0xFF	; 255
     972:	0e 94 6e 00 	call	0xdc	; 0xdc <xchg_spi>
				if (rcvr_datablock(ptr, 64))
     976:	c7 01       	movw	r24, r14
     978:	60 e4       	ldi	r22, 0x40	; 64
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	0e 94 9e 00 	call	0x13c	; 0x13c <rcvr_datablock>
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	f1 f4       	brne	.+60     	; 0x9c0 <disk_ioctl+0x3b8>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     984:	01 e0       	ldi	r16, 0x01	; 1
     986:	1d c0       	rjmp	.+58     	; 0x9c2 <disk_ioctl+0x3ba>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
     988:	04 e0       	ldi	r16, 0x04	; 4
     98a:	1b c0       	rjmp	.+54     	; 0x9c2 <disk_ioctl+0x3ba>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     98c:	01 e0       	ldi	r16, 0x01	; 1
     98e:	19 c0       	rjmp	.+50     	; 0x9c2 <disk_ioctl+0x3ba>
     990:	01 e0       	ldi	r16, 0x01	; 1
     992:	17 c0       	rjmp	.+46     	; 0x9c2 <disk_ioctl+0x3ba>
     994:	01 e0       	ldi	r16, 0x01	; 1
     996:	15 c0       	rjmp	.+42     	; 0x9c2 <disk_ioctl+0x3ba>
     998:	01 e0       	ldi	r16, 0x01	; 1
     99a:	13 c0       	rjmp	.+38     	; 0x9c2 <disk_ioctl+0x3ba>
     99c:	01 e0       	ldi	r16, 0x01	; 1
     99e:	11 c0       	rjmp	.+34     	; 0x9c2 <disk_ioctl+0x3ba>
     9a0:	01 e0       	ldi	r16, 0x01	; 1
     9a2:	0f c0       	rjmp	.+30     	; 0x9c2 <disk_ioctl+0x3ba>
     9a4:	01 e0       	ldi	r16, 0x01	; 1
     9a6:	0d c0       	rjmp	.+26     	; 0x9c2 <disk_ioctl+0x3ba>
     9a8:	01 e0       	ldi	r16, 0x01	; 1
     9aa:	0b c0       	rjmp	.+22     	; 0x9c2 <disk_ioctl+0x3ba>
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
     9ac:	00 e0       	ldi	r16, 0x00	; 0
     9ae:	09 c0       	rjmp	.+18     	; 0x9c2 <disk_ioctl+0x3ba>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     9b0:	01 e0       	ldi	r16, 0x01	; 1
     9b2:	07 c0       	rjmp	.+14     	; 0x9c2 <disk_ioctl+0x3ba>
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
     9b4:	00 e0       	ldi	r16, 0x00	; 0
     9b6:	05 c0       	rjmp	.+10     	; 0x9c2 <disk_ioctl+0x3ba>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
     9b8:	01 e0       	ldi	r16, 0x01	; 1
     9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <disk_ioctl+0x3ba>
     9bc:	01 e0       	ldi	r16, 0x01	; 1
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <disk_ioctl+0x3ba>

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				xchg_spi(0xFF);
				if (rcvr_datablock(ptr, 64))
					res = RES_OK;
     9c0:	00 e0       	ldi	r16, 0x00	; 0

		default:
			res = RES_PARERR;
		}

		deselect();
     9c2:	0e 94 89 00 	call	0x112	; 0x112 <deselect>
     9c6:	05 c0       	rjmp	.+10     	; 0x9d2 <disk_ioctl+0x3ca>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (drv) return RES_PARERR;
     9c8:	04 e0       	ldi	r16, 0x04	; 4
     9ca:	03 c0       	rjmp	.+6      	; 0x9d2 <disk_ioctl+0x3ca>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
     9cc:	04 e0       	ldi	r16, 0x04	; 4
     9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <disk_ioctl+0x3ca>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
     9d0:	03 e0       	ldi	r16, 0x03	; 3

		deselect();
	}

	return res;
}
     9d2:	80 2f       	mov	r24, r16
     9d4:	60 96       	adiw	r28, 0x10	; 16
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	f8 94       	cli
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	ff 90       	pop	r15
     9ea:	ef 90       	pop	r14
     9ec:	08 95       	ret

000009ee <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
     9ee:	80 91 a1 01 	lds	r24, 0x01A1
	if (n) Timer1 = --n;
     9f2:	88 23       	and	r24, r24
     9f4:	19 f0       	breq	.+6      	; 0x9fc <disk_timerproc+0xe>
     9f6:	81 50       	subi	r24, 0x01	; 1
     9f8:	80 93 a1 01 	sts	0x01A1, r24
	n = Timer2;
     9fc:	80 91 a0 01 	lds	r24, 0x01A0
	if (n) Timer2 = --n;
     a00:	88 23       	and	r24, r24
     a02:	19 f0       	breq	.+6      	; 0xa0a <disk_timerproc+0x1c>
     a04:	81 50       	subi	r24, 0x01	; 1
     a06:	80 93 a0 01 	sts	0x01A0, r24

	s = Stat;
     a0a:	80 91 00 01 	lds	r24, 0x0100

	if (SOCKWP)				/* Write protected */
     a0e:	18 9b       	sbis	0x03, 0	; 3
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <disk_timerproc+0x28>
		s |= STA_PROTECT;
     a12:	84 60       	ori	r24, 0x04	; 4
     a14:	01 c0       	rjmp	.+2      	; 0xa18 <disk_timerproc+0x2a>
	else					/* Write enabled */
		s &= ~STA_PROTECT;
     a16:	8b 7f       	andi	r24, 0xFB	; 251

	if (SOCKINS)			/* Card inserted */
     a18:	19 99       	sbic	0x03, 1	; 3
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <disk_timerproc+0x32>
		s &= ~STA_NODISK;
     a1c:	8d 7f       	andi	r24, 0xFD	; 253
     a1e:	01 c0       	rjmp	.+2      	; 0xa22 <disk_timerproc+0x34>
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
     a20:	83 60       	ori	r24, 0x03	; 3

	Stat = s;				/* Update MMC status */
     a22:	80 93 00 01 	sts	0x0100, r24
}
     a26:	08 95       	ret

00000a28 <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
     a28:	41 15       	cp	r20, r1
     a2a:	51 05       	cpc	r21, r1
     a2c:	49 f0       	breq	.+18     	; 0xa40 <mem_cpy+0x18>
     a2e:	a6 2f       	mov	r26, r22
     a30:	b7 2f       	mov	r27, r23
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
     a32:	e8 2f       	mov	r30, r24
     a34:	f9 2f       	mov	r31, r25
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
     a36:	8d 91       	ld	r24, X+
     a38:	81 93       	st	Z+, r24
     a3a:	41 50       	subi	r20, 0x01	; 1
     a3c:	50 40       	sbci	r21, 0x00	; 0
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
     a3e:	d9 f7       	brne	.-10     	; 0xa36 <mem_cpy+0xe>
     a40:	08 95       	ret

00000a42 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     a42:	41 15       	cp	r20, r1
     a44:	51 05       	cpc	r21, r1
     a46:	31 f0       	breq	.+12     	; 0xa54 <mem_set+0x12>
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
     a48:	e8 2f       	mov	r30, r24
     a4a:	f9 2f       	mov	r31, r25

	while (cnt--)
		*d++ = (BYTE)val;
     a4c:	61 93       	st	Z+, r22
     a4e:	41 50       	subi	r20, 0x01	; 1
     a50:	50 40       	sbci	r21, 0x00	; 0
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     a52:	e1 f7       	brne	.-8      	; 0xa4c <mem_set+0xa>
     a54:	08 95       	ret

00000a56 <ld_clust>:
static
DWORD ld_clust (
	FATFS *fs,	/* Pointer to the fs object */
	BYTE *dir	/* Pointer to the directory entry */
)
{
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	dc 01       	movw	r26, r24
     a5c:	fb 01       	movw	r30, r22
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
     a5e:	93 8d       	ldd	r25, Z+27	; 0x1b
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	02 8d       	ldd	r16, Z+26	; 0x1a
     a64:	10 e0       	ldi	r17, 0x00	; 0
     a66:	08 2b       	or	r16, r24
     a68:	19 2b       	or	r17, r25
     a6a:	20 e0       	ldi	r18, 0x00	; 0
     a6c:	30 e0       	ldi	r19, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
     a6e:	8c 91       	ld	r24, X
     a70:	83 30       	cpi	r24, 0x03	; 3
     a72:	79 f4       	brne	.+30     	; 0xa92 <ld_clust+0x3c>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
     a74:	55 89       	ldd	r21, Z+21	; 0x15
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	84 89       	ldd	r24, Z+20	; 0x14
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	84 2b       	or	r24, r20
     a7e:	95 2b       	or	r25, r21
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	dc 01       	movw	r26, r24
     a86:	99 27       	eor	r25, r25
     a88:	88 27       	eor	r24, r24
     a8a:	08 2b       	or	r16, r24
     a8c:	19 2b       	or	r17, r25
     a8e:	2a 2b       	or	r18, r26
     a90:	3b 2b       	or	r19, r27

	return cl;
}
     a92:	60 2f       	mov	r22, r16
     a94:	71 2f       	mov	r23, r17
     a96:	82 2f       	mov	r24, r18
     a98:	93 2f       	mov	r25, r19
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	08 95       	ret

00000aa0 <st_clust>:
static
void st_clust (
	BYTE *dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
     aa0:	fc 01       	movw	r30, r24
	ST_WORD(dir+DIR_FstClusLO, cl);
     aa2:	42 8f       	std	Z+26, r20	; 0x1a
     aa4:	53 8f       	std	Z+27, r21	; 0x1b
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
     aa6:	ab 01       	movw	r20, r22
     aa8:	66 27       	eor	r22, r22
     aaa:	77 27       	eor	r23, r23
     aac:	44 8b       	std	Z+20, r20	; 0x14
     aae:	55 8b       	std	Z+21, r21	; 0x15
}
     ab0:	08 95       	ret

00000ab2 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
     ab2:	ef 92       	push	r14
     ab4:	ff 92       	push	r15
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	fc 01       	movw	r30, r24
     ac0:	7b 01       	movw	r14, r22
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
     ac2:	8b 01       	movw	r16, r22
     ac4:	07 5f       	subi	r16, 0xF7	; 247
     ac6:	1f 4f       	sbci	r17, 0xFF	; 255
	if (dj->sect) {
     ac8:	86 85       	ldd	r24, Z+14	; 0x0e
     aca:	97 85       	ldd	r25, Z+15	; 0x0f
     acc:	a0 89       	ldd	r26, Z+16	; 0x10
     ace:	b1 89       	ldd	r27, Z+17	; 0x11
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	09 f4       	brne	.+2      	; 0xada <get_fileinfo+0x28>
     ad8:	65 c0       	rjmp	.+202    	; 0xba4 <get_fileinfo+0xf2>
		dir = dj->dir;
     ada:	c2 89       	ldd	r28, Z+18	; 0x12
     adc:	d3 89       	ldd	r29, Z+19	; 0x13
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
     ade:	28 81       	ld	r18, Y
			if (c == ' ') break;
     ae0:	20 32       	cpi	r18, 0x20	; 32
     ae2:	99 f0       	breq	.+38     	; 0xb0a <get_fileinfo+0x58>
/*-----------------------------------------------------------------------*/
/* Get file information from directory entry                             */
/*-----------------------------------------------------------------------*/
#if _FS_MINIMIZE <= 1
static
void get_fileinfo (		/* No return code */
     ae4:	de 01       	movw	r26, r28
     ae6:	11 96       	adiw	r26, 0x01	; 1
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
     ae8:	f8 01       	movw	r30, r16

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
     aee:	35 ee       	ldi	r19, 0xE5	; 229
     af0:	03 c0       	rjmp	.+6      	; 0xaf8 <get_fileinfo+0x46>
	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
     af2:	2d 91       	ld	r18, X+
			if (c == ' ') break;
     af4:	20 32       	cpi	r18, 0x20	; 32
     af6:	49 f0       	breq	.+18     	; 0xb0a <get_fileinfo+0x58>
			if (c == NDDE) c = (TCHAR)DDE;
     af8:	25 30       	cpi	r18, 0x05	; 5
     afa:	09 f4       	brne	.+2      	; 0xafe <get_fileinfo+0x4c>
     afc:	23 2f       	mov	r18, r19
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
     afe:	21 93       	st	Z+, r18
     b00:	8f 01       	movw	r16, r30

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	88 30       	cpi	r24, 0x08	; 8
     b06:	91 05       	cpc	r25, r1
     b08:	a1 f7       	brne	.-24     	; 0xaf2 <get_fileinfo+0x40>
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
     b0a:	88 85       	ldd	r24, Y+8	; 0x08
     b0c:	80 32       	cpi	r24, 0x20	; 32
     b0e:	81 f0       	breq	.+32     	; 0xb30 <get_fileinfo+0x7e>
			*p++ = '.';
     b10:	8e e2       	ldi	r24, 0x2E	; 46
     b12:	f8 01       	movw	r30, r16
     b14:	80 83       	st	Z, r24
			for (i = 8; i < 11; i++) {
				c = dir[i];
     b16:	88 85       	ldd	r24, Y+8	; 0x08
				if (c == ' ') break;
     b18:	80 32       	cpi	r24, 0x20	; 32
     b1a:	09 f0       	breq	.+2      	; 0xb1e <get_fileinfo+0x6c>
     b1c:	4c c0       	rjmp	.+152    	; 0xbb6 <get_fileinfo+0x104>
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
     b1e:	0f 5f       	subi	r16, 0xFF	; 255
     b20:	1f 4f       	sbci	r17, 0xFF	; 255
     b22:	06 c0       	rjmp	.+12     	; 0xb30 <get_fileinfo+0x7e>
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
     b24:	8c 01       	movw	r16, r24
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <get_fileinfo+0x7e>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     b28:	f8 01       	movw	r30, r16
     b2a:	23 83       	std	Z+3, r18	; 0x03
     b2c:	0c 5f       	subi	r16, 0xFC	; 252
     b2e:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     b30:	8b 85       	ldd	r24, Y+11	; 0x0b
     b32:	f7 01       	movw	r30, r14
     b34:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     b36:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	b8 2f       	mov	r27, r24
     b40:	aa 27       	eor	r26, r26
     b42:	99 27       	eor	r25, r25
     b44:	88 27       	eor	r24, r24
     b46:	4e 8d       	ldd	r20, Y+30	; 0x1e
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	ba 01       	movw	r22, r20
     b50:	55 27       	eor	r21, r21
     b52:	44 27       	eor	r20, r20
     b54:	48 2b       	or	r20, r24
     b56:	59 2b       	or	r21, r25
     b58:	6a 2b       	or	r22, r26
     b5a:	7b 2b       	or	r23, r27
     b5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	48 2b       	or	r20, r24
     b66:	59 2b       	or	r21, r25
     b68:	6a 2b       	or	r22, r26
     b6a:	7b 2b       	or	r23, r27
     b6c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	84 2b       	or	r24, r20
     b76:	95 2b       	or	r25, r21
     b78:	a6 2b       	or	r26, r22
     b7a:	b7 2b       	or	r27, r23
     b7c:	80 83       	st	Z, r24
     b7e:	91 83       	std	Z+1, r25	; 0x01
     b80:	a2 83       	std	Z+2, r26	; 0x02
     b82:	b3 83       	std	Z+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     b84:	39 8d       	ldd	r19, Y+25	; 0x19
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	88 8d       	ldd	r24, Y+24	; 0x18
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	82 2b       	or	r24, r18
     b8e:	93 2b       	or	r25, r19
     b90:	95 83       	std	Z+5, r25	; 0x05
     b92:	84 83       	std	Z+4, r24	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     b94:	9f 89       	ldd	r25, Y+23	; 0x17
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	2e 89       	ldd	r18, Y+22	; 0x16
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	82 2b       	or	r24, r18
     b9e:	93 2b       	or	r25, r19
     ba0:	97 83       	std	Z+7, r25	; 0x07
     ba2:	86 83       	std	Z+6, r24	; 0x06
	}
	*p = 0;		/* Terminate SFN str by a \0 */
     ba4:	f8 01       	movw	r30, r16
     ba6:	10 82       	st	Z, r1
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
	}
#endif
}
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	08 95       	ret
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     bb6:	f8 01       	movw	r30, r16
     bb8:	81 83       	std	Z+1, r24	; 0x01
     bba:	c8 01       	movw	r24, r16
     bbc:	02 96       	adiw	r24, 0x02	; 2
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
     bbe:	29 85       	ldd	r18, Y+9	; 0x09
				if (c == ' ') break;
     bc0:	20 32       	cpi	r18, 0x20	; 32
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <get_fileinfo+0x114>
     bc4:	af cf       	rjmp	.-162    	; 0xb24 <get_fileinfo+0x72>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     bc6:	22 83       	std	Z+2, r18	; 0x02
     bc8:	c8 01       	movw	r24, r16
     bca:	03 96       	adiw	r24, 0x03	; 3
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
     bcc:	2a 85       	ldd	r18, Y+10	; 0x0a
				if (c == ' ') break;
     bce:	20 32       	cpi	r18, 0x20	; 32
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <get_fileinfo+0x122>
     bd2:	aa cf       	rjmp	.-172    	; 0xb28 <get_fileinfo+0x76>
     bd4:	a7 cf       	rjmp	.-178    	; 0xb24 <get_fileinfo+0x72>

00000bd6 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
     bd6:	dc 01       	movw	r26, r24
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
     bd8:	ed 91       	ld	r30, X+
     bda:	fc 91       	ld	r31, X
     bdc:	11 97       	sbiw	r26, 0x01	; 1
     bde:	30 97       	sbiw	r30, 0x00	; 0
     be0:	99 f0       	breq	.+38     	; 0xc08 <validate+0x32>
     be2:	80 81       	ld	r24, Z
     be4:	88 23       	and	r24, r24
     be6:	91 f0       	breq	.+36     	; 0xc0c <validate+0x36>
     be8:	26 81       	ldd	r18, Z+6	; 0x06
     bea:	37 81       	ldd	r19, Z+7	; 0x07
     bec:	12 96       	adiw	r26, 0x02	; 2
     bee:	8d 91       	ld	r24, X+
     bf0:	9c 91       	ld	r25, X
     bf2:	13 97       	sbiw	r26, 0x03	; 3
     bf4:	28 17       	cp	r18, r24
     bf6:	39 07       	cpc	r19, r25
     bf8:	59 f4       	brne	.+22     	; 0xc10 <validate+0x3a>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
     bfa:	81 81       	ldd	r24, Z+1	; 0x01
     bfc:	0e 94 34 02 	call	0x468	; 0x468 <disk_status>
     c00:	80 ff       	sbrs	r24, 0
     c02:	08 c0       	rjmp	.+16     	; 0xc14 <validate+0x3e>
		return FR_NOT_READY;
     c04:	83 e0       	ldi	r24, 0x03	; 3
     c06:	08 95       	ret
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
     c08:	89 e0       	ldi	r24, 0x09	; 9
     c0a:	08 95       	ret
     c0c:	89 e0       	ldi	r24, 0x09	; 9
     c0e:	08 95       	ret
     c10:	89 e0       	ldi	r24, 0x09	; 9
     c12:	08 95       	ret
	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
     c14:	80 e0       	ldi	r24, 0x00	; 0
}
     c16:	08 95       	ret

00000c18 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     c18:	0f 93       	push	r16
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	ec 01       	movw	r28, r24
     c20:	9a 01       	movw	r18, r20
     c22:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
     c24:	bc 01       	movw	r22, r24
     c26:	6e 5c       	subi	r22, 0xCE	; 206
     c28:	7f 4f       	sbci	r23, 0xFF	; 255
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	01 e0       	ldi	r16, 0x01	; 1
     c2e:	0e 94 3b 02 	call	0x476	; 0x476 <disk_read>
     c32:	88 23       	and	r24, r24
     c34:	09 f0       	breq	.+2      	; 0xc38 <check_fs+0x20>
     c36:	83 c0       	rjmp	.+262    	; 0xd3e <check_fs+0x126>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
     c38:	fe 01       	movw	r30, r28
     c3a:	ef 5c       	subi	r30, 0xCF	; 207
     c3c:	fd 4f       	sbci	r31, 0xFD	; 253
     c3e:	90 81       	ld	r25, Z
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	fe 01       	movw	r30, r28
     c44:	e0 5d       	subi	r30, 0xD0	; 208
     c46:	fd 4f       	sbci	r31, 0xFD	; 253
     c48:	20 81       	ld	r18, Z
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	82 2b       	or	r24, r18
     c4e:	93 2b       	or	r25, r19
     c50:	2a ea       	ldi	r18, 0xAA	; 170
     c52:	85 35       	cpi	r24, 0x55	; 85
     c54:	92 07       	cpc	r25, r18
     c56:	09 f0       	breq	.+2      	; 0xc5a <check_fs+0x42>
     c58:	74 c0       	rjmp	.+232    	; 0xd42 <check_fs+0x12a>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     c5a:	fe 01       	movw	r30, r28
     c5c:	e5 59       	subi	r30, 0x95	; 149
     c5e:	ff 4f       	sbci	r31, 0xFF	; 255
     c60:	80 81       	ld	r24, Z
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	a0 e0       	ldi	r26, 0x00	; 0
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	b8 2f       	mov	r27, r24
     c6a:	aa 27       	eor	r26, r26
     c6c:	99 27       	eor	r25, r25
     c6e:	88 27       	eor	r24, r24
     c70:	fe 01       	movw	r30, r28
     c72:	e6 59       	subi	r30, 0x96	; 150
     c74:	ff 4f       	sbci	r31, 0xFF	; 255
     c76:	40 81       	ld	r20, Z
     c78:	50 e0       	ldi	r21, 0x00	; 0
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	ba 01       	movw	r22, r20
     c80:	55 27       	eor	r21, r21
     c82:	44 27       	eor	r20, r20
     c84:	48 2b       	or	r20, r24
     c86:	59 2b       	or	r21, r25
     c88:	6a 2b       	or	r22, r26
     c8a:	7b 2b       	or	r23, r27
     c8c:	fe 01       	movw	r30, r28
     c8e:	e8 59       	subi	r30, 0x98	; 152
     c90:	ff 4f       	sbci	r31, 0xFF	; 255
     c92:	80 81       	ld	r24, Z
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a0 e0       	ldi	r26, 0x00	; 0
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	48 2b       	or	r20, r24
     c9c:	59 2b       	or	r21, r25
     c9e:	6a 2b       	or	r22, r26
     ca0:	7b 2b       	or	r23, r27
     ca2:	fe 01       	movw	r30, r28
     ca4:	e7 59       	subi	r30, 0x97	; 151
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	90 81       	ld	r25, Z
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	a0 e0       	ldi	r26, 0x00	; 0
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	48 2b       	or	r20, r24
     cb2:	59 2b       	or	r21, r25
     cb4:	6a 2b       	or	r22, r26
     cb6:	7b 2b       	or	r23, r27
     cb8:	70 70       	andi	r23, 0x00	; 0
     cba:	46 34       	cpi	r20, 0x46	; 70
     cbc:	81 e4       	ldi	r24, 0x41	; 65
     cbe:	58 07       	cpc	r21, r24
     cc0:	84 e5       	ldi	r24, 0x54	; 84
     cc2:	68 07       	cpc	r22, r24
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	78 07       	cpc	r23, r24
     cc8:	f1 f1       	breq	.+124    	; 0xd46 <check_fs+0x12e>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
     cca:	fe 01       	movw	r30, r28
     ccc:	e9 57       	subi	r30, 0x79	; 121
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	80 81       	ld	r24, Z
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	a0 e0       	ldi	r26, 0x00	; 0
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	b8 2f       	mov	r27, r24
     cda:	aa 27       	eor	r26, r26
     cdc:	99 27       	eor	r25, r25
     cde:	88 27       	eor	r24, r24
     ce0:	fe 01       	movw	r30, r28
     ce2:	ea 57       	subi	r30, 0x7A	; 122
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	40 81       	ld	r20, Z
     ce8:	50 e0       	ldi	r21, 0x00	; 0
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	ba 01       	movw	r22, r20
     cf0:	55 27       	eor	r21, r21
     cf2:	44 27       	eor	r20, r20
     cf4:	48 2b       	or	r20, r24
     cf6:	59 2b       	or	r21, r25
     cf8:	6a 2b       	or	r22, r26
     cfa:	7b 2b       	or	r23, r27
     cfc:	fe 01       	movw	r30, r28
     cfe:	ec 57       	subi	r30, 0x7C	; 124
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
     d02:	80 81       	ld	r24, Z
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	a0 e0       	ldi	r26, 0x00	; 0
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	48 2b       	or	r20, r24
     d0c:	59 2b       	or	r21, r25
     d0e:	6a 2b       	or	r22, r26
     d10:	7b 2b       	or	r23, r27
     d12:	cb 57       	subi	r28, 0x7B	; 123
     d14:	df 4f       	sbci	r29, 0xFF	; 255
     d16:	98 81       	ld	r25, Y
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	a0 e0       	ldi	r26, 0x00	; 0
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	48 2b       	or	r20, r24
     d20:	59 2b       	or	r21, r25
     d22:	6a 2b       	or	r22, r26
     d24:	7b 2b       	or	r23, r27
     d26:	70 70       	andi	r23, 0x00	; 0
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	46 34       	cpi	r20, 0x46	; 70
     d2c:	91 e4       	ldi	r25, 0x41	; 65
     d2e:	59 07       	cpc	r21, r25
     d30:	94 e5       	ldi	r25, 0x54	; 84
     d32:	69 07       	cpc	r22, r25
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	79 07       	cpc	r23, r25
     d38:	39 f4       	brne	.+14     	; 0xd48 <check_fs+0x130>
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	05 c0       	rjmp	.+10     	; 0xd48 <check_fs+0x130>
     d3e:	83 e0       	ldi	r24, 0x03	; 3
     d40:	03 c0       	rjmp	.+6      	; 0xd48 <check_fs+0x130>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
     d42:	82 e0       	ldi	r24, 0x02	; 2
     d44:	01 c0       	rjmp	.+2      	; 0xd48 <check_fs+0x130>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
     d46:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	0f 91       	pop	r16
     d4e:	08 95       	ret

00000d50 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
     d50:	2f 92       	push	r2
     d52:	3f 92       	push	r3
     d54:	4f 92       	push	r4
     d56:	5f 92       	push	r5
     d58:	6f 92       	push	r6
     d5a:	7f 92       	push	r7
     d5c:	8f 92       	push	r8
     d5e:	9f 92       	push	r9
     d60:	af 92       	push	r10
     d62:	bf 92       	push	r11
     d64:	cf 92       	push	r12
     d66:	df 92       	push	r13
     d68:	ef 92       	push	r14
     d6a:	ff 92       	push	r15
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	2f 97       	sbiw	r28, 0x0f	; 15
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	14 2f       	mov	r17, r20
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
     d86:	dc 01       	movw	r26, r24
     d88:	ed 91       	ld	r30, X+
     d8a:	fc 91       	ld	r31, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
     d8e:	80 81       	ld	r24, Z
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	c0 97       	sbiw	r24, 0x30	; 48
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
     d94:	8a 30       	cpi	r24, 0x0A	; 10
     d96:	91 05       	cpc	r25, r1
     d98:	40 f4       	brcc	.+16     	; 0xdaa <chk_mounted+0x5a>
     d9a:	21 81       	ldd	r18, Z+1	; 0x01
     d9c:	2a 33       	cpi	r18, 0x3A	; 58
     d9e:	29 f4       	brne	.+10     	; 0xdaa <chk_mounted+0x5a>
		p += 2; *path = p;				/* Return pointer to the path name */
     da0:	32 96       	adiw	r30, 0x02	; 2
     da2:	11 96       	adiw	r26, 0x01	; 1
     da4:	fc 93       	st	X, r31
     da6:	ee 93       	st	-X, r30
     da8:	03 c0       	rjmp	.+6      	; 0xdb0 <chk_mounted+0x60>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
     daa:	80 91 a5 01 	lds	r24, 0x01A5
     dae:	90 e0       	ldi	r25, 0x00	; 0
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
     db0:	fb 01       	movw	r30, r22
     db2:	11 82       	std	Z+1, r1	; 0x01
     db4:	10 82       	st	Z, r1
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	09 f0       	breq	.+2      	; 0xdbc <chk_mounted+0x6c>
     dba:	d2 c3       	rjmp	.+1956   	; 0x1560 <chk_mounted+0x810>
		return FR_INVALID_DRIVE;
	fs = FatFs[vol];					/* Get corresponding file system object */
     dbc:	20 91 a3 01 	lds	r18, 0x01A3
     dc0:	30 91 a4 01 	lds	r19, 0x01A4
     dc4:	3f 87       	std	Y+15, r19	; 0x0f
     dc6:	2e 87       	std	Y+14, r18	; 0x0e
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     dc8:	21 15       	cp	r18, r1
     dca:	31 05       	cpc	r19, r1
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <chk_mounted+0x80>
     dce:	ca c3       	rjmp	.+1940   	; 0x1564 <chk_mounted+0x814>

	ENTER_FF(fs);						/* Lock file system */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
     dd0:	31 83       	std	Z+1, r19	; 0x01
     dd2:	20 83       	st	Z, r18
	if (fs->fs_type) {					/* If the volume has been mounted */
     dd4:	d9 01       	movw	r26, r18
     dd6:	8c 91       	ld	r24, X
     dd8:	88 23       	and	r24, r24
     dda:	69 f0       	breq	.+26     	; 0xdf6 <chk_mounted+0xa6>
		stat = disk_status(fs->drv);
     ddc:	11 96       	adiw	r26, 0x01	; 1
     dde:	8c 91       	ld	r24, X
     de0:	0e 94 34 02 	call	0x468	; 0x468 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
     de4:	80 fd       	sbrc	r24, 0
     de6:	07 c0       	rjmp	.+14     	; 0xdf6 <chk_mounted+0xa6>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
     de8:	11 23       	and	r17, r17
     dea:	09 f4       	brne	.+2      	; 0xdee <chk_mounted+0x9e>
     dec:	bd c3       	rjmp	.+1914   	; 0x1568 <chk_mounted+0x818>
     dee:	82 fd       	sbrc	r24, 2
     df0:	bd c3       	rjmp	.+1914   	; 0x156c <chk_mounted+0x81c>
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	dc c3       	rjmp	.+1976   	; 0x15ae <chk_mounted+0x85e>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
     df6:	ee 85       	ldd	r30, Y+14	; 0x0e
     df8:	ff 85       	ldd	r31, Y+15	; 0x0f
     dfa:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
     dfc:	11 82       	std	Z+1, r1	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	0e 94 5f 01 	call	0x2be	; 0x2be <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
     e04:	80 fd       	sbrc	r24, 0
     e06:	b4 c3       	rjmp	.+1896   	; 0x1570 <chk_mounted+0x820>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
     e08:	11 23       	and	r17, r17
     e0a:	11 f0       	breq	.+4      	; 0xe10 <chk_mounted+0xc0>
     e0c:	82 fd       	sbrc	r24, 2
     e0e:	b2 c3       	rjmp	.+1892   	; 0x1574 <chk_mounted+0x824>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
     e10:	8e 85       	ldd	r24, Y+14	; 0x0e
     e12:	9f 85       	ldd	r25, Y+15	; 0x0f
     e14:	40 e0       	ldi	r20, 0x00	; 0
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	ba 01       	movw	r22, r20
     e1a:	0e 94 0c 06 	call	0xc18	; 0xc18 <check_fs>
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	09 f0       	breq	.+2      	; 0xe24 <chk_mounted+0xd4>
     e22:	43 c0       	rjmp	.+134    	; 0xeaa <chk_mounted+0x15a>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
     e24:	ee 85       	ldd	r30, Y+14	; 0x0e
     e26:	ff 85       	ldd	r31, Y+15	; 0x0f
     e28:	ec 50       	subi	r30, 0x0C	; 12
     e2a:	fe 4f       	sbci	r31, 0xFE	; 254
     e2c:	80 81       	ld	r24, Z
     e2e:	88 23       	and	r24, r24
     e30:	09 f4       	brne	.+2      	; 0xe34 <chk_mounted+0xe4>
     e32:	a2 c3       	rjmp	.+1860   	; 0x1578 <chk_mounted+0x828>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
     e34:	ee 85       	ldd	r30, Y+14	; 0x0e
     e36:	ff 85       	ldd	r31, Y+15	; 0x0f
     e38:	e5 50       	subi	r30, 0x05	; 5
     e3a:	fe 4f       	sbci	r31, 0xFE	; 254
     e3c:	80 81       	ld	r24, Z
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	a0 e0       	ldi	r26, 0x00	; 0
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	b8 2f       	mov	r27, r24
     e46:	aa 27       	eor	r26, r26
     e48:	99 27       	eor	r25, r25
     e4a:	88 27       	eor	r24, r24
     e4c:	ee 85       	ldd	r30, Y+14	; 0x0e
     e4e:	ff 85       	ldd	r31, Y+15	; 0x0f
     e50:	e6 50       	subi	r30, 0x06	; 6
     e52:	fe 4f       	sbci	r31, 0xFE	; 254
     e54:	40 81       	ld	r20, Z
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	ba 01       	movw	r22, r20
     e5e:	55 27       	eor	r21, r21
     e60:	44 27       	eor	r20, r20
     e62:	84 2b       	or	r24, r20
     e64:	95 2b       	or	r25, r21
     e66:	a6 2b       	or	r26, r22
     e68:	b7 2b       	or	r27, r23
     e6a:	ee 85       	ldd	r30, Y+14	; 0x0e
     e6c:	ff 85       	ldd	r31, Y+15	; 0x0f
     e6e:	e8 50       	subi	r30, 0x08	; 8
     e70:	fe 4f       	sbci	r31, 0xFE	; 254
     e72:	40 81       	ld	r20, Z
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	48 2b       	or	r20, r24
     e7c:	59 2b       	or	r21, r25
     e7e:	6a 2b       	or	r22, r26
     e80:	7b 2b       	or	r23, r27
     e82:	ee 85       	ldd	r30, Y+14	; 0x0e
     e84:	ff 85       	ldd	r31, Y+15	; 0x0f
     e86:	e7 50       	subi	r30, 0x07	; 7
     e88:	fe 4f       	sbci	r31, 0xFE	; 254
     e8a:	90 81       	ld	r25, Z
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	6c 01       	movw	r12, r24
     e90:	ee 24       	eor	r14, r14
     e92:	ff 24       	eor	r15, r15
     e94:	c4 2a       	or	r12, r20
     e96:	d5 2a       	or	r13, r21
     e98:	e6 2a       	or	r14, r22
     e9a:	f7 2a       	or	r15, r23
			fmt = check_fs(fs, bsect);		/* Check the partition */
     e9c:	8e 85       	ldd	r24, Y+14	; 0x0e
     e9e:	9f 85       	ldd	r25, Y+15	; 0x0f
     ea0:	b7 01       	movw	r22, r14
     ea2:	a6 01       	movw	r20, r12
     ea4:	0e 94 0c 06 	call	0xc18	; 0xc18 <check_fs>
     ea8:	03 c0       	rjmp	.+6      	; 0xeb0 <chk_mounted+0x160>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
     eaa:	cc 24       	eor	r12, r12
     eac:	dd 24       	eor	r13, r13
     eae:	76 01       	movw	r14, r12
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     eb0:	83 30       	cpi	r24, 0x03	; 3
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <chk_mounted+0x166>
     eb4:	63 c3       	rjmp	.+1734   	; 0x157c <chk_mounted+0x82c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
     eb6:	88 23       	and	r24, r24
     eb8:	09 f0       	breq	.+2      	; 0xebc <chk_mounted+0x16c>
     eba:	62 c3       	rjmp	.+1732   	; 0x1580 <chk_mounted+0x830>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
     ebc:	ae 85       	ldd	r26, Y+14	; 0x0e
     ebe:	bf 85       	ldd	r27, Y+15	; 0x0f
     ec0:	de 96       	adiw	r26, 0x3e	; 62
     ec2:	9c 91       	ld	r25, X
     ec4:	de 97       	sbiw	r26, 0x3e	; 62
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	dd 96       	adiw	r26, 0x3d	; 61
     eca:	2c 91       	ld	r18, X
     ecc:	dd 97       	sbiw	r26, 0x3d	; 61
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	82 2b       	or	r24, r18
     ed2:	93 2b       	or	r25, r19
     ed4:	b2 e0       	ldi	r27, 0x02	; 2
     ed6:	80 30       	cpi	r24, 0x00	; 0
     ed8:	9b 07       	cpc	r25, r27
     eda:	09 f0       	breq	.+2      	; 0xede <chk_mounted+0x18e>
     edc:	53 c3       	rjmp	.+1702   	; 0x1584 <chk_mounted+0x834>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
     ede:	ee 85       	ldd	r30, Y+14	; 0x0e
     ee0:	ff 85       	ldd	r31, Y+15	; 0x0f
     ee2:	e7 5b       	subi	r30, 0xB7	; 183
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	30 81       	ld	r19, Z
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	ee 85       	ldd	r30, Y+14	; 0x0e
     eec:	ff 85       	ldd	r31, Y+15	; 0x0f
     eee:	e8 5b       	subi	r30, 0xB8	; 184
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	80 81       	ld	r24, Z
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	82 2b       	or	r24, r18
     ef8:	93 2b       	or	r25, r19
     efa:	4c 01       	movw	r8, r24
     efc:	aa 24       	eor	r10, r10
     efe:	bb 24       	eor	r11, r11
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
     f00:	81 14       	cp	r8, r1
     f02:	91 04       	cpc	r9, r1
     f04:	a1 04       	cpc	r10, r1
     f06:	b1 04       	cpc	r11, r1
     f08:	a9 f5       	brne	.+106    	; 0xf74 <chk_mounted+0x224>
     f0a:	ee 85       	ldd	r30, Y+14	; 0x0e
     f0c:	ff 85       	ldd	r31, Y+15	; 0x0f
     f0e:	e7 5a       	subi	r30, 0xA7	; 167
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	40 81       	ld	r20, Z
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	74 2f       	mov	r23, r20
     f1c:	66 27       	eor	r22, r22
     f1e:	55 27       	eor	r21, r21
     f20:	44 27       	eor	r20, r20
     f22:	ee 85       	ldd	r30, Y+14	; 0x0e
     f24:	ff 85       	ldd	r31, Y+15	; 0x0f
     f26:	e8 5a       	subi	r30, 0xA8	; 168
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	80 81       	ld	r24, Z
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	a0 e0       	ldi	r26, 0x00	; 0
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	dc 01       	movw	r26, r24
     f34:	99 27       	eor	r25, r25
     f36:	88 27       	eor	r24, r24
     f38:	48 2b       	or	r20, r24
     f3a:	59 2b       	or	r21, r25
     f3c:	6a 2b       	or	r22, r26
     f3e:	7b 2b       	or	r23, r27
     f40:	ee 85       	ldd	r30, Y+14	; 0x0e
     f42:	ff 85       	ldd	r31, Y+15	; 0x0f
     f44:	ea 5a       	subi	r30, 0xAA	; 170
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	80 81       	ld	r24, Z
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	a0 e0       	ldi	r26, 0x00	; 0
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	48 2b       	or	r20, r24
     f52:	59 2b       	or	r21, r25
     f54:	6a 2b       	or	r22, r26
     f56:	7b 2b       	or	r23, r27
     f58:	ee 85       	ldd	r30, Y+14	; 0x0e
     f5a:	ff 85       	ldd	r31, Y+15	; 0x0f
     f5c:	e9 5a       	subi	r30, 0xA9	; 169
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	90 81       	ld	r25, Z
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	a0 e0       	ldi	r26, 0x00	; 0
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	4a 01       	movw	r8, r20
     f6a:	5b 01       	movw	r10, r22
     f6c:	88 2a       	or	r8, r24
     f6e:	99 2a       	or	r9, r25
     f70:	aa 2a       	or	r10, r26
     f72:	bb 2a       	or	r11, r27
	fs->fsize = fasize;
     f74:	ee 85       	ldd	r30, Y+14	; 0x0e
     f76:	ff 85       	ldd	r31, Y+15	; 0x0f
     f78:	86 8e       	std	Z+30, r8	; 0x1e
     f7a:	97 8e       	std	Z+31, r9	; 0x1f
     f7c:	a0 a2       	lds	r26, 0x90
     f7e:	b1 a2       	lds	r27, 0x91

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
     f80:	ee 5b       	subi	r30, 0xBE	; 190
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	00 81       	ld	r16, Z
     f86:	09 83       	std	Y+1, r16	; 0x01
     f88:	ae 85       	ldd	r26, Y+14	; 0x0e
     f8a:	bf 85       	ldd	r27, Y+15	; 0x0f
     f8c:	13 96       	adiw	r26, 0x03	; 3
     f8e:	0c 93       	st	X, r16
     f90:	13 97       	sbiw	r26, 0x03	; 3
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
     f92:	80 2f       	mov	r24, r16
     f94:	81 50       	subi	r24, 0x01	; 1
     f96:	82 30       	cpi	r24, 0x02	; 2
     f98:	08 f0       	brcs	.+2      	; 0xf9c <chk_mounted+0x24c>
     f9a:	f6 c2       	rjmp	.+1516   	; 0x1588 <chk_mounted+0x838>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
     f9c:	df 96       	adiw	r26, 0x3f	; 63
     f9e:	0c 91       	ld	r16, X
     fa0:	df 97       	sbiw	r26, 0x3f	; 63
     fa2:	0d 83       	std	Y+5, r16	; 0x05
     fa4:	12 96       	adiw	r26, 0x02	; 2
     fa6:	0c 93       	st	X, r16
     fa8:	12 97       	sbiw	r26, 0x02	; 2
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
     faa:	00 23       	and	r16, r16
     fac:	09 f4       	brne	.+2      	; 0xfb0 <chk_mounted+0x260>
     fae:	ee c2       	rjmp	.+1500   	; 0x158c <chk_mounted+0x83c>
     fb0:	80 2f       	mov	r24, r16
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	9c 01       	movw	r18, r24
     fb6:	21 50       	subi	r18, 0x01	; 1
     fb8:	30 40       	sbci	r19, 0x00	; 0
     fba:	82 23       	and	r24, r18
     fbc:	93 23       	and	r25, r19
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <chk_mounted+0x274>
     fc2:	e6 c2       	rjmp	.+1484   	; 0x1590 <chk_mounted+0x840>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
     fc4:	fd 01       	movw	r30, r26
     fc6:	ec 5b       	subi	r30, 0xBC	; 188
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	30 81       	ld	r19, Z
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	fd 01       	movw	r30, r26
     fd0:	ed 5b       	subi	r30, 0xBD	; 189
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	80 81       	ld	r24, Z
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	19 01       	movw	r2, r18
     fda:	28 2a       	or	r2, r24
     fdc:	39 2a       	or	r3, r25
     fde:	19 96       	adiw	r26, 0x09	; 9
     fe0:	3c 92       	st	X, r3
     fe2:	2e 92       	st	-X, r2
     fe4:	18 97       	sbiw	r26, 0x08	; 8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
     fe6:	c1 01       	movw	r24, r2
     fe8:	8f 70       	andi	r24, 0x0F	; 15
     fea:	90 70       	andi	r25, 0x00	; 0
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	09 f0       	breq	.+2      	; 0xff2 <chk_mounted+0x2a2>
     ff0:	d1 c2       	rjmp	.+1442   	; 0x1594 <chk_mounted+0x844>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
     ff2:	fd 01       	movw	r30, r26
     ff4:	ea 5b       	subi	r30, 0xBA	; 186
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	30 81       	ld	r19, Z
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	fd 01       	movw	r30, r26
     ffe:	eb 5b       	subi	r30, 0xBB	; 187
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	80 81       	ld	r24, Z
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	82 2b       	or	r24, r18
    1008:	93 2b       	or	r25, r19
    100a:	2c 01       	movw	r4, r24
    100c:	66 24       	eor	r6, r6
    100e:	77 24       	eor	r7, r7
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    1010:	41 14       	cp	r4, r1
    1012:	51 04       	cpc	r5, r1
    1014:	61 04       	cpc	r6, r1
    1016:	71 04       	cpc	r7, r1
    1018:	a1 f5       	brne	.+104    	; 0x1082 <chk_mounted+0x332>
    101a:	fd 01       	movw	r30, r26
    101c:	eb 5a       	subi	r30, 0xAB	; 171
    101e:	ff 4f       	sbci	r31, 0xFF	; 255
    1020:	80 81       	ld	r24, Z
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	a0 e0       	ldi	r26, 0x00	; 0
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	78 2f       	mov	r23, r24
    102a:	66 27       	eor	r22, r22
    102c:	55 27       	eor	r21, r21
    102e:	44 27       	eor	r20, r20
    1030:	ee 85       	ldd	r30, Y+14	; 0x0e
    1032:	ff 85       	ldd	r31, Y+15	; 0x0f
    1034:	ec 5a       	subi	r30, 0xAC	; 172
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	80 81       	ld	r24, Z
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	a0 e0       	ldi	r26, 0x00	; 0
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	dc 01       	movw	r26, r24
    1042:	99 27       	eor	r25, r25
    1044:	88 27       	eor	r24, r24
    1046:	48 2b       	or	r20, r24
    1048:	59 2b       	or	r21, r25
    104a:	6a 2b       	or	r22, r26
    104c:	7b 2b       	or	r23, r27
    104e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1050:	ff 85       	ldd	r31, Y+15	; 0x0f
    1052:	ee 5a       	subi	r30, 0xAE	; 174
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	80 81       	ld	r24, Z
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	a0 e0       	ldi	r26, 0x00	; 0
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	48 2b       	or	r20, r24
    1060:	59 2b       	or	r21, r25
    1062:	6a 2b       	or	r22, r26
    1064:	7b 2b       	or	r23, r27
    1066:	ee 85       	ldd	r30, Y+14	; 0x0e
    1068:	ff 85       	ldd	r31, Y+15	; 0x0f
    106a:	ed 5a       	subi	r30, 0xAD	; 173
    106c:	ff 4f       	sbci	r31, 0xFF	; 255
    106e:	90 81       	ld	r25, Z
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	a0 e0       	ldi	r26, 0x00	; 0
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	2a 01       	movw	r4, r20
    1078:	3b 01       	movw	r6, r22
    107a:	48 2a       	or	r4, r24
    107c:	59 2a       	or	r5, r25
    107e:	6a 2a       	or	r6, r26
    1080:	7b 2a       	or	r7, r27

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    1082:	ee 85       	ldd	r30, Y+14	; 0x0e
    1084:	ff 85       	ldd	r31, Y+15	; 0x0f
    1086:	ef 5b       	subi	r30, 0xBF	; 191
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	30 81       	ld	r19, Z
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1090:	ff 85       	ldd	r31, Y+15	; 0x0f
    1092:	e0 5c       	subi	r30, 0xC0	; 192
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	80 81       	ld	r24, Z
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	89 01       	movw	r16, r18
    109c:	08 2b       	or	r16, r24
    109e:	19 2b       	or	r17, r25
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    10a0:	01 15       	cp	r16, r1
    10a2:	11 05       	cpc	r17, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <chk_mounted+0x358>
    10a6:	78 c2       	rjmp	.+1264   	; 0x1598 <chk_mounted+0x848>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	c5 01       	movw	r24, r10
    10b4:	b4 01       	movw	r22, r8
    10b6:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <__mulsi3>
    10ba:	6a 87       	std	Y+10, r22	; 0x0a
    10bc:	7b 87       	std	Y+11, r23	; 0x0b
    10be:	8c 87       	std	Y+12, r24	; 0x0c
    10c0:	9d 87       	std	Y+13, r25	; 0x0d

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    10c2:	98 01       	movw	r18, r16
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	50 e0       	ldi	r21, 0x00	; 0
    10c8:	2e 83       	std	Y+6, r18	; 0x06
    10ca:	3f 83       	std	Y+7, r19	; 0x07
    10cc:	48 87       	std	Y+8, r20	; 0x08
    10ce:	59 87       	std	Y+9, r21	; 0x09
    10d0:	c1 01       	movw	r24, r2
    10d2:	92 95       	swap	r25
    10d4:	82 95       	swap	r24
    10d6:	8f 70       	andi	r24, 0x0F	; 15
    10d8:	89 27       	eor	r24, r25
    10da:	9f 70       	andi	r25, 0x0F	; 15
    10dc:	89 27       	eor	r24, r25
    10de:	a0 e0       	ldi	r26, 0x00	; 0
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	82 0f       	add	r24, r18
    10e4:	93 1f       	adc	r25, r19
    10e6:	a4 1f       	adc	r26, r20
    10e8:	b5 1f       	adc	r27, r21
    10ea:	0a 85       	ldd	r16, Y+10	; 0x0a
    10ec:	1b 85       	ldd	r17, Y+11	; 0x0b
    10ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    10f0:	3d 85       	ldd	r19, Y+13	; 0x0d
    10f2:	08 0f       	add	r16, r24
    10f4:	19 1f       	adc	r17, r25
    10f6:	2a 1f       	adc	r18, r26
    10f8:	3b 1f       	adc	r19, r27
    10fa:	09 83       	std	Y+1, r16	; 0x01
    10fc:	1a 83       	std	Y+2, r17	; 0x02
    10fe:	2b 83       	std	Y+3, r18	; 0x03
    1100:	3c 83       	std	Y+4, r19	; 0x04
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    1102:	40 16       	cp	r4, r16
    1104:	51 06       	cpc	r5, r17
    1106:	62 06       	cpc	r6, r18
    1108:	73 06       	cpc	r7, r19
    110a:	08 f4       	brcc	.+2      	; 0x110e <chk_mounted+0x3be>
    110c:	47 c2       	rjmp	.+1166   	; 0x159c <chk_mounted+0x84c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    110e:	c3 01       	movw	r24, r6
    1110:	b2 01       	movw	r22, r4
    1112:	60 1b       	sub	r22, r16
    1114:	71 0b       	sbc	r23, r17
    1116:	82 0b       	sbc	r24, r18
    1118:	93 0b       	sbc	r25, r19
    111a:	1d 81       	ldd	r17, Y+5	; 0x05
    111c:	21 2f       	mov	r18, r17
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <__udivmodsi4>
    1128:	89 01       	movw	r16, r18
    112a:	9a 01       	movw	r18, r20
    112c:	d9 01       	movw	r26, r18
    112e:	c8 01       	movw	r24, r16
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    1130:	01 15       	cp	r16, r1
    1132:	11 05       	cpc	r17, r1
    1134:	21 05       	cpc	r18, r1
    1136:	31 05       	cpc	r19, r1
    1138:	09 f4       	brne	.+2      	; 0x113c <chk_mounted+0x3ec>
    113a:	32 c2       	rjmp	.+1124   	; 0x15a0 <chk_mounted+0x850>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    113c:	06 3f       	cpi	r16, 0xF6	; 246
    113e:	4f e0       	ldi	r20, 0x0F	; 15
    1140:	14 07       	cpc	r17, r20
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	24 07       	cpc	r18, r20
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	34 07       	cpc	r19, r20
    114a:	18 f4       	brcc	.+6      	; 0x1152 <chk_mounted+0x402>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
    114c:	44 24       	eor	r4, r4
    114e:	43 94       	inc	r4
    1150:	03 c0       	rjmp	.+6      	; 0x1158 <chk_mounted+0x408>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    1152:	44 24       	eor	r4, r4
    1154:	68 94       	set
    1156:	41 f8       	bld	r4, 1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    1158:	86 3f       	cpi	r24, 0xF6	; 246
    115a:	5f ef       	ldi	r21, 0xFF	; 255
    115c:	95 07       	cpc	r25, r21
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	a5 07       	cpc	r26, r21
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	b5 07       	cpc	r27, r21
    1166:	08 f0       	brcs	.+2      	; 0x116a <chk_mounted+0x41a>
    1168:	3b c2       	rjmp	.+1142   	; 0x15e0 <chk_mounted+0x890>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    116a:	b9 01       	movw	r22, r18
    116c:	a8 01       	movw	r20, r16
    116e:	4e 5f       	subi	r20, 0xFE	; 254
    1170:	5f 4f       	sbci	r21, 0xFF	; 255
    1172:	6f 4f       	sbci	r22, 0xFF	; 255
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	ae 85       	ldd	r26, Y+14	; 0x0e
    1178:	bf 85       	ldd	r27, Y+15	; 0x0f
    117a:	5a 96       	adiw	r26, 0x1a	; 26
    117c:	4d 93       	st	X+, r20
    117e:	5d 93       	st	X+, r21
    1180:	6d 93       	st	X+, r22
    1182:	7c 93       	st	X, r23
    1184:	5d 97       	sbiw	r26, 0x1d	; 29
	fs->database = bsect + sysect;						/* Data start sector */
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	ab 81       	ldd	r26, Y+3	; 0x03
    118c:	bc 81       	ldd	r27, Y+4	; 0x04
    118e:	8c 0d       	add	r24, r12
    1190:	9d 1d       	adc	r25, r13
    1192:	ae 1d       	adc	r26, r14
    1194:	bf 1d       	adc	r27, r15
    1196:	ee 85       	ldd	r30, Y+14	; 0x0e
    1198:	ff 85       	ldd	r31, Y+15	; 0x0f
    119a:	82 a7       	lds	r24, 0x72
    119c:	93 a7       	lds	r25, 0x73
    119e:	a4 a7       	lds	r26, 0x74
    11a0:	b5 a7       	lds	r27, 0x75
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    11a2:	8e 81       	ldd	r24, Y+6	; 0x06
    11a4:	9f 81       	ldd	r25, Y+7	; 0x07
    11a6:	a8 85       	ldd	r26, Y+8	; 0x08
    11a8:	b9 85       	ldd	r27, Y+9	; 0x09
    11aa:	8c 0d       	add	r24, r12
    11ac:	9d 1d       	adc	r25, r13
    11ae:	ae 1d       	adc	r26, r14
    11b0:	bf 1d       	adc	r27, r15
    11b2:	82 a3       	lds	r24, 0x52
    11b4:	93 a3       	lds	r25, 0x53
    11b6:	a4 a3       	lds	r26, 0x54
    11b8:	b5 a3       	lds	r27, 0x55
	if (fmt == FS_FAT32) {
    11ba:	f3 e0       	ldi	r31, 0x03	; 3
    11bc:	4f 16       	cp	r4, r31
    11be:	09 f0       	breq	.+2      	; 0x11c2 <chk_mounted+0x472>
    11c0:	46 c0       	rjmp	.+140    	; 0x124e <chk_mounted+0x4fe>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    11c2:	21 14       	cp	r2, r1
    11c4:	31 04       	cpc	r3, r1
    11c6:	09 f0       	breq	.+2      	; 0x11ca <chk_mounted+0x47a>
    11c8:	ed c1       	rjmp	.+986    	; 0x15a4 <chk_mounted+0x854>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    11ca:	ee 85       	ldd	r30, Y+14	; 0x0e
    11cc:	ff 85       	ldd	r31, Y+15	; 0x0f
    11ce:	ef 59       	subi	r30, 0x9F	; 159
    11d0:	ff 4f       	sbci	r31, 0xFF	; 255
    11d2:	80 81       	ld	r24, Z
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	a0 e0       	ldi	r26, 0x00	; 0
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	38 2f       	mov	r19, r24
    11dc:	22 27       	eor	r18, r18
    11de:	11 27       	eor	r17, r17
    11e0:	00 27       	eor	r16, r16
    11e2:	ee 85       	ldd	r30, Y+14	; 0x0e
    11e4:	ff 85       	ldd	r31, Y+15	; 0x0f
    11e6:	e0 5a       	subi	r30, 0xA0	; 160
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	80 81       	ld	r24, Z
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a0 e0       	ldi	r26, 0x00	; 0
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	dc 01       	movw	r26, r24
    11f4:	99 27       	eor	r25, r25
    11f6:	88 27       	eor	r24, r24
    11f8:	08 2b       	or	r16, r24
    11fa:	19 2b       	or	r17, r25
    11fc:	2a 2b       	or	r18, r26
    11fe:	3b 2b       	or	r19, r27
    1200:	ee 85       	ldd	r30, Y+14	; 0x0e
    1202:	ff 85       	ldd	r31, Y+15	; 0x0f
    1204:	e2 5a       	subi	r30, 0xA2	; 162
    1206:	ff 4f       	sbci	r31, 0xFF	; 255
    1208:	80 81       	ld	r24, Z
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	a0 e0       	ldi	r26, 0x00	; 0
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	08 2b       	or	r16, r24
    1212:	19 2b       	or	r17, r25
    1214:	2a 2b       	or	r18, r26
    1216:	3b 2b       	or	r19, r27
    1218:	ee 85       	ldd	r30, Y+14	; 0x0e
    121a:	ff 85       	ldd	r31, Y+15	; 0x0f
    121c:	e1 5a       	subi	r30, 0xA1	; 161
    121e:	ff 4f       	sbci	r31, 0xFF	; 255
    1220:	90 81       	ld	r25, Z
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	a0 e0       	ldi	r26, 0x00	; 0
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	80 2b       	or	r24, r16
    122a:	91 2b       	or	r25, r17
    122c:	a2 2b       	or	r26, r18
    122e:	b3 2b       	or	r27, r19
    1230:	ee 85       	ldd	r30, Y+14	; 0x0e
    1232:	ff 85       	ldd	r31, Y+15	; 0x0f
    1234:	86 a3       	lds	r24, 0x56
    1236:	97 a3       	lds	r25, 0x57
    1238:	a0 a7       	lds	r26, 0x70
    123a:	b1 a7       	lds	r27, 0x71
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    123c:	44 0f       	add	r20, r20
    123e:	55 1f       	adc	r21, r21
    1240:	66 1f       	adc	r22, r22
    1242:	77 1f       	adc	r23, r23
    1244:	44 0f       	add	r20, r20
    1246:	55 1f       	adc	r21, r21
    1248:	66 1f       	adc	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	30 c0       	rjmp	.+96     	; 0x12ae <chk_mounted+0x55e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    124e:	21 14       	cp	r2, r1
    1250:	31 04       	cpc	r3, r1
    1252:	09 f4       	brne	.+2      	; 0x1256 <chk_mounted+0x506>
    1254:	a9 c1       	rjmp	.+850    	; 0x15a8 <chk_mounted+0x858>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    1256:	0a 85       	ldd	r16, Y+10	; 0x0a
    1258:	1b 85       	ldd	r17, Y+11	; 0x0b
    125a:	2c 85       	ldd	r18, Y+12	; 0x0c
    125c:	3d 85       	ldd	r19, Y+13	; 0x0d
    125e:	80 0f       	add	r24, r16
    1260:	91 1f       	adc	r25, r17
    1262:	a2 1f       	adc	r26, r18
    1264:	b3 1f       	adc	r27, r19
    1266:	ee 85       	ldd	r30, Y+14	; 0x0e
    1268:	ff 85       	ldd	r31, Y+15	; 0x0f
    126a:	86 a3       	lds	r24, 0x56
    126c:	97 a3       	lds	r25, 0x57
    126e:	a0 a7       	lds	r26, 0x70
    1270:	b1 a7       	lds	r27, 0x71
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    1272:	f2 e0       	ldi	r31, 0x02	; 2
    1274:	4f 16       	cp	r4, r31
    1276:	29 f4       	brne	.+10     	; 0x1282 <chk_mounted+0x532>
    1278:	44 0f       	add	r20, r20
    127a:	55 1f       	adc	r21, r21
    127c:	66 1f       	adc	r22, r22
    127e:	77 1f       	adc	r23, r23
    1280:	16 c0       	rjmp	.+44     	; 0x12ae <chk_mounted+0x55e>
    1282:	db 01       	movw	r26, r22
    1284:	ca 01       	movw	r24, r20
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	aa 1f       	adc	r26, r26
    128c:	bb 1f       	adc	r27, r27
    128e:	84 0f       	add	r24, r20
    1290:	95 1f       	adc	r25, r21
    1292:	a6 1f       	adc	r26, r22
    1294:	b7 1f       	adc	r27, r23
    1296:	b6 95       	lsr	r27
    1298:	a7 95       	ror	r26
    129a:	97 95       	ror	r25
    129c:	87 95       	ror	r24
    129e:	41 70       	andi	r20, 0x01	; 1
    12a0:	50 70       	andi	r21, 0x00	; 0
    12a2:	60 70       	andi	r22, 0x00	; 0
    12a4:	70 70       	andi	r23, 0x00	; 0
    12a6:	48 0f       	add	r20, r24
    12a8:	59 1f       	adc	r21, r25
    12aa:	6a 1f       	adc	r22, r26
    12ac:	7b 1f       	adc	r23, r27
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    12ae:	db 01       	movw	r26, r22
    12b0:	ca 01       	movw	r24, r20
    12b2:	81 50       	subi	r24, 0x01	; 1
    12b4:	9e 4f       	sbci	r25, 0xFE	; 254
    12b6:	af 4f       	sbci	r26, 0xFF	; 255
    12b8:	bf 4f       	sbci	r27, 0xFF	; 255
    12ba:	07 2e       	mov	r0, r23
    12bc:	79 e0       	ldi	r23, 0x09	; 9
    12be:	b6 95       	lsr	r27
    12c0:	a7 95       	ror	r26
    12c2:	97 95       	ror	r25
    12c4:	87 95       	ror	r24
    12c6:	7a 95       	dec	r23
    12c8:	d1 f7       	brne	.-12     	; 0x12be <chk_mounted+0x56e>
    12ca:	70 2d       	mov	r23, r0
    12cc:	88 16       	cp	r8, r24
    12ce:	99 06       	cpc	r9, r25
    12d0:	aa 06       	cpc	r10, r26
    12d2:	bb 06       	cpc	r11, r27
    12d4:	08 f4       	brcc	.+2      	; 0x12d8 <chk_mounted+0x588>
    12d6:	6a c1       	rjmp	.+724    	; 0x15ac <chk_mounted+0x85c>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    12d8:	8f ef       	ldi	r24, 0xFF	; 255
    12da:	9f ef       	ldi	r25, 0xFF	; 255
    12dc:	dc 01       	movw	r26, r24
    12de:	ee 85       	ldd	r30, Y+14	; 0x0e
    12e0:	ff 85       	ldd	r31, Y+15	; 0x0f
    12e2:	86 87       	std	Z+14, r24	; 0x0e
    12e4:	97 87       	std	Z+15, r25	; 0x0f
    12e6:	a0 8b       	std	Z+16, r26	; 0x10
    12e8:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    12ea:	12 86       	std	Z+10, r1	; 0x0a
    12ec:	13 86       	std	Z+11, r1	; 0x0b
    12ee:	14 86       	std	Z+12, r1	; 0x0c
    12f0:	15 86       	std	Z+13, r1	; 0x0d

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    12f2:	b3 e0       	ldi	r27, 0x03	; 3
    12f4:	4b 16       	cp	r4, r27
    12f6:	09 f0       	breq	.+2      	; 0x12fa <chk_mounted+0x5aa>
    12f8:	15 c1       	rjmp	.+554    	; 0x1524 <chk_mounted+0x7d4>
	 	fs->fsi_flag = 0;
    12fa:	15 82       	std	Z+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    12fc:	ed 59       	subi	r30, 0x9D	; 157
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	30 81       	ld	r19, Z
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	ee 85       	ldd	r30, Y+14	; 0x0e
    1306:	ff 85       	ldd	r31, Y+15	; 0x0f
    1308:	ee 59       	subi	r30, 0x9E	; 158
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	80 81       	ld	r24, Z
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	82 2b       	or	r24, r18
    1312:	93 2b       	or	r25, r19
    1314:	a0 e0       	ldi	r26, 0x00	; 0
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	a7 01       	movw	r20, r14
    131a:	96 01       	movw	r18, r12
    131c:	28 0f       	add	r18, r24
    131e:	39 1f       	adc	r19, r25
    1320:	4a 1f       	adc	r20, r26
    1322:	5b 1f       	adc	r21, r27
    1324:	ae 85       	ldd	r26, Y+14	; 0x0e
    1326:	bf 85       	ldd	r27, Y+15	; 0x0f
    1328:	52 96       	adiw	r26, 0x12	; 18
    132a:	2d 93       	st	X+, r18
    132c:	3d 93       	st	X+, r19
    132e:	4d 93       	st	X+, r20
    1330:	5c 93       	st	X, r21
    1332:	55 97       	sbiw	r26, 0x15	; 21
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1334:	bd 01       	movw	r22, r26
    1336:	6e 5c       	subi	r22, 0xCE	; 206
    1338:	7f 4f       	sbci	r23, 0xFF	; 255
    133a:	11 96       	adiw	r26, 0x01	; 1
    133c:	8c 91       	ld	r24, X
    133e:	01 e0       	ldi	r16, 0x01	; 1
    1340:	0e 94 3b 02 	call	0x476	; 0x476 <disk_read>
    1344:	88 23       	and	r24, r24
    1346:	09 f0       	breq	.+2      	; 0x134a <chk_mounted+0x5fa>
    1348:	ed c0       	rjmp	.+474    	; 0x1524 <chk_mounted+0x7d4>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    134a:	ee 85       	ldd	r30, Y+14	; 0x0e
    134c:	ff 85       	ldd	r31, Y+15	; 0x0f
    134e:	ef 5c       	subi	r30, 0xCF	; 207
    1350:	fd 4f       	sbci	r31, 0xFD	; 253
    1352:	30 81       	ld	r19, Z
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	ee 85       	ldd	r30, Y+14	; 0x0e
    1358:	ff 85       	ldd	r31, Y+15	; 0x0f
    135a:	e0 5d       	subi	r30, 0xD0	; 208
    135c:	fd 4f       	sbci	r31, 0xFD	; 253
    135e:	80 81       	ld	r24, Z
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	82 2b       	or	r24, r18
    1364:	93 2b       	or	r25, r19

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1366:	ba ea       	ldi	r27, 0xAA	; 170
    1368:	85 35       	cpi	r24, 0x55	; 85
    136a:	9b 07       	cpc	r25, r27
    136c:	09 f0       	breq	.+2      	; 0x1370 <chk_mounted+0x620>
    136e:	da c0       	rjmp	.+436    	; 0x1524 <chk_mounted+0x7d4>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    1370:	ee 85       	ldd	r30, Y+14	; 0x0e
    1372:	ff 85       	ldd	r31, Y+15	; 0x0f
    1374:	45 a9       	sts	0x45, r20
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	74 2f       	mov	r23, r20
    137e:	66 27       	eor	r22, r22
    1380:	55 27       	eor	r21, r21
    1382:	44 27       	eor	r20, r20
    1384:	84 a9       	sts	0x44, r24
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	a0 e0       	ldi	r26, 0x00	; 0
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	dc 01       	movw	r26, r24
    138e:	99 27       	eor	r25, r25
    1390:	88 27       	eor	r24, r24
    1392:	48 2b       	or	r20, r24
    1394:	59 2b       	or	r21, r25
    1396:	6a 2b       	or	r22, r26
    1398:	7b 2b       	or	r23, r27
    139a:	82 a9       	sts	0x42, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a0 e0       	ldi	r26, 0x00	; 0
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	48 2b       	or	r20, r24
    13a4:	59 2b       	or	r21, r25
    13a6:	6a 2b       	or	r22, r26
    13a8:	7b 2b       	or	r23, r27
    13aa:	93 a9       	sts	0x43, r25
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	a0 e0       	ldi	r26, 0x00	; 0
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	84 2b       	or	r24, r20
    13b4:	95 2b       	or	r25, r21
    13b6:	a6 2b       	or	r26, r22
    13b8:	b7 2b       	or	r27, r23
	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    13ba:	82 35       	cpi	r24, 0x52	; 82
    13bc:	f2 e5       	ldi	r31, 0x52	; 82
    13be:	9f 07       	cpc	r25, r31
    13c0:	f1 e6       	ldi	r31, 0x61	; 97
    13c2:	af 07       	cpc	r26, r31
    13c4:	f1 e4       	ldi	r31, 0x41	; 65
    13c6:	bf 07       	cpc	r27, r31
    13c8:	09 f0       	breq	.+2      	; 0x13cc <chk_mounted+0x67c>
    13ca:	ac c0       	rjmp	.+344    	; 0x1524 <chk_mounted+0x7d4>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    13cc:	ee 85       	ldd	r30, Y+14	; 0x0e
    13ce:	ff 85       	ldd	r31, Y+15	; 0x0f
    13d0:	e7 5e       	subi	r30, 0xE7	; 231
    13d2:	fd 4f       	sbci	r31, 0xFD	; 253
    13d4:	80 81       	ld	r24, Z
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	a0 e0       	ldi	r26, 0x00	; 0
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	b8 2f       	mov	r27, r24
    13de:	aa 27       	eor	r26, r26
    13e0:	99 27       	eor	r25, r25
    13e2:	88 27       	eor	r24, r24
    13e4:	ee 85       	ldd	r30, Y+14	; 0x0e
    13e6:	ff 85       	ldd	r31, Y+15	; 0x0f
    13e8:	e8 5e       	subi	r30, 0xE8	; 232
    13ea:	fd 4f       	sbci	r31, 0xFD	; 253
    13ec:	40 81       	ld	r20, Z
    13ee:	50 e0       	ldi	r21, 0x00	; 0
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	ba 01       	movw	r22, r20
    13f6:	55 27       	eor	r21, r21
    13f8:	44 27       	eor	r20, r20
    13fa:	84 2b       	or	r24, r20
    13fc:	95 2b       	or	r25, r21
    13fe:	a6 2b       	or	r26, r22
    1400:	b7 2b       	or	r27, r23
    1402:	ee 85       	ldd	r30, Y+14	; 0x0e
    1404:	ff 85       	ldd	r31, Y+15	; 0x0f
    1406:	ea 5e       	subi	r30, 0xEA	; 234
    1408:	fd 4f       	sbci	r31, 0xFD	; 253
    140a:	40 81       	ld	r20, Z
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	48 2b       	or	r20, r24
    1414:	59 2b       	or	r21, r25
    1416:	6a 2b       	or	r22, r26
    1418:	7b 2b       	or	r23, r27
    141a:	ee 85       	ldd	r30, Y+14	; 0x0e
    141c:	ff 85       	ldd	r31, Y+15	; 0x0f
    141e:	e9 5e       	subi	r30, 0xE9	; 233
    1420:	fd 4f       	sbci	r31, 0xFD	; 253
    1422:	90 81       	ld	r25, Z
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	a0 e0       	ldi	r26, 0x00	; 0
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	84 2b       	or	r24, r20
    142c:	95 2b       	or	r25, r21
    142e:	a6 2b       	or	r26, r22
    1430:	b7 2b       	or	r27, r23
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    1432:	82 37       	cpi	r24, 0x72	; 114
    1434:	02 e7       	ldi	r16, 0x72	; 114
    1436:	90 07       	cpc	r25, r16
    1438:	01 e4       	ldi	r16, 0x41	; 65
    143a:	a0 07       	cpc	r26, r16
    143c:	01 e6       	ldi	r16, 0x61	; 97
    143e:	b0 07       	cpc	r27, r16
    1440:	09 f0       	breq	.+2      	; 0x1444 <chk_mounted+0x6f4>
    1442:	70 c0       	rjmp	.+224    	; 0x1524 <chk_mounted+0x7d4>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    1444:	ee 85       	ldd	r30, Y+14	; 0x0e
    1446:	ff 85       	ldd	r31, Y+15	; 0x0f
    1448:	ef 5d       	subi	r30, 0xDF	; 223
    144a:	fd 4f       	sbci	r31, 0xFD	; 253
    144c:	80 81       	ld	r24, Z
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	a0 e0       	ldi	r26, 0x00	; 0
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	b8 2f       	mov	r27, r24
    1456:	aa 27       	eor	r26, r26
    1458:	99 27       	eor	r25, r25
    145a:	88 27       	eor	r24, r24
    145c:	ee 85       	ldd	r30, Y+14	; 0x0e
    145e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1460:	e0 5e       	subi	r30, 0xE0	; 224
    1462:	fd 4f       	sbci	r31, 0xFD	; 253
    1464:	40 81       	ld	r20, Z
    1466:	50 e0       	ldi	r21, 0x00	; 0
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	ba 01       	movw	r22, r20
    146e:	55 27       	eor	r21, r21
    1470:	44 27       	eor	r20, r20
    1472:	84 2b       	or	r24, r20
    1474:	95 2b       	or	r25, r21
    1476:	a6 2b       	or	r26, r22
    1478:	b7 2b       	or	r27, r23
    147a:	ee 85       	ldd	r30, Y+14	; 0x0e
    147c:	ff 85       	ldd	r31, Y+15	; 0x0f
    147e:	e2 5e       	subi	r30, 0xE2	; 226
    1480:	fd 4f       	sbci	r31, 0xFD	; 253
    1482:	40 81       	ld	r20, Z
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	48 2b       	or	r20, r24
    148c:	59 2b       	or	r21, r25
    148e:	6a 2b       	or	r22, r26
    1490:	7b 2b       	or	r23, r27
    1492:	ee 85       	ldd	r30, Y+14	; 0x0e
    1494:	ff 85       	ldd	r31, Y+15	; 0x0f
    1496:	e1 5e       	subi	r30, 0xE1	; 225
    1498:	fd 4f       	sbci	r31, 0xFD	; 253
    149a:	90 81       	ld	r25, Z
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	a0 e0       	ldi	r26, 0x00	; 0
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	84 2b       	or	r24, r20
    14a4:	95 2b       	or	r25, r21
    14a6:	a6 2b       	or	r26, r22
    14a8:	b7 2b       	or	r27, r23
    14aa:	ee 85       	ldd	r30, Y+14	; 0x0e
    14ac:	ff 85       	ldd	r31, Y+15	; 0x0f
    14ae:	82 87       	std	Z+10, r24	; 0x0a
    14b0:	93 87       	std	Z+11, r25	; 0x0b
    14b2:	a4 87       	std	Z+12, r26	; 0x0c
    14b4:	b5 87       	std	Z+13, r27	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    14b6:	e3 5e       	subi	r30, 0xE3	; 227
    14b8:	fd 4f       	sbci	r31, 0xFD	; 253
    14ba:	80 81       	ld	r24, Z
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a0 e0       	ldi	r26, 0x00	; 0
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	b8 2f       	mov	r27, r24
    14c4:	aa 27       	eor	r26, r26
    14c6:	99 27       	eor	r25, r25
    14c8:	88 27       	eor	r24, r24
    14ca:	ee 85       	ldd	r30, Y+14	; 0x0e
    14cc:	ff 85       	ldd	r31, Y+15	; 0x0f
    14ce:	e4 5e       	subi	r30, 0xE4	; 228
    14d0:	fd 4f       	sbci	r31, 0xFD	; 253
    14d2:	40 81       	ld	r20, Z
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	ba 01       	movw	r22, r20
    14dc:	55 27       	eor	r21, r21
    14de:	44 27       	eor	r20, r20
    14e0:	84 2b       	or	r24, r20
    14e2:	95 2b       	or	r25, r21
    14e4:	a6 2b       	or	r26, r22
    14e6:	b7 2b       	or	r27, r23
    14e8:	ee 85       	ldd	r30, Y+14	; 0x0e
    14ea:	ff 85       	ldd	r31, Y+15	; 0x0f
    14ec:	e6 5e       	subi	r30, 0xE6	; 230
    14ee:	fd 4f       	sbci	r31, 0xFD	; 253
    14f0:	40 81       	ld	r20, Z
    14f2:	50 e0       	ldi	r21, 0x00	; 0
    14f4:	60 e0       	ldi	r22, 0x00	; 0
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	48 2b       	or	r20, r24
    14fa:	59 2b       	or	r21, r25
    14fc:	6a 2b       	or	r22, r26
    14fe:	7b 2b       	or	r23, r27
    1500:	ee 85       	ldd	r30, Y+14	; 0x0e
    1502:	ff 85       	ldd	r31, Y+15	; 0x0f
    1504:	e5 5e       	subi	r30, 0xE5	; 229
    1506:	fd 4f       	sbci	r31, 0xFD	; 253
    1508:	90 81       	ld	r25, Z
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	a0 e0       	ldi	r26, 0x00	; 0
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	84 2b       	or	r24, r20
    1512:	95 2b       	or	r25, r21
    1514:	a6 2b       	or	r26, r22
    1516:	b7 2b       	or	r27, r23
    1518:	ee 85       	ldd	r30, Y+14	; 0x0e
    151a:	ff 85       	ldd	r31, Y+15	; 0x0f
    151c:	86 87       	std	Z+14, r24	; 0x0e
    151e:	97 87       	std	Z+15, r25	; 0x0f
    1520:	a0 8b       	std	Z+16, r26	; 0x10
    1522:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    1524:	ae 85       	ldd	r26, Y+14	; 0x0e
    1526:	bf 85       	ldd	r27, Y+15	; 0x0f
    1528:	4c 92       	st	X, r4
	fs->id = ++Fsid;		/* File system mount ID */
    152a:	80 91 a6 01 	lds	r24, 0x01A6
    152e:	90 91 a7 01 	lds	r25, 0x01A7
    1532:	01 96       	adiw	r24, 0x01	; 1
    1534:	90 93 a7 01 	sts	0x01A7, r25
    1538:	80 93 a6 01 	sts	0x01A6, r24
    153c:	17 96       	adiw	r26, 0x07	; 7
    153e:	9c 93       	st	X, r25
    1540:	8e 93       	st	-X, r24
    1542:	16 97       	sbiw	r26, 0x06	; 6
	fs->winsect = 0;		/* Invalidate sector cache */
    1544:	fd 01       	movw	r30, r26
    1546:	16 a6       	lds	r17, 0xb6
    1548:	17 a6       	lds	r17, 0xb7
    154a:	10 aa       	sts	0x90, r17
    154c:	11 aa       	sts	0x91, r17
	fs->wflag = 0;
    154e:	14 82       	std	Z+4, r1	; 0x04
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    1550:	56 96       	adiw	r26, 0x16	; 22
    1552:	1d 92       	st	X+, r1
    1554:	1d 92       	st	X+, r1
    1556:	1d 92       	st	X+, r1
    1558:	1c 92       	st	X, r1
    155a:	59 97       	sbiw	r26, 0x19	; 25
#endif
#if _FS_LOCK				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	27 c0       	rjmp	.+78     	; 0x15ae <chk_mounted+0x85e>
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
    1560:	8b e0       	ldi	r24, 0x0B	; 11
    1562:	25 c0       	rjmp	.+74     	; 0x15ae <chk_mounted+0x85e>
	fs = FatFs[vol];					/* Get corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    1564:	8c e0       	ldi	r24, 0x0C	; 12
    1566:	23 c0       	rjmp	.+70     	; 0x15ae <chk_mounted+0x85e>
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	21 c0       	rjmp	.+66     	; 0x15ae <chk_mounted+0x85e>
	*rfs = fs;							/* Return pointer to the corresponding file system object */
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
    156c:	8a e0       	ldi	r24, 0x0A	; 10
    156e:	1f c0       	rjmp	.+62     	; 0x15ae <chk_mounted+0x85e>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    1570:	83 e0       	ldi	r24, 0x03	; 3
    1572:	1d c0       	rjmp	.+58     	; 0x15ae <chk_mounted+0x85e>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    1574:	8a e0       	ldi	r24, 0x0A	; 10
    1576:	1b c0       	rjmp	.+54     	; 0x15ae <chk_mounted+0x85e>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    1578:	8d e0       	ldi	r24, 0x0D	; 13
    157a:	19 c0       	rjmp	.+50     	; 0x15ae <chk_mounted+0x85e>
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	17 c0       	rjmp	.+46     	; 0x15ae <chk_mounted+0x85e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    1580:	8d e0       	ldi	r24, 0x0D	; 13
    1582:	15 c0       	rjmp	.+42     	; 0x15ae <chk_mounted+0x85e>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
    1584:	8d e0       	ldi	r24, 0x0D	; 13
    1586:	13 c0       	rjmp	.+38     	; 0x15ae <chk_mounted+0x85e>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    1588:	8d e0       	ldi	r24, 0x0D	; 13
    158a:	11 c0       	rjmp	.+34     	; 0x15ae <chk_mounted+0x85e>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    158c:	8d e0       	ldi	r24, 0x0D	; 13
    158e:	0f c0       	rjmp	.+30     	; 0x15ae <chk_mounted+0x85e>
    1590:	8d e0       	ldi	r24, 0x0D	; 13
    1592:	0d c0       	rjmp	.+26     	; 0x15ae <chk_mounted+0x85e>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    1594:	8d e0       	ldi	r24, 0x0D	; 13
    1596:	0b c0       	rjmp	.+22     	; 0x15ae <chk_mounted+0x85e>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    1598:	8d e0       	ldi	r24, 0x0D	; 13
    159a:	09 c0       	rjmp	.+18     	; 0x15ae <chk_mounted+0x85e>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    159c:	8d e0       	ldi	r24, 0x0D	; 13
    159e:	07 c0       	rjmp	.+14     	; 0x15ae <chk_mounted+0x85e>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    15a0:	8d e0       	ldi	r24, 0x0D	; 13
    15a2:	05 c0       	rjmp	.+10     	; 0x15ae <chk_mounted+0x85e>
	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->database = bsect + sysect;						/* Data start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    15a4:	8d e0       	ldi	r24, 0x0D	; 13
    15a6:	03 c0       	rjmp	.+6      	; 0x15ae <chk_mounted+0x85e>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    15a8:	8d e0       	ldi	r24, 0x0D	; 13
    15aa:	01 c0       	rjmp	.+2      	; 0x15ae <chk_mounted+0x85e>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;
    15ac:	8d e0       	ldi	r24, 0x0D	; 13
#if _FS_LOCK				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
    15ae:	2f 96       	adiw	r28, 0x0f	; 15
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	1f 91       	pop	r17
    15c0:	0f 91       	pop	r16
    15c2:	ff 90       	pop	r15
    15c4:	ef 90       	pop	r14
    15c6:	df 90       	pop	r13
    15c8:	cf 90       	pop	r12
    15ca:	bf 90       	pop	r11
    15cc:	af 90       	pop	r10
    15ce:	9f 90       	pop	r9
    15d0:	8f 90       	pop	r8
    15d2:	7f 90       	pop	r7
    15d4:	6f 90       	pop	r6
    15d6:	5f 90       	pop	r5
    15d8:	4f 90       	pop	r4
    15da:	3f 90       	pop	r3
    15dc:	2f 90       	pop	r2
    15de:	08 95       	ret
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    15e0:	b9 01       	movw	r22, r18
    15e2:	a8 01       	movw	r20, r16
    15e4:	4e 5f       	subi	r20, 0xFE	; 254
    15e6:	5f 4f       	sbci	r21, 0xFF	; 255
    15e8:	6f 4f       	sbci	r22, 0xFF	; 255
    15ea:	7f 4f       	sbci	r23, 0xFF	; 255
    15ec:	ee 85       	ldd	r30, Y+14	; 0x0e
    15ee:	ff 85       	ldd	r31, Y+15	; 0x0f
    15f0:	42 8f       	std	Z+26, r20	; 0x1a
    15f2:	53 8f       	std	Z+27, r21	; 0x1b
    15f4:	64 8f       	std	Z+28, r22	; 0x1c
    15f6:	75 8f       	std	Z+29, r23	; 0x1d
	fs->database = bsect + sysect;						/* Data start sector */
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	9a 81       	ldd	r25, Y+2	; 0x02
    15fc:	ab 81       	ldd	r26, Y+3	; 0x03
    15fe:	bc 81       	ldd	r27, Y+4	; 0x04
    1600:	8c 0d       	add	r24, r12
    1602:	9d 1d       	adc	r25, r13
    1604:	ae 1d       	adc	r26, r14
    1606:	bf 1d       	adc	r27, r15
    1608:	82 a7       	lds	r24, 0x72
    160a:	93 a7       	lds	r25, 0x73
    160c:	a4 a7       	lds	r26, 0x74
    160e:	b5 a7       	lds	r27, 0x75
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    1610:	8e 81       	ldd	r24, Y+6	; 0x06
    1612:	9f 81       	ldd	r25, Y+7	; 0x07
    1614:	a8 85       	ldd	r26, Y+8	; 0x08
    1616:	b9 85       	ldd	r27, Y+9	; 0x09
    1618:	8c 0d       	add	r24, r12
    161a:	9d 1d       	adc	r25, r13
    161c:	ae 1d       	adc	r26, r14
    161e:	bf 1d       	adc	r27, r15
    1620:	82 a3       	lds	r24, 0x52
    1622:	93 a3       	lds	r25, 0x53
    1624:	a4 a3       	lds	r26, 0x54
    1626:	b5 a3       	lds	r27, 0x55
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    1628:	0f 2e       	mov	r0, r31
    162a:	f3 e0       	ldi	r31, 0x03	; 3
    162c:	4f 2e       	mov	r4, r31
    162e:	f0 2d       	mov	r31, r0
    1630:	c8 cd       	rjmp	.-1136   	; 0x11c2 <chk_mounted+0x472>

00001632 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    1632:	4f 92       	push	r4
    1634:	5f 92       	push	r5
    1636:	6f 92       	push	r6
    1638:	7f 92       	push	r7
    163a:	8f 92       	push	r8
    163c:	9f 92       	push	r9
    163e:	af 92       	push	r10
    1640:	bf 92       	push	r11
    1642:	cf 92       	push	r12
    1644:	df 92       	push	r13
    1646:	ef 92       	push	r14
    1648:	ff 92       	push	r15
    164a:	0f 93       	push	r16
    164c:	cf 93       	push	r28
    164e:	5c 01       	movw	r10, r24
    1650:	2a 01       	movw	r4, r20
    1652:	3b 01       	movw	r6, r22
	DWORD wsect;


	wsect = fs->winsect;
    1654:	fc 01       	movw	r30, r24
    1656:	c6 a4       	lds	r28, 0xa6
    1658:	d7 a4       	lds	r29, 0xa7
    165a:	e0 a8       	sts	0x00, r30
    165c:	f1 a8       	sts	0x81, r31
	if (wsect != sector) {	/* Changed current window */
    165e:	c4 16       	cp	r12, r20
    1660:	d5 06       	cpc	r13, r21
    1662:	e6 06       	cpc	r14, r22
    1664:	f7 06       	cpc	r15, r23
    1666:	09 f4       	brne	.+2      	; 0x166a <move_window+0x38>
    1668:	54 c0       	rjmp	.+168    	; 0x1712 <move_window+0xe0>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    166a:	84 81       	ldd	r24, Z+4	; 0x04
    166c:	88 23       	and	r24, r24
    166e:	d1 f1       	breq	.+116    	; 0x16e4 <move_window+0xb2>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    1670:	0f 2e       	mov	r0, r31
    1672:	f2 e3       	ldi	r31, 0x32	; 50
    1674:	8f 2e       	mov	r8, r31
    1676:	99 24       	eor	r9, r9
    1678:	f0 2d       	mov	r31, r0
    167a:	8a 0c       	add	r8, r10
    167c:	9b 1c       	adc	r9, r11
    167e:	81 81       	ldd	r24, Z+1	; 0x01
    1680:	b4 01       	movw	r22, r8
    1682:	a7 01       	movw	r20, r14
    1684:	96 01       	movw	r18, r12
    1686:	01 e0       	ldi	r16, 0x01	; 1
    1688:	0e 94 91 02 	call	0x522	; 0x522 <disk_write>
    168c:	88 23       	and	r24, r24
    168e:	09 f0       	breq	.+2      	; 0x1692 <move_window+0x60>
    1690:	42 c0       	rjmp	.+132    	; 0x1716 <move_window+0xe4>
				return FR_DISK_ERR;
			fs->wflag = 0;
    1692:	f5 01       	movw	r30, r10
    1694:	14 82       	std	Z+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    1696:	46 8d       	ldd	r20, Z+30	; 0x1e
    1698:	57 8d       	ldd	r21, Z+31	; 0x1f
    169a:	60 a1       	lds	r22, 0x40
    169c:	71 a1       	lds	r23, 0x41
    169e:	82 a1       	lds	r24, 0x42
    16a0:	93 a1       	lds	r25, 0x43
    16a2:	a4 a1       	lds	r26, 0x44
    16a4:	b5 a1       	lds	r27, 0x45
    16a6:	84 0f       	add	r24, r20
    16a8:	95 1f       	adc	r25, r21
    16aa:	a6 1f       	adc	r26, r22
    16ac:	b7 1f       	adc	r27, r23
    16ae:	c8 16       	cp	r12, r24
    16b0:	d9 06       	cpc	r13, r25
    16b2:	ea 06       	cpc	r14, r26
    16b4:	fb 06       	cpc	r15, r27
    16b6:	b0 f4       	brcc	.+44     	; 0x16e4 <move_window+0xb2>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    16b8:	c3 81       	ldd	r28, Z+3	; 0x03
    16ba:	c2 30       	cpi	r28, 0x02	; 2
    16bc:	98 f0       	brcs	.+38     	; 0x16e4 <move_window+0xb2>
					wsect += fs->fsize;
    16be:	f5 01       	movw	r30, r10
    16c0:	86 8d       	ldd	r24, Z+30	; 0x1e
    16c2:	97 8d       	ldd	r25, Z+31	; 0x1f
    16c4:	a0 a1       	lds	r26, 0x40
    16c6:	b1 a1       	lds	r27, 0x41
    16c8:	c8 0e       	add	r12, r24
    16ca:	d9 1e       	adc	r13, r25
    16cc:	ea 1e       	adc	r14, r26
    16ce:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    16d0:	81 81       	ldd	r24, Z+1	; 0x01
    16d2:	b4 01       	movw	r22, r8
    16d4:	a7 01       	movw	r20, r14
    16d6:	96 01       	movw	r18, r12
    16d8:	01 e0       	ldi	r16, 0x01	; 1
    16da:	0e 94 91 02 	call	0x522	; 0x522 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    16de:	c1 50       	subi	r28, 0x01	; 1
    16e0:	c1 30       	cpi	r28, 0x01	; 1
    16e2:	69 f7       	brne	.-38     	; 0x16be <move_window+0x8c>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    16e4:	41 14       	cp	r4, r1
    16e6:	51 04       	cpc	r5, r1
    16e8:	61 04       	cpc	r6, r1
    16ea:	71 04       	cpc	r7, r1
    16ec:	b1 f0       	breq	.+44     	; 0x171a <move_window+0xe8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    16ee:	b5 01       	movw	r22, r10
    16f0:	6e 5c       	subi	r22, 0xCE	; 206
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	f5 01       	movw	r30, r10
    16f6:	81 81       	ldd	r24, Z+1	; 0x01
    16f8:	a3 01       	movw	r20, r6
    16fa:	92 01       	movw	r18, r4
    16fc:	01 e0       	ldi	r16, 0x01	; 1
    16fe:	0e 94 3b 02 	call	0x476	; 0x476 <disk_read>
    1702:	88 23       	and	r24, r24
    1704:	61 f4       	brne	.+24     	; 0x171e <move_window+0xec>
				return FR_DISK_ERR;
			fs->winsect = sector;
    1706:	f5 01       	movw	r30, r10
    1708:	46 a6       	lds	r20, 0xb6
    170a:	57 a6       	lds	r21, 0xb7
    170c:	60 aa       	sts	0x90, r22
    170e:	71 aa       	sts	0x91, r23
    1710:	07 c0       	rjmp	.+14     	; 0x1720 <move_window+0xee>
		}
	}

	return FR_OK;
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	05 c0       	rjmp	.+10     	; 0x1720 <move_window+0xee>
	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	03 c0       	rjmp	.+6      	; 0x1720 <move_window+0xee>
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <move_window+0xee>
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
    171e:	81 e0       	ldi	r24, 0x01	; 1
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
    1720:	cf 91       	pop	r28
    1722:	0f 91       	pop	r16
    1724:	ff 90       	pop	r15
    1726:	ef 90       	pop	r14
    1728:	df 90       	pop	r13
    172a:	cf 90       	pop	r12
    172c:	bf 90       	pop	r11
    172e:	af 90       	pop	r10
    1730:	9f 90       	pop	r9
    1732:	8f 90       	pop	r8
    1734:	7f 90       	pop	r7
    1736:	6f 90       	pop	r6
    1738:	5f 90       	pop	r5
    173a:	4f 90       	pop	r4
    173c:	08 95       	ret

0000173e <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    173e:	ef 92       	push	r14
    1740:	ff 92       	push	r15
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	7c 01       	movw	r14, r24
	FRESULT res;


	res = move_window(fs, 0);
    174a:	40 e0       	ldi	r20, 0x00	; 0
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	ba 01       	movw	r22, r20
    1750:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
    1754:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
    1756:	88 23       	and	r24, r24
    1758:	09 f0       	breq	.+2      	; 0x175c <sync+0x1e>
    175a:	76 c0       	rjmp	.+236    	; 0x1848 <sync+0x10a>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    175c:	f7 01       	movw	r30, r14
    175e:	80 81       	ld	r24, Z
    1760:	83 30       	cpi	r24, 0x03	; 3
    1762:	09 f0       	breq	.+2      	; 0x1766 <sync+0x28>
    1764:	68 c0       	rjmp	.+208    	; 0x1836 <sync+0xf8>
    1766:	85 81       	ldd	r24, Z+5	; 0x05
    1768:	88 23       	and	r24, r24
    176a:	09 f4       	brne	.+2      	; 0x176e <sync+0x30>
    176c:	64 c0       	rjmp	.+200    	; 0x1836 <sync+0xf8>
			fs->winsect = 0;
    176e:	16 a6       	lds	r17, 0xb6
    1770:	17 a6       	lds	r17, 0xb7
    1772:	10 aa       	sts	0x90, r17
    1774:	11 aa       	sts	0x91, r17
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    1776:	87 01       	movw	r16, r14
    1778:	0e 5c       	subi	r16, 0xCE	; 206
    177a:	1f 4f       	sbci	r17, 0xFF	; 255
    177c:	c8 01       	movw	r24, r16
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	40 e0       	ldi	r20, 0x00	; 0
    1784:	52 e0       	ldi	r21, 0x02	; 2
    1786:	0e 94 21 05 	call	0xa42	; 0xa42 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    178a:	f7 01       	movw	r30, r14
    178c:	e0 5d       	subi	r30, 0xD0	; 208
    178e:	fd 4f       	sbci	r31, 0xFD	; 253
    1790:	85 e5       	ldi	r24, 0x55	; 85
    1792:	80 83       	st	Z, r24
    1794:	f7 01       	movw	r30, r14
    1796:	ef 5c       	subi	r30, 0xCF	; 207
    1798:	fd 4f       	sbci	r31, 0xFD	; 253
    179a:	8a ea       	ldi	r24, 0xAA	; 170
    179c:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    179e:	82 e5       	ldi	r24, 0x52	; 82
    17a0:	f7 01       	movw	r30, r14
    17a2:	82 ab       	sts	0x52, r24
    17a4:	83 ab       	sts	0x53, r24
    17a6:	81 e6       	ldi	r24, 0x61	; 97
    17a8:	84 ab       	sts	0x54, r24
    17aa:	91 e4       	ldi	r25, 0x41	; 65
    17ac:	95 ab       	sts	0x55, r25
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    17ae:	ea 5e       	subi	r30, 0xEA	; 234
    17b0:	fd 4f       	sbci	r31, 0xFD	; 253
    17b2:	22 e7       	ldi	r18, 0x72	; 114
    17b4:	20 83       	st	Z, r18
    17b6:	f7 01       	movw	r30, r14
    17b8:	e9 5e       	subi	r30, 0xE9	; 233
    17ba:	fd 4f       	sbci	r31, 0xFD	; 253
    17bc:	20 83       	st	Z, r18
    17be:	f7 01       	movw	r30, r14
    17c0:	e8 5e       	subi	r30, 0xE8	; 232
    17c2:	fd 4f       	sbci	r31, 0xFD	; 253
    17c4:	90 83       	st	Z, r25
    17c6:	f7 01       	movw	r30, r14
    17c8:	e7 5e       	subi	r30, 0xE7	; 231
    17ca:	fd 4f       	sbci	r31, 0xFD	; 253
    17cc:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    17ce:	f7 01       	movw	r30, r14
    17d0:	36 85       	ldd	r19, Z+14	; 0x0e
    17d2:	27 85       	ldd	r18, Z+15	; 0x0f
    17d4:	90 89       	ldd	r25, Z+16	; 0x10
    17d6:	81 89       	ldd	r24, Z+17	; 0x11
    17d8:	e6 5e       	subi	r30, 0xE6	; 230
    17da:	fd 4f       	sbci	r31, 0xFD	; 253
    17dc:	30 83       	st	Z, r19
    17de:	f7 01       	movw	r30, r14
    17e0:	e5 5e       	subi	r30, 0xE5	; 229
    17e2:	fd 4f       	sbci	r31, 0xFD	; 253
    17e4:	20 83       	st	Z, r18
    17e6:	f7 01       	movw	r30, r14
    17e8:	e4 5e       	subi	r30, 0xE4	; 228
    17ea:	fd 4f       	sbci	r31, 0xFD	; 253
    17ec:	90 83       	st	Z, r25
    17ee:	f7 01       	movw	r30, r14
    17f0:	e3 5e       	subi	r30, 0xE3	; 227
    17f2:	fd 4f       	sbci	r31, 0xFD	; 253
    17f4:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    17f6:	f7 01       	movw	r30, r14
    17f8:	32 85       	ldd	r19, Z+10	; 0x0a
    17fa:	23 85       	ldd	r18, Z+11	; 0x0b
    17fc:	94 85       	ldd	r25, Z+12	; 0x0c
    17fe:	85 85       	ldd	r24, Z+13	; 0x0d
    1800:	e2 5e       	subi	r30, 0xE2	; 226
    1802:	fd 4f       	sbci	r31, 0xFD	; 253
    1804:	30 83       	st	Z, r19
    1806:	f7 01       	movw	r30, r14
    1808:	e1 5e       	subi	r30, 0xE1	; 225
    180a:	fd 4f       	sbci	r31, 0xFD	; 253
    180c:	20 83       	st	Z, r18
    180e:	f7 01       	movw	r30, r14
    1810:	e0 5e       	subi	r30, 0xE0	; 224
    1812:	fd 4f       	sbci	r31, 0xFD	; 253
    1814:	90 83       	st	Z, r25
    1816:	f7 01       	movw	r30, r14
    1818:	ef 5d       	subi	r30, 0xDF	; 223
    181a:	fd 4f       	sbci	r31, 0xFD	; 253
    181c:	80 83       	st	Z, r24
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    181e:	f7 01       	movw	r30, r14
    1820:	22 89       	ldd	r18, Z+18	; 0x12
    1822:	33 89       	ldd	r19, Z+19	; 0x13
    1824:	44 89       	ldd	r20, Z+20	; 0x14
    1826:	55 89       	ldd	r21, Z+21	; 0x15
    1828:	81 81       	ldd	r24, Z+1	; 0x01
    182a:	b8 01       	movw	r22, r16
    182c:	01 e0       	ldi	r16, 0x01	; 1
    182e:	0e 94 91 02 	call	0x522	; 0x522 <disk_write>
			fs->fsi_flag = 0;
    1832:	f7 01       	movw	r30, r14
    1834:	15 82       	std	Z+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    1836:	f7 01       	movw	r30, r14
    1838:	81 81       	ldd	r24, Z+1	; 0x01
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	50 e0       	ldi	r21, 0x00	; 0
    1840:	0e 94 04 03 	call	0x608	; 0x608 <disk_ioctl>
    1844:	81 11       	cpse	r24, r1
			res = FR_DISK_ERR;
    1846:	c1 e0       	ldi	r28, 0x01	; 1
	}

	return res;
}
    1848:	8c 2f       	mov	r24, r28
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	08 95       	ret

00001856 <get_fattime>:
#include "diskio.h"		/* Declarations of low level disk I/O functions */

DWORD get_fattime( void )
{
	return 0;
}
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	cb 01       	movw	r24, r22
    185c:	08 95       	ret

0000185e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    185e:	0f 93       	push	r16
    1860:	1f 93       	push	r17
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	ec 01       	movw	r28, r24
    1868:	db 01       	movw	r26, r22
    186a:	ca 01       	movw	r24, r20
	clst -= 2;
    186c:	02 97       	sbiw	r24, 0x02	; 2
    186e:	a1 09       	sbc	r26, r1
    1870:	b1 09       	sbc	r27, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1872:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1874:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1876:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1878:	7d 8d       	ldd	r23, Y+29	; 0x1d
    187a:	42 50       	subi	r20, 0x02	; 2
    187c:	50 40       	sbci	r21, 0x00	; 0
    187e:	60 40       	sbci	r22, 0x00	; 0
    1880:	70 40       	sbci	r23, 0x00	; 0
    1882:	84 17       	cp	r24, r20
    1884:	95 07       	cpc	r25, r21
    1886:	a6 07       	cpc	r26, r22
    1888:	b7 07       	cpc	r27, r23
    188a:	98 f4       	brcc	.+38     	; 0x18b2 <clust2sect+0x54>
	return clst * fs->csize + fs->database;
    188c:	2a 81       	ldd	r18, Y+2	; 0x02
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e0       	ldi	r20, 0x00	; 0
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	bc 01       	movw	r22, r24
    1896:	cd 01       	movw	r24, r26
    1898:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <__mulsi3>
    189c:	8b 01       	movw	r16, r22
    189e:	9c 01       	movw	r18, r24
    18a0:	8a a5       	lds	r24, 0x6a
    18a2:	9b a5       	lds	r25, 0x6b
    18a4:	ac a5       	lds	r26, 0x6c
    18a6:	bd a5       	lds	r27, 0x6d
    18a8:	08 0f       	add	r16, r24
    18aa:	19 1f       	adc	r17, r25
    18ac:	2a 1f       	adc	r18, r26
    18ae:	3b 1f       	adc	r19, r27
    18b0:	03 c0       	rjmp	.+6      	; 0x18b8 <clust2sect+0x5a>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    18b2:	00 e0       	ldi	r16, 0x00	; 0
    18b4:	10 e0       	ldi	r17, 0x00	; 0
    18b6:	98 01       	movw	r18, r16
	return clst * fs->csize + fs->database;
}
    18b8:	60 2f       	mov	r22, r16
    18ba:	71 2f       	mov	r23, r17
    18bc:	82 2f       	mov	r24, r18
    18be:	93 2f       	mov	r25, r19
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	08 95       	ret

000018ca <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    18ca:	bf 92       	push	r11
    18cc:	cf 92       	push	r12
    18ce:	df 92       	push	r13
    18d0:	ef 92       	push	r14
    18d2:	ff 92       	push	r15
    18d4:	0f 93       	push	r16
    18d6:	1f 93       	push	r17
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	ec 01       	movw	r28, r24
    18de:	6a 01       	movw	r12, r20
    18e0:	7b 01       	movw	r14, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
    18e2:	42 30       	cpi	r20, 0x02	; 2
    18e4:	51 05       	cpc	r21, r1
    18e6:	61 05       	cpc	r22, r1
    18e8:	71 05       	cpc	r23, r1
    18ea:	08 f4       	brcc	.+2      	; 0x18ee <get_fat+0x24>
    18ec:	cf c0       	rjmp	.+414    	; 0x1a8c <get_fat+0x1c2>
    18ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18f0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18f2:	ac 8d       	ldd	r26, Y+28	; 0x1c
    18f4:	bd 8d       	ldd	r27, Y+29	; 0x1d
    18f6:	48 17       	cp	r20, r24
    18f8:	59 07       	cpc	r21, r25
    18fa:	6a 07       	cpc	r22, r26
    18fc:	7b 07       	cpc	r23, r27
    18fe:	08 f0       	brcs	.+2      	; 0x1902 <get_fat+0x38>
    1900:	ca c0       	rjmp	.+404    	; 0x1a96 <get_fat+0x1cc>
		return 1;

	switch (fs->fs_type) {
    1902:	88 81       	ld	r24, Y
    1904:	82 30       	cpi	r24, 0x02	; 2
    1906:	09 f4       	brne	.+2      	; 0x190a <get_fat+0x40>
    1908:	5c c0       	rjmp	.+184    	; 0x19c2 <get_fat+0xf8>
    190a:	83 30       	cpi	r24, 0x03	; 3
    190c:	09 f4       	brne	.+2      	; 0x1910 <get_fat+0x46>
    190e:	7b c0       	rjmp	.+246    	; 0x1a06 <get_fat+0x13c>
    1910:	81 30       	cpi	r24, 0x01	; 1
    1912:	09 f0       	breq	.+2      	; 0x1916 <get_fat+0x4c>
    1914:	c5 c0       	rjmp	.+394    	; 0x1aa0 <get_fat+0x1d6>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    1916:	9a 01       	movw	r18, r20
    1918:	36 95       	lsr	r19
    191a:	27 95       	ror	r18
    191c:	89 01       	movw	r16, r18
    191e:	04 0f       	add	r16, r20
    1920:	15 1f       	adc	r17, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    1922:	a8 01       	movw	r20, r16
    1924:	45 2f       	mov	r20, r21
    1926:	55 27       	eor	r21, r21
    1928:	46 95       	lsr	r20
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	8a a1       	lds	r24, 0x4a
    1930:	9b a1       	lds	r25, 0x4b
    1932:	ac a1       	lds	r26, 0x4c
    1934:	bd a1       	lds	r27, 0x4d
    1936:	48 0f       	add	r20, r24
    1938:	59 1f       	adc	r21, r25
    193a:	6a 1f       	adc	r22, r26
    193c:	7b 1f       	adc	r23, r27
    193e:	ce 01       	movw	r24, r28
    1940:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
    1944:	88 23       	and	r24, r24
    1946:	09 f0       	breq	.+2      	; 0x194a <get_fat+0x80>
    1948:	af c0       	rjmp	.+350    	; 0x1aa8 <get_fat+0x1de>
		wc = fs->win[bc % SS(fs)]; bc++;
    194a:	f8 01       	movw	r30, r16
    194c:	f1 70       	andi	r31, 0x01	; 1
    194e:	ec 0f       	add	r30, r28
    1950:	fd 1f       	adc	r31, r29
    1952:	b2 a8       	sts	0x82, r27
    1954:	0f 5f       	subi	r16, 0xFF	; 255
    1956:	1f 4f       	sbci	r17, 0xFF	; 255
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    1958:	a8 01       	movw	r20, r16
    195a:	45 2f       	mov	r20, r21
    195c:	55 27       	eor	r21, r21
    195e:	46 95       	lsr	r20
    1960:	60 e0       	ldi	r22, 0x00	; 0
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	8a a1       	lds	r24, 0x4a
    1966:	9b a1       	lds	r25, 0x4b
    1968:	ac a1       	lds	r26, 0x4c
    196a:	bd a1       	lds	r27, 0x4d
    196c:	48 0f       	add	r20, r24
    196e:	59 1f       	adc	r21, r25
    1970:	6a 1f       	adc	r22, r26
    1972:	7b 1f       	adc	r23, r27
    1974:	ce 01       	movw	r24, r28
    1976:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
    197a:	88 23       	and	r24, r24
    197c:	09 f0       	breq	.+2      	; 0x1980 <get_fat+0xb6>
    197e:	98 c0       	rjmp	.+304    	; 0x1ab0 <get_fat+0x1e6>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    1980:	2b 2d       	mov	r18, r11
    1982:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    1984:	f8 01       	movw	r30, r16
    1986:	f1 70       	andi	r31, 0x01	; 1
    1988:	ec 0f       	add	r30, r28
    198a:	fd 1f       	adc	r31, r29
    198c:	92 a9       	sts	0x42, r25
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	82 2b       	or	r24, r18
    1992:	93 2b       	or	r25, r19
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1994:	21 e0       	ldi	r18, 0x01	; 1
    1996:	c2 22       	and	r12, r18
    1998:	dd 24       	eor	r13, r13
    199a:	c1 14       	cp	r12, r1
    199c:	d1 04       	cpc	r13, r1
    199e:	51 f0       	breq	.+20     	; 0x19b4 <get_fat+0xea>
    19a0:	92 95       	swap	r25
    19a2:	82 95       	swap	r24
    19a4:	8f 70       	andi	r24, 0x0F	; 15
    19a6:	89 27       	eor	r24, r25
    19a8:	9f 70       	andi	r25, 0x0F	; 15
    19aa:	89 27       	eor	r24, r25
    19ac:	8c 01       	movw	r16, r24
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	89 c0       	rjmp	.+274    	; 0x1ac6 <get_fat+0x1fc>
    19b4:	8c 01       	movw	r16, r24
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	1f 70       	andi	r17, 0x0F	; 15
    19bc:	20 70       	andi	r18, 0x00	; 0
    19be:	30 70       	andi	r19, 0x00	; 0
    19c0:	82 c0       	rjmp	.+260    	; 0x1ac6 <get_fat+0x1fc>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    19c2:	45 2f       	mov	r20, r21
    19c4:	56 2f       	mov	r21, r22
    19c6:	67 2f       	mov	r22, r23
    19c8:	77 27       	eor	r23, r23
    19ca:	8a a1       	lds	r24, 0x4a
    19cc:	9b a1       	lds	r25, 0x4b
    19ce:	ac a1       	lds	r26, 0x4c
    19d0:	bd a1       	lds	r27, 0x4d
    19d2:	48 0f       	add	r20, r24
    19d4:	59 1f       	adc	r21, r25
    19d6:	6a 1f       	adc	r22, r26
    19d8:	7b 1f       	adc	r23, r27
    19da:	ce 01       	movw	r24, r28
    19dc:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
    19e0:	88 23       	and	r24, r24
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <get_fat+0x11c>
    19e4:	69 c0       	rjmp	.+210    	; 0x1ab8 <get_fat+0x1ee>
		p = &fs->win[clst * 2 % SS(fs)];
    19e6:	f6 01       	movw	r30, r12
    19e8:	ee 0f       	add	r30, r30
    19ea:	ff 1f       	adc	r31, r31
    19ec:	f1 70       	andi	r31, 0x01	; 1
		return LD_WORD(p);
    19ee:	ce 0f       	add	r28, r30
    19f0:	df 1f       	adc	r29, r31
    19f2:	9b a9       	sts	0x4b, r25
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	0a a9       	sts	0x4a, r16
    19f8:	10 e0       	ldi	r17, 0x00	; 0
    19fa:	80 2b       	or	r24, r16
    19fc:	91 2b       	or	r25, r17
    19fe:	8c 01       	movw	r16, r24
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	60 c0       	rjmp	.+192    	; 0x1ac6 <get_fat+0x1fc>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    1a06:	68 94       	set
    1a08:	16 f8       	bld	r1, 6
    1a0a:	76 95       	lsr	r23
    1a0c:	67 95       	ror	r22
    1a0e:	57 95       	ror	r21
    1a10:	47 95       	ror	r20
    1a12:	16 94       	lsr	r1
    1a14:	d1 f7       	brne	.-12     	; 0x1a0a <get_fat+0x140>
    1a16:	8a a1       	lds	r24, 0x4a
    1a18:	9b a1       	lds	r25, 0x4b
    1a1a:	ac a1       	lds	r26, 0x4c
    1a1c:	bd a1       	lds	r27, 0x4d
    1a1e:	48 0f       	add	r20, r24
    1a20:	59 1f       	adc	r21, r25
    1a22:	6a 1f       	adc	r22, r26
    1a24:	7b 1f       	adc	r23, r27
    1a26:	ce 01       	movw	r24, r28
    1a28:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
    1a2c:	88 23       	and	r24, r24
    1a2e:	09 f0       	breq	.+2      	; 0x1a32 <get_fat+0x168>
    1a30:	47 c0       	rjmp	.+142    	; 0x1ac0 <get_fat+0x1f6>
		p = &fs->win[clst * 4 % SS(fs)];
    1a32:	f6 01       	movw	r30, r12
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	ee 0f       	add	r30, r30
    1a3a:	ff 1f       	adc	r31, r31
    1a3c:	f1 70       	andi	r31, 0x01	; 1
		return LD_DWORD(p) & 0x0FFFFFFF;
    1a3e:	ce 0f       	add	r28, r30
    1a40:	df 1f       	adc	r29, r31
    1a42:	0d a9       	sts	0x4d, r16
    1a44:	10 e0       	ldi	r17, 0x00	; 0
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	30 2f       	mov	r19, r16
    1a4c:	22 27       	eor	r18, r18
    1a4e:	11 27       	eor	r17, r17
    1a50:	00 27       	eor	r16, r16
    1a52:	8c a9       	sts	0x4c, r24
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	a0 e0       	ldi	r26, 0x00	; 0
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	99 27       	eor	r25, r25
    1a5e:	88 27       	eor	r24, r24
    1a60:	08 2b       	or	r16, r24
    1a62:	19 2b       	or	r17, r25
    1a64:	2a 2b       	or	r18, r26
    1a66:	3b 2b       	or	r19, r27
    1a68:	8a a9       	sts	0x4a, r24
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	a0 e0       	ldi	r26, 0x00	; 0
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	08 2b       	or	r16, r24
    1a72:	19 2b       	or	r17, r25
    1a74:	2a 2b       	or	r18, r26
    1a76:	3b 2b       	or	r19, r27
    1a78:	9b a9       	sts	0x4b, r25
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	a0 e0       	ldi	r26, 0x00	; 0
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	08 2b       	or	r16, r24
    1a82:	19 2b       	or	r17, r25
    1a84:	2a 2b       	or	r18, r26
    1a86:	3b 2b       	or	r19, r27
    1a88:	3f 70       	andi	r19, 0x0F	; 15
    1a8a:	1d c0       	rjmp	.+58     	; 0x1ac6 <get_fat+0x1fc>
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
		return 1;
    1a8c:	01 e0       	ldi	r16, 0x01	; 1
    1a8e:	10 e0       	ldi	r17, 0x00	; 0
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	18 c0       	rjmp	.+48     	; 0x1ac6 <get_fat+0x1fc>
    1a96:	01 e0       	ldi	r16, 0x01	; 1
    1a98:	10 e0       	ldi	r17, 0x00	; 0
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	13 c0       	rjmp	.+38     	; 0x1ac6 <get_fat+0x1fc>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    1aa0:	0f ef       	ldi	r16, 0xFF	; 255
    1aa2:	1f ef       	ldi	r17, 0xFF	; 255
    1aa4:	98 01       	movw	r18, r16
    1aa6:	0f c0       	rjmp	.+30     	; 0x1ac6 <get_fat+0x1fc>
    1aa8:	0f ef       	ldi	r16, 0xFF	; 255
    1aaa:	1f ef       	ldi	r17, 0xFF	; 255
    1aac:	98 01       	movw	r18, r16
    1aae:	0b c0       	rjmp	.+22     	; 0x1ac6 <get_fat+0x1fc>
    1ab0:	0f ef       	ldi	r16, 0xFF	; 255
    1ab2:	1f ef       	ldi	r17, 0xFF	; 255
    1ab4:	98 01       	movw	r18, r16
    1ab6:	07 c0       	rjmp	.+14     	; 0x1ac6 <get_fat+0x1fc>
    1ab8:	0f ef       	ldi	r16, 0xFF	; 255
    1aba:	1f ef       	ldi	r17, 0xFF	; 255
    1abc:	98 01       	movw	r18, r16
    1abe:	03 c0       	rjmp	.+6      	; 0x1ac6 <get_fat+0x1fc>
    1ac0:	0f ef       	ldi	r16, 0xFF	; 255
    1ac2:	1f ef       	ldi	r17, 0xFF	; 255
    1ac4:	98 01       	movw	r18, r16
}
    1ac6:	60 2f       	mov	r22, r16
    1ac8:	71 2f       	mov	r23, r17
    1aca:	82 2f       	mov	r24, r18
    1acc:	93 2f       	mov	r25, r19
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	1f 91       	pop	r17
    1ad4:	0f 91       	pop	r16
    1ad6:	ff 90       	pop	r15
    1ad8:	ef 90       	pop	r14
    1ada:	df 90       	pop	r13
    1adc:	cf 90       	pop	r12
    1ade:	bf 90       	pop	r11
    1ae0:	08 95       	ret

00001ae2 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Index of directory table */
)
{
    1ae2:	ef 92       	push	r14
    1ae4:	ff 92       	push	r15
    1ae6:	0f 93       	push	r16
    1ae8:	1f 93       	push	r17
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	ec 01       	movw	r28, r24
    1af0:	8b 01       	movw	r16, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    1af2:	7d 83       	std	Y+5, r23	; 0x05
    1af4:	6c 83       	std	Y+4, r22	; 0x04
	clst = dj->sclust;
    1af6:	4e 81       	ldd	r20, Y+6	; 0x06
    1af8:	5f 81       	ldd	r21, Y+7	; 0x07
    1afa:	68 85       	ldd	r22, Y+8	; 0x08
    1afc:	79 85       	ldd	r23, Y+9	; 0x09
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    1afe:	41 30       	cpi	r20, 0x01	; 1
    1b00:	51 05       	cpc	r21, r1
    1b02:	61 05       	cpc	r22, r1
    1b04:	71 05       	cpc	r23, r1
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <dir_sdi+0x28>
    1b08:	9f c0       	rjmp	.+318    	; 0x1c48 <dir_sdi+0x166>
    1b0a:	e8 81       	ld	r30, Y
    1b0c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b0e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b10:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b12:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1b14:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1b16:	48 17       	cp	r20, r24
    1b18:	59 07       	cpc	r21, r25
    1b1a:	6a 07       	cpc	r22, r26
    1b1c:	7b 07       	cpc	r23, r27
    1b1e:	08 f0       	brcs	.+2      	; 0x1b22 <dir_sdi+0x40>
    1b20:	95 c0       	rjmp	.+298    	; 0x1c4c <dir_sdi+0x16a>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    1b22:	41 15       	cp	r20, r1
    1b24:	51 05       	cpc	r21, r1
    1b26:	61 05       	cpc	r22, r1
    1b28:	71 05       	cpc	r23, r1
    1b2a:	69 f5       	brne	.+90     	; 0x1b86 <dir_sdi+0xa4>
    1b2c:	80 81       	ld	r24, Z
    1b2e:	83 30       	cpi	r24, 0x03	; 3
    1b30:	49 f4       	brne	.+18     	; 0x1b44 <dir_sdi+0x62>
		clst = dj->fs->dirbase;
    1b32:	46 a1       	lds	r20, 0x46
    1b34:	57 a1       	lds	r21, 0x47
    1b36:	60 a5       	lds	r22, 0x60
    1b38:	71 a5       	lds	r23, 0x61

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    1b3a:	41 15       	cp	r20, r1
    1b3c:	51 05       	cpc	r21, r1
    1b3e:	61 05       	cpc	r22, r1
    1b40:	71 05       	cpc	r23, r1
    1b42:	09 f5       	brne	.+66     	; 0x1b86 <dir_sdi+0xa4>
		dj->clust = clst;
    1b44:	1a 86       	std	Y+10, r1	; 0x0a
    1b46:	1b 86       	std	Y+11, r1	; 0x0b
    1b48:	1c 86       	std	Y+12, r1	; 0x0c
    1b4a:	1d 86       	std	Y+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    1b4c:	80 85       	ldd	r24, Z+8	; 0x08
    1b4e:	91 85       	ldd	r25, Z+9	; 0x09
    1b50:	08 17       	cp	r16, r24
    1b52:	19 07       	cpc	r17, r25
    1b54:	08 f0       	brcs	.+2      	; 0x1b58 <dir_sdi+0x76>
    1b56:	7c c0       	rjmp	.+248    	; 0x1c50 <dir_sdi+0x16e>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1b58:	c8 01       	movw	r24, r16
    1b5a:	92 95       	swap	r25
    1b5c:	82 95       	swap	r24
    1b5e:	8f 70       	andi	r24, 0x0F	; 15
    1b60:	89 27       	eor	r24, r25
    1b62:	9f 70       	andi	r25, 0x0F	; 15
    1b64:	89 27       	eor	r24, r25
    1b66:	ac 01       	movw	r20, r24
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	70 e0       	ldi	r23, 0x00	; 0
    1b6c:	86 a1       	lds	r24, 0x46
    1b6e:	97 a1       	lds	r25, 0x47
    1b70:	a0 a5       	lds	r26, 0x60
    1b72:	b1 a5       	lds	r27, 0x61
    1b74:	84 0f       	add	r24, r20
    1b76:	95 1f       	adc	r25, r21
    1b78:	a6 1f       	adc	r26, r22
    1b7a:	b7 1f       	adc	r27, r23
    1b7c:	8e 87       	std	Y+14, r24	; 0x0e
    1b7e:	9f 87       	std	Y+15, r25	; 0x0f
    1b80:	a8 8b       	std	Y+16, r26	; 0x10
    1b82:	b9 8b       	std	Y+17, r27	; 0x11
    1b84:	4e c0       	rjmp	.+156    	; 0x1c22 <dir_sdi+0x140>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    1b86:	82 81       	ldd	r24, Z+2	; 0x02
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	7c 01       	movw	r14, r24
    1b8c:	ee 0c       	add	r14, r14
    1b8e:	ff 1c       	adc	r15, r15
    1b90:	ee 0c       	add	r14, r14
    1b92:	ff 1c       	adc	r15, r15
    1b94:	ee 0c       	add	r14, r14
    1b96:	ff 1c       	adc	r15, r15
    1b98:	ee 0c       	add	r14, r14
    1b9a:	ff 1c       	adc	r15, r15
		while (idx >= ic) {	/* Follow cluster chain */
    1b9c:	0e 15       	cp	r16, r14
    1b9e:	1f 05       	cpc	r17, r15
    1ba0:	28 f1       	brcs	.+74     	; 0x1bec <dir_sdi+0x10a>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1ba2:	88 81       	ld	r24, Y
    1ba4:	99 81       	ldd	r25, Y+1	; 0x01
    1ba6:	0e 94 65 0c 	call	0x18ca	; 0x18ca <get_fat>
    1baa:	ab 01       	movw	r20, r22
    1bac:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1bae:	4f 3f       	cpi	r20, 0xFF	; 255
    1bb0:	8f ef       	ldi	r24, 0xFF	; 255
    1bb2:	58 07       	cpc	r21, r24
    1bb4:	8f ef       	ldi	r24, 0xFF	; 255
    1bb6:	68 07       	cpc	r22, r24
    1bb8:	8f ef       	ldi	r24, 0xFF	; 255
    1bba:	78 07       	cpc	r23, r24
    1bbc:	09 f4       	brne	.+2      	; 0x1bc0 <dir_sdi+0xde>
    1bbe:	4a c0       	rjmp	.+148    	; 0x1c54 <dir_sdi+0x172>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    1bc0:	42 30       	cpi	r20, 0x02	; 2
    1bc2:	51 05       	cpc	r21, r1
    1bc4:	61 05       	cpc	r22, r1
    1bc6:	71 05       	cpc	r23, r1
    1bc8:	08 f4       	brcc	.+2      	; 0x1bcc <dir_sdi+0xea>
    1bca:	46 c0       	rjmp	.+140    	; 0x1c58 <dir_sdi+0x176>
    1bcc:	e8 81       	ld	r30, Y
    1bce:	f9 81       	ldd	r31, Y+1	; 0x01
    1bd0:	82 8d       	ldd	r24, Z+26	; 0x1a
    1bd2:	93 8d       	ldd	r25, Z+27	; 0x1b
    1bd4:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1bd6:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1bd8:	48 17       	cp	r20, r24
    1bda:	59 07       	cpc	r21, r25
    1bdc:	6a 07       	cpc	r22, r26
    1bde:	7b 07       	cpc	r23, r27
    1be0:	e8 f5       	brcc	.+122    	; 0x1c5c <dir_sdi+0x17a>
				return FR_INT_ERR;
			idx -= ic;
    1be2:	0e 19       	sub	r16, r14
    1be4:	1f 09       	sbc	r17, r15
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    1be6:	0e 15       	cp	r16, r14
    1be8:	1f 05       	cpc	r17, r15
    1bea:	d8 f6       	brcc	.-74     	; 0x1ba2 <dir_sdi+0xc0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    1bec:	4a 87       	std	Y+10, r20	; 0x0a
    1bee:	5b 87       	std	Y+11, r21	; 0x0b
    1bf0:	6c 87       	std	Y+12, r22	; 0x0c
    1bf2:	7d 87       	std	Y+13, r23	; 0x0d
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1bf4:	88 81       	ld	r24, Y
    1bf6:	99 81       	ldd	r25, Y+1	; 0x01
    1bf8:	0e 94 2f 0c 	call	0x185e	; 0x185e <clust2sect>
    1bfc:	ab 01       	movw	r20, r22
    1bfe:	bc 01       	movw	r22, r24
    1c00:	c8 01       	movw	r24, r16
    1c02:	92 95       	swap	r25
    1c04:	82 95       	swap	r24
    1c06:	8f 70       	andi	r24, 0x0F	; 15
    1c08:	89 27       	eor	r24, r25
    1c0a:	9f 70       	andi	r25, 0x0F	; 15
    1c0c:	89 27       	eor	r24, r25
    1c0e:	a0 e0       	ldi	r26, 0x00	; 0
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	84 0f       	add	r24, r20
    1c14:	95 1f       	adc	r25, r21
    1c16:	a6 1f       	adc	r26, r22
    1c18:	b7 1f       	adc	r27, r23
    1c1a:	8e 87       	std	Y+14, r24	; 0x0e
    1c1c:	9f 87       	std	Y+15, r25	; 0x0f
    1c1e:	a8 8b       	std	Y+16, r26	; 0x10
    1c20:	b9 8b       	std	Y+17, r27	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    1c22:	88 81       	ld	r24, Y
    1c24:	99 81       	ldd	r25, Y+1	; 0x01
    1c26:	c2 96       	adiw	r24, 0x32	; 50
    1c28:	0f 70       	andi	r16, 0x0F	; 15
    1c2a:	10 70       	andi	r17, 0x00	; 0
    1c2c:	00 0f       	add	r16, r16
    1c2e:	11 1f       	adc	r17, r17
    1c30:	02 95       	swap	r16
    1c32:	12 95       	swap	r17
    1c34:	10 7f       	andi	r17, 0xF0	; 240
    1c36:	10 27       	eor	r17, r16
    1c38:	00 7f       	andi	r16, 0xF0	; 240
    1c3a:	10 27       	eor	r17, r16
    1c3c:	80 0f       	add	r24, r16
    1c3e:	91 1f       	adc	r25, r17
    1c40:	9b 8b       	std	Y+19, r25	; 0x13
    1c42:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;	/* Seek succeeded */
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	0b c0       	rjmp	.+22     	; 0x1c5e <dir_sdi+0x17c>


	dj->index = idx;
	clst = dj->sclust;
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
    1c48:	82 e0       	ldi	r24, 0x02	; 2
    1c4a:	09 c0       	rjmp	.+18     	; 0x1c5e <dir_sdi+0x17c>
    1c4c:	82 e0       	ldi	r24, 0x02	; 2
    1c4e:	07 c0       	rjmp	.+14     	; 0x1c5e <dir_sdi+0x17c>
		clst = dj->fs->dirbase;

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
		dj->clust = clst;
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
			return FR_INT_ERR;
    1c50:	82 e0       	ldi	r24, 0x02	; 2
    1c52:	05 c0       	rjmp	.+10     	; 0x1c5e <dir_sdi+0x17c>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	03 c0       	rjmp	.+6      	; 0x1c5e <dir_sdi+0x17c>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	01 c0       	rjmp	.+2      	; 0x1c5e <dir_sdi+0x17c>
    1c5c:	82 e0       	ldi	r24, 0x02	; 2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    1c5e:	df 91       	pop	r29
    1c60:	cf 91       	pop	r28
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	ff 90       	pop	r15
    1c68:	ef 90       	pop	r14
    1c6a:	08 95       	ret

00001c6c <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    1c6c:	cf 93       	push	r28
    1c6e:	df 93       	push	r29
    1c70:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dj, dj->index);
    1c72:	6c 81       	ldd	r22, Y+4	; 0x04
    1c74:	7d 81       	ldd	r23, Y+5	; 0x05
    1c76:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <dir_sdi>
	if (res == FR_OK) {
    1c7a:	88 23       	and	r24, r24
    1c7c:	91 f4       	brne	.+36     	; 0x1ca2 <dir_remove+0x36>
		res = move_window(dj->fs, dj->sect);
    1c7e:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c80:	5f 85       	ldd	r21, Y+15	; 0x0f
    1c82:	68 89       	ldd	r22, Y+16	; 0x10
    1c84:	79 89       	ldd	r23, Y+17	; 0x11
    1c86:	88 81       	ld	r24, Y
    1c88:	99 81       	ldd	r25, Y+1	; 0x01
    1c8a:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
		if (res == FR_OK) {
    1c8e:	88 23       	and	r24, r24
    1c90:	41 f4       	brne	.+16     	; 0x1ca2 <dir_remove+0x36>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    1c92:	ea 89       	ldd	r30, Y+18	; 0x12
    1c94:	fb 89       	ldd	r31, Y+19	; 0x13
    1c96:	95 ee       	ldi	r25, 0xE5	; 229
    1c98:	90 83       	st	Z, r25
			dj->fs->wflag = 1;
    1c9a:	e8 81       	ld	r30, Y
    1c9c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c9e:	91 e0       	ldi	r25, 0x01	; 1
    1ca0:	94 83       	std	Z+4, r25	; 0x04
		}
	}
#endif

	return res;
}
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	08 95       	ret

00001ca8 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    1ca8:	8f 92       	push	r8
    1caa:	9f 92       	push	r9
    1cac:	af 92       	push	r10
    1cae:	bf 92       	push	r11
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	ec 01       	movw	r28, r24
    1cc2:	6a 01       	movw	r12, r20
    1cc4:	7b 01       	movw	r14, r22
    1cc6:	48 01       	movw	r8, r16
    1cc8:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1cca:	42 30       	cpi	r20, 0x02	; 2
    1ccc:	51 05       	cpc	r21, r1
    1cce:	61 05       	cpc	r22, r1
    1cd0:	71 05       	cpc	r23, r1
    1cd2:	08 f4       	brcc	.+2      	; 0x1cd6 <put_fat+0x2e>
    1cd4:	ca c0       	rjmp	.+404    	; 0x1e6a <put_fat+0x1c2>
    1cd6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cd8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1cda:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1cdc:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1cde:	48 17       	cp	r20, r24
    1ce0:	59 07       	cpc	r21, r25
    1ce2:	6a 07       	cpc	r22, r26
    1ce4:	7b 07       	cpc	r23, r27
    1ce6:	08 f0       	brcs	.+2      	; 0x1cea <put_fat+0x42>
    1ce8:	c2 c0       	rjmp	.+388    	; 0x1e6e <put_fat+0x1c6>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    1cea:	88 81       	ld	r24, Y
    1cec:	82 30       	cpi	r24, 0x02	; 2
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <put_fat+0x4a>
    1cf0:	6a c0       	rjmp	.+212    	; 0x1dc6 <put_fat+0x11e>
    1cf2:	83 30       	cpi	r24, 0x03	; 3
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <put_fat+0x50>
    1cf6:	82 c0       	rjmp	.+260    	; 0x1dfc <put_fat+0x154>
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <put_fat+0x56>
    1cfc:	b2 c0       	rjmp	.+356    	; 0x1e62 <put_fat+0x1ba>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    1cfe:	9a 01       	movw	r18, r20
    1d00:	36 95       	lsr	r19
    1d02:	27 95       	ror	r18
    1d04:	89 01       	movw	r16, r18
    1d06:	04 0f       	add	r16, r20
    1d08:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1d0a:	a8 01       	movw	r20, r16
    1d0c:	45 2f       	mov	r20, r21
    1d0e:	55 27       	eor	r21, r21
    1d10:	46 95       	lsr	r20
    1d12:	60 e0       	ldi	r22, 0x00	; 0
    1d14:	70 e0       	ldi	r23, 0x00	; 0
    1d16:	8a a1       	lds	r24, 0x4a
    1d18:	9b a1       	lds	r25, 0x4b
    1d1a:	ac a1       	lds	r26, 0x4c
    1d1c:	bd a1       	lds	r27, 0x4d
    1d1e:	48 0f       	add	r20, r24
    1d20:	59 1f       	adc	r21, r25
    1d22:	6a 1f       	adc	r22, r26
    1d24:	7b 1f       	adc	r23, r27
    1d26:	ce 01       	movw	r24, r28
    1d28:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
			if (res != FR_OK) break;
    1d2c:	88 23       	and	r24, r24
    1d2e:	09 f0       	breq	.+2      	; 0x1d32 <put_fat+0x8a>
    1d30:	99 c0       	rjmp	.+306    	; 0x1e64 <put_fat+0x1bc>
			p = &fs->win[bc % SS(fs)];
    1d32:	c8 01       	movw	r24, r16
    1d34:	91 70       	andi	r25, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1d36:	e1 e0       	ldi	r30, 0x01	; 1
    1d38:	ce 22       	and	r12, r30
    1d3a:	dd 24       	eor	r13, r13
    1d3c:	c1 14       	cp	r12, r1
    1d3e:	d1 04       	cpc	r13, r1
    1d40:	51 f0       	breq	.+20     	; 0x1d56 <put_fat+0xae>
    1d42:	fe 01       	movw	r30, r28
    1d44:	e8 0f       	add	r30, r24
    1d46:	f9 1f       	adc	r31, r25
    1d48:	22 a9       	sts	0x42, r18
    1d4a:	2f 70       	andi	r18, 0x0F	; 15
    1d4c:	38 2d       	mov	r19, r8
    1d4e:	32 95       	swap	r19
    1d50:	30 7f       	andi	r19, 0xF0	; 240
    1d52:	23 2b       	or	r18, r19
    1d54:	01 c0       	rjmp	.+2      	; 0x1d58 <put_fat+0xb0>
    1d56:	28 2d       	mov	r18, r8
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e8 0f       	add	r30, r24
    1d5c:	f9 1f       	adc	r31, r25
    1d5e:	22 ab       	sts	0x52, r18
			bc++;
    1d60:	0f 5f       	subi	r16, 0xFF	; 255
    1d62:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1d68:	a8 01       	movw	r20, r16
    1d6a:	45 2f       	mov	r20, r21
    1d6c:	55 27       	eor	r21, r21
    1d6e:	46 95       	lsr	r20
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	8a a1       	lds	r24, 0x4a
    1d76:	9b a1       	lds	r25, 0x4b
    1d78:	ac a1       	lds	r26, 0x4c
    1d7a:	bd a1       	lds	r27, 0x4d
    1d7c:	48 0f       	add	r20, r24
    1d7e:	59 1f       	adc	r21, r25
    1d80:	6a 1f       	adc	r22, r26
    1d82:	7b 1f       	adc	r23, r27
    1d84:	ce 01       	movw	r24, r28
    1d86:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
			if (res != FR_OK) break;
    1d8a:	88 23       	and	r24, r24
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <put_fat+0xe8>
    1d8e:	6a c0       	rjmp	.+212    	; 0x1e64 <put_fat+0x1bc>
			p = &fs->win[bc % SS(fs)];
    1d90:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1d92:	c1 14       	cp	r12, r1
    1d94:	d1 04       	cpc	r13, r1
    1d96:	49 f0       	breq	.+18     	; 0x1daa <put_fat+0x102>
    1d98:	68 94       	set
    1d9a:	13 f8       	bld	r1, 3
    1d9c:	b6 94       	lsr	r11
    1d9e:	a7 94       	ror	r10
    1da0:	97 94       	ror	r9
    1da2:	87 94       	ror	r8
    1da4:	16 94       	lsr	r1
    1da6:	d1 f7       	brne	.-12     	; 0x1d9c <put_fat+0xf4>
    1da8:	09 c0       	rjmp	.+18     	; 0x1dbc <put_fat+0x114>
    1daa:	fe 01       	movw	r30, r28
    1dac:	e0 0f       	add	r30, r16
    1dae:	f1 1f       	adc	r31, r17
    1db0:	22 a9       	sts	0x42, r18
    1db2:	20 7f       	andi	r18, 0xF0	; 240
    1db4:	99 2d       	mov	r25, r9
    1db6:	9f 70       	andi	r25, 0x0F	; 15
    1db8:	82 2e       	mov	r8, r18
    1dba:	89 2a       	or	r8, r25
    1dbc:	0c 0f       	add	r16, r28
    1dbe:	1d 1f       	adc	r17, r29
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	82 aa       	sts	0x92, r24
			break;
    1dc4:	4f c0       	rjmp	.+158    	; 0x1e64 <put_fat+0x1bc>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    1dc6:	45 2f       	mov	r20, r21
    1dc8:	56 2f       	mov	r21, r22
    1dca:	67 2f       	mov	r22, r23
    1dcc:	77 27       	eor	r23, r23
    1dce:	8a a1       	lds	r24, 0x4a
    1dd0:	9b a1       	lds	r25, 0x4b
    1dd2:	ac a1       	lds	r26, 0x4c
    1dd4:	bd a1       	lds	r27, 0x4d
    1dd6:	48 0f       	add	r20, r24
    1dd8:	59 1f       	adc	r21, r25
    1dda:	6a 1f       	adc	r22, r26
    1ddc:	7b 1f       	adc	r23, r27
    1dde:	ce 01       	movw	r24, r28
    1de0:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
			if (res != FR_OK) break;
    1de4:	88 23       	and	r24, r24
    1de6:	09 f0       	breq	.+2      	; 0x1dea <put_fat+0x142>
    1de8:	3d c0       	rjmp	.+122    	; 0x1e64 <put_fat+0x1bc>
			p = &fs->win[clst * 2 % SS(fs)];
    1dea:	f6 01       	movw	r30, r12
    1dec:	ee 0f       	add	r30, r30
    1dee:	ff 1f       	adc	r31, r31
    1df0:	f1 70       	andi	r31, 0x01	; 1
			ST_WORD(p, (WORD)val);
    1df2:	ec 0f       	add	r30, r28
    1df4:	fd 1f       	adc	r31, r29
    1df6:	82 aa       	sts	0x92, r24
    1df8:	93 aa       	sts	0x93, r25
			break;
    1dfa:	34 c0       	rjmp	.+104    	; 0x1e64 <put_fat+0x1bc>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    1dfc:	68 94       	set
    1dfe:	16 f8       	bld	r1, 6
    1e00:	76 95       	lsr	r23
    1e02:	67 95       	ror	r22
    1e04:	57 95       	ror	r21
    1e06:	47 95       	ror	r20
    1e08:	16 94       	lsr	r1
    1e0a:	d1 f7       	brne	.-12     	; 0x1e00 <put_fat+0x158>
    1e0c:	8a a1       	lds	r24, 0x4a
    1e0e:	9b a1       	lds	r25, 0x4b
    1e10:	ac a1       	lds	r26, 0x4c
    1e12:	bd a1       	lds	r27, 0x4d
    1e14:	48 0f       	add	r20, r24
    1e16:	59 1f       	adc	r21, r25
    1e18:	6a 1f       	adc	r22, r26
    1e1a:	7b 1f       	adc	r23, r27
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
			if (res != FR_OK) break;
    1e22:	88 23       	and	r24, r24
    1e24:	f9 f4       	brne	.+62     	; 0x1e64 <put_fat+0x1bc>
			p = &fs->win[clst * 4 % SS(fs)];
    1e26:	96 01       	movw	r18, r12
    1e28:	22 0f       	add	r18, r18
    1e2a:	33 1f       	adc	r19, r19
    1e2c:	22 0f       	add	r18, r18
    1e2e:	33 1f       	adc	r19, r19
    1e30:	31 70       	andi	r19, 0x01	; 1
			val |= LD_DWORD(p) & 0xF0000000;
    1e32:	fe 01       	movw	r30, r28
    1e34:	e2 0f       	add	r30, r18
    1e36:	f3 1f       	adc	r31, r19
    1e38:	45 a9       	sts	0x45, r20
    1e3a:	50 e0       	ldi	r21, 0x00	; 0
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	70 e0       	ldi	r23, 0x00	; 0
    1e40:	74 2f       	mov	r23, r20
    1e42:	66 27       	eor	r22, r22
    1e44:	55 27       	eor	r21, r21
    1e46:	44 27       	eor	r20, r20
    1e48:	40 70       	andi	r20, 0x00	; 0
    1e4a:	50 70       	andi	r21, 0x00	; 0
    1e4c:	60 70       	andi	r22, 0x00	; 0
    1e4e:	70 7f       	andi	r23, 0xF0	; 240
    1e50:	48 29       	or	r20, r8
    1e52:	59 29       	or	r21, r9
    1e54:	6a 29       	or	r22, r10
    1e56:	7b 29       	or	r23, r11
			ST_DWORD(p, val);
    1e58:	42 ab       	sts	0x52, r20
    1e5a:	53 ab       	sts	0x53, r21
    1e5c:	64 ab       	sts	0x54, r22
    1e5e:	75 ab       	sts	0x55, r23
			break;
    1e60:	01 c0       	rjmp	.+2      	; 0x1e64 <put_fat+0x1bc>

		default :
			res = FR_INT_ERR;
    1e62:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
    1e64:	91 e0       	ldi	r25, 0x01	; 1
    1e66:	9c 83       	std	Y+4, r25	; 0x04
    1e68:	03 c0       	rjmp	.+6      	; 0x1e70 <put_fat+0x1c8>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	01 c0       	rjmp	.+2      	; 0x1e70 <put_fat+0x1c8>
    1e6e:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
	}

	return res;
}
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	ff 90       	pop	r15
    1e7a:	ef 90       	pop	r14
    1e7c:	df 90       	pop	r13
    1e7e:	cf 90       	pop	r12
    1e80:	bf 90       	pop	r11
    1e82:	af 90       	pop	r10
    1e84:	9f 90       	pop	r9
    1e86:	8f 90       	pop	r8
    1e88:	08 95       	ret

00001e8a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1e8a:	2f 92       	push	r2
    1e8c:	3f 92       	push	r3
    1e8e:	4f 92       	push	r4
    1e90:	5f 92       	push	r5
    1e92:	6f 92       	push	r6
    1e94:	7f 92       	push	r7
    1e96:	8f 92       	push	r8
    1e98:	9f 92       	push	r9
    1e9a:	af 92       	push	r10
    1e9c:	bf 92       	push	r11
    1e9e:	cf 92       	push	r12
    1ea0:	df 92       	push	r13
    1ea2:	ef 92       	push	r14
    1ea4:	ff 92       	push	r15
    1ea6:	0f 93       	push	r16
    1ea8:	1f 93       	push	r17
    1eaa:	cf 93       	push	r28
    1eac:	df 93       	push	r29
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <create_chain+0x26>
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <create_chain+0x28>
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	1c 01       	movw	r2, r24
    1eb8:	49 83       	std	Y+1, r20	; 0x01
    1eba:	5a 83       	std	Y+2, r21	; 0x02
    1ebc:	6b 83       	std	Y+3, r22	; 0x03
    1ebe:	7c 83       	std	Y+4, r23	; 0x04
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    1ec0:	41 15       	cp	r20, r1
    1ec2:	51 05       	cpc	r21, r1
    1ec4:	61 05       	cpc	r22, r1
    1ec6:	71 05       	cpc	r23, r1
    1ec8:	c1 f4       	brne	.+48     	; 0x1efa <create_chain+0x70>
		scl = fs->last_clust;			/* Get suggested start point */
    1eca:	dc 01       	movw	r26, r24
    1ecc:	1a 96       	adiw	r26, 0x0a	; 10
    1ece:	8d 90       	ld	r8, X+
    1ed0:	9d 90       	ld	r9, X+
    1ed2:	ad 90       	ld	r10, X+
    1ed4:	bc 90       	ld	r11, X
    1ed6:	1d 97       	sbiw	r26, 0x0d	; 13
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1ed8:	81 14       	cp	r8, r1
    1eda:	91 04       	cpc	r9, r1
    1edc:	a1 04       	cpc	r10, r1
    1ede:	b1 04       	cpc	r11, r1
    1ee0:	51 f1       	breq	.+84     	; 0x1f36 <create_chain+0xac>
    1ee2:	5a 96       	adiw	r26, 0x1a	; 26
    1ee4:	8d 91       	ld	r24, X+
    1ee6:	9d 91       	ld	r25, X+
    1ee8:	0d 90       	ld	r0, X+
    1eea:	bc 91       	ld	r27, X
    1eec:	a0 2d       	mov	r26, r0
    1eee:	88 16       	cp	r8, r24
    1ef0:	99 06       	cpc	r9, r25
    1ef2:	aa 06       	cpc	r10, r26
    1ef4:	bb 06       	cpc	r11, r27
    1ef6:	20 f5       	brcc	.+72     	; 0x1f40 <create_chain+0xb6>
    1ef8:	27 c0       	rjmp	.+78     	; 0x1f48 <create_chain+0xbe>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1efa:	49 81       	ldd	r20, Y+1	; 0x01
    1efc:	5a 81       	ldd	r21, Y+2	; 0x02
    1efe:	6b 81       	ldd	r22, Y+3	; 0x03
    1f00:	7c 81       	ldd	r23, Y+4	; 0x04
    1f02:	0e 94 65 0c 	call	0x18ca	; 0x18ca <get_fat>
    1f06:	8b 01       	movw	r16, r22
    1f08:	9c 01       	movw	r18, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1f0a:	62 30       	cpi	r22, 0x02	; 2
    1f0c:	71 05       	cpc	r23, r1
    1f0e:	81 05       	cpc	r24, r1
    1f10:	91 05       	cpc	r25, r1
    1f12:	08 f4       	brcc	.+2      	; 0x1f16 <create_chain+0x8c>
    1f14:	ad c0       	rjmp	.+346    	; 0x2070 <create_chain+0x1e6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1f16:	f1 01       	movw	r30, r2
    1f18:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f1a:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f1c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1f1e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1f20:	08 17       	cp	r16, r24
    1f22:	19 07       	cpc	r17, r25
    1f24:	2a 07       	cpc	r18, r26
    1f26:	3b 07       	cpc	r19, r27
    1f28:	08 f4       	brcc	.+2      	; 0x1f2c <create_chain+0xa2>
    1f2a:	b6 c0       	rjmp	.+364    	; 0x2098 <create_chain+0x20e>
		scl = clst;
    1f2c:	89 80       	ldd	r8, Y+1	; 0x01
    1f2e:	9a 80       	ldd	r9, Y+2	; 0x02
    1f30:	ab 80       	ldd	r10, Y+3	; 0x03
    1f32:	bc 80       	ldd	r11, Y+4	; 0x04
    1f34:	09 c0       	rjmp	.+18     	; 0x1f48 <create_chain+0xbe>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1f36:	88 24       	eor	r8, r8
    1f38:	99 24       	eor	r9, r9
    1f3a:	54 01       	movw	r10, r8
    1f3c:	83 94       	inc	r8
    1f3e:	04 c0       	rjmp	.+8      	; 0x1f48 <create_chain+0xbe>
    1f40:	88 24       	eor	r8, r8
    1f42:	99 24       	eor	r9, r9
    1f44:	54 01       	movw	r10, r8
    1f46:	83 94       	inc	r8
		if (cs < 2) return 1;			/* It is an invalid cluster */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
    1f48:	75 01       	movw	r14, r10
    1f4a:	64 01       	movw	r12, r8
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    1f4c:	44 24       	eor	r4, r4
    1f4e:	55 24       	eor	r5, r5
    1f50:	32 01       	movw	r6, r4
    1f52:	68 94       	set
    1f54:	41 f8       	bld	r4, 1
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1f56:	08 94       	sec
    1f58:	c1 1c       	adc	r12, r1
    1f5a:	d1 1c       	adc	r13, r1
    1f5c:	e1 1c       	adc	r14, r1
    1f5e:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1f60:	f1 01       	movw	r30, r2
    1f62:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f64:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f66:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1f68:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1f6a:	c8 16       	cp	r12, r24
    1f6c:	d9 06       	cpc	r13, r25
    1f6e:	ea 06       	cpc	r14, r26
    1f70:	fb 06       	cpc	r15, r27
    1f72:	48 f0       	brcs	.+18     	; 0x1f86 <create_chain+0xfc>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1f74:	f2 e0       	ldi	r31, 0x02	; 2
    1f76:	8f 16       	cp	r8, r31
    1f78:	91 04       	cpc	r9, r1
    1f7a:	a1 04       	cpc	r10, r1
    1f7c:	b1 04       	cpc	r11, r1
    1f7e:	08 f4       	brcc	.+2      	; 0x1f82 <create_chain+0xf8>
    1f80:	7c c0       	rjmp	.+248    	; 0x207a <create_chain+0x1f0>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
    1f82:	73 01       	movw	r14, r6
    1f84:	62 01       	movw	r12, r4
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    1f86:	c1 01       	movw	r24, r2
    1f88:	b7 01       	movw	r22, r14
    1f8a:	a6 01       	movw	r20, r12
    1f8c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <get_fat>
    1f90:	8b 01       	movw	r16, r22
    1f92:	9c 01       	movw	r18, r24
		if (cs == 0) break;				/* Found a free cluster */
    1f94:	61 15       	cp	r22, r1
    1f96:	71 05       	cpc	r23, r1
    1f98:	81 05       	cpc	r24, r1
    1f9a:	91 05       	cpc	r25, r1
    1f9c:	a9 f0       	breq	.+42     	; 0x1fc8 <create_chain+0x13e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1f9e:	0f 3f       	cpi	r16, 0xFF	; 255
    1fa0:	8f ef       	ldi	r24, 0xFF	; 255
    1fa2:	18 07       	cpc	r17, r24
    1fa4:	8f ef       	ldi	r24, 0xFF	; 255
    1fa6:	28 07       	cpc	r18, r24
    1fa8:	8f ef       	ldi	r24, 0xFF	; 255
    1faa:	38 07       	cpc	r19, r24
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <create_chain+0x126>
    1fae:	74 c0       	rjmp	.+232    	; 0x2098 <create_chain+0x20e>
    1fb0:	01 30       	cpi	r16, 0x01	; 1
    1fb2:	11 05       	cpc	r17, r1
    1fb4:	21 05       	cpc	r18, r1
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <create_chain+0x132>
    1fba:	6e c0       	rjmp	.+220    	; 0x2098 <create_chain+0x20e>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    1fbc:	c8 14       	cp	r12, r8
    1fbe:	d9 04       	cpc	r13, r9
    1fc0:	ea 04       	cpc	r14, r10
    1fc2:	fb 04       	cpc	r15, r11
    1fc4:	41 f6       	brne	.-112    	; 0x1f56 <create_chain+0xcc>
    1fc6:	5d c0       	rjmp	.+186    	; 0x2082 <create_chain+0x1f8>
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
    1fc8:	8c 2c       	mov	r8, r12
    1fca:	4d 2c       	mov	r4, r13
    1fcc:	be 2c       	mov	r11, r14
    1fce:	af 2c       	mov	r10, r15
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    1fd0:	c1 01       	movw	r24, r2
    1fd2:	4c 2d       	mov	r20, r12
    1fd4:	5d 2d       	mov	r21, r13
    1fd6:	6e 2d       	mov	r22, r14
    1fd8:	7f 2d       	mov	r23, r15
    1fda:	0f ef       	ldi	r16, 0xFF	; 255
    1fdc:	1f ef       	ldi	r17, 0xFF	; 255
    1fde:	2f ef       	ldi	r18, 0xFF	; 255
    1fe0:	3f e0       	ldi	r19, 0x0F	; 15
    1fe2:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <put_fat>
	if (res == FR_OK && clst != 0) {
    1fe6:	88 23       	and	r24, r24
    1fe8:	e9 f5       	brne	.+122    	; 0x2064 <create_chain+0x1da>
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	9a 81       	ldd	r25, Y+2	; 0x02
    1fee:	ab 81       	ldd	r26, Y+3	; 0x03
    1ff0:	bc 81       	ldd	r27, Y+4	; 0x04
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	a1 05       	cpc	r26, r1
    1ff6:	b1 05       	cpc	r27, r1
    1ff8:	69 f0       	breq	.+26     	; 0x2014 <create_chain+0x18a>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    1ffa:	c1 01       	movw	r24, r2
    1ffc:	49 81       	ldd	r20, Y+1	; 0x01
    1ffe:	5a 81       	ldd	r21, Y+2	; 0x02
    2000:	6b 81       	ldd	r22, Y+3	; 0x03
    2002:	7c 81       	ldd	r23, Y+4	; 0x04
    2004:	0c 2d       	mov	r16, r12
    2006:	1d 2d       	mov	r17, r13
    2008:	2e 2d       	mov	r18, r14
    200a:	3f 2d       	mov	r19, r15
    200c:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <put_fat>
	}
	if (res == FR_OK) {
    2010:	88 23       	and	r24, r24
    2012:	41 f5       	brne	.+80     	; 0x2064 <create_chain+0x1da>
		fs->last_clust = ncl;			/* Update FSINFO */
    2014:	d1 01       	movw	r26, r2
    2016:	1a 96       	adiw	r26, 0x0a	; 10
    2018:	8c 92       	st	X, r8
    201a:	1a 97       	sbiw	r26, 0x0a	; 10
    201c:	1b 96       	adiw	r26, 0x0b	; 11
    201e:	4c 92       	st	X, r4
    2020:	1b 97       	sbiw	r26, 0x0b	; 11
    2022:	1c 96       	adiw	r26, 0x0c	; 12
    2024:	bc 92       	st	X, r11
    2026:	1c 97       	sbiw	r26, 0x0c	; 12
    2028:	1d 96       	adiw	r26, 0x0d	; 13
    202a:	ac 92       	st	X, r10
    202c:	1d 97       	sbiw	r26, 0x0d	; 13
		if (fs->free_clust != 0xFFFFFFFF) {
    202e:	1e 96       	adiw	r26, 0x0e	; 14
    2030:	8d 91       	ld	r24, X+
    2032:	9d 91       	ld	r25, X+
    2034:	0d 90       	ld	r0, X+
    2036:	bc 91       	ld	r27, X
    2038:	a0 2d       	mov	r26, r0
    203a:	8f 3f       	cpi	r24, 0xFF	; 255
    203c:	ef ef       	ldi	r30, 0xFF	; 255
    203e:	9e 07       	cpc	r25, r30
    2040:	ef ef       	ldi	r30, 0xFF	; 255
    2042:	ae 07       	cpc	r26, r30
    2044:	ef ef       	ldi	r30, 0xFF	; 255
    2046:	be 07       	cpc	r27, r30
    2048:	01 f1       	breq	.+64     	; 0x208a <create_chain+0x200>
			fs->free_clust--;
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	a1 09       	sbc	r26, r1
    204e:	b1 09       	sbc	r27, r1
    2050:	f1 01       	movw	r30, r2
    2052:	86 87       	std	Z+14, r24	; 0x0e
    2054:	97 87       	std	Z+15, r25	; 0x0f
    2056:	a0 8b       	std	Z+16, r26	; 0x10
    2058:	b1 8b       	std	Z+17, r27	; 0x11
			fs->fsi_flag = 1;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	85 83       	std	Z+5, r24	; 0x05
    205e:	97 01       	movw	r18, r14
    2060:	86 01       	movw	r16, r12
    2062:	1a c0       	rjmp	.+52     	; 0x2098 <create_chain+0x20e>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    2064:	81 30       	cpi	r24, 0x01	; 1
    2066:	a1 f4       	brne	.+40     	; 0x2090 <create_chain+0x206>
    2068:	0f ef       	ldi	r16, 0xFF	; 255
    206a:	1f ef       	ldi	r17, 0xFF	; 255
    206c:	98 01       	movw	r18, r16
    206e:	14 c0       	rjmp	.+40     	; 0x2098 <create_chain+0x20e>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
    2070:	01 e0       	ldi	r16, 0x01	; 1
    2072:	10 e0       	ldi	r17, 0x00	; 0
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	0f c0       	rjmp	.+30     	; 0x2098 <create_chain+0x20e>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    207a:	00 e0       	ldi	r16, 0x00	; 0
    207c:	10 e0       	ldi	r17, 0x00	; 0
    207e:	98 01       	movw	r18, r16
    2080:	0b c0       	rjmp	.+22     	; 0x2098 <create_chain+0x20e>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    2082:	00 e0       	ldi	r16, 0x00	; 0
    2084:	10 e0       	ldi	r17, 0x00	; 0
    2086:	98 01       	movw	r18, r16
    2088:	07 c0       	rjmp	.+14     	; 0x2098 <create_chain+0x20e>
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
    208a:	97 01       	movw	r18, r14
    208c:	86 01       	movw	r16, r12
    208e:	04 c0       	rjmp	.+8      	; 0x2098 <create_chain+0x20e>
			fs->free_clust--;
			fs->fsi_flag = 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    2090:	01 e0       	ldi	r16, 0x01	; 1
    2092:	10 e0       	ldi	r17, 0x00	; 0
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
    2098:	60 2f       	mov	r22, r16
    209a:	71 2f       	mov	r23, r17
    209c:	82 2f       	mov	r24, r18
    209e:	93 2f       	mov	r25, r19
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	1f 91       	pop	r17
    20ae:	0f 91       	pop	r16
    20b0:	ff 90       	pop	r15
    20b2:	ef 90       	pop	r14
    20b4:	df 90       	pop	r13
    20b6:	cf 90       	pop	r12
    20b8:	bf 90       	pop	r11
    20ba:	af 90       	pop	r10
    20bc:	9f 90       	pop	r9
    20be:	8f 90       	pop	r8
    20c0:	7f 90       	pop	r7
    20c2:	6f 90       	pop	r6
    20c4:	5f 90       	pop	r5
    20c6:	4f 90       	pop	r4
    20c8:	3f 90       	pop	r3
    20ca:	2f 90       	pop	r2
    20cc:	08 95       	ret

000020ce <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    20ce:	8f 92       	push	r8
    20d0:	9f 92       	push	r9
    20d2:	af 92       	push	r10
    20d4:	bf 92       	push	r11
    20d6:	cf 92       	push	r12
    20d8:	df 92       	push	r13
    20da:	ef 92       	push	r14
    20dc:	ff 92       	push	r15
    20de:	0f 93       	push	r16
    20e0:	1f 93       	push	r17
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	8c 01       	movw	r16, r24
    20e8:	eb 01       	movw	r28, r22
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    20ea:	dc 01       	movw	r26, r24
    20ec:	14 96       	adiw	r26, 0x04	; 4
    20ee:	ed 90       	ld	r14, X+
    20f0:	fc 90       	ld	r15, X
    20f2:	15 97       	sbiw	r26, 0x05	; 5
    20f4:	08 94       	sec
    20f6:	e1 1c       	adc	r14, r1
    20f8:	f1 1c       	adc	r15, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    20fa:	e1 14       	cp	r14, r1
    20fc:	f1 04       	cpc	r15, r1
    20fe:	09 f4       	brne	.+2      	; 0x2102 <dir_next+0x34>
    2100:	09 c1       	rjmp	.+530    	; 0x2314 <dir_next+0x246>
    2102:	1e 96       	adiw	r26, 0x0e	; 14
    2104:	8d 91       	ld	r24, X+
    2106:	9d 91       	ld	r25, X+
    2108:	0d 90       	ld	r0, X+
    210a:	bc 91       	ld	r27, X
    210c:	a0 2d       	mov	r26, r0
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	a1 05       	cpc	r26, r1
    2112:	b1 05       	cpc	r27, r1
    2114:	09 f4       	brne	.+2      	; 0x2118 <dir_next+0x4a>
    2116:	00 c1       	rjmp	.+512    	; 0x2318 <dir_next+0x24a>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    2118:	0f 2e       	mov	r0, r31
    211a:	ff e0       	ldi	r31, 0x0F	; 15
    211c:	cf 2e       	mov	r12, r31
    211e:	dd 24       	eor	r13, r13
    2120:	f0 2d       	mov	r31, r0
    2122:	ce 20       	and	r12, r14
    2124:	df 20       	and	r13, r15
    2126:	c1 14       	cp	r12, r1
    2128:	d1 04       	cpc	r13, r1
    212a:	09 f0       	breq	.+2      	; 0x212e <dir_next+0x60>
    212c:	d8 c0       	rjmp	.+432    	; 0x22de <dir_next+0x210>
		dj->sect++;					/* Next sector */
    212e:	01 96       	adiw	r24, 0x01	; 1
    2130:	a1 1d       	adc	r26, r1
    2132:	b1 1d       	adc	r27, r1
    2134:	f8 01       	movw	r30, r16
    2136:	86 87       	std	Z+14, r24	; 0x0e
    2138:	97 87       	std	Z+15, r25	; 0x0f
    213a:	a0 8b       	std	Z+16, r26	; 0x10
    213c:	b1 8b       	std	Z+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    213e:	42 85       	ldd	r20, Z+10	; 0x0a
    2140:	53 85       	ldd	r21, Z+11	; 0x0b
    2142:	64 85       	ldd	r22, Z+12	; 0x0c
    2144:	75 85       	ldd	r23, Z+13	; 0x0d
    2146:	41 15       	cp	r20, r1
    2148:	51 05       	cpc	r21, r1
    214a:	61 05       	cpc	r22, r1
    214c:	71 05       	cpc	r23, r1
    214e:	51 f4       	brne	.+20     	; 0x2164 <dir_next+0x96>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    2150:	01 90       	ld	r0, Z+
    2152:	f0 81       	ld	r31, Z
    2154:	e0 2d       	mov	r30, r0
    2156:	80 85       	ldd	r24, Z+8	; 0x08
    2158:	91 85       	ldd	r25, Z+9	; 0x09
    215a:	e8 16       	cp	r14, r24
    215c:	f9 06       	cpc	r15, r25
    215e:	08 f0       	brcs	.+2      	; 0x2162 <dir_next+0x94>
    2160:	dd c0       	rjmp	.+442    	; 0x231c <dir_next+0x24e>
    2162:	bd c0       	rjmp	.+378    	; 0x22de <dir_next+0x210>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    2164:	01 90       	ld	r0, Z+
    2166:	f0 81       	ld	r31, Z
    2168:	e0 2d       	mov	r30, r0
    216a:	82 81       	ldd	r24, Z+2	; 0x02
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	97 01       	movw	r18, r14
    2172:	32 95       	swap	r19
    2174:	22 95       	swap	r18
    2176:	2f 70       	andi	r18, 0x0F	; 15
    2178:	23 27       	eor	r18, r19
    217a:	3f 70       	andi	r19, 0x0F	; 15
    217c:	23 27       	eor	r18, r19
    217e:	82 23       	and	r24, r18
    2180:	93 23       	and	r25, r19
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	09 f0       	breq	.+2      	; 0x2188 <dir_next+0xba>
    2186:	ab c0       	rjmp	.+342    	; 0x22de <dir_next+0x210>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    2188:	cf 01       	movw	r24, r30
    218a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <get_fat>
    218e:	4b 01       	movw	r8, r22
    2190:	5c 01       	movw	r10, r24
				if (clst <= 1) return FR_INT_ERR;
    2192:	62 30       	cpi	r22, 0x02	; 2
    2194:	71 05       	cpc	r23, r1
    2196:	81 05       	cpc	r24, r1
    2198:	91 05       	cpc	r25, r1
    219a:	08 f4       	brcc	.+2      	; 0x219e <dir_next+0xd0>
    219c:	c1 c0       	rjmp	.+386    	; 0x2320 <dir_next+0x252>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    219e:	6f 3f       	cpi	r22, 0xFF	; 255
    21a0:	ef ef       	ldi	r30, 0xFF	; 255
    21a2:	7e 07       	cpc	r23, r30
    21a4:	ef ef       	ldi	r30, 0xFF	; 255
    21a6:	8e 07       	cpc	r24, r30
    21a8:	ef ef       	ldi	r30, 0xFF	; 255
    21aa:	9e 07       	cpc	r25, r30
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <dir_next+0xe2>
    21ae:	ba c0       	rjmp	.+372    	; 0x2324 <dir_next+0x256>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    21b0:	d8 01       	movw	r26, r16
    21b2:	ed 91       	ld	r30, X+
    21b4:	fc 91       	ld	r31, X
    21b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    21b8:	93 8d       	ldd	r25, Z+27	; 0x1b
    21ba:	a4 8d       	ldd	r26, Z+28	; 0x1c
    21bc:	b5 8d       	ldd	r27, Z+29	; 0x1d
    21be:	88 16       	cp	r8, r24
    21c0:	99 06       	cpc	r9, r25
    21c2:	aa 06       	cpc	r10, r26
    21c4:	bb 06       	cpc	r11, r27
    21c6:	08 f4       	brcc	.+2      	; 0x21ca <dir_next+0xfc>
    21c8:	78 c0       	rjmp	.+240    	; 0x22ba <dir_next+0x1ec>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    21ca:	20 97       	sbiw	r28, 0x00	; 0
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <dir_next+0x102>
    21ce:	ac c0       	rjmp	.+344    	; 0x2328 <dir_next+0x25a>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    21d0:	d8 01       	movw	r26, r16
    21d2:	1a 96       	adiw	r26, 0x0a	; 10
    21d4:	4d 91       	ld	r20, X+
    21d6:	5d 91       	ld	r21, X+
    21d8:	6d 91       	ld	r22, X+
    21da:	7c 91       	ld	r23, X
    21dc:	1d 97       	sbiw	r26, 0x0d	; 13
    21de:	cf 01       	movw	r24, r30
    21e0:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <create_chain>
    21e4:	4b 01       	movw	r8, r22
    21e6:	5c 01       	movw	r10, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    21e8:	61 15       	cp	r22, r1
    21ea:	71 05       	cpc	r23, r1
    21ec:	81 05       	cpc	r24, r1
    21ee:	91 05       	cpc	r25, r1
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <dir_next+0x126>
    21f2:	9c c0       	rjmp	.+312    	; 0x232c <dir_next+0x25e>
					if (clst == 1) return FR_INT_ERR;
    21f4:	61 30       	cpi	r22, 0x01	; 1
    21f6:	71 05       	cpc	r23, r1
    21f8:	81 05       	cpc	r24, r1
    21fa:	91 05       	cpc	r25, r1
    21fc:	09 f4       	brne	.+2      	; 0x2200 <dir_next+0x132>
    21fe:	98 c0       	rjmp	.+304    	; 0x2330 <dir_next+0x262>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2200:	6f 3f       	cpi	r22, 0xFF	; 255
    2202:	ef ef       	ldi	r30, 0xFF	; 255
    2204:	7e 07       	cpc	r23, r30
    2206:	ef ef       	ldi	r30, 0xFF	; 255
    2208:	8e 07       	cpc	r24, r30
    220a:	ef ef       	ldi	r30, 0xFF	; 255
    220c:	9e 07       	cpc	r25, r30
    220e:	09 f4       	brne	.+2      	; 0x2212 <dir_next+0x144>
    2210:	91 c0       	rjmp	.+290    	; 0x2334 <dir_next+0x266>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    2212:	d8 01       	movw	r26, r16
    2214:	8d 91       	ld	r24, X+
    2216:	9c 91       	ld	r25, X
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	50 e0       	ldi	r21, 0x00	; 0
    221c:	ba 01       	movw	r22, r20
    221e:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
    2222:	88 23       	and	r24, r24
    2224:	09 f0       	breq	.+2      	; 0x2228 <dir_next+0x15a>
    2226:	88 c0       	rjmp	.+272    	; 0x2338 <dir_next+0x26a>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    2228:	f8 01       	movw	r30, r16
    222a:	80 81       	ld	r24, Z
    222c:	91 81       	ldd	r25, Z+1	; 0x01
    222e:	c2 96       	adiw	r24, 0x32	; 50
    2230:	60 e0       	ldi	r22, 0x00	; 0
    2232:	70 e0       	ldi	r23, 0x00	; 0
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	52 e0       	ldi	r21, 0x02	; 2
    2238:	0e 94 21 05 	call	0xa42	; 0xa42 <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    223c:	d8 01       	movw	r26, r16
    223e:	cd 91       	ld	r28, X+
    2240:	dc 91       	ld	r29, X
    2242:	ce 01       	movw	r24, r28
    2244:	b5 01       	movw	r22, r10
    2246:	a4 01       	movw	r20, r8
    2248:	0e 94 2f 0c 	call	0x185e	; 0x185e <clust2sect>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	8e a7       	lds	r24, 0x7e
    2252:	9f a7       	lds	r25, 0x7f
    2254:	a8 ab       	sts	0x58, r26
    2256:	b9 ab       	sts	0x59, r27
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2258:	c0 e0       	ldi	r28, 0x00	; 0
						dj->fs->wflag = 1;
    225a:	d1 e0       	ldi	r29, 0x01	; 1
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    225c:	1b c0       	rjmp	.+54     	; 0x2294 <dir_next+0x1c6>
						dj->fs->wflag = 1;
    225e:	d4 83       	std	Z+4, r29	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    2260:	f8 01       	movw	r30, r16
    2262:	80 81       	ld	r24, Z
    2264:	91 81       	ldd	r25, Z+1	; 0x01
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	50 e0       	ldi	r21, 0x00	; 0
    226a:	ba 01       	movw	r22, r20
    226c:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
    2270:	88 23       	and	r24, r24
    2272:	09 f0       	breq	.+2      	; 0x2276 <dir_next+0x1a8>
    2274:	63 c0       	rjmp	.+198    	; 0x233c <dir_next+0x26e>
						dj->fs->winsect++;
    2276:	d8 01       	movw	r26, r16
    2278:	ed 91       	ld	r30, X+
    227a:	fc 91       	ld	r31, X
    227c:	86 a5       	lds	r24, 0x66
    227e:	97 a5       	lds	r25, 0x67
    2280:	a0 a9       	sts	0x40, r26
    2282:	b1 a9       	sts	0x41, r27
    2284:	01 96       	adiw	r24, 0x01	; 1
    2286:	a1 1d       	adc	r26, r1
    2288:	b1 1d       	adc	r27, r1
    228a:	86 a7       	lds	r24, 0x76
    228c:	97 a7       	lds	r25, 0x77
    228e:	a0 ab       	sts	0x50, r26
    2290:	b1 ab       	sts	0x51, r27
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    2292:	cf 5f       	subi	r28, 0xFF	; 255
    2294:	d8 01       	movw	r26, r16
    2296:	ed 91       	ld	r30, X+
    2298:	fc 91       	ld	r31, X
    229a:	11 97       	sbiw	r26, 0x01	; 1
    229c:	82 81       	ldd	r24, Z+2	; 0x02
    229e:	c8 17       	cp	r28, r24
    22a0:	f0 f2       	brcs	.-68     	; 0x225e <dir_next+0x190>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    22a2:	86 a5       	lds	r24, 0x66
    22a4:	97 a5       	lds	r25, 0x67
    22a6:	a0 a9       	sts	0x40, r26
    22a8:	b1 a9       	sts	0x41, r27
    22aa:	8c 1b       	sub	r24, r28
    22ac:	91 09       	sbc	r25, r1
    22ae:	a1 09       	sbc	r26, r1
    22b0:	b1 09       	sbc	r27, r1
    22b2:	86 a7       	lds	r24, 0x76
    22b4:	97 a7       	lds	r25, 0x77
    22b6:	a0 ab       	sts	0x50, r26
    22b8:	b1 ab       	sts	0x51, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    22ba:	f8 01       	movw	r30, r16
    22bc:	82 86       	std	Z+10, r8	; 0x0a
    22be:	93 86       	std	Z+11, r9	; 0x0b
    22c0:	a4 86       	std	Z+12, r10	; 0x0c
    22c2:	b5 86       	std	Z+13, r11	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    22c4:	80 81       	ld	r24, Z
    22c6:	91 81       	ldd	r25, Z+1	; 0x01
    22c8:	b5 01       	movw	r22, r10
    22ca:	a4 01       	movw	r20, r8
    22cc:	0e 94 2f 0c 	call	0x185e	; 0x185e <clust2sect>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	f8 01       	movw	r30, r16
    22d6:	86 87       	std	Z+14, r24	; 0x0e
    22d8:	97 87       	std	Z+15, r25	; 0x0f
    22da:	a0 8b       	std	Z+16, r26	; 0x10
    22dc:	b1 8b       	std	Z+17, r27	; 0x11
			}
		}
	}

	dj->index = i;
    22de:	d8 01       	movw	r26, r16
    22e0:	15 96       	adiw	r26, 0x05	; 5
    22e2:	fc 92       	st	X, r15
    22e4:	ee 92       	st	-X, r14
    22e6:	14 97       	sbiw	r26, 0x04	; 4
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    22e8:	8d 91       	ld	r24, X+
    22ea:	9c 91       	ld	r25, X
    22ec:	11 97       	sbiw	r26, 0x01	; 1
    22ee:	c2 96       	adiw	r24, 0x32	; 50
    22f0:	cc 0c       	add	r12, r12
    22f2:	dd 1c       	adc	r13, r13
    22f4:	cc 0c       	add	r12, r12
    22f6:	dd 1c       	adc	r13, r13
    22f8:	cc 0c       	add	r12, r12
    22fa:	dd 1c       	adc	r13, r13
    22fc:	cc 0c       	add	r12, r12
    22fe:	dd 1c       	adc	r13, r13
    2300:	cc 0c       	add	r12, r12
    2302:	dd 1c       	adc	r13, r13
    2304:	8c 0d       	add	r24, r12
    2306:	9d 1d       	adc	r25, r13
    2308:	53 96       	adiw	r26, 0x13	; 19
    230a:	9c 93       	st	X, r25
    230c:	8e 93       	st	-X, r24
    230e:	52 97       	sbiw	r26, 0x12	; 18

	return FR_OK;
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	15 c0       	rjmp	.+42     	; 0x233e <dir_next+0x270>


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
    2314:	84 e0       	ldi	r24, 0x04	; 4
    2316:	13 c0       	rjmp	.+38     	; 0x233e <dir_next+0x270>
    2318:	84 e0       	ldi	r24, 0x04	; 4
    231a:	11 c0       	rjmp	.+34     	; 0x233e <dir_next+0x270>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
    231c:	84 e0       	ldi	r24, 0x04	; 4
    231e:	0f c0       	rjmp	.+30     	; 0x233e <dir_next+0x270>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    2320:	82 e0       	ldi	r24, 0x02	; 2
    2322:	0d c0       	rjmp	.+26     	; 0x233e <dir_next+0x270>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	0b c0       	rjmp	.+22     	; 0x233e <dir_next+0x270>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    2328:	84 e0       	ldi	r24, 0x04	; 4
    232a:	09 c0       	rjmp	.+18     	; 0x233e <dir_next+0x270>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    232c:	87 e0       	ldi	r24, 0x07	; 7
    232e:	07 c0       	rjmp	.+14     	; 0x233e <dir_next+0x270>
					if (clst == 1) return FR_INT_ERR;
    2330:	82 e0       	ldi	r24, 0x02	; 2
    2332:	05 c0       	rjmp	.+10     	; 0x233e <dir_next+0x270>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	03 c0       	rjmp	.+6      	; 0x233e <dir_next+0x270>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	01 c0       	rjmp	.+2      	; 0x233e <dir_next+0x270>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    233c:	81 e0       	ldi	r24, 0x01	; 1

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

	return FR_OK;
}
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	ff 90       	pop	r15
    2348:	ef 90       	pop	r14
    234a:	df 90       	pop	r13
    234c:	cf 90       	pop	r12
    234e:	bf 90       	pop	r11
    2350:	af 90       	pop	r10
    2352:	9f 90       	pop	r9
    2354:	8f 90       	pop	r8
    2356:	08 95       	ret

00002358 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    2358:	2f 92       	push	r2
    235a:	3f 92       	push	r3
    235c:	4f 92       	push	r4
    235e:	5f 92       	push	r5
    2360:	6f 92       	push	r6
    2362:	7f 92       	push	r7
    2364:	8f 92       	push	r8
    2366:	9f 92       	push	r9
    2368:	af 92       	push	r10
    236a:	bf 92       	push	r11
    236c:	cf 92       	push	r12
    236e:	df 92       	push	r13
    2370:	ef 92       	push	r14
    2372:	ff 92       	push	r15
    2374:	0f 93       	push	r16
    2376:	1f 93       	push	r17
    2378:	cf 93       	push	r28
    237a:	df 93       	push	r29
    237c:	00 d0       	rcall	.+0      	; 0x237e <follow_path+0x26>
    237e:	00 d0       	rcall	.+0      	; 0x2380 <follow_path+0x28>
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
    2384:	8c 01       	movw	r16, r24
    2386:	3b 01       	movw	r6, r22
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
    2388:	db 01       	movw	r26, r22
    238a:	8c 91       	ld	r24, X
    238c:	8f 32       	cpi	r24, 0x2F	; 47
    238e:	11 f0       	breq	.+4      	; 0x2394 <follow_path+0x3c>
    2390:	8c 35       	cpi	r24, 0x5C	; 92
    2392:	49 f4       	brne	.+18     	; 0x23a6 <follow_path+0x4e>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
    2394:	08 94       	sec
    2396:	61 1c       	adc	r6, r1
    2398:	71 1c       	adc	r7, r1
    239a:	f8 01       	movw	r30, r16
    239c:	16 82       	std	Z+6, r1	; 0x06
    239e:	17 82       	std	Z+7, r1	; 0x07
    23a0:	10 86       	std	Z+8, r1	; 0x08
    23a2:	11 86       	std	Z+9, r1	; 0x09
    23a4:	0c c0       	rjmp	.+24     	; 0x23be <follow_path+0x66>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
    23a6:	d8 01       	movw	r26, r16
    23a8:	ed 91       	ld	r30, X+
    23aa:	fc 91       	ld	r31, X
    23ac:	86 89       	ldd	r24, Z+22	; 0x16
    23ae:	97 89       	ldd	r25, Z+23	; 0x17
    23b0:	a0 8d       	ldd	r26, Z+24	; 0x18
    23b2:	b1 8d       	ldd	r27, Z+25	; 0x19
    23b4:	f8 01       	movw	r30, r16
    23b6:	86 83       	std	Z+6, r24	; 0x06
    23b8:	97 83       	std	Z+7, r25	; 0x07
    23ba:	a0 87       	std	Z+8, r26	; 0x08
    23bc:	b1 87       	std	Z+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    23be:	d3 01       	movw	r26, r6
    23c0:	8c 91       	ld	r24, X
    23c2:	80 32       	cpi	r24, 0x20	; 32
    23c4:	50 f4       	brcc	.+20     	; 0x23da <follow_path+0x82>
		res = dir_sdi(dj, 0);
    23c6:	c8 01       	movw	r24, r16
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	70 e0       	ldi	r23, 0x00	; 0
    23cc:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <dir_sdi>
    23d0:	48 2f       	mov	r20, r24
		dj->dir = 0;
    23d2:	f8 01       	movw	r30, r16
    23d4:	13 8a       	std	Z+19, r1	; 0x13
    23d6:	12 8a       	std	Z+18, r1	; 0x12
    23d8:	39 c1       	rjmp	.+626    	; 0x264c <follow_path+0x2f4>
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
    23da:	0f 2e       	mov	r0, r31
    23dc:	fb e0       	ldi	r31, 0x0B	; 11
    23de:	4f 2e       	mov	r4, r31
    23e0:	55 24       	eor	r5, r5
    23e2:	f0 2d       	mov	r31, r0
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    23e4:	cc 24       	eor	r12, r12
    23e6:	dd 24       	eor	r13, r13
    23e8:	22 24       	eor	r2, r2
    23ea:	33 24       	eor	r3, r3
    23ec:	68 94       	set
    23ee:	23 f8       	bld	r2, 3
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    23f0:	29 82       	std	Y+1, r2	; 0x01
    23f2:	3a 82       	std	Y+2, r3	; 0x02
    23f4:	4b 82       	std	Y+3, r4	; 0x03
    23f6:	5c 82       	std	Y+4, r5	; 0x04
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
		res = dir_sdi(dj, 0);
		dj->dir = 0;
    23f8:	f3 01       	movw	r30, r6
    23fa:	9f 01       	movw	r18, r30
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    23fc:	81 91       	ld	r24, Z+
    23fe:	8f 32       	cpi	r24, 0x2F	; 47
    2400:	e1 f3       	breq	.-8      	; 0x23fa <follow_path+0xa2>
    2402:	8c 35       	cpi	r24, 0x5C	; 92
    2404:	d1 f3       	breq	.-12     	; 0x23fa <follow_path+0xa2>
    2406:	39 01       	movw	r6, r18
	sfn = dj->fn;
    2408:	d8 01       	movw	r26, r16
    240a:	54 96       	adiw	r26, 0x14	; 20
    240c:	ad 90       	ld	r10, X+
    240e:	bc 90       	ld	r11, X
    2410:	55 97       	sbiw	r26, 0x15	; 21
	mem_set(sfn, ' ', 11);
    2412:	c5 01       	movw	r24, r10
    2414:	60 e2       	ldi	r22, 0x20	; 32
    2416:	70 e0       	ldi	r23, 0x00	; 0
    2418:	a2 01       	movw	r20, r4
    241a:	0e 94 21 05 	call	0xa42	; 0xa42 <mem_set>
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
    241e:	f3 01       	movw	r30, r6
    2420:	80 81       	ld	r24, Z
    2422:	8e 32       	cpi	r24, 0x2E	; 46
    2424:	31 f0       	breq	.+12     	; 0x2432 <follow_path+0xda>
    2426:	d3 01       	movw	r26, r6
    2428:	76 01       	movw	r14, r12
    242a:	b6 01       	movw	r22, r12
    242c:	41 01       	movw	r8, r2
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	29 c0       	rjmp	.+82     	; 0x2484 <follow_path+0x12c>
		for (;;) {
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
    2432:	ee e2       	ldi	r30, 0x2E	; 46
    2434:	d5 01       	movw	r26, r10
    2436:	ec 93       	st	X, r30
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    2438:	d3 01       	movw	r26, r6
    243a:	11 96       	adiw	r26, 0x01	; 1
    243c:	2c 91       	ld	r18, X
    243e:	11 97       	sbiw	r26, 0x01	; 1
			if (c != '.' || si >= 3) break;
    2440:	2e 32       	cpi	r18, 0x2E	; 46
    2442:	59 f4       	brne	.+22     	; 0x245a <follow_path+0x102>
			sfn[i++] = c;
    2444:	8e e2       	ldi	r24, 0x2E	; 46
    2446:	f5 01       	movw	r30, r10
    2448:	81 83       	std	Z+1, r24	; 0x01
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    244a:	12 96       	adiw	r26, 0x02	; 2
    244c:	2c 91       	ld	r18, X
    244e:	12 97       	sbiw	r26, 0x02	; 2
			if (c != '.' || si >= 3) break;
    2450:	2e 32       	cpi	r18, 0x2E	; 46
    2452:	51 f0       	breq	.+20     	; 0x2468 <follow_path+0x110>
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    2454:	83 e0       	ldi	r24, 0x03	; 3
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	02 c0       	rjmp	.+4      	; 0x245e <follow_path+0x106>
    245a:	82 e0       	ldi	r24, 0x02	; 2
    245c:	90 e0       	ldi	r25, 0x00	; 0
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    245e:	2f 32       	cpi	r18, 0x2F	; 47
    2460:	49 f0       	breq	.+18     	; 0x2474 <follow_path+0x11c>
    2462:	2c 35       	cpi	r18, 0x5C	; 92
    2464:	39 f0       	breq	.+14     	; 0x2474 <follow_path+0x11c>
    2466:	02 c0       	rjmp	.+4      	; 0x246c <follow_path+0x114>
	mem_set(sfn, ' ', 11);
	si = i = b = 0; ni = 8;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
    2468:	83 e0       	ldi	r24, 0x03	; 3
    246a:	90 e0       	ldi	r25, 0x00	; 0
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    246c:	21 32       	cpi	r18, 0x21	; 33
    246e:	08 f0       	brcs	.+2      	; 0x2472 <follow_path+0x11a>
    2470:	de c0       	rjmp	.+444    	; 0x262e <follow_path+0x2d6>
    2472:	04 c1       	rjmp	.+520    	; 0x267c <follow_path+0x324>
		*path = &p[si];									/* Return pointer to the next segment */
    2474:	68 0e       	add	r6, r24
    2476:	79 1e       	adc	r7, r25
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    2478:	80 e2       	ldi	r24, 0x20	; 32
    247a:	d5 01       	movw	r26, r10
    247c:	1b 96       	adiw	r26, 0x0b	; 11
    247e:	8c 93       	st	X, r24
    2480:	1b 97       	sbiw	r26, 0x0b	; 11
    2482:	05 c1       	rjmp	.+522    	; 0x268e <follow_path+0x336>
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    2484:	2d 91       	ld	r18, X+
    2486:	6f 5f       	subi	r22, 0xFF	; 255
    2488:	7f 4f       	sbci	r23, 0xFF	; 255
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    248a:	21 32       	cpi	r18, 0x21	; 33
    248c:	08 f4       	brcc	.+2      	; 0x2490 <follow_path+0x138>
    248e:	4a c0       	rjmp	.+148    	; 0x2524 <follow_path+0x1cc>
    2490:	2f 32       	cpi	r18, 0x2F	; 47
    2492:	09 f4       	brne	.+2      	; 0x2496 <follow_path+0x13e>
    2494:	f7 c0       	rjmp	.+494    	; 0x2684 <follow_path+0x32c>
    2496:	2c 35       	cpi	r18, 0x5C	; 92
    2498:	09 f4       	brne	.+2      	; 0x249c <follow_path+0x144>
    249a:	f4 c0       	rjmp	.+488    	; 0x2684 <follow_path+0x32c>
		if (c == '.' || i >= ni) {
    249c:	2e 32       	cpi	r18, 0x2E	; 46
    249e:	19 f0       	breq	.+6      	; 0x24a6 <follow_path+0x14e>
    24a0:	e8 14       	cp	r14, r8
    24a2:	f9 04       	cpc	r15, r9
    24a4:	78 f0       	brcs	.+30     	; 0x24c4 <follow_path+0x16c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    24a6:	e8 e0       	ldi	r30, 0x08	; 8
    24a8:	8e 16       	cp	r8, r30
    24aa:	91 04       	cpc	r9, r1
    24ac:	09 f0       	breq	.+2      	; 0x24b0 <follow_path+0x158>
    24ae:	c1 c0       	rjmp	.+386    	; 0x2632 <follow_path+0x2da>
    24b0:	2e 32       	cpi	r18, 0x2E	; 46
    24b2:	09 f0       	breq	.+2      	; 0x24b6 <follow_path+0x15e>
    24b4:	c0 c0       	rjmp	.+384    	; 0x2636 <follow_path+0x2de>
			i = 8; ni = 11;
			b <<= 2; continue;
    24b6:	33 0f       	add	r19, r19
    24b8:	33 0f       	add	r19, r19
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    24ba:	e9 80       	ldd	r14, Y+1	; 0x01
    24bc:	fa 80       	ldd	r15, Y+2	; 0x02
    24be:	8b 80       	ldd	r8, Y+3	; 0x03
    24c0:	9c 80       	ldd	r9, Y+4	; 0x04
    24c2:	e0 cf       	rjmp	.-64     	; 0x2484 <follow_path+0x12c>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char? */
    24c4:	22 23       	and	r18, r18
    24c6:	4c f4       	brge	.+18     	; 0x24da <follow_path+0x182>
			b |= 3;						/* Eliminate NT flag */
    24c8:	33 60       	ori	r19, 0x03	; 3
#ifdef _EXCVT
			c = excvt[c - 0x80];		/* Upper conversion (SBCS) */
    24ca:	82 2f       	mov	r24, r18
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	80 58       	subi	r24, 0x80	; 128
    24d0:	90 40       	sbci	r25, 0x00	; 0
    24d2:	80 5f       	subi	r24, 0xF0	; 240
    24d4:	9e 4f       	sbci	r25, 0xFE	; 254
    24d6:	fc 01       	movw	r30, r24
    24d8:	20 81       	ld	r18, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    24da:	42 2f       	mov	r20, r18
    24dc:	50 e0       	ldi	r21, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    24de:	42 32       	cpi	r20, 0x22	; 34
    24e0:	51 05       	cpc	r21, r1
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <follow_path+0x18e>
    24e4:	aa c0       	rjmp	.+340    	; 0x263a <follow_path+0x2e2>
    24e6:	e2 e0       	ldi	r30, 0x02	; 2
    24e8:	f1 e0       	ldi	r31, 0x01	; 1
    24ea:	81 91       	ld	r24, Z+
    24ec:	88 23       	and	r24, r24
    24ee:	31 f0       	breq	.+12     	; 0x24fc <follow_path+0x1a4>
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	48 17       	cp	r20, r24
    24f4:	59 07       	cpc	r21, r25
    24f6:	c9 f7       	brne	.-14     	; 0x24ea <follow_path+0x192>
    24f8:	46 e0       	ldi	r20, 0x06	; 6
    24fa:	a8 c0       	rjmp	.+336    	; 0x264c <follow_path+0x2f4>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    24fc:	82 2f       	mov	r24, r18
    24fe:	81 54       	subi	r24, 0x41	; 65
    2500:	8a 31       	cpi	r24, 0x1A	; 26
    2502:	10 f4       	brcc	.+4      	; 0x2508 <follow_path+0x1b0>
				b |= 2;
    2504:	32 60       	ori	r19, 0x02	; 2
    2506:	06 c0       	rjmp	.+12     	; 0x2514 <follow_path+0x1bc>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    2508:	82 2f       	mov	r24, r18
    250a:	81 56       	subi	r24, 0x61	; 97
    250c:	8a 31       	cpi	r24, 0x1A	; 26
    250e:	10 f4       	brcc	.+4      	; 0x2514 <follow_path+0x1bc>
					b |= 1; c -= 0x20;
    2510:	31 60       	ori	r19, 0x01	; 1
    2512:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    2514:	f5 01       	movw	r30, r10
    2516:	ee 0d       	add	r30, r14
    2518:	ff 1d       	adc	r31, r15
    251a:	20 83       	st	Z, r18
    251c:	08 94       	sec
    251e:	e1 1c       	adc	r14, r1
    2520:	f1 1c       	adc	r15, r1
    2522:	b0 cf       	rjmp	.-160    	; 0x2484 <follow_path+0x12c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    2524:	66 0e       	add	r6, r22
    2526:	77 1e       	adc	r7, r23
    2528:	83 2f       	mov	r24, r19
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    252a:	44 e0       	ldi	r20, 0x04	; 4

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    252c:	e1 14       	cp	r14, r1
    252e:	f1 04       	cpc	r15, r1
    2530:	09 f4       	brne	.+2      	; 0x2534 <follow_path+0x1dc>
    2532:	85 c0       	rjmp	.+266    	; 0x263e <follow_path+0x2e6>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    2534:	d5 01       	movw	r26, r10
    2536:	9c 91       	ld	r25, X
    2538:	95 3e       	cpi	r25, 0xE5	; 229
    253a:	11 f4       	brne	.+4      	; 0x2540 <follow_path+0x1e8>
    253c:	95 e0       	ldi	r25, 0x05	; 5
    253e:	9c 93       	st	X, r25

	if (ni == 8) b <<= 2;
    2540:	b8 e0       	ldi	r27, 0x08	; 8
    2542:	8b 16       	cp	r8, r27
    2544:	91 04       	cpc	r9, r1
    2546:	19 f4       	brne	.+6      	; 0x254e <follow_path+0x1f6>
    2548:	38 2f       	mov	r19, r24
    254a:	33 0f       	add	r19, r19
    254c:	33 0f       	add	r19, r19
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    254e:	83 2f       	mov	r24, r19
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9c 01       	movw	r18, r24
    2554:	23 70       	andi	r18, 0x03	; 3
    2556:	30 70       	andi	r19, 0x00	; 0
    2558:	21 30       	cpi	r18, 0x01	; 1
    255a:	31 05       	cpc	r19, r1
    255c:	09 f4       	brne	.+2      	; 0x2560 <follow_path+0x208>
    255e:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    2560:	8c 70       	andi	r24, 0x0C	; 12
    2562:	90 70       	andi	r25, 0x00	; 0
    2564:	84 30       	cpi	r24, 0x04	; 4
    2566:	91 05       	cpc	r25, r1
    2568:	09 f4       	brne	.+2      	; 0x256c <follow_path+0x214>
    256a:	48 60       	ori	r20, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    256c:	f5 01       	movw	r30, r10
    256e:	43 87       	std	Z+11, r20	; 0x0b
    2570:	8e c0       	rjmp	.+284    	; 0x268e <follow_path+0x336>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    2572:	d8 01       	movw	r26, r16
    2574:	1e 96       	adiw	r26, 0x0e	; 14
    2576:	4d 91       	ld	r20, X+
    2578:	5d 91       	ld	r21, X+
    257a:	6d 91       	ld	r22, X+
    257c:	7c 91       	ld	r23, X
    257e:	51 97       	sbiw	r26, 0x11	; 17
    2580:	8d 91       	ld	r24, X+
    2582:	9c 91       	ld	r25, X
    2584:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
		if (res != FR_OK) break;
    2588:	88 23       	and	r24, r24
    258a:	29 f5       	brne	.+74     	; 0x25d6 <follow_path+0x27e>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    258c:	f8 01       	movw	r30, r16
    258e:	42 89       	ldd	r20, Z+18	; 0x12
    2590:	53 89       	ldd	r21, Z+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2592:	da 01       	movw	r26, r20
    2594:	9c 91       	ld	r25, X
    2596:	99 23       	and	r25, r25
    2598:	09 f4       	brne	.+2      	; 0x259c <follow_path+0x244>
    259a:	87 c0       	rjmp	.+270    	; 0x26aa <follow_path+0x352>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    259c:	1b 96       	adiw	r26, 0x0b	; 11
    259e:	9c 91       	ld	r25, X
    25a0:	1b 97       	sbiw	r26, 0x0b	; 11
    25a2:	93 fd       	sbrc	r25, 3
    25a4:	12 c0       	rjmp	.+36     	; 0x25ca <follow_path+0x272>
    25a6:	64 89       	ldd	r22, Z+20	; 0x14
    25a8:	75 89       	ldd	r23, Z+21	; 0x15
    25aa:	fa 01       	movw	r30, r20
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    25ac:	9a 01       	movw	r18, r20
    25ae:	25 5f       	subi	r18, 0xF5	; 245
    25b0:	3f 4f       	sbci	r19, 0xFF	; 255
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    25b2:	db 01       	movw	r26, r22
    25b4:	7a 01       	movw	r14, r20
    25b6:	48 2f       	mov	r20, r24
    25b8:	04 c0       	rjmp	.+8      	; 0x25c2 <follow_path+0x26a>
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    25ba:	e2 17       	cp	r30, r18
    25bc:	f3 07       	cpc	r31, r19
    25be:	09 f4       	brne	.+2      	; 0x25c2 <follow_path+0x26a>
    25c0:	6e c0       	rjmp	.+220    	; 0x269e <follow_path+0x346>
    25c2:	91 91       	ld	r25, Z+
    25c4:	8d 91       	ld	r24, X+
    25c6:	98 17       	cp	r25, r24
    25c8:	c1 f3       	breq	.-16     	; 0x25ba <follow_path+0x262>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    25ca:	c8 01       	movw	r24, r16
    25cc:	b6 01       	movw	r22, r12
    25ce:	0e 94 67 10 	call	0x20ce	; 0x20ce <dir_next>
	} while (res == FR_OK);
    25d2:	88 23       	and	r24, r24
    25d4:	71 f2       	breq	.-100    	; 0x2572 <follow_path+0x21a>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    25d6:	d8 01       	movw	r26, r16
    25d8:	54 96       	adiw	r26, 0x14	; 20
    25da:	ed 91       	ld	r30, X+
    25dc:	fc 91       	ld	r31, X
    25de:	55 97       	sbiw	r26, 0x15	; 21
    25e0:	93 85       	ldd	r25, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
    25e2:	84 30       	cpi	r24, 0x04	; 4
    25e4:	91 f5       	brne	.+100    	; 0x264a <follow_path+0x2f2>
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
    25e6:	95 ff       	sbrs	r25, 5
    25e8:	0b c0       	rjmp	.+22     	; 0x2600 <follow_path+0x2a8>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
    25ea:	f8 01       	movw	r30, r16
    25ec:	16 82       	std	Z+6, r1	; 0x06
    25ee:	17 82       	std	Z+7, r1	; 0x07
    25f0:	10 86       	std	Z+8, r1	; 0x08
    25f2:	11 86       	std	Z+9, r1	; 0x09
    25f4:	13 8a       	std	Z+19, r1	; 0x13
    25f6:	12 8a       	std	Z+18, r1	; 0x12
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
    25f8:	92 ff       	sbrs	r25, 2
    25fa:	fe ce       	rjmp	.-516    	; 0x23f8 <follow_path+0xa0>
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
    25fc:	40 e0       	ldi	r20, 0x00	; 0
    25fe:	26 c0       	rjmp	.+76     	; 0x264c <follow_path+0x2f4>
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    2600:	92 ff       	sbrs	r25, 2
    2602:	1f c0       	rjmp	.+62     	; 0x2642 <follow_path+0x2ea>
		dj->dir = 0;
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
    2604:	44 e0       	ldi	r20, 0x04	; 4
    2606:	22 c0       	rjmp	.+68     	; 0x264c <follow_path+0x2f4>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    2608:	1b 96       	adiw	r26, 0x0b	; 11
    260a:	8c 91       	ld	r24, X
    260c:	1b 97       	sbiw	r26, 0x0b	; 11
    260e:	84 ff       	sbrs	r24, 4
    2610:	1a c0       	rjmp	.+52     	; 0x2646 <follow_path+0x2ee>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ld_clust(dj->fs, dir);
    2612:	f8 01       	movw	r30, r16
    2614:	80 81       	ld	r24, Z
    2616:	91 81       	ldd	r25, Z+1	; 0x01
    2618:	bd 01       	movw	r22, r26
    261a:	0e 94 2b 05 	call	0xa56	; 0xa56 <ld_clust>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	f8 01       	movw	r30, r16
    2624:	86 83       	std	Z+6, r24	; 0x06
    2626:	97 83       	std	Z+7, r25	; 0x07
    2628:	a0 87       	std	Z+8, r26	; 0x08
    262a:	b1 87       	std	Z+9, r27	; 0x09
    262c:	e5 ce       	rjmp	.-566    	; 0x23f8 <follow_path+0xa0>
		for (;;) {
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
    262e:	46 e0       	ldi	r20, 0x06	; 6
    2630:	0d c0       	rjmp	.+26     	; 0x264c <follow_path+0x2f4>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    2632:	46 e0       	ldi	r20, 0x06	; 6
    2634:	0b c0       	rjmp	.+22     	; 0x264c <follow_path+0x2f4>
    2636:	46 e0       	ldi	r20, 0x06	; 6
    2638:	09 c0       	rjmp	.+18     	; 0x264c <follow_path+0x2f4>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    263a:	46 e0       	ldi	r20, 0x06	; 6
    263c:	07 c0       	rjmp	.+14     	; 0x264c <follow_path+0x2f4>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    263e:	46 e0       	ldi	r20, 0x06	; 6
    2640:	05 c0       	rjmp	.+10     	; 0x264c <follow_path+0x2f4>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    2642:	45 e0       	ldi	r20, 0x05	; 5
    2644:	03 c0       	rjmp	.+6      	; 0x264c <follow_path+0x2f4>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    2646:	45 e0       	ldi	r20, 0x05	; 5
    2648:	01 c0       	rjmp	.+2      	; 0x264c <follow_path+0x2f4>
    264a:	48 2f       	mov	r20, r24
			dj->sclust = ld_clust(dj->fs, dir);
		}
	}

	return res;
}
    264c:	84 2f       	mov	r24, r20
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	df 91       	pop	r29
    2658:	cf 91       	pop	r28
    265a:	1f 91       	pop	r17
    265c:	0f 91       	pop	r16
    265e:	ff 90       	pop	r15
    2660:	ef 90       	pop	r14
    2662:	df 90       	pop	r13
    2664:	cf 90       	pop	r12
    2666:	bf 90       	pop	r11
    2668:	af 90       	pop	r10
    266a:	9f 90       	pop	r9
    266c:	8f 90       	pop	r8
    266e:	7f 90       	pop	r7
    2670:	6f 90       	pop	r6
    2672:	5f 90       	pop	r5
    2674:	4f 90       	pop	r4
    2676:	3f 90       	pop	r3
    2678:	2f 90       	pop	r2
    267a:	08 95       	ret
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
		*path = &p[si];									/* Return pointer to the next segment */
    267c:	68 0e       	add	r6, r24
    267e:	79 1e       	adc	r7, r25
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
    2680:	84 e2       	ldi	r24, 0x24	; 36
    2682:	fb ce       	rjmp	.-522    	; 0x247a <follow_path+0x122>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    2684:	66 0e       	add	r6, r22
    2686:	77 1e       	adc	r7, r23
    2688:	83 2f       	mov	r24, r19
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    268a:	40 e0       	ldi	r20, 0x00	; 0
    268c:	4f cf       	rjmp	.-354    	; 0x252c <follow_path+0x1d4>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    268e:	c8 01       	movw	r24, r16
    2690:	b6 01       	movw	r22, r12
    2692:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <dir_sdi>
	if (res != FR_OK) return res;
    2696:	88 23       	and	r24, r24
    2698:	09 f4       	brne	.+2      	; 0x269c <follow_path+0x344>
    269a:	6b cf       	rjmp	.-298    	; 0x2572 <follow_path+0x21a>
    269c:	9c cf       	rjmp	.-200    	; 0x25d6 <follow_path+0x27e>
    269e:	d7 01       	movw	r26, r14
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    26a0:	fb 01       	movw	r30, r22
    26a2:	93 85       	ldd	r25, Z+11	; 0x0b
    26a4:	92 ff       	sbrs	r25, 2
    26a6:	b0 cf       	rjmp	.-160    	; 0x2608 <follow_path+0x2b0>
    26a8:	d1 cf       	rjmp	.-94     	; 0x264c <follow_path+0x2f4>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    26aa:	04 88       	ldd	r0, Z+20	; 0x14
    26ac:	f5 89       	ldd	r31, Z+21	; 0x15
    26ae:	e0 2d       	mov	r30, r0
    26b0:	93 85       	ldd	r25, Z+11	; 0x0b
    26b2:	99 cf       	rjmp	.-206    	; 0x25e6 <follow_path+0x28e>

000026b4 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    26b4:	ef 92       	push	r14
    26b6:	ff 92       	push	r15
    26b8:	0f 93       	push	r16
    26ba:	1f 93       	push	r17
    26bc:	cf 93       	push	r28
    26be:	8c 01       	movw	r16, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    26c0:	60 e0       	ldi	r22, 0x00	; 0
    26c2:	70 e0       	ldi	r23, 0x00	; 0
    26c4:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <dir_sdi>
    26c8:	c8 2f       	mov	r28, r24
	if (res == FR_OK) {
    26ca:	88 23       	and	r24, r24
    26cc:	d9 f5       	brne	.+118    	; 0x2744 <dir_register+0x90>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    26ce:	d8 01       	movw	r26, r16
    26d0:	1e 96       	adiw	r26, 0x0e	; 14
    26d2:	4d 91       	ld	r20, X+
    26d4:	5d 91       	ld	r21, X+
    26d6:	6d 91       	ld	r22, X+
    26d8:	7c 91       	ld	r23, X
    26da:	51 97       	sbiw	r26, 0x11	; 17
    26dc:	8d 91       	ld	r24, X+
    26de:	9c 91       	ld	r25, X
    26e0:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
    26e4:	c8 2f       	mov	r28, r24
			if (res != FR_OK) break;
    26e6:	88 23       	and	r24, r24
    26e8:	69 f5       	brne	.+90     	; 0x2744 <dir_register+0x90>
			c = *dj->dir;
    26ea:	d8 01       	movw	r26, r16
    26ec:	52 96       	adiw	r26, 0x12	; 18
    26ee:	ed 91       	ld	r30, X+
    26f0:	fc 91       	ld	r31, X
    26f2:	53 97       	sbiw	r26, 0x13	; 19
    26f4:	80 81       	ld	r24, Z
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    26f6:	85 3e       	cpi	r24, 0xE5	; 229
    26f8:	61 f1       	breq	.+88     	; 0x2752 <dir_register+0x9e>
    26fa:	88 23       	and	r24, r24
    26fc:	51 f1       	breq	.+84     	; 0x2752 <dir_register+0x9e>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    26fe:	c8 01       	movw	r24, r16
    2700:	61 e0       	ldi	r22, 0x01	; 1
    2702:	70 e0       	ldi	r23, 0x00	; 0
    2704:	0e 94 67 10 	call	0x20ce	; 0x20ce <dir_next>
    2708:	c8 2f       	mov	r28, r24
		} while (res == FR_OK);
    270a:	88 23       	and	r24, r24
    270c:	01 f3       	breq	.-64     	; 0x26ce <dir_register+0x1a>
    270e:	1a c0       	rjmp	.+52     	; 0x2744 <dir_register+0x90>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    2710:	f8 01       	movw	r30, r16
    2712:	e2 88       	ldd	r14, Z+18	; 0x12
    2714:	f3 88       	ldd	r15, Z+19	; 0x13
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    2716:	c7 01       	movw	r24, r14
    2718:	60 e0       	ldi	r22, 0x00	; 0
    271a:	70 e0       	ldi	r23, 0x00	; 0
    271c:	40 e2       	ldi	r20, 0x20	; 32
    271e:	50 e0       	ldi	r21, 0x00	; 0
    2720:	0e 94 21 05 	call	0xa42	; 0xa42 <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    2724:	d8 01       	movw	r26, r16
    2726:	54 96       	adiw	r26, 0x14	; 20
    2728:	6d 91       	ld	r22, X+
    272a:	7c 91       	ld	r23, X
    272c:	55 97       	sbiw	r26, 0x15	; 21
    272e:	c7 01       	movw	r24, r14
    2730:	4b e0       	ldi	r20, 0x0B	; 11
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	0e 94 14 05 	call	0xa28	; 0xa28 <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    2738:	d8 01       	movw	r26, r16
    273a:	ed 91       	ld	r30, X+
    273c:	fc 91       	ld	r31, X
    273e:	11 97       	sbiw	r26, 0x01	; 1
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    2744:	8c 2f       	mov	r24, r28
    2746:	cf 91       	pop	r28
    2748:	1f 91       	pop	r17
    274a:	0f 91       	pop	r16
    274c:	ff 90       	pop	r15
    274e:	ef 90       	pop	r14
    2750:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    2752:	f8 01       	movw	r30, r16
    2754:	46 85       	ldd	r20, Z+14	; 0x0e
    2756:	57 85       	ldd	r21, Z+15	; 0x0f
    2758:	60 89       	ldd	r22, Z+16	; 0x10
    275a:	71 89       	ldd	r23, Z+17	; 0x11
    275c:	80 81       	ld	r24, Z
    275e:	91 81       	ldd	r25, Z+1	; 0x01
    2760:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
    2764:	c8 2f       	mov	r28, r24
		if (res == FR_OK) {
    2766:	88 23       	and	r24, r24
    2768:	69 f7       	brne	.-38     	; 0x2744 <dir_register+0x90>
    276a:	d2 cf       	rjmp	.-92     	; 0x2710 <dir_register+0x5c>

0000276c <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
    2770:	ec 01       	movw	r28, r24
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
    2772:	84 e0       	ldi	r24, 0x04	; 4
	while (dj->sect) {
    2774:	17 c0       	rjmp	.+46     	; 0x27a4 <dir_read+0x38>
		res = move_window(dj->fs, dj->sect);
    2776:	88 81       	ld	r24, Y
    2778:	99 81       	ldd	r25, Y+1	; 0x01
    277a:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
		if (res != FR_OK) break;
    277e:	88 23       	and	r24, r24
    2780:	e1 f4       	brne	.+56     	; 0x27ba <dir_read+0x4e>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    2782:	ea 89       	ldd	r30, Y+18	; 0x12
    2784:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    2786:	90 81       	ld	r25, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    2788:	99 23       	and	r25, r25
    278a:	f1 f0       	breq	.+60     	; 0x27c8 <dir_read+0x5c>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    278c:	95 3e       	cpi	r25, 0xE5	; 229
    278e:	19 f0       	breq	.+6      	; 0x2796 <dir_read+0x2a>
    2790:	93 85       	ldd	r25, Z+11	; 0x0b
    2792:	93 ff       	sbrs	r25, 3
    2794:	16 c0       	rjmp	.+44     	; 0x27c2 <dir_read+0x56>
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    2796:	ce 01       	movw	r24, r28
    2798:	60 e0       	ldi	r22, 0x00	; 0
    279a:	70 e0       	ldi	r23, 0x00	; 0
    279c:	0e 94 67 10 	call	0x20ce	; 0x20ce <dir_next>
		if (res != FR_OK) break;
    27a0:	88 23       	and	r24, r24
    27a2:	59 f4       	brne	.+22     	; 0x27ba <dir_read+0x4e>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
    27a4:	4e 85       	ldd	r20, Y+14	; 0x0e
    27a6:	5f 85       	ldd	r21, Y+15	; 0x0f
    27a8:	68 89       	ldd	r22, Y+16	; 0x10
    27aa:	79 89       	ldd	r23, Y+17	; 0x11
    27ac:	41 15       	cp	r20, r1
    27ae:	51 05       	cpc	r21, r1
    27b0:	61 05       	cpc	r22, r1
    27b2:	71 05       	cpc	r23, r1
    27b4:	01 f7       	brne	.-64     	; 0x2776 <dir_read+0xa>
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    27b6:	88 23       	and	r24, r24
    27b8:	21 f0       	breq	.+8      	; 0x27c2 <dir_read+0x56>
    27ba:	1e 86       	std	Y+14, r1	; 0x0e
    27bc:	1f 86       	std	Y+15, r1	; 0x0f
    27be:	18 8a       	std	Y+16, r1	; 0x10
    27c0:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    27c2:	df 91       	pop	r29
    27c4:	cf 91       	pop	r28
    27c6:	08 95       	ret
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    27c8:	84 e0       	ldi	r24, 0x04	; 4
    27ca:	f7 cf       	rjmp	.-18     	; 0x27ba <dir_read+0x4e>

000027cc <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    27cc:	7f 92       	push	r7
    27ce:	8f 92       	push	r8
    27d0:	9f 92       	push	r9
    27d2:	af 92       	push	r10
    27d4:	bf 92       	push	r11
    27d6:	cf 92       	push	r12
    27d8:	df 92       	push	r13
    27da:	ef 92       	push	r14
    27dc:	ff 92       	push	r15
    27de:	0f 93       	push	r16
    27e0:	1f 93       	push	r17
    27e2:	cf 93       	push	r28
    27e4:	df 93       	push	r29
    27e6:	ec 01       	movw	r28, r24
    27e8:	4a 01       	movw	r8, r20
    27ea:	5b 01       	movw	r10, r22
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    27ec:	42 30       	cpi	r20, 0x02	; 2
    27ee:	51 05       	cpc	r21, r1
    27f0:	61 05       	cpc	r22, r1
    27f2:	71 05       	cpc	r23, r1
    27f4:	08 f4       	brcc	.+2      	; 0x27f8 <remove_chain+0x2c>
    27f6:	55 c0       	rjmp	.+170    	; 0x28a2 <remove_chain+0xd6>
    27f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    27fc:	ac 8d       	ldd	r26, Y+28	; 0x1c
    27fe:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2800:	48 17       	cp	r20, r24
    2802:	59 07       	cpc	r21, r25
    2804:	6a 07       	cpc	r22, r26
    2806:	7b 07       	cpc	r23, r27
    2808:	08 f0       	brcs	.+2      	; 0x280c <remove_chain+0x40>
    280a:	4d c0       	rjmp	.+154    	; 0x28a6 <remove_chain+0xda>
    280c:	03 c0       	rjmp	.+6      	; 0x2814 <remove_chain+0x48>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    280e:	46 01       	movw	r8, r12
    2810:	57 01       	movw	r10, r14
    2812:	02 c0       	rjmp	.+4      	; 0x2818 <remove_chain+0x4c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
			if (res != FR_OK) break;
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
				fs->free_clust++;
				fs->fsi_flag = 1;
    2814:	77 24       	eor	r7, r7
    2816:	73 94       	inc	r7
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    2818:	ce 01       	movw	r24, r28
    281a:	b5 01       	movw	r22, r10
    281c:	a4 01       	movw	r20, r8
    281e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <get_fat>
    2822:	6b 01       	movw	r12, r22
    2824:	7c 01       	movw	r14, r24
			if (nxt == 0) break;				/* Empty cluster? */
    2826:	61 15       	cp	r22, r1
    2828:	71 05       	cpc	r23, r1
    282a:	81 05       	cpc	r24, r1
    282c:	91 05       	cpc	r25, r1
    282e:	e9 f1       	breq	.+122    	; 0x28aa <remove_chain+0xde>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    2830:	91 e0       	ldi	r25, 0x01	; 1
    2832:	c9 16       	cp	r12, r25
    2834:	d1 04       	cpc	r13, r1
    2836:	e1 04       	cpc	r14, r1
    2838:	f1 04       	cpc	r15, r1
    283a:	c9 f1       	breq	.+114    	; 0x28ae <remove_chain+0xe2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    283c:	8f ef       	ldi	r24, 0xFF	; 255
    283e:	c8 16       	cp	r12, r24
    2840:	8f ef       	ldi	r24, 0xFF	; 255
    2842:	d8 06       	cpc	r13, r24
    2844:	8f ef       	ldi	r24, 0xFF	; 255
    2846:	e8 06       	cpc	r14, r24
    2848:	8f ef       	ldi	r24, 0xFF	; 255
    284a:	f8 06       	cpc	r15, r24
    284c:	91 f1       	breq	.+100    	; 0x28b2 <remove_chain+0xe6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    284e:	ce 01       	movw	r24, r28
    2850:	b5 01       	movw	r22, r10
    2852:	a4 01       	movw	r20, r8
    2854:	00 e0       	ldi	r16, 0x00	; 0
    2856:	10 e0       	ldi	r17, 0x00	; 0
    2858:	98 01       	movw	r18, r16
    285a:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <put_fat>
			if (res != FR_OK) break;
    285e:	88 23       	and	r24, r24
    2860:	49 f5       	brne	.+82     	; 0x28b4 <remove_chain+0xe8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    2862:	4e 85       	ldd	r20, Y+14	; 0x0e
    2864:	5f 85       	ldd	r21, Y+15	; 0x0f
    2866:	68 89       	ldd	r22, Y+16	; 0x10
    2868:	79 89       	ldd	r23, Y+17	; 0x11
    286a:	4f 3f       	cpi	r20, 0xFF	; 255
    286c:	9f ef       	ldi	r25, 0xFF	; 255
    286e:	59 07       	cpc	r21, r25
    2870:	9f ef       	ldi	r25, 0xFF	; 255
    2872:	69 07       	cpc	r22, r25
    2874:	9f ef       	ldi	r25, 0xFF	; 255
    2876:	79 07       	cpc	r23, r25
    2878:	49 f0       	breq	.+18     	; 0x288c <remove_chain+0xc0>
				fs->free_clust++;
    287a:	4f 5f       	subi	r20, 0xFF	; 255
    287c:	5f 4f       	sbci	r21, 0xFF	; 255
    287e:	6f 4f       	sbci	r22, 0xFF	; 255
    2880:	7f 4f       	sbci	r23, 0xFF	; 255
    2882:	4e 87       	std	Y+14, r20	; 0x0e
    2884:	5f 87       	std	Y+15, r21	; 0x0f
    2886:	68 8b       	std	Y+16, r22	; 0x10
    2888:	79 8b       	std	Y+17, r23	; 0x11
				fs->fsi_flag = 1;
    288a:	7d 82       	std	Y+5, r7	; 0x05
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    288c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    288e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2890:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2892:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2894:	c4 16       	cp	r12, r20
    2896:	d5 06       	cpc	r13, r21
    2898:	e6 06       	cpc	r14, r22
    289a:	f7 06       	cpc	r15, r23
    289c:	08 f4       	brcc	.+2      	; 0x28a0 <remove_chain+0xd4>
    289e:	b7 cf       	rjmp	.-146    	; 0x280e <remove_chain+0x42>
    28a0:	09 c0       	rjmp	.+18     	; 0x28b4 <remove_chain+0xe8>
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    28a2:	82 e0       	ldi	r24, 0x02	; 2
    28a4:	07 c0       	rjmp	.+14     	; 0x28b4 <remove_chain+0xe8>
    28a6:	82 e0       	ldi	r24, 0x02	; 2
    28a8:	05 c0       	rjmp	.+10     	; 0x28b4 <remove_chain+0xe8>

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	03 c0       	rjmp	.+6      	; 0x28b4 <remove_chain+0xe8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    28ae:	82 e0       	ldi	r24, 0x02	; 2
    28b0:	01 c0       	rjmp	.+2      	; 0x28b4 <remove_chain+0xe8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    28b2:	81 e0       	ldi	r24, 0x01	; 1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    28b4:	df 91       	pop	r29
    28b6:	cf 91       	pop	r28
    28b8:	1f 91       	pop	r17
    28ba:	0f 91       	pop	r16
    28bc:	ff 90       	pop	r15
    28be:	ef 90       	pop	r14
    28c0:	df 90       	pop	r13
    28c2:	cf 90       	pop	r12
    28c4:	bf 90       	pop	r11
    28c6:	af 90       	pop	r10
    28c8:	9f 90       	pop	r9
    28ca:	8f 90       	pop	r8
    28cc:	7f 90       	pop	r7
    28ce:	08 95       	ret

000028d0 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    28d0:	88 23       	and	r24, r24
    28d2:	91 f4       	brne	.+36     	; 0x28f8 <f_mount+0x28>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
    28d4:	e0 91 a3 01 	lds	r30, 0x01A3
    28d8:	f0 91 a4 01 	lds	r31, 0x01A4

	if (rfs) {
    28dc:	30 97       	sbiw	r30, 0x00	; 0
    28de:	09 f0       	breq	.+2      	; 0x28e2 <f_mount+0x12>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    28e0:	10 82       	st	Z, r1
	}

	if (fs) {
    28e2:	61 15       	cp	r22, r1
    28e4:	71 05       	cpc	r23, r1
    28e6:	11 f0       	breq	.+4      	; 0x28ec <f_mount+0x1c>
		fs->fs_type = 0;		/* Clear new fs object */
    28e8:	fb 01       	movw	r30, r22
    28ea:	10 82       	st	Z, r1
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    28ec:	70 93 a4 01 	sts	0x01A4, r23
    28f0:	60 93 a3 01 	sts	0x01A3, r22

	return FR_OK;
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	08 95       	ret
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    28f8:	8b e0       	ldi	r24, 0x0B	; 11
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    28fa:	08 95       	ret

000028fc <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    28fc:	4f 92       	push	r4
    28fe:	5f 92       	push	r5
    2900:	6f 92       	push	r6
    2902:	7f 92       	push	r7
    2904:	8f 92       	push	r8
    2906:	9f 92       	push	r9
    2908:	af 92       	push	r10
    290a:	bf 92       	push	r11
    290c:	cf 92       	push	r12
    290e:	df 92       	push	r13
    2910:	ef 92       	push	r14
    2912:	ff 92       	push	r15
    2914:	0f 93       	push	r16
    2916:	1f 93       	push	r17
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	a4 97       	sbiw	r28, 0x24	; 36
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	7c 01       	movw	r14, r24
    292e:	7c a3       	lds	r23, 0x5c
    2930:	6b a3       	lds	r22, 0x5b
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	09 f4       	brne	.+2      	; 0x2938 <f_open+0x3c>
    2936:	ea c0       	rjmp	.+468    	; 0x2b0c <f_open+0x210>
	fp->fs = 0;			/* Clear file object */
    2938:	fc 01       	movw	r30, r24
    293a:	11 82       	std	Z+1, r1	; 0x01
    293c:	10 82       	st	Z, r1

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    293e:	04 2f       	mov	r16, r20
    2940:	0f 71       	andi	r16, 0x1F	; 31
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    2942:	4e 71       	andi	r20, 0x1E	; 30
    2944:	ce 01       	movw	r24, r28
    2946:	83 96       	adiw	r24, 0x23	; 35
    2948:	be 01       	movw	r22, r28
    294a:	6f 5f       	subi	r22, 0xFF	; 255
    294c:	7f 4f       	sbci	r23, 0xFF	; 255
    294e:	0e 94 a8 06 	call	0xd50	; 0xd50 <chk_mounted>
    2952:	18 2f       	mov	r17, r24
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
    2954:	88 23       	and	r24, r24
    2956:	09 f0       	breq	.+2      	; 0x295a <f_open+0x5e>
    2958:	da c0       	rjmp	.+436    	; 0x2b0e <f_open+0x212>
		INIT_BUF(dj);
    295a:	ce 01       	movw	r24, r28
    295c:	47 96       	adiw	r24, 0x17	; 23
    295e:	9e 8b       	std	Y+22, r25	; 0x16
    2960:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    2962:	6b a1       	lds	r22, 0x4b
    2964:	7c a1       	lds	r23, 0x4c
    2966:	ce 01       	movw	r24, r28
    2968:	01 96       	adiw	r24, 0x01	; 1
    296a:	0e 94 ac 11 	call	0x2358	; 0x2358 <follow_path>
		dir = dj.dir;
    296e:	cb 88       	ldd	r12, Y+19	; 0x13
    2970:	dc 88       	ldd	r13, Y+20	; 0x14
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    2972:	88 23       	and	r24, r24
    2974:	21 f4       	brne	.+8      	; 0x297e <f_open+0x82>
			if (!dir)	/* Current dir itself */
    2976:	c1 14       	cp	r12, r1
    2978:	d1 04       	cpc	r13, r1
    297a:	09 f4       	brne	.+2      	; 0x297e <f_open+0x82>
				res = FR_INVALID_NAME;
    297c:	86 e0       	ldi	r24, 0x06	; 6
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    297e:	40 2f       	mov	r20, r16
    2980:	50 e0       	ldi	r21, 0x00	; 0
    2982:	9a 01       	movw	r18, r20
    2984:	2c 71       	andi	r18, 0x1C	; 28
    2986:	30 70       	andi	r19, 0x00	; 0
    2988:	21 15       	cp	r18, r1
    298a:	31 05       	cpc	r19, r1
    298c:	09 f4       	brne	.+2      	; 0x2990 <f_open+0x94>
    298e:	5b c0       	rjmp	.+182    	; 0x2a46 <f_open+0x14a>
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
    2990:	88 23       	and	r24, r24
    2992:	71 f0       	breq	.+28     	; 0x29b0 <f_open+0xb4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    2994:	84 30       	cpi	r24, 0x04	; 4
    2996:	09 f0       	breq	.+2      	; 0x299a <f_open+0x9e>
    2998:	b7 c0       	rjmp	.+366    	; 0x2b08 <f_open+0x20c>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    299a:	ce 01       	movw	r24, r28
    299c:	01 96       	adiw	r24, 0x01	; 1
    299e:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <dir_register>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
    29a2:	cb 88       	ldd	r12, Y+19	; 0x13
    29a4:	dc 88       	ldd	r13, Y+20	; 0x14
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    29a6:	88 23       	and	r24, r24
    29a8:	09 f0       	breq	.+2      	; 0x29ac <f_open+0xb0>
    29aa:	ae c0       	rjmp	.+348    	; 0x2b08 <f_open+0x20c>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    29ac:	08 60       	ori	r16, 0x08	; 8
    29ae:	07 c0       	rjmp	.+14     	; 0x29be <f_open+0xc2>
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    29b0:	f6 01       	movw	r30, r12
    29b2:	83 85       	ldd	r24, Z+11	; 0x0b
    29b4:	81 71       	andi	r24, 0x11	; 17
    29b6:	09 f0       	breq	.+2      	; 0x29ba <f_open+0xbe>
    29b8:	c2 c0       	rjmp	.+388    	; 0x2b3e <f_open+0x242>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    29ba:	02 fd       	sbrc	r16, 2
    29bc:	c2 c0       	rjmp	.+388    	; 0x2b42 <f_open+0x246>
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    29be:	03 ff       	sbrs	r16, 3
    29c0:	c6 c0       	rjmp	.+396    	; 0x2b4e <f_open+0x252>
				dw = get_fattime();					/* Created time */
    29c2:	0e 94 2b 0c 	call	0x1856	; 0x1856 <get_fattime>
				ST_DWORD(dir+DIR_CrtTime, dw);
    29c6:	f6 01       	movw	r30, r12
    29c8:	66 87       	std	Z+14, r22	; 0x0e
    29ca:	77 87       	std	Z+15, r23	; 0x0f
    29cc:	80 8b       	std	Z+16, r24	; 0x10
    29ce:	91 8b       	std	Z+17, r25	; 0x11
				dir[DIR_Attr] = 0;					/* Reset attribute */
    29d0:	13 86       	std	Z+11, r1	; 0x0b
				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    29d2:	14 8e       	std	Z+28, r1	; 0x1c
    29d4:	15 8e       	std	Z+29, r1	; 0x1d
    29d6:	16 8e       	std	Z+30, r1	; 0x1e
    29d8:	17 8e       	std	Z+31, r1	; 0x1f
				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	9a 81       	ldd	r25, Y+2	; 0x02
    29de:	b6 01       	movw	r22, r12
    29e0:	0e 94 2b 05 	call	0xa56	; 0xa56 <ld_clust>
    29e4:	4b 01       	movw	r8, r22
    29e6:	5c 01       	movw	r10, r24
				st_clust(dir, 0);					/* cluster = 0 */
    29e8:	c6 01       	movw	r24, r12
    29ea:	40 e0       	ldi	r20, 0x00	; 0
    29ec:	50 e0       	ldi	r21, 0x00	; 0
    29ee:	ba 01       	movw	r22, r20
    29f0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <st_clust>
				dj.fs->wflag = 1;
    29f4:	e9 81       	ldd	r30, Y+1	; 0x01
    29f6:	fa 81       	ldd	r31, Y+2	; 0x02
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	84 83       	std	Z+4, r24	; 0x04
				if (cl) {							/* Remove the cluster chain if exist */
    29fc:	81 14       	cp	r8, r1
    29fe:	91 04       	cpc	r9, r1
    2a00:	a1 04       	cpc	r10, r1
    2a02:	b1 04       	cpc	r11, r1
    2a04:	09 f4       	brne	.+2      	; 0x2a08 <f_open+0x10c>
    2a06:	a3 c0       	rjmp	.+326    	; 0x2b4e <f_open+0x252>
					dw = dj.fs->winsect;
    2a08:	46 a4       	lds	r20, 0xa6
    2a0a:	57 a4       	lds	r21, 0xa7
    2a0c:	60 a8       	sts	0x00, r22
    2a0e:	71 a8       	sts	0x81, r23
					res = remove_chain(dj.fs, cl);
    2a10:	cf 01       	movw	r24, r30
    2a12:	b5 01       	movw	r22, r10
    2a14:	a4 01       	movw	r20, r8
    2a16:	0e 94 e6 13 	call	0x27cc	; 0x27cc <remove_chain>
					if (res == FR_OK) {
    2a1a:	88 23       	and	r24, r24
    2a1c:	09 f0       	breq	.+2      	; 0x2a20 <f_open+0x124>
    2a1e:	74 c0       	rjmp	.+232    	; 0x2b08 <f_open+0x20c>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2a20:	e9 81       	ldd	r30, Y+1	; 0x01
    2a22:	fa 81       	ldd	r31, Y+2	; 0x02
    2a24:	d5 01       	movw	r26, r10
    2a26:	c4 01       	movw	r24, r8
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	a1 09       	sbc	r26, r1
    2a2c:	b1 09       	sbc	r27, r1
    2a2e:	82 87       	std	Z+10, r24	; 0x0a
    2a30:	93 87       	std	Z+11, r25	; 0x0b
    2a32:	a4 87       	std	Z+12, r26	; 0x0c
    2a34:	b5 87       	std	Z+13, r27	; 0x0d
						res = move_window(dj.fs, dw);
    2a36:	cf 01       	movw	r24, r30
    2a38:	b3 01       	movw	r22, r6
    2a3a:	a2 01       	movw	r20, r4
    2a3c:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    2a40:	88 23       	and	r24, r24
    2a42:	69 f0       	breq	.+26     	; 0x2a5e <f_open+0x162>
    2a44:	61 c0       	rjmp	.+194    	; 0x2b08 <f_open+0x20c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
    2a46:	88 23       	and	r24, r24
    2a48:	09 f0       	breq	.+2      	; 0x2a4c <f_open+0x150>
    2a4a:	5e c0       	rjmp	.+188    	; 0x2b08 <f_open+0x20c>
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    2a4c:	f6 01       	movw	r30, r12
    2a4e:	83 85       	ldd	r24, Z+11	; 0x0b
    2a50:	84 fd       	sbrc	r24, 4
    2a52:	79 c0       	rjmp	.+242    	; 0x2b46 <f_open+0x24a>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    2a54:	01 ff       	sbrs	r16, 1
    2a56:	7b c0       	rjmp	.+246    	; 0x2b4e <f_open+0x252>
    2a58:	80 fd       	sbrc	r24, 0
    2a5a:	77 c0       	rjmp	.+238    	; 0x2b4a <f_open+0x24e>
    2a5c:	78 c0       	rjmp	.+240    	; 0x2b4e <f_open+0x252>
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
				mode |= FA__WRITTEN;
    2a5e:	00 62       	ori	r16, 0x20	; 32
			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    2a60:	a9 80       	ldd	r10, Y+1	; 0x01
    2a62:	ba 80       	ldd	r11, Y+2	; 0x02
    2a64:	f5 01       	movw	r30, r10
    2a66:	86 a5       	lds	r24, 0x66
    2a68:	97 a5       	lds	r25, 0x67
    2a6a:	a0 a9       	sts	0x40, r26
    2a6c:	b1 a9       	sts	0x41, r27
    2a6e:	f7 01       	movw	r30, r14
    2a70:	82 8f       	std	Z+26, r24	; 0x1a
    2a72:	93 8f       	std	Z+27, r25	; 0x1b
    2a74:	a4 8f       	std	Z+28, r26	; 0x1c
    2a76:	b5 8f       	std	Z+29, r27	; 0x1d
			fp->dir_ptr = dir;
    2a78:	d7 8e       	std	Z+31, r13	; 0x1f
    2a7a:	c6 8e       	std	Z+30, r12	; 0x1e
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    2a7c:	04 83       	std	Z+4, r16	; 0x04
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    2a7e:	c5 01       	movw	r24, r10
    2a80:	b6 01       	movw	r22, r12
    2a82:	0e 94 2b 05 	call	0xa56	; 0xa56 <ld_clust>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	f7 01       	movw	r30, r14
    2a8c:	86 87       	std	Z+14, r24	; 0x0e
    2a8e:	97 87       	std	Z+15, r25	; 0x0f
    2a90:	a0 8b       	std	Z+16, r26	; 0x10
    2a92:	b1 8b       	std	Z+17, r27	; 0x11
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    2a94:	f6 01       	movw	r30, r12
    2a96:	87 8d       	ldd	r24, Z+31	; 0x1f
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	a0 e0       	ldi	r26, 0x00	; 0
    2a9c:	b0 e0       	ldi	r27, 0x00	; 0
    2a9e:	78 2f       	mov	r23, r24
    2aa0:	66 27       	eor	r22, r22
    2aa2:	55 27       	eor	r21, r21
    2aa4:	44 27       	eor	r20, r20
    2aa6:	86 8d       	ldd	r24, Z+30	; 0x1e
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	a0 e0       	ldi	r26, 0x00	; 0
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	dc 01       	movw	r26, r24
    2ab0:	99 27       	eor	r25, r25
    2ab2:	88 27       	eor	r24, r24
    2ab4:	48 2b       	or	r20, r24
    2ab6:	59 2b       	or	r21, r25
    2ab8:	6a 2b       	or	r22, r26
    2aba:	7b 2b       	or	r23, r27
    2abc:	84 8d       	ldd	r24, Z+28	; 0x1c
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	a0 e0       	ldi	r26, 0x00	; 0
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	48 2b       	or	r20, r24
    2ac6:	59 2b       	or	r21, r25
    2ac8:	6a 2b       	or	r22, r26
    2aca:	7b 2b       	or	r23, r27
    2acc:	95 8d       	ldd	r25, Z+29	; 0x1d
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	a0 e0       	ldi	r26, 0x00	; 0
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	84 2b       	or	r24, r20
    2ad6:	95 2b       	or	r25, r21
    2ad8:	a6 2b       	or	r26, r22
    2ada:	b7 2b       	or	r27, r23
    2adc:	f7 01       	movw	r30, r14
    2ade:	82 87       	std	Z+10, r24	; 0x0a
    2ae0:	93 87       	std	Z+11, r25	; 0x0b
    2ae2:	a4 87       	std	Z+12, r26	; 0x0c
    2ae4:	b5 87       	std	Z+13, r27	; 0x0d
			fp->fptr = 0;						/* File pointer */
    2ae6:	16 82       	std	Z+6, r1	; 0x06
    2ae8:	17 82       	std	Z+7, r1	; 0x07
    2aea:	10 86       	std	Z+8, r1	; 0x08
    2aec:	11 86       	std	Z+9, r1	; 0x09
			fp->dsect = 0;
    2aee:	16 8a       	std	Z+22, r1	; 0x16
    2af0:	17 8a       	std	Z+23, r1	; 0x17
    2af2:	10 8e       	std	Z+24, r1	; 0x18
    2af4:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    2af6:	b1 82       	std	Z+1, r11	; 0x01
    2af8:	a0 82       	st	Z, r10
    2afa:	f5 01       	movw	r30, r10
    2afc:	86 81       	ldd	r24, Z+6	; 0x06
    2afe:	97 81       	ldd	r25, Z+7	; 0x07
    2b00:	f7 01       	movw	r30, r14
    2b02:	93 83       	std	Z+3, r25	; 0x03
    2b04:	82 83       	std	Z+2, r24	; 0x02
    2b06:	03 c0       	rjmp	.+6      	; 0x2b0e <f_open+0x212>
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    2b08:	18 2f       	mov	r17, r24
    2b0a:	01 c0       	rjmp	.+2      	; 0x2b0e <f_open+0x212>
    2b0c:	19 e0       	ldi	r17, 0x09	; 9
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
		}
	}

	LEAVE_FF(dj.fs, res);
}
    2b0e:	81 2f       	mov	r24, r17
    2b10:	a4 96       	adiw	r28, 0x24	; 36
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	f8 94       	cli
    2b16:	de bf       	out	0x3e, r29	; 62
    2b18:	0f be       	out	0x3f, r0	; 63
    2b1a:	cd bf       	out	0x3d, r28	; 61
    2b1c:	df 91       	pop	r29
    2b1e:	cf 91       	pop	r28
    2b20:	1f 91       	pop	r17
    2b22:	0f 91       	pop	r16
    2b24:	ff 90       	pop	r15
    2b26:	ef 90       	pop	r14
    2b28:	df 90       	pop	r13
    2b2a:	cf 90       	pop	r12
    2b2c:	bf 90       	pop	r11
    2b2e:	af 90       	pop	r10
    2b30:	9f 90       	pop	r9
    2b32:	8f 90       	pop	r8
    2b34:	7f 90       	pop	r7
    2b36:	6f 90       	pop	r6
    2b38:	5f 90       	pop	r5
    2b3a:	4f 90       	pop	r4
    2b3c:	08 95       	ret
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
    2b3e:	87 e0       	ldi	r24, 0x07	; 7
    2b40:	e3 cf       	rjmp	.-58     	; 0x2b08 <f_open+0x20c>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
    2b42:	88 e0       	ldi	r24, 0x08	; 8
    2b44:	e1 cf       	rjmp	.-62     	; 0x2b08 <f_open+0x20c>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {						/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
    2b46:	84 e0       	ldi	r24, 0x04	; 4
    2b48:	df cf       	rjmp	.-66     	; 0x2b08 <f_open+0x20c>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
    2b4a:	87 e0       	ldi	r24, 0x07	; 7
    2b4c:	dd cf       	rjmp	.-70     	; 0x2b08 <f_open+0x20c>
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    2b4e:	03 ff       	sbrs	r16, 3
    2b50:	87 cf       	rjmp	.-242    	; 0x2a60 <f_open+0x164>
    2b52:	85 cf       	rjmp	.-246    	; 0x2a5e <f_open+0x162>

00002b54 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    2b54:	2f 92       	push	r2
    2b56:	3f 92       	push	r3
    2b58:	4f 92       	push	r4
    2b5a:	5f 92       	push	r5
    2b5c:	6f 92       	push	r6
    2b5e:	7f 92       	push	r7
    2b60:	8f 92       	push	r8
    2b62:	9f 92       	push	r9
    2b64:	af 92       	push	r10
    2b66:	bf 92       	push	r11
    2b68:	cf 92       	push	r12
    2b6a:	df 92       	push	r13
    2b6c:	ff 92       	push	r15
    2b6e:	0f 93       	push	r16
    2b70:	1f 93       	push	r17
    2b72:	cf 93       	push	r28
    2b74:	df 93       	push	r29
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <f_read+0x24>
    2b78:	00 d0       	rcall	.+0      	; 0x2b7a <f_read+0x26>
    2b7a:	00 d0       	rcall	.+0      	; 0x2b7c <f_read+0x28>
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	9e 83       	std	Y+6, r25	; 0x06
    2b82:	8d 83       	std	Y+5, r24	; 0x05
    2b84:	06 2f       	mov	r16, r22
    2b86:	17 2f       	mov	r17, r23
    2b88:	6a 01       	movw	r12, r20
    2b8a:	19 01       	movw	r2, r18
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Clear read byte counter */
    2b8c:	d9 01       	movw	r26, r18
    2b8e:	1d 92       	st	X+, r1
    2b90:	1c 92       	st	X, r1

	res = validate(fp);							/* Check validity */
    2b92:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <validate>
    2b96:	f8 2e       	mov	r15, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2b98:	88 23       	and	r24, r24
    2b9a:	09 f0       	breq	.+2      	; 0x2b9e <f_read+0x4a>
    2b9c:	a0 c1       	rjmp	.+832    	; 0x2ede <f_read+0x38a>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    2b9e:	ed 81       	ldd	r30, Y+5	; 0x05
    2ba0:	fe 81       	ldd	r31, Y+6	; 0x06
    2ba2:	84 81       	ldd	r24, Z+4	; 0x04
    2ba4:	88 23       	and	r24, r24
    2ba6:	0c f4       	brge	.+2      	; 0x2baa <f_read+0x56>
    2ba8:	92 c1       	rjmp	.+804    	; 0x2ece <f_read+0x37a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    2baa:	80 ff       	sbrs	r24, 0
    2bac:	94 c1       	rjmp	.+808    	; 0x2ed6 <f_read+0x382>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    2bae:	82 85       	ldd	r24, Z+10	; 0x0a
    2bb0:	93 85       	ldd	r25, Z+11	; 0x0b
    2bb2:	a4 85       	ldd	r26, Z+12	; 0x0c
    2bb4:	b5 85       	ldd	r27, Z+13	; 0x0d
    2bb6:	46 81       	ldd	r20, Z+6	; 0x06
    2bb8:	57 81       	ldd	r21, Z+7	; 0x07
    2bba:	60 85       	ldd	r22, Z+8	; 0x08
    2bbc:	71 85       	ldd	r23, Z+9	; 0x09
    2bbe:	84 1b       	sub	r24, r20
    2bc0:	95 0b       	sbc	r25, r21
    2bc2:	a6 0b       	sbc	r26, r22
    2bc4:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    2bc6:	a6 01       	movw	r20, r12
    2bc8:	60 e0       	ldi	r22, 0x00	; 0
    2bca:	70 e0       	ldi	r23, 0x00	; 0
    2bcc:	84 17       	cp	r24, r20
    2bce:	95 07       	cpc	r25, r21
    2bd0:	a6 07       	cpc	r26, r22
    2bd2:	b7 07       	cpc	r27, r23
    2bd4:	08 f4       	brcc	.+2      	; 0x2bd8 <f_read+0x84>
    2bd6:	6c 01       	movw	r12, r24

	for ( ;  btr;								/* Repeat until all data read */
    2bd8:	c1 14       	cp	r12, r1
    2bda:	d1 04       	cpc	r13, r1
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <f_read+0x8c>
    2bde:	7f c1       	rjmp	.+766    	; 0x2ede <f_read+0x38a>
    2be0:	09 83       	std	Y+1, r16	; 0x01
    2be2:	1a 83       	std	Y+2, r17	; 0x02
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
					fp->flag &= ~FA__DIRTY;
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
    2be4:	2d 81       	ldd	r18, Y+5	; 0x05
    2be6:	3e 81       	ldd	r19, Y+6	; 0x06
    2be8:	20 5e       	subi	r18, 0xE0	; 224
    2bea:	3f 4f       	sbci	r19, 0xFF	; 255
    2bec:	3c 83       	std	Y+4, r19	; 0x04
    2bee:	2b 83       	std	Y+3, r18	; 0x03
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    2bf0:	ad 81       	ldd	r26, Y+5	; 0x05
    2bf2:	be 81       	ldd	r27, Y+6	; 0x06
    2bf4:	16 96       	adiw	r26, 0x06	; 6
    2bf6:	4d 91       	ld	r20, X+
    2bf8:	5d 91       	ld	r21, X+
    2bfa:	6d 91       	ld	r22, X+
    2bfc:	7c 91       	ld	r23, X
    2bfe:	19 97       	sbiw	r26, 0x09	; 9
    2c00:	db 01       	movw	r26, r22
    2c02:	ca 01       	movw	r24, r20
    2c04:	91 70       	andi	r25, 0x01	; 1
    2c06:	a0 70       	andi	r26, 0x00	; 0
    2c08:	b0 70       	andi	r27, 0x00	; 0
    2c0a:	00 97       	sbiw	r24, 0x00	; 0
    2c0c:	a1 05       	cpc	r26, r1
    2c0e:	b1 05       	cpc	r27, r1
    2c10:	09 f0       	breq	.+2      	; 0x2c14 <f_read+0xc0>
    2c12:	1a c1       	rjmp	.+564    	; 0x2e48 <f_read+0x2f4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2c14:	ad 81       	ldd	r26, Y+5	; 0x05
    2c16:	be 81       	ldd	r27, Y+6	; 0x06
    2c18:	ed 91       	ld	r30, X+
    2c1a:	fc 91       	ld	r31, X
    2c1c:	db 01       	movw	r26, r22
    2c1e:	ca 01       	movw	r24, r20
    2c20:	07 2e       	mov	r0, r23
    2c22:	79 e0       	ldi	r23, 0x09	; 9
    2c24:	b6 95       	lsr	r27
    2c26:	a7 95       	ror	r26
    2c28:	97 95       	ror	r25
    2c2a:	87 95       	ror	r24
    2c2c:	7a 95       	dec	r23
    2c2e:	d1 f7       	brne	.-12     	; 0x2c24 <f_read+0xd0>
    2c30:	70 2d       	mov	r23, r0
    2c32:	12 81       	ldd	r17, Z+2	; 0x02
    2c34:	11 50       	subi	r17, 0x01	; 1
    2c36:	18 23       	and	r17, r24
			if (!csect) {						/* On the cluster boundary? */
    2c38:	09 f0       	breq	.+2      	; 0x2c3c <f_read+0xe8>
    2c3a:	41 c0       	rjmp	.+130    	; 0x2cbe <f_read+0x16a>
				if (fp->fptr == 0) {			/* On the top of the file? */
    2c3c:	41 15       	cp	r20, r1
    2c3e:	51 05       	cpc	r21, r1
    2c40:	61 05       	cpc	r22, r1
    2c42:	71 05       	cpc	r23, r1
    2c44:	39 f4       	brne	.+14     	; 0x2c54 <f_read+0x100>
					clst = fp->sclust;			/* Follow from the origin */
    2c46:	ed 81       	ldd	r30, Y+5	; 0x05
    2c48:	fe 81       	ldd	r31, Y+6	; 0x06
    2c4a:	86 85       	ldd	r24, Z+14	; 0x0e
    2c4c:	97 85       	ldd	r25, Z+15	; 0x0f
    2c4e:	a0 89       	ldd	r26, Z+16	; 0x10
    2c50:	b1 89       	ldd	r27, Z+17	; 0x11
    2c52:	0d c0       	rjmp	.+26     	; 0x2c6e <f_read+0x11a>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    2c54:	ad 81       	ldd	r26, Y+5	; 0x05
    2c56:	be 81       	ldd	r27, Y+6	; 0x06
    2c58:	52 96       	adiw	r26, 0x12	; 18
    2c5a:	4d 91       	ld	r20, X+
    2c5c:	5d 91       	ld	r21, X+
    2c5e:	6d 91       	ld	r22, X+
    2c60:	7c 91       	ld	r23, X
    2c62:	55 97       	sbiw	r26, 0x15	; 21
    2c64:	cf 01       	movw	r24, r30
    2c66:	0e 94 65 0c 	call	0x18ca	; 0x18ca <get_fat>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    2c6e:	82 30       	cpi	r24, 0x02	; 2
    2c70:	91 05       	cpc	r25, r1
    2c72:	a1 05       	cpc	r26, r1
    2c74:	b1 05       	cpc	r27, r1
    2c76:	48 f4       	brcc	.+18     	; 0x2c8a <f_read+0x136>
    2c78:	ed 81       	ldd	r30, Y+5	; 0x05
    2c7a:	fe 81       	ldd	r31, Y+6	; 0x06
    2c7c:	84 81       	ldd	r24, Z+4	; 0x04
    2c7e:	80 68       	ori	r24, 0x80	; 128
    2c80:	84 83       	std	Z+4, r24	; 0x04
    2c82:	ff 24       	eor	r15, r15
    2c84:	68 94       	set
    2c86:	f1 f8       	bld	r15, 1
    2c88:	2a c1       	rjmp	.+596    	; 0x2ede <f_read+0x38a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2c8a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c8c:	ff ef       	ldi	r31, 0xFF	; 255
    2c8e:	9f 07       	cpc	r25, r31
    2c90:	ff ef       	ldi	r31, 0xFF	; 255
    2c92:	af 07       	cpc	r26, r31
    2c94:	ff ef       	ldi	r31, 0xFF	; 255
    2c96:	bf 07       	cpc	r27, r31
    2c98:	61 f4       	brne	.+24     	; 0x2cb2 <f_read+0x15e>
    2c9a:	ad 81       	ldd	r26, Y+5	; 0x05
    2c9c:	be 81       	ldd	r27, Y+6	; 0x06
    2c9e:	14 96       	adiw	r26, 0x04	; 4
    2ca0:	8c 91       	ld	r24, X
    2ca2:	14 97       	sbiw	r26, 0x04	; 4
    2ca4:	80 68       	ori	r24, 0x80	; 128
    2ca6:	14 96       	adiw	r26, 0x04	; 4
    2ca8:	8c 93       	st	X, r24
    2caa:	14 97       	sbiw	r26, 0x04	; 4
    2cac:	ff 24       	eor	r15, r15
    2cae:	f3 94       	inc	r15
    2cb0:	16 c1       	rjmp	.+556    	; 0x2ede <f_read+0x38a>
				fp->clust = clst;				/* Update current cluster */
    2cb2:	ed 81       	ldd	r30, Y+5	; 0x05
    2cb4:	fe 81       	ldd	r31, Y+6	; 0x06
    2cb6:	82 8b       	std	Z+18, r24	; 0x12
    2cb8:	93 8b       	std	Z+19, r25	; 0x13
    2cba:	a4 8b       	std	Z+20, r26	; 0x14
    2cbc:	b5 8b       	std	Z+21, r27	; 0x15
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    2cbe:	ad 81       	ldd	r26, Y+5	; 0x05
    2cc0:	be 81       	ldd	r27, Y+6	; 0x06
    2cc2:	4d 90       	ld	r4, X+
    2cc4:	5c 90       	ld	r5, X
    2cc6:	11 97       	sbiw	r26, 0x01	; 1
    2cc8:	52 96       	adiw	r26, 0x12	; 18
    2cca:	4d 91       	ld	r20, X+
    2ccc:	5d 91       	ld	r21, X+
    2cce:	6d 91       	ld	r22, X+
    2cd0:	7c 91       	ld	r23, X
    2cd2:	55 97       	sbiw	r26, 0x15	; 21
    2cd4:	c2 01       	movw	r24, r4
    2cd6:	0e 94 2f 0c 	call	0x185e	; 0x185e <clust2sect>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	a1 05       	cpc	r26, r1
    2ce2:	b1 05       	cpc	r27, r1
    2ce4:	49 f4       	brne	.+18     	; 0x2cf8 <f_read+0x1a4>
    2ce6:	ed 81       	ldd	r30, Y+5	; 0x05
    2ce8:	fe 81       	ldd	r31, Y+6	; 0x06
    2cea:	84 81       	ldd	r24, Z+4	; 0x04
    2cec:	80 68       	ori	r24, 0x80	; 128
    2cee:	84 83       	std	Z+4, r24	; 0x04
    2cf0:	ff 24       	eor	r15, r15
    2cf2:	68 94       	set
    2cf4:	f1 f8       	bld	r15, 1
    2cf6:	f3 c0       	rjmp	.+486    	; 0x2ede <f_read+0x38a>
			sect += csect;
    2cf8:	4c 01       	movw	r8, r24
    2cfa:	5d 01       	movw	r10, r26
    2cfc:	81 0e       	add	r8, r17
    2cfe:	91 1c       	adc	r9, r1
    2d00:	a1 1c       	adc	r10, r1
    2d02:	b1 1c       	adc	r11, r1
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    2d04:	36 01       	movw	r6, r12
    2d06:	67 2c       	mov	r6, r7
    2d08:	77 24       	eor	r7, r7
    2d0a:	66 94       	lsr	r6
			if (cc) {							/* Read maximum contiguous sectors directly */
    2d0c:	61 14       	cp	r6, r1
    2d0e:	71 04       	cpc	r7, r1
    2d10:	09 f4       	brne	.+2      	; 0x2d14 <f_read+0x1c0>
    2d12:	4e c0       	rjmp	.+156    	; 0x2db0 <f_read+0x25c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    2d14:	d2 01       	movw	r26, r4
    2d16:	12 96       	adiw	r26, 0x02	; 2
    2d18:	4c 91       	ld	r20, X
    2d1a:	12 97       	sbiw	r26, 0x02	; 2
    2d1c:	c3 01       	movw	r24, r6
    2d1e:	81 0f       	add	r24, r17
    2d20:	91 1d       	adc	r25, r1
    2d22:	24 2f       	mov	r18, r20
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	28 17       	cp	r18, r24
    2d28:	39 07       	cpc	r19, r25
    2d2a:	20 f4       	brcc	.+8      	; 0x2d34 <f_read+0x1e0>
					cc = fp->fs->csize - csect;
    2d2c:	c9 01       	movw	r24, r18
    2d2e:	3c 01       	movw	r6, r24
    2d30:	61 1a       	sub	r6, r17
    2d32:	71 08       	sbc	r7, r1
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    2d34:	f2 01       	movw	r30, r4
    2d36:	81 81       	ldd	r24, Z+1	; 0x01
    2d38:	69 81       	ldd	r22, Y+1	; 0x01
    2d3a:	7a 81       	ldd	r23, Y+2	; 0x02
    2d3c:	a5 01       	movw	r20, r10
    2d3e:	94 01       	movw	r18, r8
    2d40:	06 2d       	mov	r16, r6
    2d42:	0e 94 3b 02 	call	0x476	; 0x476 <disk_read>
    2d46:	88 23       	and	r24, r24
    2d48:	61 f0       	breq	.+24     	; 0x2d62 <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
    2d4a:	ad 81       	ldd	r26, Y+5	; 0x05
    2d4c:	be 81       	ldd	r27, Y+6	; 0x06
    2d4e:	14 96       	adiw	r26, 0x04	; 4
    2d50:	8c 91       	ld	r24, X
    2d52:	14 97       	sbiw	r26, 0x04	; 4
    2d54:	80 68       	ori	r24, 0x80	; 128
    2d56:	14 96       	adiw	r26, 0x04	; 4
    2d58:	8c 93       	st	X, r24
    2d5a:	14 97       	sbiw	r26, 0x04	; 4
    2d5c:	ff 24       	eor	r15, r15
    2d5e:	f3 94       	inc	r15
    2d60:	be c0       	rjmp	.+380    	; 0x2ede <f_read+0x38a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
    2d62:	ed 81       	ldd	r30, Y+5	; 0x05
    2d64:	fe 81       	ldd	r31, Y+6	; 0x06
    2d66:	84 81       	ldd	r24, Z+4	; 0x04
    2d68:	86 ff       	sbrs	r24, 6
    2d6a:	1d c0       	rjmp	.+58     	; 0x2da6 <f_read+0x252>
    2d6c:	86 89       	ldd	r24, Z+22	; 0x16
    2d6e:	97 89       	ldd	r25, Z+23	; 0x17
    2d70:	a0 8d       	ldd	r26, Z+24	; 0x18
    2d72:	b1 8d       	ldd	r27, Z+25	; 0x19
    2d74:	88 19       	sub	r24, r8
    2d76:	99 09       	sbc	r25, r9
    2d78:	aa 09       	sbc	r26, r10
    2d7a:	bb 09       	sbc	r27, r11
    2d7c:	a3 01       	movw	r20, r6
    2d7e:	60 e0       	ldi	r22, 0x00	; 0
    2d80:	70 e0       	ldi	r23, 0x00	; 0
    2d82:	84 17       	cp	r24, r20
    2d84:	95 07       	cpc	r25, r21
    2d86:	a6 07       	cpc	r26, r22
    2d88:	b7 07       	cpc	r27, r23
    2d8a:	68 f4       	brcc	.+26     	; 0x2da6 <f_read+0x252>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
    2d8c:	98 2f       	mov	r25, r24
    2d8e:	88 27       	eor	r24, r24
    2d90:	99 0f       	add	r25, r25
    2d92:	29 81       	ldd	r18, Y+1	; 0x01
    2d94:	3a 81       	ldd	r19, Y+2	; 0x02
    2d96:	82 0f       	add	r24, r18
    2d98:	93 1f       	adc	r25, r19
    2d9a:	6b 81       	ldd	r22, Y+3	; 0x03
    2d9c:	7c 81       	ldd	r23, Y+4	; 0x04
    2d9e:	40 e0       	ldi	r20, 0x00	; 0
    2da0:	52 e0       	ldi	r21, 0x02	; 2
    2da2:	0e 94 14 05 	call	0xa28	; 0xa28 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    2da6:	83 01       	movw	r16, r6
    2da8:	10 2f       	mov	r17, r16
    2daa:	00 27       	eor	r16, r16
    2dac:	11 0f       	add	r17, r17
				continue;
    2dae:	6a c0       	rjmp	.+212    	; 0x2e84 <f_read+0x330>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
    2db0:	ad 81       	ldd	r26, Y+5	; 0x05
    2db2:	be 81       	ldd	r27, Y+6	; 0x06
    2db4:	56 96       	adiw	r26, 0x16	; 22
    2db6:	0d 91       	ld	r16, X+
    2db8:	1d 91       	ld	r17, X+
    2dba:	2d 91       	ld	r18, X+
    2dbc:	3c 91       	ld	r19, X
    2dbe:	59 97       	sbiw	r26, 0x19	; 25
    2dc0:	08 15       	cp	r16, r8
    2dc2:	19 05       	cpc	r17, r9
    2dc4:	2a 05       	cpc	r18, r10
    2dc6:	3b 05       	cpc	r19, r11
    2dc8:	b9 f1       	breq	.+110    	; 0x2e38 <f_read+0x2e4>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
    2dca:	14 96       	adiw	r26, 0x04	; 4
    2dcc:	8c 91       	ld	r24, X
    2dce:	14 97       	sbiw	r26, 0x04	; 4
    2dd0:	86 ff       	sbrs	r24, 6
    2dd2:	1c c0       	rjmp	.+56     	; 0x2e0c <f_read+0x2b8>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    2dd4:	f2 01       	movw	r30, r4
    2dd6:	81 81       	ldd	r24, Z+1	; 0x01
    2dd8:	6b 81       	ldd	r22, Y+3	; 0x03
    2dda:	7c 81       	ldd	r23, Y+4	; 0x04
    2ddc:	a9 01       	movw	r20, r18
    2dde:	98 01       	movw	r18, r16
    2de0:	01 e0       	ldi	r16, 0x01	; 1
    2de2:	0e 94 91 02 	call	0x522	; 0x522 <disk_write>
    2de6:	88 23       	and	r24, r24
    2de8:	61 f0       	breq	.+24     	; 0x2e02 <f_read+0x2ae>
						ABORT(fp->fs, FR_DISK_ERR);
    2dea:	ad 81       	ldd	r26, Y+5	; 0x05
    2dec:	be 81       	ldd	r27, Y+6	; 0x06
    2dee:	14 96       	adiw	r26, 0x04	; 4
    2df0:	8c 91       	ld	r24, X
    2df2:	14 97       	sbiw	r26, 0x04	; 4
    2df4:	80 68       	ori	r24, 0x80	; 128
    2df6:	14 96       	adiw	r26, 0x04	; 4
    2df8:	8c 93       	st	X, r24
    2dfa:	14 97       	sbiw	r26, 0x04	; 4
    2dfc:	ff 24       	eor	r15, r15
    2dfe:	f3 94       	inc	r15
    2e00:	6e c0       	rjmp	.+220    	; 0x2ede <f_read+0x38a>
					fp->flag &= ~FA__DIRTY;
    2e02:	ed 81       	ldd	r30, Y+5	; 0x05
    2e04:	fe 81       	ldd	r31, Y+6	; 0x06
    2e06:	84 81       	ldd	r24, Z+4	; 0x04
    2e08:	8f 7b       	andi	r24, 0xBF	; 191
    2e0a:	84 83       	std	Z+4, r24	; 0x04
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
    2e0c:	ad 81       	ldd	r26, Y+5	; 0x05
    2e0e:	be 81       	ldd	r27, Y+6	; 0x06
    2e10:	ed 91       	ld	r30, X+
    2e12:	fc 91       	ld	r31, X
    2e14:	81 81       	ldd	r24, Z+1	; 0x01
    2e16:	6b 81       	ldd	r22, Y+3	; 0x03
    2e18:	7c 81       	ldd	r23, Y+4	; 0x04
    2e1a:	a5 01       	movw	r20, r10
    2e1c:	94 01       	movw	r18, r8
    2e1e:	01 e0       	ldi	r16, 0x01	; 1
    2e20:	0e 94 3b 02 	call	0x476	; 0x476 <disk_read>
    2e24:	88 23       	and	r24, r24
    2e26:	41 f0       	breq	.+16     	; 0x2e38 <f_read+0x2e4>
					ABORT(fp->fs, FR_DISK_ERR);
    2e28:	ed 81       	ldd	r30, Y+5	; 0x05
    2e2a:	fe 81       	ldd	r31, Y+6	; 0x06
    2e2c:	84 81       	ldd	r24, Z+4	; 0x04
    2e2e:	80 68       	ori	r24, 0x80	; 128
    2e30:	84 83       	std	Z+4, r24	; 0x04
    2e32:	ff 24       	eor	r15, r15
    2e34:	f3 94       	inc	r15
    2e36:	53 c0       	rjmp	.+166    	; 0x2ede <f_read+0x38a>
			}
#endif
			fp->dsect = sect;
    2e38:	ad 81       	ldd	r26, Y+5	; 0x05
    2e3a:	be 81       	ldd	r27, Y+6	; 0x06
    2e3c:	56 96       	adiw	r26, 0x16	; 22
    2e3e:	8d 92       	st	X+, r8
    2e40:	9d 92       	st	X+, r9
    2e42:	ad 92       	st	X+, r10
    2e44:	bc 92       	st	X, r11
    2e46:	59 97       	sbiw	r26, 0x19	; 25
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    2e48:	ed 81       	ldd	r30, Y+5	; 0x05
    2e4a:	fe 81       	ldd	r31, Y+6	; 0x06
    2e4c:	46 81       	ldd	r20, Z+6	; 0x06
    2e4e:	57 81       	ldd	r21, Z+7	; 0x07
    2e50:	60 85       	ldd	r22, Z+8	; 0x08
    2e52:	71 85       	ldd	r23, Z+9	; 0x09
    2e54:	ca 01       	movw	r24, r20
    2e56:	91 70       	andi	r25, 0x01	; 1
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	32 e0       	ldi	r19, 0x02	; 2
    2e5c:	28 1b       	sub	r18, r24
    2e5e:	39 0b       	sbc	r19, r25
    2e60:	86 01       	movw	r16, r12
    2e62:	2c 15       	cp	r18, r12
    2e64:	3d 05       	cpc	r19, r13
    2e66:	08 f4       	brcc	.+2      	; 0x2e6a <f_read+0x316>
    2e68:	89 01       	movw	r16, r18
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    2e6a:	ba 01       	movw	r22, r20
    2e6c:	71 70       	andi	r23, 0x01	; 1
    2e6e:	60 5e       	subi	r22, 0xE0	; 224
    2e70:	7f 4f       	sbci	r23, 0xFF	; 255
    2e72:	8d 81       	ldd	r24, Y+5	; 0x05
    2e74:	9e 81       	ldd	r25, Y+6	; 0x06
    2e76:	68 0f       	add	r22, r24
    2e78:	79 1f       	adc	r23, r25
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7e:	a8 01       	movw	r20, r16
    2e80:	0e 94 14 05 	call	0xa28	; 0xa28 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    2e84:	a9 81       	ldd	r26, Y+1	; 0x01
    2e86:	ba 81       	ldd	r27, Y+2	; 0x02
    2e88:	a0 0f       	add	r26, r16
    2e8a:	b1 1f       	adc	r27, r17
    2e8c:	ba 83       	std	Y+2, r27	; 0x02
    2e8e:	a9 83       	std	Y+1, r26	; 0x01
    2e90:	a8 01       	movw	r20, r16
    2e92:	60 e0       	ldi	r22, 0x00	; 0
    2e94:	70 e0       	ldi	r23, 0x00	; 0
    2e96:	ed 81       	ldd	r30, Y+5	; 0x05
    2e98:	fe 81       	ldd	r31, Y+6	; 0x06
    2e9a:	86 81       	ldd	r24, Z+6	; 0x06
    2e9c:	97 81       	ldd	r25, Z+7	; 0x07
    2e9e:	a0 85       	ldd	r26, Z+8	; 0x08
    2ea0:	b1 85       	ldd	r27, Z+9	; 0x09
    2ea2:	84 0f       	add	r24, r20
    2ea4:	95 1f       	adc	r25, r21
    2ea6:	a6 1f       	adc	r26, r22
    2ea8:	b7 1f       	adc	r27, r23
    2eaa:	86 83       	std	Z+6, r24	; 0x06
    2eac:	97 83       	std	Z+7, r25	; 0x07
    2eae:	a0 87       	std	Z+8, r26	; 0x08
    2eb0:	b1 87       	std	Z+9, r27	; 0x09
    2eb2:	d1 01       	movw	r26, r2
    2eb4:	8d 91       	ld	r24, X+
    2eb6:	9c 91       	ld	r25, X
    2eb8:	11 97       	sbiw	r26, 0x01	; 1
    2eba:	80 0f       	add	r24, r16
    2ebc:	91 1f       	adc	r25, r17
    2ebe:	11 96       	adiw	r26, 0x01	; 1
    2ec0:	9c 93       	st	X, r25
    2ec2:	8e 93       	st	-X, r24
    2ec4:	c0 1a       	sub	r12, r16
    2ec6:	d1 0a       	sbc	r13, r17
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    2ec8:	09 f0       	breq	.+2      	; 0x2ecc <f_read+0x378>
    2eca:	92 ce       	rjmp	.-732    	; 0x2bf0 <f_read+0x9c>
    2ecc:	08 c0       	rjmp	.+16     	; 0x2ede <f_read+0x38a>
	*br = 0;	/* Clear read byte counter */

	res = validate(fp);							/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)					/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    2ece:	ff 24       	eor	r15, r15
    2ed0:	68 94       	set
    2ed2:	f1 f8       	bld	r15, 1
    2ed4:	04 c0       	rjmp	.+8      	; 0x2ede <f_read+0x38a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    2ed6:	0f 2e       	mov	r0, r31
    2ed8:	f7 e0       	ldi	r31, 0x07	; 7
    2eda:	ff 2e       	mov	r15, r31
    2edc:	f0 2d       	mov	r31, r0
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    2ede:	8f 2d       	mov	r24, r15
    2ee0:	26 96       	adiw	r28, 0x06	; 6
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	f8 94       	cli
    2ee6:	de bf       	out	0x3e, r29	; 62
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	cd bf       	out	0x3d, r28	; 61
    2eec:	df 91       	pop	r29
    2eee:	cf 91       	pop	r28
    2ef0:	1f 91       	pop	r17
    2ef2:	0f 91       	pop	r16
    2ef4:	ff 90       	pop	r15
    2ef6:	df 90       	pop	r13
    2ef8:	cf 90       	pop	r12
    2efa:	bf 90       	pop	r11
    2efc:	af 90       	pop	r10
    2efe:	9f 90       	pop	r9
    2f00:	8f 90       	pop	r8
    2f02:	7f 90       	pop	r7
    2f04:	6f 90       	pop	r6
    2f06:	5f 90       	pop	r5
    2f08:	4f 90       	pop	r4
    2f0a:	3f 90       	pop	r3
    2f0c:	2f 90       	pop	r2
    2f0e:	08 95       	ret

00002f10 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    2f10:	2f 92       	push	r2
    2f12:	3f 92       	push	r3
    2f14:	4f 92       	push	r4
    2f16:	5f 92       	push	r5
    2f18:	6f 92       	push	r6
    2f1a:	7f 92       	push	r7
    2f1c:	8f 92       	push	r8
    2f1e:	9f 92       	push	r9
    2f20:	af 92       	push	r10
    2f22:	bf 92       	push	r11
    2f24:	cf 92       	push	r12
    2f26:	df 92       	push	r13
    2f28:	ef 92       	push	r14
    2f2a:	ff 92       	push	r15
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
    2f30:	cf 93       	push	r28
    2f32:	df 93       	push	r29
    2f34:	00 d0       	rcall	.+0      	; 0x2f36 <f_write+0x26>
    2f36:	00 d0       	rcall	.+0      	; 0x2f38 <f_write+0x28>
    2f38:	0f 92       	push	r0
    2f3a:	cd b7       	in	r28, 0x3d	; 61
    2f3c:	de b7       	in	r29, 0x3e	; 62
    2f3e:	7c 01       	movw	r14, r24
    2f40:	86 2e       	mov	r8, r22
    2f42:	67 2e       	mov	r6, r23
    2f44:	6a 01       	movw	r12, r20
    2f46:	29 01       	movw	r4, r18
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    2f48:	d9 01       	movw	r26, r18
    2f4a:	1d 92       	st	X+, r1
    2f4c:	1c 92       	st	X, r1

	res = validate(fp);						/* Check validity */
    2f4e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <validate>
    2f52:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2f54:	88 23       	and	r24, r24
    2f56:	09 f0       	breq	.+2      	; 0x2f5a <f_write+0x4a>
    2f58:	c6 c1       	rjmp	.+908    	; 0x32e6 <f_write+0x3d6>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    2f5a:	f7 01       	movw	r30, r14
    2f5c:	84 81       	ldd	r24, Z+4	; 0x04
    2f5e:	88 23       	and	r24, r24
    2f60:	0c f4       	brge	.+2      	; 0x2f64 <f_write+0x54>
    2f62:	be c1       	rjmp	.+892    	; 0x32e0 <f_write+0x3d0>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    2f64:	81 ff       	sbrs	r24, 1
    2f66:	be c1       	rjmp	.+892    	; 0x32e4 <f_write+0x3d4>
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    2f68:	42 85       	ldd	r20, Z+10	; 0x0a
    2f6a:	53 85       	ldd	r21, Z+11	; 0x0b
    2f6c:	64 85       	ldd	r22, Z+12	; 0x0c
    2f6e:	75 85       	ldd	r23, Z+13	; 0x0d
    2f70:	c6 01       	movw	r24, r12
    2f72:	a0 e0       	ldi	r26, 0x00	; 0
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	84 0f       	add	r24, r20
    2f78:	95 1f       	adc	r25, r21
    2f7a:	a6 1f       	adc	r26, r22
    2f7c:	b7 1f       	adc	r27, r23
    2f7e:	84 17       	cp	r24, r20
    2f80:	95 07       	cpc	r25, r21
    2f82:	a6 07       	cpc	r26, r22
    2f84:	b7 07       	cpc	r27, r23
    2f86:	08 f4       	brcc	.+2      	; 0x2f8a <f_write+0x7a>
    2f88:	90 c1       	rjmp	.+800    	; 0x32aa <f_write+0x39a>

	for ( ;  btw;							/* Repeat until all data written */
    2f8a:	c1 14       	cp	r12, r1
    2f8c:	d1 04       	cpc	r13, r1
    2f8e:	09 f4       	brne	.+2      	; 0x2f92 <f_write+0x82>
    2f90:	8c c1       	rjmp	.+792    	; 0x32aa <f_write+0x39a>
    2f92:	89 82       	std	Y+1, r8	; 0x01
    2f94:	6a 82       	std	Y+2, r6	; 0x02
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    2f96:	97 01       	movw	r18, r14
    2f98:	20 5e       	subi	r18, 0xE0	; 224
    2f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f9c:	3c 83       	std	Y+4, r19	; 0x04
    2f9e:	2b 83       	std	Y+3, r18	; 0x03
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    2fa0:	d7 01       	movw	r26, r14
    2fa2:	16 96       	adiw	r26, 0x06	; 6
    2fa4:	4d 91       	ld	r20, X+
    2fa6:	5d 91       	ld	r21, X+
    2fa8:	6d 91       	ld	r22, X+
    2faa:	7c 91       	ld	r23, X
    2fac:	19 97       	sbiw	r26, 0x09	; 9
    2fae:	db 01       	movw	r26, r22
    2fb0:	ca 01       	movw	r24, r20
    2fb2:	91 70       	andi	r25, 0x01	; 1
    2fb4:	a0 70       	andi	r26, 0x00	; 0
    2fb6:	b0 70       	andi	r27, 0x00	; 0
    2fb8:	00 97       	sbiw	r24, 0x00	; 0
    2fba:	a1 05       	cpc	r26, r1
    2fbc:	b1 05       	cpc	r27, r1
    2fbe:	09 f0       	breq	.+2      	; 0x2fc2 <f_write+0xb2>
    2fc0:	30 c1       	rjmp	.+608    	; 0x3222 <f_write+0x312>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2fc2:	f7 01       	movw	r30, r14
    2fc4:	20 81       	ld	r18, Z
    2fc6:	31 81       	ldd	r19, Z+1	; 0x01
    2fc8:	db 01       	movw	r26, r22
    2fca:	ca 01       	movw	r24, r20
    2fcc:	07 2e       	mov	r0, r23
    2fce:	79 e0       	ldi	r23, 0x09	; 9
    2fd0:	b6 95       	lsr	r27
    2fd2:	a7 95       	ror	r26
    2fd4:	97 95       	ror	r25
    2fd6:	87 95       	ror	r24
    2fd8:	7a 95       	dec	r23
    2fda:	d1 f7       	brne	.-12     	; 0x2fd0 <f_write+0xc0>
    2fdc:	70 2d       	mov	r23, r0
    2fde:	f9 01       	movw	r30, r18
    2fe0:	82 80       	ldd	r8, Z+2	; 0x02
    2fe2:	e8 2d       	mov	r30, r8
    2fe4:	e1 50       	subi	r30, 0x01	; 1
    2fe6:	e8 23       	and	r30, r24
    2fe8:	ed 83       	std	Y+5, r30	; 0x05
			if (!csect) {					/* On the cluster boundary? */
    2fea:	ee 23       	and	r30, r30
    2fec:	09 f0       	breq	.+2      	; 0x2ff0 <f_write+0xe0>
    2fee:	4f c0       	rjmp	.+158    	; 0x308e <f_write+0x17e>
				if (fp->fptr == 0) {		/* On the top of the file? */
    2ff0:	41 15       	cp	r20, r1
    2ff2:	51 05       	cpc	r21, r1
    2ff4:	61 05       	cpc	r22, r1
    2ff6:	71 05       	cpc	r23, r1
    2ff8:	b9 f4       	brne	.+46     	; 0x3028 <f_write+0x118>
					clst = fp->sclust;		/* Follow from the origin */
    2ffa:	f7 01       	movw	r30, r14
    2ffc:	86 85       	ldd	r24, Z+14	; 0x0e
    2ffe:	97 85       	ldd	r25, Z+15	; 0x0f
    3000:	a0 89       	ldd	r26, Z+16	; 0x10
    3002:	b1 89       	ldd	r27, Z+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    3004:	00 97       	sbiw	r24, 0x00	; 0
    3006:	a1 05       	cpc	r26, r1
    3008:	b1 05       	cpc	r27, r1
    300a:	f9 f4       	brne	.+62     	; 0x304a <f_write+0x13a>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    300c:	c9 01       	movw	r24, r18
    300e:	40 e0       	ldi	r20, 0x00	; 0
    3010:	50 e0       	ldi	r21, 0x00	; 0
    3012:	ba 01       	movw	r22, r20
    3014:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <create_chain>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	f7 01       	movw	r30, r14
    301e:	86 87       	std	Z+14, r24	; 0x0e
    3020:	97 87       	std	Z+15, r25	; 0x0f
    3022:	a0 8b       	std	Z+16, r26	; 0x10
    3024:	b1 8b       	std	Z+17, r27	; 0x11
    3026:	0c c0       	rjmp	.+24     	; 0x3040 <f_write+0x130>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    3028:	d7 01       	movw	r26, r14
    302a:	52 96       	adiw	r26, 0x12	; 18
    302c:	4d 91       	ld	r20, X+
    302e:	5d 91       	ld	r21, X+
    3030:	6d 91       	ld	r22, X+
    3032:	7c 91       	ld	r23, X
    3034:	55 97       	sbiw	r26, 0x15	; 21
    3036:	c9 01       	movw	r24, r18
    3038:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <create_chain>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    3040:	00 97       	sbiw	r24, 0x00	; 0
    3042:	a1 05       	cpc	r26, r1
    3044:	b1 05       	cpc	r27, r1
    3046:	09 f4       	brne	.+2      	; 0x304a <f_write+0x13a>
    3048:	30 c1       	rjmp	.+608    	; 0x32aa <f_write+0x39a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    304a:	81 30       	cpi	r24, 0x01	; 1
    304c:	91 05       	cpc	r25, r1
    304e:	a1 05       	cpc	r26, r1
    3050:	b1 05       	cpc	r27, r1
    3052:	31 f4       	brne	.+12     	; 0x3060 <f_write+0x150>
    3054:	f7 01       	movw	r30, r14
    3056:	84 81       	ldd	r24, Z+4	; 0x04
    3058:	80 68       	ori	r24, 0x80	; 128
    305a:	84 83       	std	Z+4, r24	; 0x04
    305c:	12 e0       	ldi	r17, 0x02	; 2
    305e:	43 c1       	rjmp	.+646    	; 0x32e6 <f_write+0x3d6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3060:	8f 3f       	cpi	r24, 0xFF	; 255
    3062:	ff ef       	ldi	r31, 0xFF	; 255
    3064:	9f 07       	cpc	r25, r31
    3066:	ff ef       	ldi	r31, 0xFF	; 255
    3068:	af 07       	cpc	r26, r31
    306a:	ff ef       	ldi	r31, 0xFF	; 255
    306c:	bf 07       	cpc	r27, r31
    306e:	51 f4       	brne	.+20     	; 0x3084 <f_write+0x174>
    3070:	d7 01       	movw	r26, r14
    3072:	14 96       	adiw	r26, 0x04	; 4
    3074:	8c 91       	ld	r24, X
    3076:	14 97       	sbiw	r26, 0x04	; 4
    3078:	80 68       	ori	r24, 0x80	; 128
    307a:	14 96       	adiw	r26, 0x04	; 4
    307c:	8c 93       	st	X, r24
    307e:	14 97       	sbiw	r26, 0x04	; 4
    3080:	11 e0       	ldi	r17, 0x01	; 1
    3082:	31 c1       	rjmp	.+610    	; 0x32e6 <f_write+0x3d6>
				fp->clust = clst;			/* Update current cluster */
    3084:	f7 01       	movw	r30, r14
    3086:	82 8b       	std	Z+18, r24	; 0x12
    3088:	93 8b       	std	Z+19, r25	; 0x13
    308a:	a4 8b       	std	Z+20, r26	; 0x14
    308c:	b5 8b       	std	Z+21, r27	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
    308e:	d7 01       	movw	r26, r14
    3090:	14 96       	adiw	r26, 0x04	; 4
    3092:	8c 91       	ld	r24, X
    3094:	14 97       	sbiw	r26, 0x04	; 4
    3096:	86 ff       	sbrs	r24, 6
    3098:	1e c0       	rjmp	.+60     	; 0x30d6 <f_write+0x1c6>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    309a:	ed 91       	ld	r30, X+
    309c:	fc 91       	ld	r31, X
    309e:	11 97       	sbiw	r26, 0x01	; 1
    30a0:	56 96       	adiw	r26, 0x16	; 22
    30a2:	2d 91       	ld	r18, X+
    30a4:	3d 91       	ld	r19, X+
    30a6:	4d 91       	ld	r20, X+
    30a8:	5c 91       	ld	r21, X
    30aa:	59 97       	sbiw	r26, 0x19	; 25
    30ac:	81 81       	ldd	r24, Z+1	; 0x01
    30ae:	6b 81       	ldd	r22, Y+3	; 0x03
    30b0:	7c 81       	ldd	r23, Y+4	; 0x04
    30b2:	01 e0       	ldi	r16, 0x01	; 1
    30b4:	0e 94 91 02 	call	0x522	; 0x522 <disk_write>
    30b8:	88 23       	and	r24, r24
    30ba:	31 f0       	breq	.+12     	; 0x30c8 <f_write+0x1b8>
					ABORT(fp->fs, FR_DISK_ERR);
    30bc:	f7 01       	movw	r30, r14
    30be:	84 81       	ldd	r24, Z+4	; 0x04
    30c0:	80 68       	ori	r24, 0x80	; 128
    30c2:	84 83       	std	Z+4, r24	; 0x04
    30c4:	11 e0       	ldi	r17, 0x01	; 1
    30c6:	0f c1       	rjmp	.+542    	; 0x32e6 <f_write+0x3d6>
				fp->flag &= ~FA__DIRTY;
    30c8:	d7 01       	movw	r26, r14
    30ca:	14 96       	adiw	r26, 0x04	; 4
    30cc:	8c 91       	ld	r24, X
    30ce:	14 97       	sbiw	r26, 0x04	; 4
    30d0:	8f 7b       	andi	r24, 0xBF	; 191
    30d2:	14 96       	adiw	r26, 0x04	; 4
    30d4:	8c 93       	st	X, r24
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    30d6:	f7 01       	movw	r30, r14
    30d8:	20 80       	ld	r2, Z
    30da:	31 80       	ldd	r3, Z+1	; 0x01
    30dc:	42 89       	ldd	r20, Z+18	; 0x12
    30de:	53 89       	ldd	r21, Z+19	; 0x13
    30e0:	64 89       	ldd	r22, Z+20	; 0x14
    30e2:	75 89       	ldd	r23, Z+21	; 0x15
    30e4:	c1 01       	movw	r24, r2
    30e6:	0e 94 2f 0c 	call	0x185e	; 0x185e <clust2sect>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	a1 05       	cpc	r26, r1
    30f2:	b1 05       	cpc	r27, r1
    30f4:	51 f4       	brne	.+20     	; 0x310a <f_write+0x1fa>
    30f6:	d7 01       	movw	r26, r14
    30f8:	14 96       	adiw	r26, 0x04	; 4
    30fa:	8c 91       	ld	r24, X
    30fc:	14 97       	sbiw	r26, 0x04	; 4
    30fe:	80 68       	ori	r24, 0x80	; 128
    3100:	14 96       	adiw	r26, 0x04	; 4
    3102:	8c 93       	st	X, r24
    3104:	14 97       	sbiw	r26, 0x04	; 4
    3106:	12 e0       	ldi	r17, 0x02	; 2
    3108:	ee c0       	rjmp	.+476    	; 0x32e6 <f_write+0x3d6>
			sect += csect;
    310a:	4c 01       	movw	r8, r24
    310c:	5d 01       	movw	r10, r26
    310e:	ed 81       	ldd	r30, Y+5	; 0x05
    3110:	8e 0e       	add	r8, r30
    3112:	91 1c       	adc	r9, r1
    3114:	a1 1c       	adc	r10, r1
    3116:	b1 1c       	adc	r11, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    3118:	36 01       	movw	r6, r12
    311a:	67 2c       	mov	r6, r7
    311c:	77 24       	eor	r7, r7
    311e:	66 94       	lsr	r6
			if (cc) {						/* Write maximum contiguous sectors directly */
    3120:	61 14       	cp	r6, r1
    3122:	71 04       	cpc	r7, r1
    3124:	09 f4       	brne	.+2      	; 0x3128 <f_write+0x218>
    3126:	4d c0       	rjmp	.+154    	; 0x31c2 <f_write+0x2b2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    3128:	d1 01       	movw	r26, r2
    312a:	12 96       	adiw	r26, 0x02	; 2
    312c:	4c 91       	ld	r20, X
    312e:	12 97       	sbiw	r26, 0x02	; 2
    3130:	c3 01       	movw	r24, r6
    3132:	8e 0f       	add	r24, r30
    3134:	91 1d       	adc	r25, r1
    3136:	24 2f       	mov	r18, r20
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	28 17       	cp	r18, r24
    313c:	39 07       	cpc	r19, r25
    313e:	20 f4       	brcc	.+8      	; 0x3148 <f_write+0x238>
					cc = fp->fs->csize - csect;
    3140:	c9 01       	movw	r24, r18
    3142:	3c 01       	movw	r6, r24
    3144:	6e 1a       	sub	r6, r30
    3146:	71 08       	sbc	r7, r1
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    3148:	d1 01       	movw	r26, r2
    314a:	11 96       	adiw	r26, 0x01	; 1
    314c:	8c 91       	ld	r24, X
    314e:	69 81       	ldd	r22, Y+1	; 0x01
    3150:	7a 81       	ldd	r23, Y+2	; 0x02
    3152:	a5 01       	movw	r20, r10
    3154:	94 01       	movw	r18, r8
    3156:	06 2d       	mov	r16, r6
    3158:	0e 94 91 02 	call	0x522	; 0x522 <disk_write>
    315c:	88 23       	and	r24, r24
    315e:	31 f0       	breq	.+12     	; 0x316c <f_write+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
    3160:	f7 01       	movw	r30, r14
    3162:	84 81       	ldd	r24, Z+4	; 0x04
    3164:	80 68       	ori	r24, 0x80	; 128
    3166:	84 83       	std	Z+4, r24	; 0x04
    3168:	11 e0       	ldi	r17, 0x01	; 1
    316a:	bd c0       	rjmp	.+378    	; 0x32e6 <f_write+0x3d6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    316c:	f7 01       	movw	r30, r14
    316e:	86 89       	ldd	r24, Z+22	; 0x16
    3170:	97 89       	ldd	r25, Z+23	; 0x17
    3172:	a0 8d       	ldd	r26, Z+24	; 0x18
    3174:	b1 8d       	ldd	r27, Z+25	; 0x19
    3176:	88 19       	sub	r24, r8
    3178:	99 09       	sbc	r25, r9
    317a:	aa 09       	sbc	r26, r10
    317c:	bb 09       	sbc	r27, r11
    317e:	a3 01       	movw	r20, r6
    3180:	60 e0       	ldi	r22, 0x00	; 0
    3182:	70 e0       	ldi	r23, 0x00	; 0
    3184:	84 17       	cp	r24, r20
    3186:	95 07       	cpc	r25, r21
    3188:	a6 07       	cpc	r26, r22
    318a:	b7 07       	cpc	r27, r23
    318c:	b0 f4       	brcc	.+44     	; 0x31ba <f_write+0x2aa>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    318e:	bc 01       	movw	r22, r24
    3190:	76 2f       	mov	r23, r22
    3192:	66 27       	eor	r22, r22
    3194:	77 0f       	add	r23, r23
    3196:	29 81       	ldd	r18, Y+1	; 0x01
    3198:	3a 81       	ldd	r19, Y+2	; 0x02
    319a:	62 0f       	add	r22, r18
    319c:	73 1f       	adc	r23, r19
    319e:	8b 81       	ldd	r24, Y+3	; 0x03
    31a0:	9c 81       	ldd	r25, Y+4	; 0x04
    31a2:	40 e0       	ldi	r20, 0x00	; 0
    31a4:	52 e0       	ldi	r21, 0x02	; 2
    31a6:	0e 94 14 05 	call	0xa28	; 0xa28 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
    31aa:	d7 01       	movw	r26, r14
    31ac:	14 96       	adiw	r26, 0x04	; 4
    31ae:	8c 91       	ld	r24, X
    31b0:	14 97       	sbiw	r26, 0x04	; 4
    31b2:	8f 7b       	andi	r24, 0xBF	; 191
    31b4:	14 96       	adiw	r26, 0x04	; 4
    31b6:	8c 93       	st	X, r24
    31b8:	14 97       	sbiw	r26, 0x04	; 4
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    31ba:	76 2c       	mov	r7, r6
    31bc:	66 24       	eor	r6, r6
    31be:	77 0c       	add	r7, r7
				continue;
    31c0:	51 c0       	rjmp	.+162    	; 0x3264 <f_write+0x354>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
    31c2:	f7 01       	movw	r30, r14
    31c4:	86 89       	ldd	r24, Z+22	; 0x16
    31c6:	97 89       	ldd	r25, Z+23	; 0x17
    31c8:	a0 8d       	ldd	r26, Z+24	; 0x18
    31ca:	b1 8d       	ldd	r27, Z+25	; 0x19
    31cc:	88 15       	cp	r24, r8
    31ce:	99 05       	cpc	r25, r9
    31d0:	aa 05       	cpc	r26, r10
    31d2:	bb 05       	cpc	r27, r11
    31d4:	f9 f0       	breq	.+62     	; 0x3214 <f_write+0x304>
				if (fp->fptr < fp->fsize &&
    31d6:	86 81       	ldd	r24, Z+6	; 0x06
    31d8:	97 81       	ldd	r25, Z+7	; 0x07
    31da:	a0 85       	ldd	r26, Z+8	; 0x08
    31dc:	b1 85       	ldd	r27, Z+9	; 0x09
    31de:	42 85       	ldd	r20, Z+10	; 0x0a
    31e0:	53 85       	ldd	r21, Z+11	; 0x0b
    31e2:	64 85       	ldd	r22, Z+12	; 0x0c
    31e4:	75 85       	ldd	r23, Z+13	; 0x0d
    31e6:	84 17       	cp	r24, r20
    31e8:	95 07       	cpc	r25, r21
    31ea:	a6 07       	cpc	r26, r22
    31ec:	b7 07       	cpc	r27, r23
    31ee:	90 f4       	brcc	.+36     	; 0x3214 <f_write+0x304>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    31f0:	d1 01       	movw	r26, r2
    31f2:	11 96       	adiw	r26, 0x01	; 1
    31f4:	8c 91       	ld	r24, X
    31f6:	6b 81       	ldd	r22, Y+3	; 0x03
    31f8:	7c 81       	ldd	r23, Y+4	; 0x04
    31fa:	a5 01       	movw	r20, r10
    31fc:	94 01       	movw	r18, r8
    31fe:	01 e0       	ldi	r16, 0x01	; 1
    3200:	0e 94 3b 02 	call	0x476	; 0x476 <disk_read>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->fsize &&
    3204:	88 23       	and	r24, r24
    3206:	31 f0       	breq	.+12     	; 0x3214 <f_write+0x304>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
    3208:	f7 01       	movw	r30, r14
    320a:	84 81       	ldd	r24, Z+4	; 0x04
    320c:	80 68       	ori	r24, 0x80	; 128
    320e:	84 83       	std	Z+4, r24	; 0x04
    3210:	11 e0       	ldi	r17, 0x01	; 1
    3212:	69 c0       	rjmp	.+210    	; 0x32e6 <f_write+0x3d6>
			}
#endif
			fp->dsect = sect;
    3214:	d7 01       	movw	r26, r14
    3216:	56 96       	adiw	r26, 0x16	; 22
    3218:	8d 92       	st	X+, r8
    321a:	9d 92       	st	X+, r9
    321c:	ad 92       	st	X+, r10
    321e:	bc 92       	st	X, r11
    3220:	59 97       	sbiw	r26, 0x19	; 25
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    3222:	f7 01       	movw	r30, r14
    3224:	46 81       	ldd	r20, Z+6	; 0x06
    3226:	57 81       	ldd	r21, Z+7	; 0x07
    3228:	60 85       	ldd	r22, Z+8	; 0x08
    322a:	71 85       	ldd	r23, Z+9	; 0x09
    322c:	ca 01       	movw	r24, r20
    322e:	91 70       	andi	r25, 0x01	; 1
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	32 e0       	ldi	r19, 0x02	; 2
    3234:	28 1b       	sub	r18, r24
    3236:	39 0b       	sbc	r19, r25
    3238:	36 01       	movw	r6, r12
    323a:	2c 15       	cp	r18, r12
    323c:	3d 05       	cpc	r19, r13
    323e:	08 f4       	brcc	.+2      	; 0x3242 <f_write+0x332>
    3240:	39 01       	movw	r6, r18
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    3242:	ca 01       	movw	r24, r20
    3244:	91 70       	andi	r25, 0x01	; 1
    3246:	80 96       	adiw	r24, 0x20	; 32
    3248:	8e 0d       	add	r24, r14
    324a:	9f 1d       	adc	r25, r15
    324c:	69 81       	ldd	r22, Y+1	; 0x01
    324e:	7a 81       	ldd	r23, Y+2	; 0x02
    3250:	a3 01       	movw	r20, r6
    3252:	0e 94 14 05 	call	0xa28	; 0xa28 <mem_cpy>
		fp->flag |= FA__DIRTY;
    3256:	d7 01       	movw	r26, r14
    3258:	14 96       	adiw	r26, 0x04	; 4
    325a:	8c 91       	ld	r24, X
    325c:	14 97       	sbiw	r26, 0x04	; 4
    325e:	80 64       	ori	r24, 0x40	; 64
    3260:	14 96       	adiw	r26, 0x04	; 4
    3262:	8c 93       	st	X, r24
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    3264:	e9 81       	ldd	r30, Y+1	; 0x01
    3266:	fa 81       	ldd	r31, Y+2	; 0x02
    3268:	e6 0d       	add	r30, r6
    326a:	f7 1d       	adc	r31, r7
    326c:	fa 83       	std	Y+2, r31	; 0x02
    326e:	e9 83       	std	Y+1, r30	; 0x01
    3270:	a3 01       	movw	r20, r6
    3272:	60 e0       	ldi	r22, 0x00	; 0
    3274:	70 e0       	ldi	r23, 0x00	; 0
    3276:	f7 01       	movw	r30, r14
    3278:	86 81       	ldd	r24, Z+6	; 0x06
    327a:	97 81       	ldd	r25, Z+7	; 0x07
    327c:	a0 85       	ldd	r26, Z+8	; 0x08
    327e:	b1 85       	ldd	r27, Z+9	; 0x09
    3280:	84 0f       	add	r24, r20
    3282:	95 1f       	adc	r25, r21
    3284:	a6 1f       	adc	r26, r22
    3286:	b7 1f       	adc	r27, r23
    3288:	86 83       	std	Z+6, r24	; 0x06
    328a:	97 83       	std	Z+7, r25	; 0x07
    328c:	a0 87       	std	Z+8, r26	; 0x08
    328e:	b1 87       	std	Z+9, r27	; 0x09
    3290:	d2 01       	movw	r26, r4
    3292:	8d 91       	ld	r24, X+
    3294:	9c 91       	ld	r25, X
    3296:	11 97       	sbiw	r26, 0x01	; 1
    3298:	86 0d       	add	r24, r6
    329a:	97 1d       	adc	r25, r7
    329c:	11 96       	adiw	r26, 0x01	; 1
    329e:	9c 93       	st	X, r25
    32a0:	8e 93       	st	-X, r24
    32a2:	c6 18       	sub	r12, r6
    32a4:	d7 08       	sbc	r13, r7
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    32a6:	09 f0       	breq	.+2      	; 0x32aa <f_write+0x39a>
    32a8:	7b ce       	rjmp	.-778    	; 0x2fa0 <f_write+0x90>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    32aa:	f7 01       	movw	r30, r14
    32ac:	86 81       	ldd	r24, Z+6	; 0x06
    32ae:	97 81       	ldd	r25, Z+7	; 0x07
    32b0:	a0 85       	ldd	r26, Z+8	; 0x08
    32b2:	b1 85       	ldd	r27, Z+9	; 0x09
    32b4:	42 85       	ldd	r20, Z+10	; 0x0a
    32b6:	53 85       	ldd	r21, Z+11	; 0x0b
    32b8:	64 85       	ldd	r22, Z+12	; 0x0c
    32ba:	75 85       	ldd	r23, Z+13	; 0x0d
    32bc:	48 17       	cp	r20, r24
    32be:	59 07       	cpc	r21, r25
    32c0:	6a 07       	cpc	r22, r26
    32c2:	7b 07       	cpc	r23, r27
    32c4:	20 f4       	brcc	.+8      	; 0x32ce <f_write+0x3be>
    32c6:	82 87       	std	Z+10, r24	; 0x0a
    32c8:	93 87       	std	Z+11, r25	; 0x0b
    32ca:	a4 87       	std	Z+12, r26	; 0x0c
    32cc:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    32ce:	d7 01       	movw	r26, r14
    32d0:	14 96       	adiw	r26, 0x04	; 4
    32d2:	8c 91       	ld	r24, X
    32d4:	14 97       	sbiw	r26, 0x04	; 4
    32d6:	80 62       	ori	r24, 0x20	; 32
    32d8:	14 96       	adiw	r26, 0x04	; 4
    32da:	8c 93       	st	X, r24
    32dc:	14 97       	sbiw	r26, 0x04	; 4

	LEAVE_FF(fp->fs, FR_OK);
    32de:	03 c0       	rjmp	.+6      	; 0x32e6 <f_write+0x3d6>
	*bw = 0;	/* Clear write byte counter */

	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)				/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    32e0:	12 e0       	ldi	r17, 0x02	; 2
    32e2:	01 c0       	rjmp	.+2      	; 0x32e6 <f_write+0x3d6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    32e4:	17 e0       	ldi	r17, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    32e6:	81 2f       	mov	r24, r17
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	df 91       	pop	r29
    32f4:	cf 91       	pop	r28
    32f6:	1f 91       	pop	r17
    32f8:	0f 91       	pop	r16
    32fa:	ff 90       	pop	r15
    32fc:	ef 90       	pop	r14
    32fe:	df 90       	pop	r13
    3300:	cf 90       	pop	r12
    3302:	bf 90       	pop	r11
    3304:	af 90       	pop	r10
    3306:	9f 90       	pop	r9
    3308:	8f 90       	pop	r8
    330a:	7f 90       	pop	r7
    330c:	6f 90       	pop	r6
    330e:	5f 90       	pop	r5
    3310:	4f 90       	pop	r4
    3312:	3f 90       	pop	r3
    3314:	2f 90       	pop	r2
    3316:	08 95       	ret

00003318 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    3318:	0f 93       	push	r16
    331a:	1f 93       	push	r17
    331c:	cf 93       	push	r28
    331e:	df 93       	push	r29
    3320:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    3322:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <validate>
	if (res == FR_OK) {
    3326:	88 23       	and	r24, r24
    3328:	09 f0       	breq	.+2      	; 0x332c <f_sync+0x14>
    332a:	4c c0       	rjmp	.+152    	; 0x33c4 <f_sync+0xac>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    332c:	9c 81       	ldd	r25, Y+4	; 0x04
    332e:	95 ff       	sbrs	r25, 5
    3330:	49 c0       	rjmp	.+146    	; 0x33c4 <f_sync+0xac>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
    3332:	96 ff       	sbrs	r25, 6
    3334:	12 c0       	rjmp	.+36     	; 0x335a <f_sync+0x42>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    3336:	e8 81       	ld	r30, Y
    3338:	f9 81       	ldd	r31, Y+1	; 0x01
    333a:	be 01       	movw	r22, r28
    333c:	60 5e       	subi	r22, 0xE0	; 224
    333e:	7f 4f       	sbci	r23, 0xFF	; 255
    3340:	2e 89       	ldd	r18, Y+22	; 0x16
    3342:	3f 89       	ldd	r19, Y+23	; 0x17
    3344:	48 8d       	ldd	r20, Y+24	; 0x18
    3346:	59 8d       	ldd	r21, Y+25	; 0x19
    3348:	81 81       	ldd	r24, Z+1	; 0x01
    334a:	01 e0       	ldi	r16, 0x01	; 1
    334c:	0e 94 91 02 	call	0x522	; 0x522 <disk_write>
    3350:	88 23       	and	r24, r24
    3352:	b9 f5       	brne	.+110    	; 0x33c2 <f_sync+0xaa>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
    3354:	8c 81       	ldd	r24, Y+4	; 0x04
    3356:	8f 7b       	andi	r24, 0xBF	; 191
    3358:	8c 83       	std	Y+4, r24	; 0x04
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    335a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    335c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    335e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3360:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3362:	88 81       	ld	r24, Y
    3364:	99 81       	ldd	r25, Y+1	; 0x01
    3366:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
			if (res == FR_OK) {
    336a:	88 23       	and	r24, r24
    336c:	59 f5       	brne	.+86     	; 0x33c4 <f_sync+0xac>
				dir = fp->dir_ptr;
    336e:	0e 8d       	ldd	r16, Y+30	; 0x1e
    3370:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    3372:	f8 01       	movw	r30, r16
    3374:	83 85       	ldd	r24, Z+11	; 0x0b
    3376:	80 62       	ori	r24, 0x20	; 32
    3378:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    337a:	8a 85       	ldd	r24, Y+10	; 0x0a
    337c:	84 8f       	std	Z+28, r24	; 0x1c
    337e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3380:	85 8f       	std	Z+29, r24	; 0x1d
    3382:	8c 85       	ldd	r24, Y+12	; 0x0c
    3384:	86 8f       	std	Z+30, r24	; 0x1e
    3386:	8d 85       	ldd	r24, Y+13	; 0x0d
    3388:	87 8f       	std	Z+31, r24	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    338a:	4e 85       	ldd	r20, Y+14	; 0x0e
    338c:	5f 85       	ldd	r21, Y+15	; 0x0f
    338e:	68 89       	ldd	r22, Y+16	; 0x10
    3390:	79 89       	ldd	r23, Y+17	; 0x11
    3392:	c8 01       	movw	r24, r16
    3394:	0e 94 50 05 	call	0xaa0	; 0xaa0 <st_clust>
				tim = get_fattime();						/* Update updated time */
    3398:	0e 94 2b 0c 	call	0x1856	; 0x1856 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    339c:	f8 01       	movw	r30, r16
    339e:	66 8b       	std	Z+22, r22	; 0x16
    33a0:	77 8b       	std	Z+23, r23	; 0x17
    33a2:	80 8f       	std	Z+24, r24	; 0x18
    33a4:	91 8f       	std	Z+25, r25	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    33a6:	12 8a       	std	Z+18, r1	; 0x12
    33a8:	13 8a       	std	Z+19, r1	; 0x13
				fp->flag &= ~FA__WRITTEN;
    33aa:	8c 81       	ldd	r24, Y+4	; 0x04
    33ac:	8f 7d       	andi	r24, 0xDF	; 223
    33ae:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    33b0:	e8 81       	ld	r30, Y
    33b2:	f9 81       	ldd	r31, Y+1	; 0x01
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    33b8:	88 81       	ld	r24, Y
    33ba:	99 81       	ldd	r25, Y+1	; 0x01
    33bc:	0e 94 9f 0b 	call	0x173e	; 0x173e <sync>
    33c0:	01 c0       	rjmp	.+2      	; 0x33c4 <f_sync+0xac>
	if (res == FR_OK) {
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					LEAVE_FF(fp->fs, FR_DISK_ERR);
    33c2:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    33c4:	df 91       	pop	r29
    33c6:	cf 91       	pop	r28
    33c8:	1f 91       	pop	r17
    33ca:	0f 91       	pop	r16
    33cc:	08 95       	ret

000033ce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	ec 01       	movw	r28, r24
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
		LEAVE_FF(fs, res);
	}
#else
	res = f_sync(fp);		/* Flush cached data */
    33d4:	0e 94 8c 19 	call	0x3318	; 0x3318 <f_sync>
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    33d8:	88 23       	and	r24, r24
    33da:	11 f4       	brne	.+4      	; 0x33e0 <f_close+0x12>
    33dc:	19 82       	std	Y+1, r1	; 0x01
    33de:	18 82       	st	Y, r1
	return res;
#endif
}
    33e0:	df 91       	pop	r29
    33e2:	cf 91       	pop	r28
    33e4:	08 95       	ret

000033e6 <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
    33e6:	88 23       	and	r24, r24
    33e8:	19 f4       	brne	.+6      	; 0x33f0 <f_chdrive+0xa>

	CurrVol = drv;
    33ea:	10 92 a5 01 	sts	0x01A5, r1

	return FR_OK;
    33ee:	08 95       	ret

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
    33f0:	8b e0       	ldi	r24, 0x0B	; 11

	CurrVol = drv;

	return FR_OK;
}
    33f2:	08 95       	ret

000033f4 <f_chdir>:


FRESULT f_chdir (
	const TCHAR *path	/* Pointer to the directory path */
)
{
    33f4:	ef 92       	push	r14
    33f6:	ff 92       	push	r15
    33f8:	1f 93       	push	r17
    33fa:	cf 93       	push	r28
    33fc:	df 93       	push	r29
    33fe:	cd b7       	in	r28, 0x3d	; 61
    3400:	de b7       	in	r29, 0x3e	; 62
    3402:	a4 97       	sbiw	r28, 0x24	; 36
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61
    340e:	9c a3       	lds	r25, 0x5c
    3410:	8b a3       	lds	r24, 0x5b
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    3412:	ce 01       	movw	r24, r28
    3414:	83 96       	adiw	r24, 0x23	; 35
    3416:	be 01       	movw	r22, r28
    3418:	6f 5f       	subi	r22, 0xFF	; 255
    341a:	7f 4f       	sbci	r23, 0xFF	; 255
    341c:	40 e0       	ldi	r20, 0x00	; 0
    341e:	0e 94 a8 06 	call	0xd50	; 0xd50 <chk_mounted>
    3422:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3424:	88 23       	and	r24, r24
    3426:	81 f5       	brne	.+96     	; 0x3488 <f_chdir+0x94>
		INIT_BUF(dj);
    3428:	ce 01       	movw	r24, r28
    342a:	47 96       	adiw	r24, 0x17	; 23
    342c:	9e 8b       	std	Y+22, r25	; 0x16
    342e:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the path */
    3430:	6b a1       	lds	r22, 0x4b
    3432:	7c a1       	lds	r23, 0x4c
    3434:	ce 01       	movw	r24, r28
    3436:	01 96       	adiw	r24, 0x01	; 1
    3438:	0e 94 ac 11 	call	0x2358	; 0x2358 <follow_path>
    343c:	18 2f       	mov	r17, r24
		FREE_BUF();
		if (res == FR_OK) {					/* Follow completed */
    343e:	88 23       	and	r24, r24
    3440:	01 f5       	brne	.+64     	; 0x3482 <f_chdir+0x8e>
			if (!dj.dir) {
    3442:	eb 89       	ldd	r30, Y+19	; 0x13
    3444:	fc 89       	ldd	r31, Y+20	; 0x14
    3446:	30 97       	sbiw	r30, 0x00	; 0
    3448:	59 f4       	brne	.+22     	; 0x3460 <f_chdir+0x6c>
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
    344a:	e9 81       	ldd	r30, Y+1	; 0x01
    344c:	fa 81       	ldd	r31, Y+2	; 0x02
    344e:	8f 81       	ldd	r24, Y+7	; 0x07
    3450:	98 85       	ldd	r25, Y+8	; 0x08
    3452:	a9 85       	ldd	r26, Y+9	; 0x09
    3454:	ba 85       	ldd	r27, Y+10	; 0x0a
    3456:	86 8b       	std	Z+22, r24	; 0x16
    3458:	97 8b       	std	Z+23, r25	; 0x17
    345a:	a0 8f       	std	Z+24, r26	; 0x18
    345c:	b1 8f       	std	Z+25, r27	; 0x19
    345e:	14 c0       	rjmp	.+40     	; 0x3488 <f_chdir+0x94>
			} else {
				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
    3460:	83 85       	ldd	r24, Z+11	; 0x0b
    3462:	84 ff       	sbrs	r24, 4
    3464:	1e c0       	rjmp	.+60     	; 0x34a2 <f_chdir+0xae>
					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
    3466:	e9 80       	ldd	r14, Y+1	; 0x01
    3468:	fa 80       	ldd	r15, Y+2	; 0x02
    346a:	c7 01       	movw	r24, r14
    346c:	bf 01       	movw	r22, r30
    346e:	0e 94 2b 05 	call	0xa56	; 0xa56 <ld_clust>
    3472:	dc 01       	movw	r26, r24
    3474:	cb 01       	movw	r24, r22
    3476:	f7 01       	movw	r30, r14
    3478:	86 8b       	std	Z+22, r24	; 0x16
    347a:	97 8b       	std	Z+23, r25	; 0x17
    347c:	a0 8f       	std	Z+24, r26	; 0x18
    347e:	b1 8f       	std	Z+25, r27	; 0x19
    3480:	03 c0       	rjmp	.+6      	; 0x3488 <f_chdir+0x94>
				else
					res = FR_NO_PATH;		/* Reached but a file */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3482:	84 30       	cpi	r24, 0x04	; 4
    3484:	09 f4       	brne	.+2      	; 0x3488 <f_chdir+0x94>
    3486:	15 e0       	ldi	r17, 0x05	; 5
	}

	LEAVE_FF(dj.fs, res);
}
    3488:	81 2f       	mov	r24, r17
    348a:	a4 96       	adiw	r28, 0x24	; 36
    348c:	0f b6       	in	r0, 0x3f	; 63
    348e:	f8 94       	cli
    3490:	de bf       	out	0x3e, r29	; 62
    3492:	0f be       	out	0x3f, r0	; 63
    3494:	cd bf       	out	0x3d, r28	; 61
    3496:	df 91       	pop	r29
    3498:	cf 91       	pop	r28
    349a:	1f 91       	pop	r17
    349c:	ff 90       	pop	r15
    349e:	ef 90       	pop	r14
    34a0:	08 95       	ret
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
			} else {
				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
				else
					res = FR_NO_PATH;		/* Reached but a file */
    34a2:	15 e0       	ldi	r17, 0x05	; 5
    34a4:	f1 cf       	rjmp	.-30     	; 0x3488 <f_chdir+0x94>

000034a6 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    34a6:	2f 92       	push	r2
    34a8:	3f 92       	push	r3
    34aa:	4f 92       	push	r4
    34ac:	5f 92       	push	r5
    34ae:	6f 92       	push	r6
    34b0:	7f 92       	push	r7
    34b2:	8f 92       	push	r8
    34b4:	9f 92       	push	r9
    34b6:	af 92       	push	r10
    34b8:	bf 92       	push	r11
    34ba:	cf 92       	push	r12
    34bc:	df 92       	push	r13
    34be:	ef 92       	push	r14
    34c0:	ff 92       	push	r15
    34c2:	0f 93       	push	r16
    34c4:	1f 93       	push	r17
    34c6:	cf 93       	push	r28
    34c8:	df 93       	push	r29
    34ca:	00 d0       	rcall	.+0      	; 0x34cc <f_lseek+0x26>
    34cc:	00 d0       	rcall	.+0      	; 0x34ce <f_lseek+0x28>
    34ce:	00 d0       	rcall	.+0      	; 0x34d0 <f_lseek+0x2a>
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
    34d4:	9e 83       	std	Y+6, r25	; 0x06
    34d6:	8d 83       	std	Y+5, r24	; 0x05
    34d8:	6a 01       	movw	r12, r20
    34da:	7b 01       	movw	r14, r22
	FRESULT res;


	res = validate(fp);					/* Check validity of the object */
    34dc:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <validate>
    34e0:	18 2f       	mov	r17, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    34e2:	88 23       	and	r24, r24
    34e4:	09 f0       	breq	.+2      	; 0x34e8 <f_lseek+0x42>
    34e6:	e6 c1       	rjmp	.+972    	; 0x38b4 <f_lseek+0x40e>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    34e8:	ad 81       	ldd	r26, Y+5	; 0x05
    34ea:	be 81       	ldd	r27, Y+6	; 0x06
    34ec:	14 96       	adiw	r26, 0x04	; 4
    34ee:	2c 91       	ld	r18, X
    34f0:	14 97       	sbiw	r26, 0x04	; 4
    34f2:	22 23       	and	r18, r18
    34f4:	0c f4       	brge	.+2      	; 0x34f8 <f_lseek+0x52>
    34f6:	dd c1       	rjmp	.+954    	; 0x38b2 <f_lseek+0x40c>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    34f8:	1a 96       	adiw	r26, 0x0a	; 10
    34fa:	8d 91       	ld	r24, X+
    34fc:	9d 91       	ld	r25, X+
    34fe:	0d 90       	ld	r0, X+
    3500:	bc 91       	ld	r27, X
    3502:	a0 2d       	mov	r26, r0
    3504:	8c 15       	cp	r24, r12
    3506:	9d 05       	cpc	r25, r13
    3508:	ae 05       	cpc	r26, r14
    350a:	bf 05       	cpc	r27, r15
    350c:	20 f4       	brcc	.+8      	; 0x3516 <f_lseek+0x70>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    350e:	21 fd       	sbrc	r18, 1
    3510:	02 c0       	rjmp	.+4      	; 0x3516 <f_lseek+0x70>
#endif
			) ofs = fp->fsize;
    3512:	6c 01       	movw	r12, r24
    3514:	7d 01       	movw	r14, r26

		ifptr = fp->fptr;
    3516:	ed 81       	ldd	r30, Y+5	; 0x05
    3518:	fe 81       	ldd	r31, Y+6	; 0x06
    351a:	46 81       	ldd	r20, Z+6	; 0x06
    351c:	57 81       	ldd	r21, Z+7	; 0x07
    351e:	60 85       	ldd	r22, Z+8	; 0x08
    3520:	71 85       	ldd	r23, Z+9	; 0x09
		fp->fptr = nsect = 0;
    3522:	16 82       	std	Z+6, r1	; 0x06
    3524:	17 82       	std	Z+7, r1	; 0x07
    3526:	10 86       	std	Z+8, r1	; 0x08
    3528:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    352a:	c1 14       	cp	r12, r1
    352c:	d1 04       	cpc	r13, r1
    352e:	e1 04       	cpc	r14, r1
    3530:	f1 04       	cpc	r15, r1
    3532:	09 f4       	brne	.+2      	; 0x3536 <f_lseek+0x90>
    3534:	bf c1       	rjmp	.+894    	; 0x38b4 <f_lseek+0x40e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    3536:	20 80       	ld	r2, Z
    3538:	31 80       	ldd	r3, Z+1	; 0x01
    353a:	f1 01       	movw	r30, r2
    353c:	82 81       	ldd	r24, Z+2	; 0x02
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	a0 e0       	ldi	r26, 0x00	; 0
    3542:	b0 e0       	ldi	r27, 0x00	; 0
    3544:	4c 01       	movw	r8, r24
    3546:	5d 01       	movw	r10, r26
    3548:	07 2e       	mov	r0, r23
    354a:	79 e0       	ldi	r23, 0x09	; 9
    354c:	88 0c       	add	r8, r8
    354e:	99 1c       	adc	r9, r9
    3550:	aa 1c       	adc	r10, r10
    3552:	bb 1c       	adc	r11, r11
    3554:	7a 95       	dec	r23
    3556:	d1 f7       	brne	.-12     	; 0x354c <f_lseek+0xa6>
    3558:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    355a:	41 15       	cp	r20, r1
    355c:	51 05       	cpc	r21, r1
    355e:	61 05       	cpc	r22, r1
    3560:	71 05       	cpc	r23, r1
    3562:	f1 f1       	breq	.+124    	; 0x35e0 <f_lseek+0x13a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    3564:	2a 01       	movw	r4, r20
    3566:	3b 01       	movw	r6, r22
    3568:	08 94       	sec
    356a:	41 08       	sbc	r4, r1
    356c:	51 08       	sbc	r5, r1
    356e:	61 08       	sbc	r6, r1
    3570:	71 08       	sbc	r7, r1
    3572:	c7 01       	movw	r24, r14
    3574:	b6 01       	movw	r22, r12
    3576:	61 50       	subi	r22, 0x01	; 1
    3578:	70 40       	sbci	r23, 0x00	; 0
    357a:	80 40       	sbci	r24, 0x00	; 0
    357c:	90 40       	sbci	r25, 0x00	; 0
    357e:	a5 01       	movw	r20, r10
    3580:	94 01       	movw	r18, r8
    3582:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <__udivmodsi4>
    3586:	29 83       	std	Y+1, r18	; 0x01
    3588:	3a 83       	std	Y+2, r19	; 0x02
    358a:	4b 83       	std	Y+3, r20	; 0x03
    358c:	5c 83       	std	Y+4, r21	; 0x04
    358e:	c3 01       	movw	r24, r6
    3590:	b2 01       	movw	r22, r4
    3592:	a5 01       	movw	r20, r10
    3594:	94 01       	movw	r18, r8
    3596:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    359a:	89 81       	ldd	r24, Y+1	; 0x01
    359c:	9a 81       	ldd	r25, Y+2	; 0x02
    359e:	ab 81       	ldd	r26, Y+3	; 0x03
    35a0:	bc 81       	ldd	r27, Y+4	; 0x04
    35a2:	82 17       	cp	r24, r18
    35a4:	93 07       	cpc	r25, r19
    35a6:	a4 07       	cpc	r26, r20
    35a8:	b5 07       	cpc	r27, r21
    35aa:	d0 f0       	brcs	.+52     	; 0x35e0 <f_lseek+0x13a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    35ac:	88 27       	eor	r24, r24
    35ae:	99 27       	eor	r25, r25
    35b0:	dc 01       	movw	r26, r24
    35b2:	88 19       	sub	r24, r8
    35b4:	99 09       	sbc	r25, r9
    35b6:	aa 09       	sbc	r26, r10
    35b8:	bb 09       	sbc	r27, r11
    35ba:	84 21       	and	r24, r4
    35bc:	95 21       	and	r25, r5
    35be:	a6 21       	and	r26, r6
    35c0:	b7 21       	and	r27, r7
    35c2:	ed 81       	ldd	r30, Y+5	; 0x05
    35c4:	fe 81       	ldd	r31, Y+6	; 0x06
    35c6:	86 83       	std	Z+6, r24	; 0x06
    35c8:	97 83       	std	Z+7, r25	; 0x07
    35ca:	a0 87       	std	Z+8, r26	; 0x08
    35cc:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    35ce:	c8 1a       	sub	r12, r24
    35d0:	d9 0a       	sbc	r13, r25
    35d2:	ea 0a       	sbc	r14, r26
    35d4:	fb 0a       	sbc	r15, r27
				clst = fp->clust;
    35d6:	42 89       	ldd	r20, Z+18	; 0x12
    35d8:	53 89       	ldd	r21, Z+19	; 0x13
    35da:	64 89       	ldd	r22, Z+20	; 0x14
    35dc:	75 89       	ldd	r23, Z+21	; 0x15
    35de:	42 c0       	rjmp	.+132    	; 0x3664 <f_lseek+0x1be>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    35e0:	ad 81       	ldd	r26, Y+5	; 0x05
    35e2:	be 81       	ldd	r27, Y+6	; 0x06
    35e4:	1e 96       	adiw	r26, 0x0e	; 14
    35e6:	4d 91       	ld	r20, X+
    35e8:	5d 91       	ld	r21, X+
    35ea:	6d 91       	ld	r22, X+
    35ec:	7c 91       	ld	r23, X
    35ee:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    35f0:	41 15       	cp	r20, r1
    35f2:	51 05       	cpc	r21, r1
    35f4:	61 05       	cpc	r22, r1
    35f6:	71 05       	cpc	r23, r1
    35f8:	69 f5       	brne	.+90     	; 0x3654 <f_lseek+0x1ae>
					clst = create_chain(fp->fs, 0);
    35fa:	c1 01       	movw	r24, r2
    35fc:	40 e0       	ldi	r20, 0x00	; 0
    35fe:	50 e0       	ldi	r21, 0x00	; 0
    3600:	ba 01       	movw	r22, r20
    3602:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <create_chain>
    3606:	ab 01       	movw	r20, r22
    3608:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    360a:	41 30       	cpi	r20, 0x01	; 1
    360c:	51 05       	cpc	r21, r1
    360e:	61 05       	cpc	r22, r1
    3610:	71 05       	cpc	r23, r1
    3612:	39 f4       	brne	.+14     	; 0x3622 <f_lseek+0x17c>
    3614:	ed 81       	ldd	r30, Y+5	; 0x05
    3616:	fe 81       	ldd	r31, Y+6	; 0x06
    3618:	84 81       	ldd	r24, Z+4	; 0x04
    361a:	80 68       	ori	r24, 0x80	; 128
    361c:	84 83       	std	Z+4, r24	; 0x04
    361e:	12 e0       	ldi	r17, 0x02	; 2
    3620:	49 c1       	rjmp	.+658    	; 0x38b4 <f_lseek+0x40e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3622:	4f 3f       	cpi	r20, 0xFF	; 255
    3624:	ff ef       	ldi	r31, 0xFF	; 255
    3626:	5f 07       	cpc	r21, r31
    3628:	ff ef       	ldi	r31, 0xFF	; 255
    362a:	6f 07       	cpc	r22, r31
    362c:	ff ef       	ldi	r31, 0xFF	; 255
    362e:	7f 07       	cpc	r23, r31
    3630:	59 f4       	brne	.+22     	; 0x3648 <f_lseek+0x1a2>
    3632:	ad 81       	ldd	r26, Y+5	; 0x05
    3634:	be 81       	ldd	r27, Y+6	; 0x06
    3636:	14 96       	adiw	r26, 0x04	; 4
    3638:	8c 91       	ld	r24, X
    363a:	14 97       	sbiw	r26, 0x04	; 4
    363c:	80 68       	ori	r24, 0x80	; 128
    363e:	14 96       	adiw	r26, 0x04	; 4
    3640:	8c 93       	st	X, r24
    3642:	14 97       	sbiw	r26, 0x04	; 4
    3644:	11 e0       	ldi	r17, 0x01	; 1
    3646:	36 c1       	rjmp	.+620    	; 0x38b4 <f_lseek+0x40e>
					fp->sclust = clst;
    3648:	ed 81       	ldd	r30, Y+5	; 0x05
    364a:	fe 81       	ldd	r31, Y+6	; 0x06
    364c:	46 87       	std	Z+14, r20	; 0x0e
    364e:	57 87       	std	Z+15, r21	; 0x0f
    3650:	60 8b       	std	Z+16, r22	; 0x10
    3652:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->clust = clst;
    3654:	ad 81       	ldd	r26, Y+5	; 0x05
    3656:	be 81       	ldd	r27, Y+6	; 0x06
    3658:	52 96       	adiw	r26, 0x12	; 18
    365a:	4d 93       	st	X+, r20
    365c:	5d 93       	st	X+, r21
    365e:	6d 93       	st	X+, r22
    3660:	7c 93       	st	X, r23
    3662:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    3664:	41 15       	cp	r20, r1
    3666:	51 05       	cpc	r21, r1
    3668:	61 05       	cpc	r22, r1
    366a:	71 05       	cpc	r23, r1
    366c:	09 f4       	brne	.+2      	; 0x3670 <f_lseek+0x1ca>
    366e:	aa c0       	rjmp	.+340    	; 0x37c4 <f_lseek+0x31e>
				while (ofs > bcs) {						/* Cluster following loop */
    3670:	8c 14       	cp	r8, r12
    3672:	9d 04       	cpc	r9, r13
    3674:	ae 04       	cpc	r10, r14
    3676:	bf 04       	cpc	r11, r15
    3678:	08 f0       	brcs	.+2      	; 0x367c <f_lseek+0x1d6>
    367a:	68 c0       	rjmp	.+208    	; 0x374c <f_lseek+0x2a6>
    367c:	4d 80       	ldd	r4, Y+5	; 0x05
    367e:	5e 80       	ldd	r5, Y+6	; 0x06
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    3680:	f2 01       	movw	r30, r4
    3682:	84 81       	ldd	r24, Z+4	; 0x04
    3684:	81 ff       	sbrs	r24, 1
    3686:	0c c0       	rjmp	.+24     	; 0x36a0 <f_lseek+0x1fa>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    3688:	80 81       	ld	r24, Z
    368a:	91 81       	ldd	r25, Z+1	; 0x01
    368c:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <create_chain>
    3690:	ab 01       	movw	r20, r22
    3692:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    3694:	41 15       	cp	r20, r1
    3696:	51 05       	cpc	r21, r1
    3698:	61 05       	cpc	r22, r1
    369a:	71 05       	cpc	r23, r1
    369c:	39 f4       	brne	.+14     	; 0x36ac <f_lseek+0x206>
    369e:	52 c0       	rjmp	.+164    	; 0x3744 <f_lseek+0x29e>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    36a0:	80 81       	ld	r24, Z
    36a2:	91 81       	ldd	r25, Z+1	; 0x01
    36a4:	0e 94 65 0c 	call	0x18ca	; 0x18ca <get_fat>
    36a8:	ab 01       	movw	r20, r22
    36aa:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    36ac:	4f 3f       	cpi	r20, 0xFF	; 255
    36ae:	bf ef       	ldi	r27, 0xFF	; 255
    36b0:	5b 07       	cpc	r21, r27
    36b2:	bf ef       	ldi	r27, 0xFF	; 255
    36b4:	6b 07       	cpc	r22, r27
    36b6:	bf ef       	ldi	r27, 0xFF	; 255
    36b8:	7b 07       	cpc	r23, r27
    36ba:	41 f4       	brne	.+16     	; 0x36cc <f_lseek+0x226>
    36bc:	5e 82       	std	Y+6, r5	; 0x06
    36be:	4d 82       	std	Y+5, r4	; 0x05
    36c0:	f2 01       	movw	r30, r4
    36c2:	84 81       	ldd	r24, Z+4	; 0x04
    36c4:	80 68       	ori	r24, 0x80	; 128
    36c6:	84 83       	std	Z+4, r24	; 0x04
    36c8:	11 e0       	ldi	r17, 0x01	; 1
    36ca:	f4 c0       	rjmp	.+488    	; 0x38b4 <f_lseek+0x40e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    36cc:	42 30       	cpi	r20, 0x02	; 2
    36ce:	51 05       	cpc	r21, r1
    36d0:	61 05       	cpc	r22, r1
    36d2:	71 05       	cpc	r23, r1
    36d4:	60 f0       	brcs	.+24     	; 0x36ee <f_lseek+0x248>
    36d6:	d2 01       	movw	r26, r4
    36d8:	ed 91       	ld	r30, X+
    36da:	fc 91       	ld	r31, X
    36dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    36de:	93 8d       	ldd	r25, Z+27	; 0x1b
    36e0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    36e2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    36e4:	48 17       	cp	r20, r24
    36e6:	59 07       	cpc	r21, r25
    36e8:	6a 07       	cpc	r22, r26
    36ea:	7b 07       	cpc	r23, r27
    36ec:	40 f0       	brcs	.+16     	; 0x36fe <f_lseek+0x258>
    36ee:	5e 82       	std	Y+6, r5	; 0x06
    36f0:	4d 82       	std	Y+5, r4	; 0x05
    36f2:	f2 01       	movw	r30, r4
    36f4:	84 81       	ldd	r24, Z+4	; 0x04
    36f6:	80 68       	ori	r24, 0x80	; 128
    36f8:	84 83       	std	Z+4, r24	; 0x04
    36fa:	12 e0       	ldi	r17, 0x02	; 2
    36fc:	db c0       	rjmp	.+438    	; 0x38b4 <f_lseek+0x40e>
					fp->clust = clst;
    36fe:	d2 01       	movw	r26, r4
    3700:	52 96       	adiw	r26, 0x12	; 18
    3702:	4d 93       	st	X+, r20
    3704:	5d 93       	st	X+, r21
    3706:	6d 93       	st	X+, r22
    3708:	7c 93       	st	X, r23
    370a:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    370c:	16 96       	adiw	r26, 0x06	; 6
    370e:	8d 91       	ld	r24, X+
    3710:	9d 91       	ld	r25, X+
    3712:	0d 90       	ld	r0, X+
    3714:	bc 91       	ld	r27, X
    3716:	a0 2d       	mov	r26, r0
    3718:	88 0d       	add	r24, r8
    371a:	99 1d       	adc	r25, r9
    371c:	aa 1d       	adc	r26, r10
    371e:	bb 1d       	adc	r27, r11
    3720:	f2 01       	movw	r30, r4
    3722:	86 83       	std	Z+6, r24	; 0x06
    3724:	97 83       	std	Z+7, r25	; 0x07
    3726:	a0 87       	std	Z+8, r26	; 0x08
    3728:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    372a:	c8 18       	sub	r12, r8
    372c:	d9 08       	sbc	r13, r9
    372e:	ea 08       	sbc	r14, r10
    3730:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    3732:	8c 14       	cp	r8, r12
    3734:	9d 04       	cpc	r9, r13
    3736:	ae 04       	cpc	r10, r14
    3738:	bf 04       	cpc	r11, r15
    373a:	08 f4       	brcc	.+2      	; 0x373e <f_lseek+0x298>
    373c:	a1 cf       	rjmp	.-190    	; 0x3680 <f_lseek+0x1da>
    373e:	5e 82       	std	Y+6, r5	; 0x06
    3740:	4d 82       	std	Y+5, r4	; 0x05
    3742:	04 c0       	rjmp	.+8      	; 0x374c <f_lseek+0x2a6>
    3744:	5e 82       	std	Y+6, r5	; 0x06
    3746:	4d 82       	std	Y+5, r4	; 0x05
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    3748:	75 01       	movw	r14, r10
    374a:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    374c:	ed 81       	ldd	r30, Y+5	; 0x05
    374e:	fe 81       	ldd	r31, Y+6	; 0x06
    3750:	86 81       	ldd	r24, Z+6	; 0x06
    3752:	97 81       	ldd	r25, Z+7	; 0x07
    3754:	a0 85       	ldd	r26, Z+8	; 0x08
    3756:	b1 85       	ldd	r27, Z+9	; 0x09
    3758:	8c 0d       	add	r24, r12
    375a:	9d 1d       	adc	r25, r13
    375c:	ae 1d       	adc	r26, r14
    375e:	bf 1d       	adc	r27, r15
    3760:	86 83       	std	Z+6, r24	; 0x06
    3762:	97 83       	std	Z+7, r25	; 0x07
    3764:	a0 87       	std	Z+8, r26	; 0x08
    3766:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    3768:	d7 01       	movw	r26, r14
    376a:	c6 01       	movw	r24, r12
    376c:	91 70       	andi	r25, 0x01	; 1
    376e:	a0 70       	andi	r26, 0x00	; 0
    3770:	b0 70       	andi	r27, 0x00	; 0
    3772:	00 97       	sbiw	r24, 0x00	; 0
    3774:	a1 05       	cpc	r26, r1
    3776:	b1 05       	cpc	r27, r1
    3778:	49 f1       	breq	.+82     	; 0x37cc <f_lseek+0x326>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    377a:	80 81       	ld	r24, Z
    377c:	91 81       	ldd	r25, Z+1	; 0x01
    377e:	0e 94 2f 0c 	call	0x185e	; 0x185e <clust2sect>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    3786:	00 97       	sbiw	r24, 0x00	; 0
    3788:	a1 05       	cpc	r26, r1
    378a:	b1 05       	cpc	r27, r1
    378c:	59 f4       	brne	.+22     	; 0x37a4 <f_lseek+0x2fe>
    378e:	ad 81       	ldd	r26, Y+5	; 0x05
    3790:	be 81       	ldd	r27, Y+6	; 0x06
    3792:	14 96       	adiw	r26, 0x04	; 4
    3794:	8c 91       	ld	r24, X
    3796:	14 97       	sbiw	r26, 0x04	; 4
    3798:	80 68       	ori	r24, 0x80	; 128
    379a:	14 96       	adiw	r26, 0x04	; 4
    379c:	8c 93       	st	X, r24
    379e:	14 97       	sbiw	r26, 0x04	; 4
    37a0:	12 e0       	ldi	r17, 0x02	; 2
    37a2:	88 c0       	rjmp	.+272    	; 0x38b4 <f_lseek+0x40e>
					nsect += ofs / SS(fp->fs);
    37a4:	46 01       	movw	r8, r12
    37a6:	57 01       	movw	r10, r14
    37a8:	07 2e       	mov	r0, r23
    37aa:	79 e0       	ldi	r23, 0x09	; 9
    37ac:	b6 94       	lsr	r11
    37ae:	a7 94       	ror	r10
    37b0:	97 94       	ror	r9
    37b2:	87 94       	ror	r8
    37b4:	7a 95       	dec	r23
    37b6:	d1 f7       	brne	.-12     	; 0x37ac <f_lseek+0x306>
    37b8:	70 2d       	mov	r23, r0
    37ba:	88 0e       	add	r8, r24
    37bc:	99 1e       	adc	r9, r25
    37be:	aa 1e       	adc	r10, r26
    37c0:	bb 1e       	adc	r11, r27
    37c2:	07 c0       	rjmp	.+14     	; 0x37d2 <f_lseek+0x32c>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    37c4:	88 24       	eor	r8, r8
    37c6:	99 24       	eor	r9, r9
    37c8:	54 01       	movw	r10, r8
    37ca:	03 c0       	rjmp	.+6      	; 0x37d2 <f_lseek+0x32c>
    37cc:	88 24       	eor	r8, r8
    37ce:	99 24       	eor	r9, r9
    37d0:	54 01       	movw	r10, r8
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    37d2:	ed 81       	ldd	r30, Y+5	; 0x05
    37d4:	fe 81       	ldd	r31, Y+6	; 0x06
    37d6:	86 81       	ldd	r24, Z+6	; 0x06
    37d8:	97 81       	ldd	r25, Z+7	; 0x07
    37da:	a0 85       	ldd	r26, Z+8	; 0x08
    37dc:	b1 85       	ldd	r27, Z+9	; 0x09
    37de:	91 70       	andi	r25, 0x01	; 1
    37e0:	a0 70       	andi	r26, 0x00	; 0
    37e2:	b0 70       	andi	r27, 0x00	; 0
    37e4:	00 97       	sbiw	r24, 0x00	; 0
    37e6:	a1 05       	cpc	r26, r1
    37e8:	b1 05       	cpc	r27, r1
    37ea:	09 f4       	brne	.+2      	; 0x37ee <f_lseek+0x348>
    37ec:	4b c0       	rjmp	.+150    	; 0x3884 <f_lseek+0x3de>
    37ee:	c6 88       	ldd	r12, Z+22	; 0x16
    37f0:	d7 88       	ldd	r13, Z+23	; 0x17
    37f2:	e0 8c       	ldd	r14, Z+24	; 0x18
    37f4:	f1 8c       	ldd	r15, Z+25	; 0x19
    37f6:	c8 14       	cp	r12, r8
    37f8:	d9 04       	cpc	r13, r9
    37fa:	ea 04       	cpc	r14, r10
    37fc:	fb 04       	cpc	r15, r11
    37fe:	09 f4       	brne	.+2      	; 0x3802 <f_lseek+0x35c>
    3800:	41 c0       	rjmp	.+130    	; 0x3884 <f_lseek+0x3de>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
    3802:	84 81       	ldd	r24, Z+4	; 0x04
    3804:	86 ff       	sbrs	r24, 6
    3806:	1f c0       	rjmp	.+62     	; 0x3846 <f_lseek+0x3a0>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    3808:	01 90       	ld	r0, Z+
    380a:	f0 81       	ld	r31, Z
    380c:	e0 2d       	mov	r30, r0
    380e:	6d 81       	ldd	r22, Y+5	; 0x05
    3810:	7e 81       	ldd	r23, Y+6	; 0x06
    3812:	60 5e       	subi	r22, 0xE0	; 224
    3814:	7f 4f       	sbci	r23, 0xFF	; 255
    3816:	81 81       	ldd	r24, Z+1	; 0x01
    3818:	a7 01       	movw	r20, r14
    381a:	96 01       	movw	r18, r12
    381c:	01 e0       	ldi	r16, 0x01	; 1
    381e:	0e 94 91 02 	call	0x522	; 0x522 <disk_write>
    3822:	88 23       	and	r24, r24
    3824:	59 f0       	breq	.+22     	; 0x383c <f_lseek+0x396>
					ABORT(fp->fs, FR_DISK_ERR);
    3826:	ad 81       	ldd	r26, Y+5	; 0x05
    3828:	be 81       	ldd	r27, Y+6	; 0x06
    382a:	14 96       	adiw	r26, 0x04	; 4
    382c:	8c 91       	ld	r24, X
    382e:	14 97       	sbiw	r26, 0x04	; 4
    3830:	80 68       	ori	r24, 0x80	; 128
    3832:	14 96       	adiw	r26, 0x04	; 4
    3834:	8c 93       	st	X, r24
    3836:	14 97       	sbiw	r26, 0x04	; 4
    3838:	11 e0       	ldi	r17, 0x01	; 1
    383a:	3c c0       	rjmp	.+120    	; 0x38b4 <f_lseek+0x40e>
				fp->flag &= ~FA__DIRTY;
    383c:	ed 81       	ldd	r30, Y+5	; 0x05
    383e:	fe 81       	ldd	r31, Y+6	; 0x06
    3840:	84 81       	ldd	r24, Z+4	; 0x04
    3842:	8f 7b       	andi	r24, 0xBF	; 191
    3844:	84 83       	std	Z+4, r24	; 0x04
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
    3846:	ad 81       	ldd	r26, Y+5	; 0x05
    3848:	be 81       	ldd	r27, Y+6	; 0x06
    384a:	ed 91       	ld	r30, X+
    384c:	fc 91       	ld	r31, X
    384e:	11 97       	sbiw	r26, 0x01	; 1
    3850:	bd 01       	movw	r22, r26
    3852:	60 5e       	subi	r22, 0xE0	; 224
    3854:	7f 4f       	sbci	r23, 0xFF	; 255
    3856:	81 81       	ldd	r24, Z+1	; 0x01
    3858:	a5 01       	movw	r20, r10
    385a:	94 01       	movw	r18, r8
    385c:	01 e0       	ldi	r16, 0x01	; 1
    385e:	0e 94 3b 02 	call	0x476	; 0x476 <disk_read>
    3862:	88 23       	and	r24, r24
    3864:	39 f0       	breq	.+14     	; 0x3874 <f_lseek+0x3ce>
				ABORT(fp->fs, FR_DISK_ERR);
    3866:	ed 81       	ldd	r30, Y+5	; 0x05
    3868:	fe 81       	ldd	r31, Y+6	; 0x06
    386a:	84 81       	ldd	r24, Z+4	; 0x04
    386c:	80 68       	ori	r24, 0x80	; 128
    386e:	84 83       	std	Z+4, r24	; 0x04
    3870:	11 e0       	ldi	r17, 0x01	; 1
    3872:	20 c0       	rjmp	.+64     	; 0x38b4 <f_lseek+0x40e>
#endif
			fp->dsect = nsect;
    3874:	ad 81       	ldd	r26, Y+5	; 0x05
    3876:	be 81       	ldd	r27, Y+6	; 0x06
    3878:	56 96       	adiw	r26, 0x16	; 22
    387a:	8d 92       	st	X+, r8
    387c:	9d 92       	st	X+, r9
    387e:	ad 92       	st	X+, r10
    3880:	bc 92       	st	X, r11
    3882:	59 97       	sbiw	r26, 0x19	; 25
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    3884:	ed 81       	ldd	r30, Y+5	; 0x05
    3886:	fe 81       	ldd	r31, Y+6	; 0x06
    3888:	86 81       	ldd	r24, Z+6	; 0x06
    388a:	97 81       	ldd	r25, Z+7	; 0x07
    388c:	a0 85       	ldd	r26, Z+8	; 0x08
    388e:	b1 85       	ldd	r27, Z+9	; 0x09
    3890:	42 85       	ldd	r20, Z+10	; 0x0a
    3892:	53 85       	ldd	r21, Z+11	; 0x0b
    3894:	64 85       	ldd	r22, Z+12	; 0x0c
    3896:	75 85       	ldd	r23, Z+13	; 0x0d
    3898:	48 17       	cp	r20, r24
    389a:	59 07       	cpc	r21, r25
    389c:	6a 07       	cpc	r22, r26
    389e:	7b 07       	cpc	r23, r27
    38a0:	48 f4       	brcc	.+18     	; 0x38b4 <f_lseek+0x40e>
			fp->fsize = fp->fptr;
    38a2:	82 87       	std	Z+10, r24	; 0x0a
    38a4:	93 87       	std	Z+11, r25	; 0x0b
    38a6:	a4 87       	std	Z+12, r26	; 0x0c
    38a8:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    38aa:	84 81       	ldd	r24, Z+4	; 0x04
    38ac:	80 62       	ori	r24, 0x20	; 32
    38ae:	84 83       	std	Z+4, r24	; 0x04
    38b0:	01 c0       	rjmp	.+2      	; 0x38b4 <f_lseek+0x40e>


	res = validate(fp);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    38b2:	12 e0       	ldi	r17, 0x02	; 2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    38b4:	81 2f       	mov	r24, r17
    38b6:	26 96       	adiw	r28, 0x06	; 6
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	f8 94       	cli
    38bc:	de bf       	out	0x3e, r29	; 62
    38be:	0f be       	out	0x3f, r0	; 63
    38c0:	cd bf       	out	0x3d, r28	; 61
    38c2:	df 91       	pop	r29
    38c4:	cf 91       	pop	r28
    38c6:	1f 91       	pop	r17
    38c8:	0f 91       	pop	r16
    38ca:	ff 90       	pop	r15
    38cc:	ef 90       	pop	r14
    38ce:	df 90       	pop	r13
    38d0:	cf 90       	pop	r12
    38d2:	bf 90       	pop	r11
    38d4:	af 90       	pop	r10
    38d6:	9f 90       	pop	r9
    38d8:	8f 90       	pop	r8
    38da:	7f 90       	pop	r7
    38dc:	6f 90       	pop	r6
    38de:	5f 90       	pop	r5
    38e0:	4f 90       	pop	r4
    38e2:	3f 90       	pop	r3
    38e4:	2f 90       	pop	r2
    38e6:	08 95       	ret

000038e8 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
    38e8:	ef 92       	push	r14
    38ea:	ff 92       	push	r15
    38ec:	0f 93       	push	r16
    38ee:	1f 93       	push	r17
    38f0:	cf 93       	push	r28
    38f2:	df 93       	push	r29
    38f4:	cd b7       	in	r28, 0x3d	; 61
    38f6:	de b7       	in	r29, 0x3e	; 62
    38f8:	2e 97       	sbiw	r28, 0x0e	; 14
    38fa:	0f b6       	in	r0, 0x3f	; 63
    38fc:	f8 94       	cli
    38fe:	de bf       	out	0x3e, r29	; 62
    3900:	0f be       	out	0x3f, r0	; 63
    3902:	cd bf       	out	0x3d, r28	; 61
    3904:	8c 01       	movw	r16, r24
    3906:	7e 87       	std	Y+14, r23	; 0x0e
    3908:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	FATFS *fs;
	DEF_NAMEBUF;


	if (!dj) return FR_INVALID_OBJECT;
    390a:	00 97       	sbiw	r24, 0x00	; 0
    390c:	09 f4       	brne	.+2      	; 0x3910 <f_opendir+0x28>
    390e:	4c c0       	rjmp	.+152    	; 0x39a8 <f_opendir+0xc0>

	res = chk_mounted(&path, &dj->fs, 0);
    3910:	ce 01       	movw	r24, r28
    3912:	0d 96       	adiw	r24, 0x0d	; 13
    3914:	b8 01       	movw	r22, r16
    3916:	40 e0       	ldi	r20, 0x00	; 0
    3918:	0e 94 a8 06 	call	0xd50	; 0xd50 <chk_mounted>
	fs = dj->fs;
    391c:	d8 01       	movw	r26, r16
    391e:	ed 90       	ld	r14, X+
    3920:	fc 90       	ld	r15, X
    3922:	11 97       	sbiw	r26, 0x01	; 1
	if (res == FR_OK) {
    3924:	88 23       	and	r24, r24
    3926:	e1 f5       	brne	.+120    	; 0x39a0 <f_opendir+0xb8>
		INIT_BUF(*dj);
    3928:	ce 01       	movw	r24, r28
    392a:	01 96       	adiw	r24, 0x01	; 1
    392c:	55 96       	adiw	r26, 0x15	; 21
    392e:	9c 93       	st	X, r25
    3930:	8e 93       	st	-X, r24
    3932:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
    3934:	6d 85       	ldd	r22, Y+13	; 0x0d
    3936:	7e 85       	ldd	r23, Y+14	; 0x0e
    3938:	c8 01       	movw	r24, r16
    393a:	0e 94 ac 11 	call	0x2358	; 0x2358 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    393e:	88 23       	and	r24, r24
    3940:	11 f5       	brne	.+68     	; 0x3986 <f_opendir+0x9e>
			if (dj->dir) {						/* It is not the root dir */
    3942:	d8 01       	movw	r26, r16
    3944:	52 96       	adiw	r26, 0x12	; 18
    3946:	ed 91       	ld	r30, X+
    3948:	fc 91       	ld	r31, X
    394a:	53 97       	sbiw	r26, 0x13	; 19
    394c:	30 97       	sbiw	r30, 0x00	; 0
    394e:	71 f0       	breq	.+28     	; 0x396c <f_opendir+0x84>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    3950:	83 85       	ldd	r24, Z+11	; 0x0b
    3952:	84 ff       	sbrs	r24, 4
    3954:	1b c0       	rjmp	.+54     	; 0x398c <f_opendir+0xa4>
					dj->sclust = ld_clust(fs, dj->dir);
    3956:	c7 01       	movw	r24, r14
    3958:	bf 01       	movw	r22, r30
    395a:	0e 94 2b 05 	call	0xa56	; 0xa56 <ld_clust>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	f8 01       	movw	r30, r16
    3964:	86 83       	std	Z+6, r24	; 0x06
    3966:	97 83       	std	Z+7, r25	; 0x07
    3968:	a0 87       	std	Z+8, r26	; 0x08
    396a:	b1 87       	std	Z+9, r27	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = fs->id;
    396c:	d7 01       	movw	r26, r14
    396e:	16 96       	adiw	r26, 0x06	; 6
    3970:	8d 91       	ld	r24, X+
    3972:	9c 91       	ld	r25, X
    3974:	17 97       	sbiw	r26, 0x07	; 7
    3976:	f8 01       	movw	r30, r16
    3978:	93 83       	std	Z+3, r25	; 0x03
    397a:	82 83       	std	Z+2, r24	; 0x02
				res = dir_sdi(dj, 0);			/* Rewind dir */
    397c:	c8 01       	movw	r24, r16
    397e:	60 e0       	ldi	r22, 0x00	; 0
    3980:	70 e0       	ldi	r23, 0x00	; 0
    3982:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <dir_sdi>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3986:	84 30       	cpi	r24, 0x04	; 4
    3988:	11 f4       	brne	.+4      	; 0x398e <f_opendir+0xa6>
    398a:	04 c0       	rjmp	.+8      	; 0x3994 <f_opendir+0xac>
		if (res == FR_OK) {						/* Follow completed */
			if (dj->dir) {						/* It is not the root dir */
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = ld_clust(fs, dj->dir);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
    398c:	85 e0       	ldi	r24, 0x05	; 5
				dj->id = fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
    398e:	88 23       	and	r24, r24
    3990:	61 f0       	breq	.+24     	; 0x39aa <f_opendir+0xc2>
    3992:	01 c0       	rjmp	.+2      	; 0x3996 <f_opendir+0xae>
			if (res == FR_OK) {
				dj->id = fs->id;
				res = dir_sdi(dj, 0);			/* Rewind dir */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    3994:	85 e0       	ldi	r24, 0x05	; 5
		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
    3996:	d8 01       	movw	r26, r16
    3998:	11 96       	adiw	r26, 0x01	; 1
    399a:	1c 92       	st	X, r1
    399c:	1e 92       	st	-X, r1
    399e:	05 c0       	rjmp	.+10     	; 0x39aa <f_opendir+0xc2>
	} else {
		dj->fs = 0;
    39a0:	f8 01       	movw	r30, r16
    39a2:	11 82       	std	Z+1, r1	; 0x01
    39a4:	10 82       	st	Z, r1
    39a6:	01 c0       	rjmp	.+2      	; 0x39aa <f_opendir+0xc2>
	FRESULT res;
	FATFS *fs;
	DEF_NAMEBUF;


	if (!dj) return FR_INVALID_OBJECT;
    39a8:	89 e0       	ldi	r24, 0x09	; 9
	} else {
		dj->fs = 0;
	}

	LEAVE_FF(fs, res);
}
    39aa:	2e 96       	adiw	r28, 0x0e	; 14
    39ac:	0f b6       	in	r0, 0x3f	; 63
    39ae:	f8 94       	cli
    39b0:	de bf       	out	0x3e, r29	; 62
    39b2:	0f be       	out	0x3f, r0	; 63
    39b4:	cd bf       	out	0x3d, r28	; 61
    39b6:	df 91       	pop	r29
    39b8:	cf 91       	pop	r28
    39ba:	1f 91       	pop	r17
    39bc:	0f 91       	pop	r16
    39be:	ff 90       	pop	r15
    39c0:	ef 90       	pop	r14
    39c2:	08 95       	ret

000039c4 <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    39c4:	cf 92       	push	r12
    39c6:	df 92       	push	r13
    39c8:	ef 92       	push	r14
    39ca:	ff 92       	push	r15
    39cc:	1f 93       	push	r17
    39ce:	cf 93       	push	r28
    39d0:	df 93       	push	r29
    39d2:	cd b7       	in	r28, 0x3d	; 61
    39d4:	de b7       	in	r29, 0x3e	; 62
    39d6:	2c 97       	sbiw	r28, 0x0c	; 12
    39d8:	0f b6       	in	r0, 0x3f	; 63
    39da:	f8 94       	cli
    39dc:	de bf       	out	0x3e, r29	; 62
    39de:	0f be       	out	0x3f, r0	; 63
    39e0:	cd bf       	out	0x3d, r28	; 61
    39e2:	7c 01       	movw	r14, r24
    39e4:	6b 01       	movw	r12, r22
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj);						/* Check validity of the object */
    39e6:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <validate>
    39ea:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    39ec:	88 23       	and	r24, r24
    39ee:	81 f5       	brne	.+96     	; 0x3a50 <f_readdir+0x8c>
		if (!fno) {
    39f0:	c1 14       	cp	r12, r1
    39f2:	d1 04       	cpc	r13, r1
    39f4:	39 f4       	brne	.+14     	; 0x3a04 <f_readdir+0x40>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
    39f6:	c7 01       	movw	r24, r14
    39f8:	60 e0       	ldi	r22, 0x00	; 0
    39fa:	70 e0       	ldi	r23, 0x00	; 0
    39fc:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <dir_sdi>
    3a00:	18 2f       	mov	r17, r24
    3a02:	26 c0       	rjmp	.+76     	; 0x3a50 <f_readdir+0x8c>
		} else {
			INIT_BUF(*dj);
    3a04:	ce 01       	movw	r24, r28
    3a06:	01 96       	adiw	r24, 0x01	; 1
    3a08:	f7 01       	movw	r30, r14
    3a0a:	95 8b       	std	Z+21, r25	; 0x15
    3a0c:	84 8b       	std	Z+20, r24	; 0x14
			res = dir_read(dj);				/* Read an directory item */
    3a0e:	c7 01       	movw	r24, r14
    3a10:	0e 94 b6 13 	call	0x276c	; 0x276c <dir_read>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
    3a14:	84 30       	cpi	r24, 0x04	; 4
    3a16:	31 f4       	brne	.+12     	; 0x3a24 <f_readdir+0x60>
				dj->sect = 0;
    3a18:	f7 01       	movw	r30, r14
    3a1a:	16 86       	std	Z+14, r1	; 0x0e
    3a1c:	17 86       	std	Z+15, r1	; 0x0f
    3a1e:	10 8a       	std	Z+16, r1	; 0x10
    3a20:	11 8a       	std	Z+17, r1	; 0x11
    3a22:	02 c0       	rjmp	.+4      	; 0x3a28 <f_readdir+0x64>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    3a24:	88 23       	and	r24, r24
    3a26:	89 f4       	brne	.+34     	; 0x3a4a <f_readdir+0x86>
				get_fileinfo(dj, fno);		/* Get the object information */
    3a28:	c7 01       	movw	r24, r14
    3a2a:	b6 01       	movw	r22, r12
    3a2c:	0e 94 59 05 	call	0xab2	; 0xab2 <get_fileinfo>
				res = dir_next(dj, 0);		/* Increment index for next */
    3a30:	c7 01       	movw	r24, r14
    3a32:	60 e0       	ldi	r22, 0x00	; 0
    3a34:	70 e0       	ldi	r23, 0x00	; 0
    3a36:	0e 94 67 10 	call	0x20ce	; 0x20ce <dir_next>
				if (res == FR_NO_FILE) {
    3a3a:	84 30       	cpi	r24, 0x04	; 4
    3a3c:	41 f4       	brne	.+16     	; 0x3a4e <f_readdir+0x8a>
					dj->sect = 0;
    3a3e:	f7 01       	movw	r30, r14
    3a40:	16 86       	std	Z+14, r1	; 0x0e
    3a42:	17 86       	std	Z+15, r1	; 0x0f
    3a44:	10 8a       	std	Z+16, r1	; 0x10
    3a46:	11 8a       	std	Z+17, r1	; 0x11
    3a48:	03 c0       	rjmp	.+6      	; 0x3a50 <f_readdir+0x8c>
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dj);
			res = dir_read(dj);				/* Read an directory item */
    3a4a:	18 2f       	mov	r17, r24
    3a4c:	01 c0       	rjmp	.+2      	; 0x3a50 <f_readdir+0x8c>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
    3a4e:	18 2f       	mov	r17, r24
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
    3a50:	81 2f       	mov	r24, r17
    3a52:	2c 96       	adiw	r28, 0x0c	; 12
    3a54:	0f b6       	in	r0, 0x3f	; 63
    3a56:	f8 94       	cli
    3a58:	de bf       	out	0x3e, r29	; 62
    3a5a:	0f be       	out	0x3f, r0	; 63
    3a5c:	cd bf       	out	0x3d, r28	; 61
    3a5e:	df 91       	pop	r29
    3a60:	cf 91       	pop	r28
    3a62:	1f 91       	pop	r17
    3a64:	ff 90       	pop	r15
    3a66:	ef 90       	pop	r14
    3a68:	df 90       	pop	r13
    3a6a:	cf 90       	pop	r12
    3a6c:	08 95       	ret

00003a6e <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    3a6e:	ef 92       	push	r14
    3a70:	ff 92       	push	r15
    3a72:	1f 93       	push	r17
    3a74:	cf 93       	push	r28
    3a76:	df 93       	push	r29
    3a78:	cd b7       	in	r28, 0x3d	; 61
    3a7a:	de b7       	in	r29, 0x3e	; 62
    3a7c:	a4 97       	sbiw	r28, 0x24	; 36
    3a7e:	0f b6       	in	r0, 0x3f	; 63
    3a80:	f8 94       	cli
    3a82:	de bf       	out	0x3e, r29	; 62
    3a84:	0f be       	out	0x3f, r0	; 63
    3a86:	cd bf       	out	0x3d, r28	; 61
    3a88:	9c a3       	lds	r25, 0x5c
    3a8a:	8b a3       	lds	r24, 0x5b
    3a8c:	7b 01       	movw	r14, r22
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    3a8e:	ce 01       	movw	r24, r28
    3a90:	83 96       	adiw	r24, 0x23	; 35
    3a92:	be 01       	movw	r22, r28
    3a94:	6f 5f       	subi	r22, 0xFF	; 255
    3a96:	7f 4f       	sbci	r23, 0xFF	; 255
    3a98:	40 e0       	ldi	r20, 0x00	; 0
    3a9a:	0e 94 a8 06 	call	0xd50	; 0xd50 <chk_mounted>
    3a9e:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    3aa0:	88 23       	and	r24, r24
    3aa2:	c1 f4       	brne	.+48     	; 0x3ad4 <f_stat+0x66>
		INIT_BUF(dj);
    3aa4:	ce 01       	movw	r24, r28
    3aa6:	47 96       	adiw	r24, 0x17	; 23
    3aa8:	9e 8b       	std	Y+22, r25	; 0x16
    3aaa:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    3aac:	6b a1       	lds	r22, 0x4b
    3aae:	7c a1       	lds	r23, 0x4c
    3ab0:	ce 01       	movw	r24, r28
    3ab2:	01 96       	adiw	r24, 0x01	; 1
    3ab4:	0e 94 ac 11 	call	0x2358	; 0x2358 <follow_path>
    3ab8:	18 2f       	mov	r17, r24
		if (res == FR_OK) {				/* Follow completed */
    3aba:	88 23       	and	r24, r24
    3abc:	59 f4       	brne	.+22     	; 0x3ad4 <f_stat+0x66>
			if (dj.dir)		/* Found an object */
    3abe:	8b 89       	ldd	r24, Y+19	; 0x13
    3ac0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ac2:	00 97       	sbiw	r24, 0x00	; 0
    3ac4:	31 f0       	breq	.+12     	; 0x3ad2 <f_stat+0x64>
				get_fileinfo(&dj, fno);
    3ac6:	ce 01       	movw	r24, r28
    3ac8:	01 96       	adiw	r24, 0x01	; 1
    3aca:	b7 01       	movw	r22, r14
    3acc:	0e 94 59 05 	call	0xab2	; 0xab2 <get_fileinfo>
    3ad0:	01 c0       	rjmp	.+2      	; 0x3ad4 <f_stat+0x66>
			else			/* It is root dir */
				res = FR_INVALID_NAME;
    3ad2:	16 e0       	ldi	r17, 0x06	; 6
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    3ad4:	81 2f       	mov	r24, r17
    3ad6:	a4 96       	adiw	r28, 0x24	; 36
    3ad8:	0f b6       	in	r0, 0x3f	; 63
    3ada:	f8 94       	cli
    3adc:	de bf       	out	0x3e, r29	; 62
    3ade:	0f be       	out	0x3f, r0	; 63
    3ae0:	cd bf       	out	0x3d, r28	; 61
    3ae2:	df 91       	pop	r29
    3ae4:	cf 91       	pop	r28
    3ae6:	1f 91       	pop	r17
    3ae8:	ff 90       	pop	r15
    3aea:	ef 90       	pop	r14
    3aec:	08 95       	ret

00003aee <f_getfree>:
FRESULT f_getfree (
	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    3aee:	2f 92       	push	r2
    3af0:	3f 92       	push	r3
    3af2:	4f 92       	push	r4
    3af4:	5f 92       	push	r5
    3af6:	6f 92       	push	r6
    3af8:	7f 92       	push	r7
    3afa:	8f 92       	push	r8
    3afc:	9f 92       	push	r9
    3afe:	af 92       	push	r10
    3b00:	bf 92       	push	r11
    3b02:	cf 92       	push	r12
    3b04:	df 92       	push	r13
    3b06:	ef 92       	push	r14
    3b08:	ff 92       	push	r15
    3b0a:	0f 93       	push	r16
    3b0c:	1f 93       	push	r17
    3b0e:	cf 93       	push	r28
    3b10:	df 93       	push	r29
    3b12:	cd b7       	in	r28, 0x3d	; 61
    3b14:	de b7       	in	r29, 0x3e	; 62
    3b16:	2c 97       	sbiw	r28, 0x0c	; 12
    3b18:	0f b6       	in	r0, 0x3f	; 63
    3b1a:	f8 94       	cli
    3b1c:	de bf       	out	0x3e, r29	; 62
    3b1e:	0f be       	out	0x3f, r0	; 63
    3b20:	cd bf       	out	0x3d, r28	; 61
    3b22:	9a 83       	std	Y+2, r25	; 0x02
    3b24:	89 83       	std	Y+1, r24	; 0x01
    3b26:	1b 01       	movw	r2, r22
    3b28:	8a 01       	movw	r16, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    3b2a:	ce 01       	movw	r24, r28
    3b2c:	01 96       	adiw	r24, 0x01	; 1
    3b2e:	ba 01       	movw	r22, r20
    3b30:	40 e0       	ldi	r20, 0x00	; 0
    3b32:	0e 94 a8 06 	call	0xd50	; 0xd50 <chk_mounted>
    3b36:	b8 2e       	mov	r11, r24
	fs = *fatfs;
    3b38:	d8 01       	movw	r26, r16
    3b3a:	0d 91       	ld	r16, X+
    3b3c:	1c 91       	ld	r17, X
    3b3e:	11 97       	sbiw	r26, 0x01	; 1
	if (res == FR_OK) {
    3b40:	88 23       	and	r24, r24
    3b42:	09 f0       	breq	.+2      	; 0x3b46 <f_getfree+0x58>
    3b44:	02 c1       	rjmp	.+516    	; 0x3d4a <f_getfree+0x25c>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
    3b46:	f8 01       	movw	r30, r16
    3b48:	86 85       	ldd	r24, Z+14	; 0x0e
    3b4a:	97 85       	ldd	r25, Z+15	; 0x0f
    3b4c:	a0 89       	ldd	r26, Z+16	; 0x10
    3b4e:	b1 89       	ldd	r27, Z+17	; 0x11
    3b50:	c2 8c       	ldd	r12, Z+26	; 0x1a
    3b52:	d3 8c       	ldd	r13, Z+27	; 0x1b
    3b54:	e4 8c       	ldd	r14, Z+28	; 0x1c
    3b56:	f5 8c       	ldd	r15, Z+29	; 0x1d
    3b58:	b7 01       	movw	r22, r14
    3b5a:	a6 01       	movw	r20, r12
    3b5c:	42 50       	subi	r20, 0x02	; 2
    3b5e:	50 40       	sbci	r21, 0x00	; 0
    3b60:	60 40       	sbci	r22, 0x00	; 0
    3b62:	70 40       	sbci	r23, 0x00	; 0
    3b64:	48 17       	cp	r20, r24
    3b66:	59 07       	cpc	r21, r25
    3b68:	6a 07       	cpc	r22, r26
    3b6a:	7b 07       	cpc	r23, r27
    3b6c:	30 f0       	brcs	.+12     	; 0x3b7a <f_getfree+0x8c>
			*nclst = fs->free_clust;
    3b6e:	f1 01       	movw	r30, r2
    3b70:	80 83       	st	Z, r24
    3b72:	91 83       	std	Z+1, r25	; 0x01
    3b74:	a2 83       	std	Z+2, r26	; 0x02
    3b76:	b3 83       	std	Z+3, r27	; 0x03
    3b78:	e8 c0       	rjmp	.+464    	; 0x3d4a <f_getfree+0x25c>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
    3b7a:	a0 80       	ld	r10, Z
			n = 0;
			if (fat == FS_FAT12) {
    3b7c:	b1 e0       	ldi	r27, 0x01	; 1
    3b7e:	ab 16       	cp	r10, r27
    3b80:	d9 f5       	brne	.+118    	; 0x3bf8 <f_getfree+0x10a>
    3b82:	cc 24       	eor	r12, r12
    3b84:	dd 24       	eor	r13, r13
    3b86:	76 01       	movw	r14, r12
    3b88:	68 94       	set
    3b8a:	c1 f8       	bld	r12, 1
    3b8c:	44 24       	eor	r4, r4
    3b8e:	55 24       	eor	r5, r5
    3b90:	32 01       	movw	r6, r4
				clst = 2;
				do {
					stat = get_fat(fs, clst);
    3b92:	c8 01       	movw	r24, r16
    3b94:	b7 01       	movw	r22, r14
    3b96:	a6 01       	movw	r20, r12
    3b98:	0e 94 65 0c 	call	0x18ca	; 0x18ca <get_fat>
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	cb 01       	movw	r24, r22
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    3ba0:	8f 3f       	cpi	r24, 0xFF	; 255
    3ba2:	ef ef       	ldi	r30, 0xFF	; 255
    3ba4:	9e 07       	cpc	r25, r30
    3ba6:	ef ef       	ldi	r30, 0xFF	; 255
    3ba8:	ae 07       	cpc	r26, r30
    3baa:	ef ef       	ldi	r30, 0xFF	; 255
    3bac:	be 07       	cpc	r27, r30
    3bae:	09 f4       	brne	.+2      	; 0x3bb2 <f_getfree+0xc4>
    3bb0:	ae c0       	rjmp	.+348    	; 0x3d0e <f_getfree+0x220>
					if (stat == 1) { res = FR_INT_ERR; break; }
    3bb2:	81 30       	cpi	r24, 0x01	; 1
    3bb4:	91 05       	cpc	r25, r1
    3bb6:	a1 05       	cpc	r26, r1
    3bb8:	b1 05       	cpc	r27, r1
    3bba:	09 f4       	brne	.+2      	; 0x3bbe <f_getfree+0xd0>
    3bbc:	ab c0       	rjmp	.+342    	; 0x3d14 <f_getfree+0x226>
					if (stat == 0) n++;
    3bbe:	00 97       	sbiw	r24, 0x00	; 0
    3bc0:	a1 05       	cpc	r26, r1
    3bc2:	b1 05       	cpc	r27, r1
    3bc4:	29 f4       	brne	.+10     	; 0x3bd0 <f_getfree+0xe2>
    3bc6:	08 94       	sec
    3bc8:	41 1c       	adc	r4, r1
    3bca:	51 1c       	adc	r5, r1
    3bcc:	61 1c       	adc	r6, r1
    3bce:	71 1c       	adc	r7, r1
				} while (++clst < fs->n_fatent);
    3bd0:	08 94       	sec
    3bd2:	c1 1c       	adc	r12, r1
    3bd4:	d1 1c       	adc	r13, r1
    3bd6:	e1 1c       	adc	r14, r1
    3bd8:	f1 1c       	adc	r15, r1
    3bda:	f8 01       	movw	r30, r16
    3bdc:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bde:	93 8d       	ldd	r25, Z+27	; 0x1b
    3be0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3be2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    3be4:	c8 16       	cp	r12, r24
    3be6:	d9 06       	cpc	r13, r25
    3be8:	ea 06       	cpc	r14, r26
    3bea:	fb 06       	cpc	r15, r27
    3bec:	90 f2       	brcs	.-92     	; 0x3b92 <f_getfree+0xa4>
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			fs->free_clust = n;
    3bee:	46 86       	std	Z+14, r4	; 0x0e
    3bf0:	57 86       	std	Z+15, r5	; 0x0f
    3bf2:	60 8a       	std	Z+16, r6	; 0x10
    3bf4:	71 8a       	std	Z+17, r7	; 0x11
    3bf6:	a4 c0       	rjmp	.+328    	; 0x3d40 <f_getfree+0x252>
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) n++;
				} while (++clst < fs->n_fatent);
			} else {
				clst = fs->n_fatent;
				sect = fs->fatbase;
    3bf8:	82 a1       	lds	r24, 0x42
    3bfa:	93 a1       	lds	r25, 0x43
    3bfc:	a4 a1       	lds	r26, 0x44
    3bfe:	b5 a1       	lds	r27, 0x45
    3c00:	8b 83       	std	Y+3, r24	; 0x03
    3c02:	9c 83       	std	Y+4, r25	; 0x04
    3c04:	ad 83       	std	Y+5, r26	; 0x05
    3c06:	be 83       	std	Y+6, r27	; 0x06
				i = 0; p = 0;
    3c08:	e0 e0       	ldi	r30, 0x00	; 0
    3c0a:	f0 e0       	ldi	r31, 0x00	; 0
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
		if (fs->free_clust <= fs->n_fatent - 2) {
			*nclst = fs->free_clust;
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
			n = 0;
    3c10:	44 24       	eor	r4, r4
    3c12:	55 24       	eor	r5, r5
    3c14:	32 01       	movw	r6, r4
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
						if (res != FR_OK) break;
						p = fs->win;
    3c16:	a8 01       	movw	r20, r16
    3c18:	4e 5c       	subi	r20, 0xCE	; 206
    3c1a:	5f 4f       	sbci	r21, 0xFF	; 255
    3c1c:	5a 87       	std	Y+10, r21	; 0x0a
    3c1e:	49 87       	std	Y+9, r20	; 0x09
						i = SS(fs);
    3c20:	3c 86       	std	Y+12, r3	; 0x0c
    3c22:	2b 86       	std	Y+11, r2	; 0x0b
    3c24:	18 01       	movw	r2, r16
    3c26:	0a 2d       	mov	r16, r10
			} else {
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
    3c28:	21 15       	cp	r18, r1
    3c2a:	31 05       	cpc	r19, r1
    3c2c:	c9 f4       	brne	.+50     	; 0x3c60 <f_getfree+0x172>
						res = move_window(fs, sect++);
    3c2e:	c1 01       	movw	r24, r2
    3c30:	4b 81       	ldd	r20, Y+3	; 0x03
    3c32:	5c 81       	ldd	r21, Y+4	; 0x04
    3c34:	6d 81       	ldd	r22, Y+5	; 0x05
    3c36:	7e 81       	ldd	r23, Y+6	; 0x06
    3c38:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
						if (res != FR_OK) break;
    3c3c:	88 23       	and	r24, r24
    3c3e:	09 f0       	breq	.+2      	; 0x3c42 <f_getfree+0x154>
    3c40:	6d c0       	rjmp	.+218    	; 0x3d1c <f_getfree+0x22e>
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
    3c42:	8b 81       	ldd	r24, Y+3	; 0x03
    3c44:	9c 81       	ldd	r25, Y+4	; 0x04
    3c46:	ad 81       	ldd	r26, Y+5	; 0x05
    3c48:	be 81       	ldd	r27, Y+6	; 0x06
    3c4a:	01 96       	adiw	r24, 0x01	; 1
    3c4c:	a1 1d       	adc	r26, r1
    3c4e:	b1 1d       	adc	r27, r1
    3c50:	8b 83       	std	Y+3, r24	; 0x03
    3c52:	9c 83       	std	Y+4, r25	; 0x04
    3c54:	ad 83       	std	Y+5, r26	; 0x05
    3c56:	be 83       	std	Y+6, r27	; 0x06
						if (res != FR_OK) break;
						p = fs->win;
    3c58:	e9 85       	ldd	r30, Y+9	; 0x09
    3c5a:	fa 85       	ldd	r31, Y+10	; 0x0a
						i = SS(fs);
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	32 e0       	ldi	r19, 0x02	; 2
					}
					if (fat == FS_FAT16) {
    3c60:	02 30       	cpi	r16, 0x02	; 2
    3c62:	a1 f4       	brne	.+40     	; 0x3c8c <f_getfree+0x19e>
						if (LD_WORD(p) == 0) n++;
    3c64:	91 81       	ldd	r25, Z+1	; 0x01
    3c66:	98 87       	std	Y+8, r25	; 0x08
    3c68:	1f 82       	std	Y+7, r1	; 0x07
    3c6a:	80 81       	ld	r24, Z
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	af 81       	ldd	r26, Y+7	; 0x07
    3c70:	b8 85       	ldd	r27, Y+8	; 0x08
    3c72:	8a 2b       	or	r24, r26
    3c74:	9b 2b       	or	r25, r27
    3c76:	00 97       	sbiw	r24, 0x00	; 0
    3c78:	29 f4       	brne	.+10     	; 0x3c84 <f_getfree+0x196>
    3c7a:	08 94       	sec
    3c7c:	41 1c       	adc	r4, r1
    3c7e:	51 1c       	adc	r5, r1
    3c80:	61 1c       	adc	r6, r1
    3c82:	71 1c       	adc	r7, r1
						p += 2; i -= 2;
    3c84:	32 96       	adiw	r30, 0x02	; 2
    3c86:	22 50       	subi	r18, 0x02	; 2
    3c88:	30 40       	sbci	r19, 0x00	; 0
    3c8a:	31 c0       	rjmp	.+98     	; 0x3cee <f_getfree+0x200>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    3c8c:	83 81       	ldd	r24, Z+3	; 0x03
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	a0 e0       	ldi	r26, 0x00	; 0
    3c92:	b0 e0       	ldi	r27, 0x00	; 0
    3c94:	78 2f       	mov	r23, r24
    3c96:	66 27       	eor	r22, r22
    3c98:	55 27       	eor	r21, r21
    3c9a:	44 27       	eor	r20, r20
    3c9c:	82 81       	ldd	r24, Z+2	; 0x02
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	a0 e0       	ldi	r26, 0x00	; 0
    3ca2:	b0 e0       	ldi	r27, 0x00	; 0
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	99 27       	eor	r25, r25
    3ca8:	88 27       	eor	r24, r24
    3caa:	48 2b       	or	r20, r24
    3cac:	59 2b       	or	r21, r25
    3cae:	6a 2b       	or	r22, r26
    3cb0:	7b 2b       	or	r23, r27
    3cb2:	80 81       	ld	r24, Z
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	a0 e0       	ldi	r26, 0x00	; 0
    3cb8:	b0 e0       	ldi	r27, 0x00	; 0
    3cba:	84 2b       	or	r24, r20
    3cbc:	95 2b       	or	r25, r21
    3cbe:	a6 2b       	or	r26, r22
    3cc0:	b7 2b       	or	r27, r23
    3cc2:	91 80       	ldd	r9, Z+1	; 0x01
    3cc4:	88 24       	eor	r8, r8
    3cc6:	a4 01       	movw	r20, r8
    3cc8:	60 e0       	ldi	r22, 0x00	; 0
    3cca:	70 e0       	ldi	r23, 0x00	; 0
    3ccc:	84 2b       	or	r24, r20
    3cce:	95 2b       	or	r25, r21
    3cd0:	a6 2b       	or	r26, r22
    3cd2:	b7 2b       	or	r27, r23
    3cd4:	bf 70       	andi	r27, 0x0F	; 15
    3cd6:	00 97       	sbiw	r24, 0x00	; 0
    3cd8:	a1 05       	cpc	r26, r1
    3cda:	b1 05       	cpc	r27, r1
    3cdc:	29 f4       	brne	.+10     	; 0x3ce8 <f_getfree+0x1fa>
    3cde:	08 94       	sec
    3ce0:	41 1c       	adc	r4, r1
    3ce2:	51 1c       	adc	r5, r1
    3ce4:	61 1c       	adc	r6, r1
    3ce6:	71 1c       	adc	r7, r1
						p += 4; i -= 4;
    3ce8:	34 96       	adiw	r30, 0x04	; 4
    3cea:	24 50       	subi	r18, 0x04	; 4
    3cec:	30 40       	sbci	r19, 0x00	; 0
					}
				} while (--clst);
    3cee:	08 94       	sec
    3cf0:	c1 08       	sbc	r12, r1
    3cf2:	d1 08       	sbc	r13, r1
    3cf4:	e1 08       	sbc	r14, r1
    3cf6:	f1 08       	sbc	r15, r1
    3cf8:	c1 14       	cp	r12, r1
    3cfa:	d1 04       	cpc	r13, r1
    3cfc:	e1 04       	cpc	r14, r1
    3cfe:	f1 04       	cpc	r15, r1
    3d00:	09 f0       	breq	.+2      	; 0x3d04 <f_getfree+0x216>
    3d02:	92 cf       	rjmp	.-220    	; 0x3c28 <f_getfree+0x13a>
    3d04:	a0 2e       	mov	r10, r16
    3d06:	81 01       	movw	r16, r2
    3d08:	2b 84       	ldd	r2, Y+11	; 0x0b
    3d0a:	3c 84       	ldd	r3, Y+12	; 0x0c
    3d0c:	0c c0       	rjmp	.+24     	; 0x3d26 <f_getfree+0x238>
			n = 0;
			if (fat == FS_FAT12) {
				clst = 2;
				do {
					stat = get_fat(fs, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    3d0e:	bb 24       	eor	r11, r11
    3d10:	b3 94       	inc	r11
    3d12:	09 c0       	rjmp	.+18     	; 0x3d26 <f_getfree+0x238>
					if (stat == 1) { res = FR_INT_ERR; break; }
    3d14:	bb 24       	eor	r11, r11
    3d16:	68 94       	set
    3d18:	b1 f8       	bld	r11, 1
    3d1a:	05 c0       	rjmp	.+10     	; 0x3d26 <f_getfree+0x238>
    3d1c:	a0 2e       	mov	r10, r16
    3d1e:	81 01       	movw	r16, r2
    3d20:	2b 84       	ldd	r2, Y+11	; 0x0b
    3d22:	3c 84       	ldd	r3, Y+12	; 0x0c
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
    3d24:	b8 2e       	mov	r11, r24
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			fs->free_clust = n;
    3d26:	f8 01       	movw	r30, r16
    3d28:	46 86       	std	Z+14, r4	; 0x0e
    3d2a:	57 86       	std	Z+15, r5	; 0x0f
    3d2c:	60 8a       	std	Z+16, r6	; 0x10
    3d2e:	71 8a       	std	Z+17, r7	; 0x11
			if (fat == FS_FAT32) fs->fsi_flag = 1;
    3d30:	f3 e0       	ldi	r31, 0x03	; 3
    3d32:	af 16       	cp	r10, r31
    3d34:	29 f4       	brne	.+10     	; 0x3d40 <f_getfree+0x252>
    3d36:	81 e0       	ldi	r24, 0x01	; 1
    3d38:	d8 01       	movw	r26, r16
    3d3a:	15 96       	adiw	r26, 0x05	; 5
    3d3c:	8c 93       	st	X, r24
    3d3e:	15 97       	sbiw	r26, 0x05	; 5
			*nclst = n;
    3d40:	f1 01       	movw	r30, r2
    3d42:	40 82       	st	Z, r4
    3d44:	51 82       	std	Z+1, r5	; 0x01
    3d46:	62 82       	std	Z+2, r6	; 0x02
    3d48:	73 82       	std	Z+3, r7	; 0x03
		}
	}
	LEAVE_FF(fs, res);
}
    3d4a:	8b 2d       	mov	r24, r11
    3d4c:	2c 96       	adiw	r28, 0x0c	; 12
    3d4e:	0f b6       	in	r0, 0x3f	; 63
    3d50:	f8 94       	cli
    3d52:	de bf       	out	0x3e, r29	; 62
    3d54:	0f be       	out	0x3f, r0	; 63
    3d56:	cd bf       	out	0x3d, r28	; 61
    3d58:	df 91       	pop	r29
    3d5a:	cf 91       	pop	r28
    3d5c:	1f 91       	pop	r17
    3d5e:	0f 91       	pop	r16
    3d60:	ff 90       	pop	r15
    3d62:	ef 90       	pop	r14
    3d64:	df 90       	pop	r13
    3d66:	cf 90       	pop	r12
    3d68:	bf 90       	pop	r11
    3d6a:	af 90       	pop	r10
    3d6c:	9f 90       	pop	r9
    3d6e:	8f 90       	pop	r8
    3d70:	7f 90       	pop	r7
    3d72:	6f 90       	pop	r6
    3d74:	5f 90       	pop	r5
    3d76:	4f 90       	pop	r4
    3d78:	3f 90       	pop	r3
    3d7a:	2f 90       	pop	r2
    3d7c:	08 95       	ret

00003d7e <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
    3d7e:	cf 92       	push	r12
    3d80:	df 92       	push	r13
    3d82:	ef 92       	push	r14
    3d84:	ff 92       	push	r15
    3d86:	0f 93       	push	r16
    3d88:	1f 93       	push	r17
    3d8a:	cf 93       	push	r28
    3d8c:	df 93       	push	r29
    3d8e:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	if (!fp) return FR_INVALID_OBJECT;
    3d90:	00 97       	sbiw	r24, 0x00	; 0
    3d92:	09 f4       	brne	.+2      	; 0x3d96 <f_truncate+0x18>
    3d94:	69 c0       	rjmp	.+210    	; 0x3e68 <f_truncate+0xea>

	res = validate(fp);						/* Check validity of the object */
    3d96:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <validate>
	if (res == FR_OK) {
    3d9a:	88 23       	and	r24, r24
    3d9c:	09 f0       	breq	.+2      	; 0x3da0 <f_truncate+0x22>
    3d9e:	65 c0       	rjmp	.+202    	; 0x3e6a <f_truncate+0xec>
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
    3da0:	9c 81       	ldd	r25, Y+4	; 0x04
    3da2:	99 23       	and	r25, r25
    3da4:	24 f0       	brlt	.+8      	; 0x3dae <f_truncate+0x30>
			res = FR_INT_ERR;
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
    3da6:	91 fd       	sbrc	r25, 1
    3da8:	69 c0       	rjmp	.+210    	; 0x3e7c <f_truncate+0xfe>
				res = FR_DENIED;
    3daa:	87 e0       	ldi	r24, 0x07	; 7
    3dac:	5e c0       	rjmp	.+188    	; 0x3e6a <f_truncate+0xec>
	if (!fp) return FR_INVALID_OBJECT;

	res = validate(fp);						/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
			res = FR_INT_ERR;
    3dae:	82 e0       	ldi	r24, 0x02	; 2
    3db0:	5c c0       	rjmp	.+184    	; 0x3e6a <f_truncate+0xec>
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    3db2:	4a 87       	std	Y+10, r20	; 0x0a
    3db4:	5b 87       	std	Y+11, r21	; 0x0b
    3db6:	6c 87       	std	Y+12, r22	; 0x0c
    3db8:	7d 87       	std	Y+13, r23	; 0x0d
			fp->flag |= FA__WRITTEN;
    3dba:	8c 81       	ldd	r24, Y+4	; 0x04
    3dbc:	80 62       	ori	r24, 0x20	; 32
    3dbe:	8c 83       	std	Y+4, r24	; 0x04
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    3dc0:	41 15       	cp	r20, r1
    3dc2:	51 05       	cpc	r21, r1
    3dc4:	61 05       	cpc	r22, r1
    3dc6:	71 05       	cpc	r23, r1
    3dc8:	69 f4       	brne	.+26     	; 0x3de4 <f_truncate+0x66>
				res = remove_chain(fp->fs, fp->sclust);
    3dca:	4e 85       	ldd	r20, Y+14	; 0x0e
    3dcc:	5f 85       	ldd	r21, Y+15	; 0x0f
    3dce:	68 89       	ldd	r22, Y+16	; 0x10
    3dd0:	79 89       	ldd	r23, Y+17	; 0x11
    3dd2:	88 81       	ld	r24, Y
    3dd4:	99 81       	ldd	r25, Y+1	; 0x01
    3dd6:	0e 94 e6 13 	call	0x27cc	; 0x27cc <remove_chain>
				fp->sclust = 0;
    3dda:	1e 86       	std	Y+14, r1	; 0x0e
    3ddc:	1f 86       	std	Y+15, r1	; 0x0f
    3dde:	18 8a       	std	Y+16, r1	; 0x10
    3de0:	19 8a       	std	Y+17, r1	; 0x11
    3de2:	3c c0       	rjmp	.+120    	; 0x3e5c <f_truncate+0xde>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
    3de4:	4a 89       	ldd	r20, Y+18	; 0x12
    3de6:	5b 89       	ldd	r21, Y+19	; 0x13
    3de8:	6c 89       	ldd	r22, Y+20	; 0x14
    3dea:	7d 89       	ldd	r23, Y+21	; 0x15
    3dec:	88 81       	ld	r24, Y
    3dee:	99 81       	ldd	r25, Y+1	; 0x01
    3df0:	0e 94 65 0c 	call	0x18ca	; 0x18ca <get_fat>
    3df4:	6b 01       	movw	r12, r22
    3df6:	7c 01       	movw	r14, r24
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
    3df8:	81 e0       	ldi	r24, 0x01	; 1
    3dfa:	c8 16       	cp	r12, r24
    3dfc:	d1 04       	cpc	r13, r1
    3dfe:	e1 04       	cpc	r14, r1
    3e00:	f1 04       	cpc	r15, r1
    3e02:	09 f4       	brne	.+2      	; 0x3e06 <f_truncate+0x88>
    3e04:	4a c0       	rjmp	.+148    	; 0x3e9a <f_truncate+0x11c>
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
				res = remove_chain(fp->fs, fp->sclust);
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
				res = FR_OK;
    3e06:	81 e0       	ldi	r24, 0x01	; 1
    3e08:	9f ef       	ldi	r25, 0xFF	; 255
    3e0a:	c9 16       	cp	r12, r25
    3e0c:	9f ef       	ldi	r25, 0xFF	; 255
    3e0e:	d9 06       	cpc	r13, r25
    3e10:	9f ef       	ldi	r25, 0xFF	; 255
    3e12:	e9 06       	cpc	r14, r25
    3e14:	9f ef       	ldi	r25, 0xFF	; 255
    3e16:	f9 06       	cpc	r15, r25
    3e18:	09 f0       	breq	.+2      	; 0x3e1c <f_truncate+0x9e>
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
    3e1c:	88 23       	and	r24, r24
    3e1e:	01 f5       	brne	.+64     	; 0x3e60 <f_truncate+0xe2>
    3e20:	e8 81       	ld	r30, Y
    3e22:	f9 81       	ldd	r31, Y+1	; 0x01
    3e24:	42 8d       	ldd	r20, Z+26	; 0x1a
    3e26:	53 8d       	ldd	r21, Z+27	; 0x1b
    3e28:	64 8d       	ldd	r22, Z+28	; 0x1c
    3e2a:	75 8d       	ldd	r23, Z+29	; 0x1d
    3e2c:	c4 16       	cp	r12, r20
    3e2e:	d5 06       	cpc	r13, r21
    3e30:	e6 06       	cpc	r14, r22
    3e32:	f7 06       	cpc	r15, r23
    3e34:	d0 f4       	brcc	.+52     	; 0x3e6a <f_truncate+0xec>
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
    3e36:	4a 89       	ldd	r20, Y+18	; 0x12
    3e38:	5b 89       	ldd	r21, Y+19	; 0x13
    3e3a:	6c 89       	ldd	r22, Y+20	; 0x14
    3e3c:	7d 89       	ldd	r23, Y+21	; 0x15
    3e3e:	cf 01       	movw	r24, r30
    3e40:	0f ef       	ldi	r16, 0xFF	; 255
    3e42:	1f ef       	ldi	r17, 0xFF	; 255
    3e44:	2f ef       	ldi	r18, 0xFF	; 255
    3e46:	3f e0       	ldi	r19, 0x0F	; 15
    3e48:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <put_fat>
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    3e4c:	88 23       	and	r24, r24
    3e4e:	41 f4       	brne	.+16     	; 0x3e60 <f_truncate+0xe2>
    3e50:	88 81       	ld	r24, Y
    3e52:	99 81       	ldd	r25, Y+1	; 0x01
    3e54:	b7 01       	movw	r22, r14
    3e56:	a6 01       	movw	r20, r12
    3e58:	0e 94 e6 13 	call	0x27cc	; 0x27cc <remove_chain>
				}
			}
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
    3e5c:	88 23       	and	r24, r24
    3e5e:	29 f0       	breq	.+10     	; 0x3e6a <f_truncate+0xec>
    3e60:	9c 81       	ldd	r25, Y+4	; 0x04
    3e62:	90 68       	ori	r25, 0x80	; 128
    3e64:	9c 83       	std	Y+4, r25	; 0x04
    3e66:	01 c0       	rjmp	.+2      	; 0x3e6a <f_truncate+0xec>
{
	FRESULT res;
	DWORD ncl;


	if (!fp) return FR_INVALID_OBJECT;
    3e68:	89 e0       	ldi	r24, 0x09	; 9
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
	}

	LEAVE_FF(fp->fs, res);
}
    3e6a:	df 91       	pop	r29
    3e6c:	cf 91       	pop	r28
    3e6e:	1f 91       	pop	r17
    3e70:	0f 91       	pop	r16
    3e72:	ff 90       	pop	r15
    3e74:	ef 90       	pop	r14
    3e76:	df 90       	pop	r13
    3e78:	cf 90       	pop	r12
    3e7a:	08 95       	ret
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
    3e7c:	4e 81       	ldd	r20, Y+6	; 0x06
    3e7e:	5f 81       	ldd	r21, Y+7	; 0x07
    3e80:	68 85       	ldd	r22, Y+8	; 0x08
    3e82:	79 85       	ldd	r23, Y+9	; 0x09
    3e84:	0a 85       	ldd	r16, Y+10	; 0x0a
    3e86:	1b 85       	ldd	r17, Y+11	; 0x0b
    3e88:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e8a:	3d 85       	ldd	r19, Y+13	; 0x0d
    3e8c:	40 17       	cp	r20, r16
    3e8e:	51 07       	cpc	r21, r17
    3e90:	62 07       	cpc	r22, r18
    3e92:	73 07       	cpc	r23, r19
    3e94:	08 f4       	brcc	.+2      	; 0x3e98 <f_truncate+0x11a>
    3e96:	8d cf       	rjmp	.-230    	; 0x3db2 <f_truncate+0x34>
    3e98:	e8 cf       	rjmp	.-48     	; 0x3e6a <f_truncate+0xec>
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
				if (ncl == 1) res = FR_INT_ERR;
    3e9a:	82 e0       	ldi	r24, 0x02	; 2
    3e9c:	e1 cf       	rjmp	.-62     	; 0x3e60 <f_truncate+0xe2>

00003e9e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    3e9e:	cf 92       	push	r12
    3ea0:	df 92       	push	r13
    3ea2:	ef 92       	push	r14
    3ea4:	ff 92       	push	r15
    3ea6:	1f 93       	push	r17
    3ea8:	cf 93       	push	r28
    3eaa:	df 93       	push	r29
    3eac:	cd b7       	in	r28, 0x3d	; 61
    3eae:	de b7       	in	r29, 0x3e	; 62
    3eb0:	ea 97       	sbiw	r28, 0x3a	; 58
    3eb2:	0f b6       	in	r0, 0x3f	; 63
    3eb4:	f8 94       	cli
    3eb6:	de bf       	out	0x3e, r29	; 62
    3eb8:	0f be       	out	0x3f, r0	; 63
    3eba:	cd bf       	out	0x3d, r28	; 61
    3ebc:	9a af       	sts	0x7a, r25
    3ebe:	89 af       	sts	0x79, r24
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    3ec0:	ce 01       	movw	r24, r28
    3ec2:	c9 96       	adiw	r24, 0x39	; 57
    3ec4:	be 01       	movw	r22, r28
    3ec6:	6f 5f       	subi	r22, 0xFF	; 255
    3ec8:	7f 4f       	sbci	r23, 0xFF	; 255
    3eca:	41 e0       	ldi	r20, 0x01	; 1
    3ecc:	0e 94 a8 06 	call	0xd50	; 0xd50 <chk_mounted>
	if (res == FR_OK) {
    3ed0:	88 23       	and	r24, r24
    3ed2:	09 f0       	breq	.+2      	; 0x3ed6 <f_unlink+0x38>
    3ed4:	61 c0       	rjmp	.+194    	; 0x3f98 <f_unlink+0xfa>
		INIT_BUF(dj);
    3ed6:	ce 01       	movw	r24, r28
    3ed8:	8d 96       	adiw	r24, 0x2d	; 45
    3eda:	9e 8b       	std	Y+22, r25	; 0x16
    3edc:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the file path */
    3ede:	69 ad       	sts	0x69, r22
    3ee0:	7a ad       	sts	0x6a, r23
    3ee2:	ce 01       	movw	r24, r28
    3ee4:	01 96       	adiw	r24, 0x01	; 1
    3ee6:	0e 94 ac 11 	call	0x2358	; 0x2358 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    3eea:	88 23       	and	r24, r24
    3eec:	09 f0       	breq	.+2      	; 0x3ef0 <f_unlink+0x52>
    3eee:	54 c0       	rjmp	.+168    	; 0x3f98 <f_unlink+0xfa>
    3ef0:	ed 89       	ldd	r30, Y+21	; 0x15
    3ef2:	fe 89       	ldd	r31, Y+22	; 0x16
    3ef4:	83 85       	ldd	r24, Z+11	; 0x0b
    3ef6:	85 ff       	sbrs	r24, 5
    3ef8:	5d c0       	rjmp	.+186    	; 0x3fb4 <f_unlink+0x116>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
    3efa:	86 e0       	ldi	r24, 0x06	; 6
    3efc:	4d c0       	rjmp	.+154    	; 0x3f98 <f_unlink+0xfa>
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    3efe:	fb 01       	movw	r30, r22
    3f00:	13 85       	ldd	r17, Z+11	; 0x0b
    3f02:	10 ff       	sbrs	r17, 0
    3f04:	5e c0       	rjmp	.+188    	; 0x3fc2 <f_unlink+0x124>
					res = FR_DENIED;		/* Cannot remove R/O object */
    3f06:	87 e0       	ldi	r24, 0x07	; 7
    3f08:	47 c0       	rjmp	.+142    	; 0x3f98 <f_unlink+0xfa>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    3f0a:	86 e0       	ldi	r24, 0x06	; 6
    3f0c:	45 c0       	rjmp	.+138    	; 0x3f98 <f_unlink+0xfa>
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = ld_clust(dj.fs, dir);
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
				if (dclst < 2) {
    3f0e:	f2 e0       	ldi	r31, 0x02	; 2
    3f10:	cf 16       	cp	r12, r31
    3f12:	d1 04       	cpc	r13, r1
    3f14:	e1 04       	cpc	r14, r1
    3f16:	f1 04       	cpc	r15, r1
    3f18:	08 f4       	brcc	.+2      	; 0x3f1c <f_unlink+0x7e>
    3f1a:	5c c0       	rjmp	.+184    	; 0x3fd4 <f_unlink+0x136>
					res = FR_INT_ERR;
				} else {
					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-dir is empty or not */
    3f1c:	ce 01       	movw	r24, r28
    3f1e:	47 96       	adiw	r24, 0x17	; 23
    3f20:	be 01       	movw	r22, r28
    3f22:	6f 5f       	subi	r22, 0xFF	; 255
    3f24:	7f 4f       	sbci	r23, 0xFF	; 255
    3f26:	46 e1       	ldi	r20, 0x16	; 22
    3f28:	50 e0       	ldi	r21, 0x00	; 0
    3f2a:	0e 94 14 05 	call	0xa28	; 0xa28 <mem_cpy>
					sdj.sclust = dclst;
    3f2e:	cd 8e       	std	Y+29, r12	; 0x1d
    3f30:	de 8e       	std	Y+30, r13	; 0x1e
    3f32:	ef 8e       	std	Y+31, r14	; 0x1f
    3f34:	f8 a2       	lds	r31, 0x98
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    3f36:	ce 01       	movw	r24, r28
    3f38:	47 96       	adiw	r24, 0x17	; 23
    3f3a:	62 e0       	ldi	r22, 0x02	; 2
    3f3c:	70 e0       	ldi	r23, 0x00	; 0
    3f3e:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <dir_sdi>
					if (res == FR_OK) {
    3f42:	88 23       	and	r24, r24
    3f44:	49 f5       	brne	.+82     	; 0x3f98 <f_unlink+0xfa>
						res = dir_read(&sdj);
    3f46:	ce 01       	movw	r24, r28
    3f48:	47 96       	adiw	r24, 0x17	; 23
    3f4a:	0e 94 b6 13 	call	0x276c	; 0x276c <dir_read>
						if (res == FR_OK		/* Not empty dir */
    3f4e:	88 23       	and	r24, r24
    3f50:	71 f0       	breq	.+28     	; 0x3f6e <f_unlink+0xd0>
#if _FS_RPATH
						|| dclst == dj.fs->cdir	/* Current dir */
    3f52:	e9 81       	ldd	r30, Y+1	; 0x01
    3f54:	fa 81       	ldd	r31, Y+2	; 0x02
    3f56:	46 89       	ldd	r20, Z+22	; 0x16
    3f58:	57 89       	ldd	r21, Z+23	; 0x17
    3f5a:	60 8d       	ldd	r22, Z+24	; 0x18
    3f5c:	71 8d       	ldd	r23, Z+25	; 0x19
    3f5e:	4c 15       	cp	r20, r12
    3f60:	5d 05       	cpc	r21, r13
    3f62:	6e 05       	cpc	r22, r14
    3f64:	7f 05       	cpc	r23, r15
    3f66:	29 f0       	breq	.+10     	; 0x3f72 <f_unlink+0xd4>
#endif
						) res = FR_DENIED;
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    3f68:	84 30       	cpi	r24, 0x04	; 4
    3f6a:	b1 f1       	breq	.+108    	; 0x3fd8 <f_unlink+0x13a>
    3f6c:	15 c0       	rjmp	.+42     	; 0x3f98 <f_unlink+0xfa>
					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-dir is empty or not */
					sdj.sclust = dclst;
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
					if (res == FR_OK) {
						res = dir_read(&sdj);
						if (res == FR_OK		/* Not empty dir */
    3f6e:	87 e0       	ldi	r24, 0x07	; 7
    3f70:	13 c0       	rjmp	.+38     	; 0x3f98 <f_unlink+0xfa>
#if _FS_RPATH
						|| dclst == dj.fs->cdir	/* Current dir */
    3f72:	87 e0       	ldi	r24, 0x07	; 7
    3f74:	11 c0       	rjmp	.+34     	; 0x3f98 <f_unlink+0xfa>
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
    3f76:	c1 14       	cp	r12, r1
    3f78:	d1 04       	cpc	r13, r1
    3f7a:	e1 04       	cpc	r14, r1
    3f7c:	f1 04       	cpc	r15, r1
    3f7e:	41 f0       	breq	.+16     	; 0x3f90 <f_unlink+0xf2>
						res = remove_chain(dj.fs, dclst);
    3f80:	89 81       	ldd	r24, Y+1	; 0x01
    3f82:	9a 81       	ldd	r25, Y+2	; 0x02
    3f84:	b7 01       	movw	r22, r14
    3f86:	a6 01       	movw	r20, r12
    3f88:	0e 94 e6 13 	call	0x27cc	; 0x27cc <remove_chain>
					if (res == FR_OK) res = sync(dj.fs);
    3f8c:	88 23       	and	r24, r24
    3f8e:	21 f4       	brne	.+8      	; 0x3f98 <f_unlink+0xfa>
    3f90:	89 81       	ldd	r24, Y+1	; 0x01
    3f92:	9a 81       	ldd	r25, Y+2	; 0x02
    3f94:	0e 94 9f 0b 	call	0x173e	; 0x173e <sync>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
    3f98:	ea 96       	adiw	r28, 0x3a	; 58
    3f9a:	0f b6       	in	r0, 0x3f	; 63
    3f9c:	f8 94       	cli
    3f9e:	de bf       	out	0x3e, r29	; 62
    3fa0:	0f be       	out	0x3f, r0	; 63
    3fa2:	cd bf       	out	0x3d, r28	; 61
    3fa4:	df 91       	pop	r29
    3fa6:	cf 91       	pop	r28
    3fa8:	1f 91       	pop	r17
    3faa:	ff 90       	pop	r15
    3fac:	ef 90       	pop	r14
    3fae:	df 90       	pop	r13
    3fb0:	cf 90       	pop	r12
    3fb2:	08 95       	ret
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
    3fb4:	6b 89       	ldd	r22, Y+19	; 0x13
    3fb6:	7c 89       	ldd	r23, Y+20	; 0x14
			if (!dir) {
    3fb8:	61 15       	cp	r22, r1
    3fba:	71 05       	cpc	r23, r1
    3fbc:	09 f0       	breq	.+2      	; 0x3fc0 <f_unlink+0x122>
    3fbe:	9f cf       	rjmp	.-194    	; 0x3efe <f_unlink+0x60>
    3fc0:	a4 cf       	rjmp	.-184    	; 0x3f0a <f_unlink+0x6c>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = ld_clust(dj.fs, dir);
    3fc2:	89 81       	ldd	r24, Y+1	; 0x01
    3fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc6:	0e 94 2b 05 	call	0xa56	; 0xa56 <ld_clust>
    3fca:	6b 01       	movw	r12, r22
    3fcc:	7c 01       	movw	r14, r24
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    3fce:	14 fd       	sbrc	r17, 4
    3fd0:	9e cf       	rjmp	.-196    	; 0x3f0e <f_unlink+0x70>
    3fd2:	02 c0       	rjmp	.+4      	; 0x3fd8 <f_unlink+0x13a>
				if (dclst < 2) {
					res = FR_INT_ERR;
    3fd4:	82 e0       	ldi	r24, 0x02	; 2
    3fd6:	e0 cf       	rjmp	.-64     	; 0x3f98 <f_unlink+0xfa>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
    3fd8:	ce 01       	movw	r24, r28
    3fda:	01 96       	adiw	r24, 0x01	; 1
    3fdc:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <dir_remove>
				if (res == FR_OK) {
    3fe0:	88 23       	and	r24, r24
    3fe2:	49 f2       	breq	.-110    	; 0x3f76 <f_unlink+0xd8>
    3fe4:	d9 cf       	rjmp	.-78     	; 0x3f98 <f_unlink+0xfa>

00003fe6 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
    3fe6:	2f 92       	push	r2
    3fe8:	3f 92       	push	r3
    3fea:	4f 92       	push	r4
    3fec:	5f 92       	push	r5
    3fee:	6f 92       	push	r6
    3ff0:	7f 92       	push	r7
    3ff2:	8f 92       	push	r8
    3ff4:	9f 92       	push	r9
    3ff6:	af 92       	push	r10
    3ff8:	bf 92       	push	r11
    3ffa:	cf 92       	push	r12
    3ffc:	df 92       	push	r13
    3ffe:	ef 92       	push	r14
    4000:	ff 92       	push	r15
    4002:	0f 93       	push	r16
    4004:	1f 93       	push	r17
    4006:	cf 93       	push	r28
    4008:	df 93       	push	r29
    400a:	cd b7       	in	r28, 0x3d	; 61
    400c:	de b7       	in	r29, 0x3e	; 62
    400e:	a8 97       	sbiw	r28, 0x28	; 40
    4010:	0f b6       	in	r0, 0x3f	; 63
    4012:	f8 94       	cli
    4014:	de bf       	out	0x3e, r29	; 62
    4016:	0f be       	out	0x3f, r0	; 63
    4018:	cd bf       	out	0x3d, r28	; 61
    401a:	9c a3       	lds	r25, 0x5c
    401c:	8b a3       	lds	r24, 0x5b
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
    401e:	0e 94 2b 0c 	call	0x1856	; 0x1856 <get_fattime>
    4022:	6b 01       	movw	r12, r22
    4024:	7c 01       	movw	r14, r24
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    4026:	ce 01       	movw	r24, r28
    4028:	83 96       	adiw	r24, 0x23	; 35
    402a:	be 01       	movw	r22, r28
    402c:	6f 5f       	subi	r22, 0xFF	; 255
    402e:	7f 4f       	sbci	r23, 0xFF	; 255
    4030:	41 e0       	ldi	r20, 0x01	; 1
    4032:	0e 94 a8 06 	call	0xd50	; 0xd50 <chk_mounted>
    4036:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    4038:	88 23       	and	r24, r24
    403a:	09 f0       	breq	.+2      	; 0x403e <f_mkdir+0x58>
    403c:	ee c0       	rjmp	.+476    	; 0x421a <__stack+0x11b>
		INIT_BUF(dj);
    403e:	ce 01       	movw	r24, r28
    4040:	47 96       	adiw	r24, 0x17	; 23
    4042:	9e 8b       	std	Y+22, r25	; 0x16
    4044:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);			/* Follow the file path */
    4046:	6b a1       	lds	r22, 0x4b
    4048:	7c a1       	lds	r23, 0x4c
    404a:	ce 01       	movw	r24, r28
    404c:	01 96       	adiw	r24, 0x01	; 1
    404e:	0e 94 ac 11 	call	0x2358	; 0x2358 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    4052:	88 23       	and	r24, r24
    4054:	49 f0       	breq	.+18     	; 0x4068 <f_mkdir+0x82>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
    4056:	84 30       	cpi	r24, 0x04	; 4
    4058:	41 f4       	brne	.+16     	; 0x406a <f_mkdir+0x84>
    405a:	ed 89       	ldd	r30, Y+21	; 0x15
    405c:	fe 89       	ldd	r31, Y+22	; 0x16
    405e:	83 85       	ldd	r24, Z+11	; 0x0b
    4060:	85 ff       	sbrs	r24, 5
    4062:	f5 c0       	rjmp	.+490    	; 0x424e <__stack+0x14f>
			res = FR_INVALID_NAME;
    4064:	86 e0       	ldi	r24, 0x06	; 6
    4066:	01 c0       	rjmp	.+2      	; 0x406a <f_mkdir+0x84>

	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    4068:	88 e0       	ldi	r24, 0x08	; 8
				ST_DWORD(dir+DIR_WrtTime, tim);
				st_clust(dir, dcl);
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
    406a:	18 2f       	mov	r17, r24
    406c:	d6 c0       	rjmp	.+428    	; 0x421a <__stack+0x11b>
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	48 16       	cp	r4, r24
    4072:	51 04       	cpc	r5, r1
    4074:	61 04       	cpc	r6, r1
    4076:	71 04       	cpc	r7, r1
    4078:	09 f4       	brne	.+2      	; 0x407c <f_mkdir+0x96>
    407a:	f9 c0       	rjmp	.+498    	; 0x426e <__stack+0x16f>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    407c:	ef ef       	ldi	r30, 0xFF	; 255
    407e:	4e 16       	cp	r4, r30
    4080:	ef ef       	ldi	r30, 0xFF	; 255
    4082:	5e 06       	cpc	r5, r30
    4084:	ef ef       	ldi	r30, 0xFF	; 255
    4086:	6e 06       	cpc	r6, r30
    4088:	ef ef       	ldi	r30, 0xFF	; 255
    408a:	7e 06       	cpc	r7, r30
    408c:	09 f4       	brne	.+2      	; 0x4090 <f_mkdir+0xaa>
    408e:	f1 c0       	rjmp	.+482    	; 0x4272 <__stack+0x173>
    4090:	01 c0       	rjmp	.+2      	; 0x4094 <f_mkdir+0xae>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    4092:	17 e0       	ldi	r17, 0x07	; 7
			if (dcl == 1) res = FR_INT_ERR;
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK)					/* Flush FAT */
    4094:	11 23       	and	r17, r17
    4096:	09 f0       	breq	.+2      	; 0x409a <f_mkdir+0xb4>
    4098:	a0 c0       	rjmp	.+320    	; 0x41da <__stack+0xdb>
				res = move_window(dj.fs, 0);
    409a:	89 81       	ldd	r24, Y+1	; 0x01
    409c:	9a 81       	ldd	r25, Y+2	; 0x02
    409e:	40 e0       	ldi	r20, 0x00	; 0
    40a0:	50 e0       	ldi	r21, 0x00	; 0
    40a2:	ba 01       	movw	r22, r20
    40a4:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
    40a8:	18 2f       	mov	r17, r24
			if (res == FR_OK) {					/* Initialize the new directory table */
    40aa:	88 23       	and	r24, r24
    40ac:	09 f0       	breq	.+2      	; 0x40b0 <f_mkdir+0xca>
    40ae:	95 c0       	rjmp	.+298    	; 0x41da <__stack+0xdb>
				dsc = clust2sect(dj.fs, dcl);
    40b0:	09 81       	ldd	r16, Y+1	; 0x01
    40b2:	1a 81       	ldd	r17, Y+2	; 0x02
    40b4:	c8 01       	movw	r24, r16
    40b6:	b3 01       	movw	r22, r6
    40b8:	a2 01       	movw	r20, r4
    40ba:	0e 94 2f 0c 	call	0x185e	; 0x185e <clust2sect>
    40be:	4b 01       	movw	r8, r22
    40c0:	5c 01       	movw	r10, r24
				dir = dj.fs->win;
    40c2:	0f 2e       	mov	r0, r31
    40c4:	f2 e3       	ldi	r31, 0x32	; 50
    40c6:	2f 2e       	mov	r2, r31
    40c8:	33 24       	eor	r3, r3
    40ca:	f0 2d       	mov	r31, r0
    40cc:	20 0e       	add	r2, r16
    40ce:	31 1e       	adc	r3, r17
				mem_set(dir, 0, SS(dj.fs));
    40d0:	c1 01       	movw	r24, r2
    40d2:	60 e0       	ldi	r22, 0x00	; 0
    40d4:	70 e0       	ldi	r23, 0x00	; 0
    40d6:	40 e0       	ldi	r20, 0x00	; 0
    40d8:	52 e0       	ldi	r21, 0x02	; 2
    40da:	0e 94 21 05 	call	0xa42	; 0xa42 <mem_set>
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
    40de:	c1 01       	movw	r24, r2
    40e0:	60 e2       	ldi	r22, 0x20	; 32
    40e2:	70 e0       	ldi	r23, 0x00	; 0
    40e4:	4b e0       	ldi	r20, 0x0B	; 11
    40e6:	50 e0       	ldi	r21, 0x00	; 0
    40e8:	0e 94 21 05 	call	0xa42	; 0xa42 <mem_set>
				dir[DIR_Name] = '.';
    40ec:	8e e2       	ldi	r24, 0x2E	; 46
    40ee:	f8 01       	movw	r30, r16
    40f0:	82 ab       	sts	0x52, r24
				dir[DIR_Attr] = AM_DIR;
    40f2:	80 e1       	ldi	r24, 0x10	; 16
    40f4:	85 af       	sts	0x75, r24
				ST_DWORD(dir+DIR_WrtTime, tim);
    40f6:	cd a2       	lds	r28, 0x9d
    40f8:	e8 5b       	subi	r30, 0xB8	; 184
    40fa:	ff 4f       	sbci	r31, 0xFF	; 255
    40fc:	c0 82       	st	Z, r12
    40fe:	8d 2d       	mov	r24, r13
    4100:	99 27       	eor	r25, r25
    4102:	8e a3       	lds	r24, 0x5e
    4104:	f8 01       	movw	r30, r16
    4106:	e7 5b       	subi	r30, 0xB7	; 183
    4108:	ff 4f       	sbci	r31, 0xFF	; 255
    410a:	80 83       	st	Z, r24
    410c:	c7 01       	movw	r24, r14
    410e:	aa 27       	eor	r26, r26
    4110:	bb 27       	eor	r27, r27
    4112:	8f a3       	lds	r24, 0x5f
    4114:	f8 01       	movw	r30, r16
    4116:	e6 5b       	subi	r30, 0xB6	; 182
    4118:	ff 4f       	sbci	r31, 0xFF	; 255
    411a:	80 83       	st	Z, r24
    411c:	cf 2c       	mov	r12, r15
    411e:	dd 24       	eor	r13, r13
    4120:	ee 24       	eor	r14, r14
    4122:	ff 24       	eor	r15, r15
    4124:	c8 a6       	lds	r28, 0xb8
    4126:	f8 01       	movw	r30, r16
    4128:	e5 5b       	subi	r30, 0xB5	; 181
    412a:	ff 4f       	sbci	r31, 0xFF	; 255
    412c:	c0 82       	st	Z, r12
				st_clust(dir, dcl);
    412e:	c1 01       	movw	r24, r2
    4130:	b3 01       	movw	r22, r6
    4132:	a2 01       	movw	r20, r4
    4134:	0e 94 50 05 	call	0xaa0	; 0xaa0 <st_clust>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
    4138:	0f 2e       	mov	r0, r31
    413a:	f2 e5       	ldi	r31, 0x52	; 82
    413c:	cf 2e       	mov	r12, r31
    413e:	dd 24       	eor	r13, r13
    4140:	f0 2d       	mov	r31, r0
    4142:	c0 0e       	add	r12, r16
    4144:	d1 1e       	adc	r13, r17
    4146:	c6 01       	movw	r24, r12
    4148:	b1 01       	movw	r22, r2
    414a:	40 e2       	ldi	r20, 0x20	; 32
    414c:	50 e0       	ldi	r21, 0x00	; 0
    414e:	0e 94 14 05 	call	0xa28	; 0xa28 <mem_cpy>
				dir[33] = '.'; pcl = dj.sclust;
    4152:	f8 01       	movw	r30, r16
    4154:	ed 5a       	subi	r30, 0xAD	; 173
    4156:	ff 4f       	sbci	r31, 0xFF	; 255
    4158:	8e e2       	ldi	r24, 0x2E	; 46
    415a:	80 83       	st	Z, r24
    415c:	4f 81       	ldd	r20, Y+7	; 0x07
    415e:	58 85       	ldd	r21, Y+8	; 0x08
    4160:	69 85       	ldd	r22, Y+9	; 0x09
    4162:	7a 85       	ldd	r23, Y+10	; 0x0a
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
    4164:	e9 81       	ldd	r30, Y+1	; 0x01
    4166:	fa 81       	ldd	r31, Y+2	; 0x02
    4168:	80 81       	ld	r24, Z
    416a:	83 30       	cpi	r24, 0x03	; 3
    416c:	61 f4       	brne	.+24     	; 0x4186 <__stack+0x87>
    416e:	86 a1       	lds	r24, 0x46
    4170:	97 a1       	lds	r25, 0x47
    4172:	a0 a5       	lds	r26, 0x60
    4174:	b1 a5       	lds	r27, 0x61
    4176:	84 17       	cp	r24, r20
    4178:	95 07       	cpc	r25, r21
    417a:	a6 07       	cpc	r26, r22
    417c:	b7 07       	cpc	r27, r23
    417e:	19 f4       	brne	.+6      	; 0x4186 <__stack+0x87>
					pcl = 0;
    4180:	40 e0       	ldi	r20, 0x00	; 0
    4182:	50 e0       	ldi	r21, 0x00	; 0
    4184:	ba 01       	movw	r22, r20
				st_clust(dir+SZ_DIR, pcl);
    4186:	c6 01       	movw	r24, r12
    4188:	0e 94 50 05 	call	0xaa0	; 0xaa0 <st_clust>
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    418c:	e9 81       	ldd	r30, Y+1	; 0x01
    418e:	fa 81       	ldd	r31, Y+2	; 0x02
    4190:	02 81       	ldd	r16, Z+2	; 0x02
    4192:	00 23       	and	r16, r16
    4194:	09 f4       	brne	.+2      	; 0x4198 <__stack+0x99>
    4196:	6f c0       	rjmp	.+222    	; 0x4276 <__stack+0x177>
					dj.fs->winsect = dsc++;
					dj.fs->wflag = 1;
    4198:	cc 24       	eor	r12, r12
    419a:	c3 94       	inc	r12
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
    419c:	89 81       	ldd	r24, Y+1	; 0x01
    419e:	9a 81       	ldd	r25, Y+2	; 0x02
    41a0:	fc 01       	movw	r30, r24
    41a2:	86 a6       	lds	r24, 0xb6
    41a4:	97 a6       	lds	r25, 0xb7
    41a6:	a0 aa       	sts	0x90, r26
    41a8:	b1 aa       	sts	0x91, r27
    41aa:	08 94       	sec
    41ac:	81 1c       	adc	r8, r1
    41ae:	91 1c       	adc	r9, r1
    41b0:	a1 1c       	adc	r10, r1
    41b2:	b1 1c       	adc	r11, r1
					dj.fs->wflag = 1;
    41b4:	c4 82       	std	Z+4, r12	; 0x04
					res = move_window(dj.fs, 0);
    41b6:	40 e0       	ldi	r20, 0x00	; 0
    41b8:	50 e0       	ldi	r21, 0x00	; 0
    41ba:	ba 01       	movw	r22, r20
    41bc:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
    41c0:	18 2f       	mov	r17, r24
					if (res != FR_OK) break;
    41c2:	88 23       	and	r24, r24
    41c4:	51 f4       	brne	.+20     	; 0x41da <__stack+0xdb>
					mem_set(dir, 0, SS(dj.fs));
    41c6:	c1 01       	movw	r24, r2
    41c8:	60 e0       	ldi	r22, 0x00	; 0
    41ca:	70 e0       	ldi	r23, 0x00	; 0
    41cc:	40 e0       	ldi	r20, 0x00	; 0
    41ce:	52 e0       	ldi	r21, 0x02	; 2
    41d0:	0e 94 21 05 	call	0xa42	; 0xa42 <mem_set>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    41d4:	01 50       	subi	r16, 0x01	; 1
    41d6:	11 f7       	brne	.-60     	; 0x419c <__stack+0x9d>
    41d8:	4e c0       	rjmp	.+156    	; 0x4276 <__stack+0x177>
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
			if (res != FR_OK) {
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
    41da:	89 81       	ldd	r24, Y+1	; 0x01
    41dc:	9a 81       	ldd	r25, Y+2	; 0x02
    41de:	b3 01       	movw	r22, r6
    41e0:	a2 01       	movw	r20, r4
    41e2:	0e 94 e6 13 	call	0x27cc	; 0x27cc <remove_chain>
    41e6:	19 c0       	rjmp	.+50     	; 0x421a <__stack+0x11b>
			} else {
				dir = dj.dir;
    41e8:	eb 89       	ldd	r30, Y+19	; 0x13
    41ea:	fc 89       	ldd	r31, Y+20	; 0x14
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
    41ec:	80 e1       	ldi	r24, 0x10	; 16
    41ee:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
    41f0:	8d a1       	lds	r24, 0x4d
    41f2:	86 8b       	std	Z+22, r24	; 0x16
    41f4:	8e a1       	lds	r24, 0x4e
    41f6:	87 8b       	std	Z+23, r24	; 0x17
    41f8:	8f a1       	lds	r24, 0x4f
    41fa:	80 8f       	std	Z+24, r24	; 0x18
    41fc:	88 a5       	lds	r24, 0x68
    41fe:	81 8f       	std	Z+25, r24	; 0x19
				st_clust(dir, dcl);					/* Table start cluster */
    4200:	cf 01       	movw	r24, r30
    4202:	b3 01       	movw	r22, r6
    4204:	a2 01       	movw	r20, r4
    4206:	0e 94 50 05 	call	0xaa0	; 0xaa0 <st_clust>
				dj.fs->wflag = 1;
    420a:	89 81       	ldd	r24, Y+1	; 0x01
    420c:	9a 81       	ldd	r25, Y+2	; 0x02
    420e:	21 e0       	ldi	r18, 0x01	; 1
    4210:	fc 01       	movw	r30, r24
    4212:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    4214:	0e 94 9f 0b 	call	0x173e	; 0x173e <sync>
    4218:	18 2f       	mov	r17, r24
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    421a:	81 2f       	mov	r24, r17
    421c:	a8 96       	adiw	r28, 0x28	; 40
    421e:	0f b6       	in	r0, 0x3f	; 63
    4220:	f8 94       	cli
    4222:	de bf       	out	0x3e, r29	; 62
    4224:	0f be       	out	0x3f, r0	; 63
    4226:	cd bf       	out	0x3d, r28	; 61
    4228:	df 91       	pop	r29
    422a:	cf 91       	pop	r28
    422c:	1f 91       	pop	r17
    422e:	0f 91       	pop	r16
    4230:	ff 90       	pop	r15
    4232:	ef 90       	pop	r14
    4234:	df 90       	pop	r13
    4236:	cf 90       	pop	r12
    4238:	bf 90       	pop	r11
    423a:	af 90       	pop	r10
    423c:	9f 90       	pop	r9
    423e:	8f 90       	pop	r8
    4240:	7f 90       	pop	r7
    4242:	6f 90       	pop	r6
    4244:	5f 90       	pop	r5
    4246:	4f 90       	pop	r4
    4248:	3f 90       	pop	r3
    424a:	2f 90       	pop	r2
    424c:	08 95       	ret
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
    424e:	89 81       	ldd	r24, Y+1	; 0x01
    4250:	9a 81       	ldd	r25, Y+2	; 0x02
    4252:	40 e0       	ldi	r20, 0x00	; 0
    4254:	50 e0       	ldi	r21, 0x00	; 0
    4256:	ba 01       	movw	r22, r20
    4258:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <create_chain>
    425c:	2b 01       	movw	r4, r22
    425e:	3c 01       	movw	r6, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    4260:	61 15       	cp	r22, r1
    4262:	71 05       	cpc	r23, r1
    4264:	81 05       	cpc	r24, r1
    4266:	91 05       	cpc	r25, r1
    4268:	09 f4       	brne	.+2      	; 0x426c <__stack+0x16d>
    426a:	13 cf       	rjmp	.-474    	; 0x4092 <f_mkdir+0xac>
    426c:	00 cf       	rjmp	.-512    	; 0x406e <f_mkdir+0x88>
			if (dcl == 1) res = FR_INT_ERR;
    426e:	12 e0       	ldi	r17, 0x02	; 2
    4270:	b4 cf       	rjmp	.-152    	; 0x41da <__stack+0xdb>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    4272:	11 e0       	ldi	r17, 0x01	; 1
    4274:	b2 cf       	rjmp	.-156    	; 0x41da <__stack+0xdb>
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
    4276:	ce 01       	movw	r24, r28
    4278:	01 96       	adiw	r24, 0x01	; 1
    427a:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <dir_register>
    427e:	18 2f       	mov	r17, r24
			if (res != FR_OK) {
    4280:	88 23       	and	r24, r24
    4282:	09 f4       	brne	.+2      	; 0x4286 <__stack+0x187>
    4284:	b1 cf       	rjmp	.-158    	; 0x41e8 <__stack+0xe9>
    4286:	a9 cf       	rjmp	.-174    	; 0x41da <__stack+0xdb>

00004288 <f_chmod>:
FRESULT f_chmod (
	const TCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    4288:	0f 93       	push	r16
    428a:	1f 93       	push	r17
    428c:	cf 93       	push	r28
    428e:	df 93       	push	r29
    4290:	cd b7       	in	r28, 0x3d	; 61
    4292:	de b7       	in	r29, 0x3e	; 62
    4294:	a4 97       	sbiw	r28, 0x24	; 36
    4296:	0f b6       	in	r0, 0x3f	; 63
    4298:	f8 94       	cli
    429a:	de bf       	out	0x3e, r29	; 62
    429c:	0f be       	out	0x3f, r0	; 63
    429e:	cd bf       	out	0x3d, r28	; 61
    42a0:	9c a3       	lds	r25, 0x5c
    42a2:	8b a3       	lds	r24, 0x5b
    42a4:	06 2f       	mov	r16, r22
    42a6:	14 2f       	mov	r17, r20
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    42a8:	ce 01       	movw	r24, r28
    42aa:	83 96       	adiw	r24, 0x23	; 35
    42ac:	be 01       	movw	r22, r28
    42ae:	6f 5f       	subi	r22, 0xFF	; 255
    42b0:	7f 4f       	sbci	r23, 0xFF	; 255
    42b2:	41 e0       	ldi	r20, 0x01	; 1
    42b4:	0e 94 a8 06 	call	0xd50	; 0xd50 <chk_mounted>
	if (res == FR_OK) {
    42b8:	88 23       	and	r24, r24
    42ba:	29 f5       	brne	.+74     	; 0x4306 <f_chmod+0x7e>
		INIT_BUF(dj);
    42bc:	ce 01       	movw	r24, r28
    42be:	47 96       	adiw	r24, 0x17	; 23
    42c0:	9e 8b       	std	Y+22, r25	; 0x16
    42c2:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);		/* Follow the file path */
    42c4:	6b a1       	lds	r22, 0x4b
    42c6:	7c a1       	lds	r23, 0x4c
    42c8:	ce 01       	movw	r24, r28
    42ca:	01 96       	adiw	r24, 0x01	; 1
    42cc:	0e 94 ac 11 	call	0x2358	; 0x2358 <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    42d0:	88 23       	and	r24, r24
    42d2:	c9 f4       	brne	.+50     	; 0x4306 <f_chmod+0x7e>
    42d4:	ed 89       	ldd	r30, Y+21	; 0x15
    42d6:	fe 89       	ldd	r31, Y+22	; 0x16
    42d8:	83 85       	ldd	r24, Z+11	; 0x0b
    42da:	85 ff       	sbrs	r24, 5
    42dc:	1f c0       	rjmp	.+62     	; 0x431c <f_chmod+0x94>
			res = FR_INVALID_NAME;
    42de:	86 e0       	ldi	r24, 0x06	; 6
    42e0:	12 c0       	rjmp	.+36     	; 0x4306 <f_chmod+0x7e>
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    42e2:	17 72       	andi	r17, 0x27	; 39
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    42e4:	91 2f       	mov	r25, r17
    42e6:	90 95       	com	r25
    42e8:	83 85       	ldd	r24, Z+11	; 0x0b
    42ea:	89 23       	and	r24, r25
    42ec:	01 23       	and	r16, r17
    42ee:	18 2f       	mov	r17, r24
    42f0:	10 2b       	or	r17, r16
    42f2:	13 87       	std	Z+11, r17	; 0x0b
				dj.fs->wflag = 1;
    42f4:	89 81       	ldd	r24, Y+1	; 0x01
    42f6:	9a 81       	ldd	r25, Y+2	; 0x02
    42f8:	21 e0       	ldi	r18, 0x01	; 1
    42fa:	fc 01       	movw	r30, r24
    42fc:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    42fe:	0e 94 9f 0b 	call	0x173e	; 0x173e <sync>
    4302:	01 c0       	rjmp	.+2      	; 0x4306 <f_chmod+0x7e>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
    4304:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    4306:	a4 96       	adiw	r28, 0x24	; 36
    4308:	0f b6       	in	r0, 0x3f	; 63
    430a:	f8 94       	cli
    430c:	de bf       	out	0x3e, r29	; 62
    430e:	0f be       	out	0x3f, r0	; 63
    4310:	cd bf       	out	0x3d, r28	; 61
    4312:	df 91       	pop	r29
    4314:	cf 91       	pop	r28
    4316:	1f 91       	pop	r17
    4318:	0f 91       	pop	r16
    431a:	08 95       	ret
		res = follow_path(&dj, path);		/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    431c:	eb 89       	ldd	r30, Y+19	; 0x13
    431e:	fc 89       	ldd	r31, Y+20	; 0x14
			if (!dir) {						/* Is it a root directory? */
    4320:	30 97       	sbiw	r30, 0x00	; 0
    4322:	f9 f6       	brne	.-66     	; 0x42e2 <f_chmod+0x5a>
    4324:	ef cf       	rjmp	.-34     	; 0x4304 <f_chmod+0x7c>

00004326 <f_utime>:

FRESULT f_utime (
	const TCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the time stamp to be set */
)
{
    4326:	0f 93       	push	r16
    4328:	1f 93       	push	r17
    432a:	cf 93       	push	r28
    432c:	df 93       	push	r29
    432e:	cd b7       	in	r28, 0x3d	; 61
    4330:	de b7       	in	r29, 0x3e	; 62
    4332:	a4 97       	sbiw	r28, 0x24	; 36
    4334:	0f b6       	in	r0, 0x3f	; 63
    4336:	f8 94       	cli
    4338:	de bf       	out	0x3e, r29	; 62
    433a:	0f be       	out	0x3f, r0	; 63
    433c:	cd bf       	out	0x3d, r28	; 61
    433e:	9c a3       	lds	r25, 0x5c
    4340:	8b a3       	lds	r24, 0x5b
    4342:	8b 01       	movw	r16, r22
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    4344:	ce 01       	movw	r24, r28
    4346:	83 96       	adiw	r24, 0x23	; 35
    4348:	be 01       	movw	r22, r28
    434a:	6f 5f       	subi	r22, 0xFF	; 255
    434c:	7f 4f       	sbci	r23, 0xFF	; 255
    434e:	41 e0       	ldi	r20, 0x01	; 1
    4350:	0e 94 a8 06 	call	0xd50	; 0xd50 <chk_mounted>
	if (res == FR_OK) {
    4354:	88 23       	and	r24, r24
    4356:	61 f5       	brne	.+88     	; 0x43b0 <f_utime+0x8a>
		INIT_BUF(dj);
    4358:	ce 01       	movw	r24, r28
    435a:	47 96       	adiw	r24, 0x17	; 23
    435c:	9e 8b       	std	Y+22, r25	; 0x16
    435e:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    4360:	6b a1       	lds	r22, 0x4b
    4362:	7c a1       	lds	r23, 0x4c
    4364:	ce 01       	movw	r24, r28
    4366:	01 96       	adiw	r24, 0x01	; 1
    4368:	0e 94 ac 11 	call	0x2358	; 0x2358 <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
    436c:	88 23       	and	r24, r24
    436e:	01 f5       	brne	.+64     	; 0x43b0 <f_utime+0x8a>
    4370:	ed 89       	ldd	r30, Y+21	; 0x15
    4372:	fe 89       	ldd	r31, Y+22	; 0x16
    4374:	83 85       	ldd	r24, Z+11	; 0x0b
    4376:	85 ff       	sbrs	r24, 5
    4378:	26 c0       	rjmp	.+76     	; 0x43c6 <f_utime+0xa0>
			res = FR_INVALID_NAME;
    437a:	86 e0       	ldi	r24, 0x06	; 6
    437c:	19 c0       	rjmp	.+50     	; 0x43b0 <f_utime+0x8a>
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    437e:	d8 01       	movw	r26, r16
    4380:	16 96       	adiw	r26, 0x06	; 6
    4382:	8c 91       	ld	r24, X
    4384:	16 97       	sbiw	r26, 0x06	; 6
    4386:	86 8b       	std	Z+22, r24	; 0x16
    4388:	17 96       	adiw	r26, 0x07	; 7
    438a:	8c 91       	ld	r24, X
    438c:	17 97       	sbiw	r26, 0x07	; 7
    438e:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    4390:	14 96       	adiw	r26, 0x04	; 4
    4392:	8c 91       	ld	r24, X
    4394:	14 97       	sbiw	r26, 0x04	; 4
    4396:	80 8f       	std	Z+24, r24	; 0x18
    4398:	15 96       	adiw	r26, 0x05	; 5
    439a:	8c 91       	ld	r24, X
    439c:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
    439e:	89 81       	ldd	r24, Y+1	; 0x01
    43a0:	9a 81       	ldd	r25, Y+2	; 0x02
    43a2:	21 e0       	ldi	r18, 0x01	; 1
    43a4:	fc 01       	movw	r30, r24
    43a6:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
    43a8:	0e 94 9f 0b 	call	0x173e	; 0x173e <sync>
    43ac:	01 c0       	rjmp	.+2      	; 0x43b0 <f_utime+0x8a>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
    43ae:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    43b0:	a4 96       	adiw	r28, 0x24	; 36
    43b2:	0f b6       	in	r0, 0x3f	; 63
    43b4:	f8 94       	cli
    43b6:	de bf       	out	0x3e, r29	; 62
    43b8:	0f be       	out	0x3f, r0	; 63
    43ba:	cd bf       	out	0x3d, r28	; 61
    43bc:	df 91       	pop	r29
    43be:	cf 91       	pop	r28
    43c0:	1f 91       	pop	r17
    43c2:	0f 91       	pop	r16
    43c4:	08 95       	ret
		res = follow_path(&dj, path);	/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
    43c6:	eb 89       	ldd	r30, Y+19	; 0x13
    43c8:	fc 89       	ldd	r31, Y+20	; 0x14
			if (!dir) {					/* Root directory */
    43ca:	30 97       	sbiw	r30, 0x00	; 0
    43cc:	c1 f6       	brne	.-80     	; 0x437e <f_utime+0x58>
    43ce:	ef cf       	rjmp	.-34     	; 0x43ae <f_utime+0x88>

000043d0 <f_rename>:

FRESULT f_rename (
	const TCHAR *path_old,	/* Pointer to the old name */
	const TCHAR *path_new	/* Pointer to the new name */
)
{
    43d0:	ef 92       	push	r14
    43d2:	ff 92       	push	r15
    43d4:	0f 93       	push	r16
    43d6:	1f 93       	push	r17
    43d8:	cf 93       	push	r28
    43da:	df 93       	push	r29
    43dc:	cd b7       	in	r28, 0x3d	; 61
    43de:	de b7       	in	r29, 0x3e	; 62
    43e0:	cf 54       	subi	r28, 0x4F	; 79
    43e2:	d0 40       	sbci	r29, 0x00	; 0
    43e4:	0f b6       	in	r0, 0x3f	; 63
    43e6:	f8 94       	cli
    43e8:	de bf       	out	0x3e, r29	; 62
    43ea:	0f be       	out	0x3f, r0	; 63
    43ec:	cd bf       	out	0x3d, r28	; 61
    43ee:	60 96       	adiw	r28, 0x10	; 16
    43f0:	9f af       	sts	0x7f, r25
    43f2:	8e af       	sts	0x7e, r24
    43f4:	60 97       	sbiw	r28, 0x10	; 16
    43f6:	8b 01       	movw	r16, r22
	BYTE buf[21], *dir;
	DWORD dw;
	DEF_NAMEBUF;


	res = chk_mounted(&path_old, &djo.fs, 1);
    43f8:	ce 01       	movw	r24, r28
    43fa:	82 5b       	subi	r24, 0xB2	; 178
    43fc:	9f 4f       	sbci	r25, 0xFF	; 255
    43fe:	be 01       	movw	r22, r28
    4400:	6f 5f       	subi	r22, 0xFF	; 255
    4402:	7f 4f       	sbci	r23, 0xFF	; 255
    4404:	41 e0       	ldi	r20, 0x01	; 1
    4406:	0e 94 a8 06 	call	0xd50	; 0xd50 <chk_mounted>
	if (res == FR_OK) {
    440a:	88 23       	and	r24, r24
    440c:	09 f0       	breq	.+2      	; 0x4410 <f_rename+0x40>
    440e:	b1 c0       	rjmp	.+354    	; 0x4572 <f_rename+0x1a2>
		djn.fs = djo.fs;
    4410:	89 81       	ldd	r24, Y+1	; 0x01
    4412:	9a 81       	ldd	r25, Y+2	; 0x02
    4414:	98 8f       	std	Y+24, r25	; 0x18
    4416:	8f 8b       	std	Y+23, r24	; 0x17
		INIT_BUF(djo);
    4418:	ce 01       	movw	r24, r28
    441a:	8e 5b       	subi	r24, 0xBE	; 190
    441c:	9f 4f       	sbci	r25, 0xFF	; 255
    441e:	9e 8b       	std	Y+22, r25	; 0x16
    4420:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&djo, path_old);		/* Check old object */
    4422:	60 96       	adiw	r28, 0x10	; 16
    4424:	6e ad       	sts	0x6e, r22
    4426:	7f ad       	sts	0x6f, r23
    4428:	60 97       	sbiw	r28, 0x10	; 16
    442a:	ce 01       	movw	r24, r28
    442c:	01 96       	adiw	r24, 0x01	; 1
    442e:	0e 94 ac 11 	call	0x2358	; 0x2358 <follow_path>
		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
    4432:	88 23       	and	r24, r24
    4434:	09 f0       	breq	.+2      	; 0x4438 <f_rename+0x68>
    4436:	9d c0       	rjmp	.+314    	; 0x4572 <f_rename+0x1a2>
    4438:	ed 89       	ldd	r30, Y+21	; 0x15
    443a:	fe 89       	ldd	r31, Y+22	; 0x16
    443c:	83 85       	ldd	r24, Z+11	; 0x0b
    443e:	85 ff       	sbrs	r24, 5
    4440:	a6 c0       	rjmp	.+332    	; 0x458e <f_rename+0x1be>
			res = FR_INVALID_NAME;
    4442:	86 e0       	ldi	r24, 0x06	; 6
    4444:	96 c0       	rjmp	.+300    	; 0x4572 <f_rename+0x1a2>
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
    4446:	65 5f       	subi	r22, 0xF5	; 245
    4448:	7f 4f       	sbci	r23, 0xFF	; 255
    444a:	ce 01       	movw	r24, r28
    444c:	8d 96       	adiw	r24, 0x2d	; 45
    444e:	45 e1       	ldi	r20, 0x15	; 21
    4450:	50 e0       	ldi	r21, 0x00	; 0
    4452:	0e 94 14 05 	call	0xa28	; 0xa28 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Check new object */
    4456:	ce 01       	movw	r24, r28
    4458:	47 96       	adiw	r24, 0x17	; 23
    445a:	be 01       	movw	r22, r28
    445c:	6f 5f       	subi	r22, 0xFF	; 255
    445e:	7f 4f       	sbci	r23, 0xFF	; 255
    4460:	46 e1       	ldi	r20, 0x16	; 22
    4462:	50 e0       	ldi	r21, 0x00	; 0
    4464:	0e 94 14 05 	call	0xa28	; 0xa28 <mem_cpy>
				res = follow_path(&djn, path_new);
    4468:	ce 01       	movw	r24, r28
    446a:	47 96       	adiw	r24, 0x17	; 23
    446c:	b8 01       	movw	r22, r16
    446e:	0e 94 ac 11 	call	0x2358	; 0x2358 <follow_path>
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    4472:	88 23       	and	r24, r24
    4474:	09 f4       	brne	.+2      	; 0x4478 <f_rename+0xa8>
    4476:	7a c0       	rjmp	.+244    	; 0x456c <f_rename+0x19c>
				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
    4478:	84 30       	cpi	r24, 0x04	; 4
    447a:	09 f0       	breq	.+2      	; 0x447e <f_rename+0xae>
    447c:	7a c0       	rjmp	.+244    	; 0x4572 <f_rename+0x1a2>
/* Start critical section that an interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
    447e:	ce 01       	movw	r24, r28
    4480:	47 96       	adiw	r24, 0x17	; 23
    4482:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <dir_register>
					if (res == FR_OK) {
    4486:	88 23       	and	r24, r24
    4488:	09 f0       	breq	.+2      	; 0x448c <f_rename+0xbc>
    448a:	73 c0       	rjmp	.+230    	; 0x4572 <f_rename+0x1a2>
						dir = djn.dir;					/* Copy object information except for name */
    448c:	09 a5       	lds	r16, 0x69
    448e:	1a a5       	lds	r17, 0x6a
						mem_cpy(dir+13, buf+2, 19);
    4490:	c8 01       	movw	r24, r16
    4492:	0d 96       	adiw	r24, 0x0d	; 13
    4494:	be 01       	movw	r22, r28
    4496:	61 5d       	subi	r22, 0xD1	; 209
    4498:	7f 4f       	sbci	r23, 0xFF	; 255
    449a:	43 e1       	ldi	r20, 0x13	; 19
    449c:	50 e0       	ldi	r21, 0x00	; 0
    449e:	0e 94 14 05 	call	0xa28	; 0xa28 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
    44a2:	8d a5       	lds	r24, 0x6d
    44a4:	80 62       	ori	r24, 0x20	; 32
    44a6:	f8 01       	movw	r30, r16
    44a8:	83 87       	std	Z+11, r24	; 0x0b
						djo.fs->wflag = 1;
    44aa:	e9 80       	ldd	r14, Y+1	; 0x01
    44ac:	fa 80       	ldd	r15, Y+2	; 0x02
    44ae:	81 e0       	ldi	r24, 0x01	; 1
    44b0:	f7 01       	movw	r30, r14
    44b2:	84 83       	std	Z+4, r24	; 0x04
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
    44b4:	4f 81       	ldd	r20, Y+7	; 0x07
    44b6:	58 85       	ldd	r21, Y+8	; 0x08
    44b8:	69 85       	ldd	r22, Y+9	; 0x09
    44ba:	7a 85       	ldd	r23, Y+10	; 0x0a
    44bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44c0:	af 8d       	ldd	r26, Y+31	; 0x1f
    44c2:	b8 a1       	lds	r27, 0x48
    44c4:	48 17       	cp	r20, r24
    44c6:	59 07       	cpc	r21, r25
    44c8:	6a 07       	cpc	r22, r26
    44ca:	7b 07       	cpc	r23, r27
    44cc:	09 f4       	brne	.+2      	; 0x44d0 <f_rename+0x100>
    44ce:	43 c0       	rjmp	.+134    	; 0x4556 <f_rename+0x186>
    44d0:	f8 01       	movw	r30, r16
    44d2:	83 85       	ldd	r24, Z+11	; 0x0b
    44d4:	84 ff       	sbrs	r24, 4
    44d6:	3f c0       	rjmp	.+126    	; 0x4556 <f_rename+0x186>
							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
    44d8:	c7 01       	movw	r24, r14
    44da:	b8 01       	movw	r22, r16
    44dc:	0e 94 2b 05 	call	0xa56	; 0xa56 <ld_clust>
    44e0:	ab 01       	movw	r20, r22
    44e2:	bc 01       	movw	r22, r24
    44e4:	c7 01       	movw	r24, r14
    44e6:	0e 94 2f 0c 	call	0x185e	; 0x185e <clust2sect>
    44ea:	ab 01       	movw	r20, r22
    44ec:	bc 01       	movw	r22, r24
							if (!dw) {
    44ee:	41 15       	cp	r20, r1
    44f0:	51 05       	cpc	r21, r1
    44f2:	61 05       	cpc	r22, r1
    44f4:	71 05       	cpc	r23, r1
    44f6:	09 f4       	brne	.+2      	; 0x44fa <f_rename+0x12a>
    44f8:	51 c0       	rjmp	.+162    	; 0x459c <f_rename+0x1cc>
								res = FR_INT_ERR;
							} else {
								res = move_window(djo.fs, dw);
    44fa:	c7 01       	movw	r24, r14
    44fc:	0e 94 19 0b 	call	0x1632	; 0x1632 <move_window>
								dir = djo.fs->win+SZ_DIR;	/* .. entry */
    4500:	e9 81       	ldd	r30, Y+1	; 0x01
    4502:	fa 81       	ldd	r31, Y+2	; 0x02
								if (res == FR_OK && dir[1] == '.') {
    4504:	88 23       	and	r24, r24
    4506:	a9 f5       	brne	.+106    	; 0x4572 <f_rename+0x1a2>
    4508:	df 01       	movw	r26, r30
    450a:	ad 5a       	subi	r26, 0xAD	; 173
    450c:	bf 4f       	sbci	r27, 0xFF	; 255
    450e:	8c 91       	ld	r24, X
    4510:	8e 32       	cpi	r24, 0x2E	; 46
    4512:	09 f5       	brne	.+66     	; 0x4556 <f_rename+0x186>
									dw = (djo.fs->fs_type == FS_FAT32 && djn.sclust == djo.fs->dirbase) ? 0 : djn.sclust;
    4514:	80 81       	ld	r24, Z
    4516:	83 30       	cpi	r24, 0x03	; 3
    4518:	69 f4       	brne	.+26     	; 0x4534 <f_rename+0x164>
    451a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    451c:	5e 8d       	ldd	r21, Y+30	; 0x1e
    451e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    4520:	78 a1       	lds	r23, 0x48
    4522:	86 a1       	lds	r24, 0x46
    4524:	97 a1       	lds	r25, 0x47
    4526:	a0 a5       	lds	r26, 0x60
    4528:	b1 a5       	lds	r27, 0x61
    452a:	48 17       	cp	r20, r24
    452c:	59 07       	cpc	r21, r25
    452e:	6a 07       	cpc	r22, r26
    4530:	7b 07       	cpc	r23, r27
    4532:	29 f0       	breq	.+10     	; 0x453e <f_rename+0x16e>
    4534:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4536:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4538:	6f 8d       	ldd	r22, Y+31	; 0x1f
    453a:	78 a1       	lds	r23, 0x48
    453c:	03 c0       	rjmp	.+6      	; 0x4544 <f_rename+0x174>
    453e:	40 e0       	ldi	r20, 0x00	; 0
    4540:	50 e0       	ldi	r21, 0x00	; 0
    4542:	ba 01       	movw	r22, r20
									st_clust(dir, dw);
    4544:	cf 01       	movw	r24, r30
    4546:	8e 5a       	subi	r24, 0xAE	; 174
    4548:	9f 4f       	sbci	r25, 0xFF	; 255
    454a:	0e 94 50 05 	call	0xaa0	; 0xaa0 <st_clust>
									djo.fs->wflag = 1;
    454e:	e9 81       	ldd	r30, Y+1	; 0x01
    4550:	fa 81       	ldd	r31, Y+2	; 0x02
    4552:	81 e0       	ldi	r24, 0x01	; 1
    4554:	84 83       	std	Z+4, r24	; 0x04
								}
							}
						}
						if (res == FR_OK) {
							res = dir_remove(&djo);		/* Remove old entry */
    4556:	ce 01       	movw	r24, r28
    4558:	01 96       	adiw	r24, 0x01	; 1
    455a:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <dir_remove>
							if (res == FR_OK)
    455e:	88 23       	and	r24, r24
    4560:	41 f4       	brne	.+16     	; 0x4572 <f_rename+0x1a2>
								res = sync(djo.fs);
    4562:	89 81       	ldd	r24, Y+1	; 0x01
    4564:	9a 81       	ldd	r25, Y+2	; 0x02
    4566:	0e 94 9f 0b 	call	0x173e	; 0x173e <sync>
    456a:	03 c0       	rjmp	.+6      	; 0x4572 <f_rename+0x1a2>
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Check new object */
				res = follow_path(&djn, path_new);
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    456c:	88 e0       	ldi	r24, 0x08	; 8
    456e:	01 c0       	rjmp	.+2      	; 0x4572 <f_rename+0x1a2>
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
    4570:	84 e0       	ldi	r24, 0x04	; 4
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
    4572:	c1 5b       	subi	r28, 0xB1	; 177
    4574:	df 4f       	sbci	r29, 0xFF	; 255
    4576:	0f b6       	in	r0, 0x3f	; 63
    4578:	f8 94       	cli
    457a:	de bf       	out	0x3e, r29	; 62
    457c:	0f be       	out	0x3f, r0	; 63
    457e:	cd bf       	out	0x3d, r28	; 61
    4580:	df 91       	pop	r29
    4582:	cf 91       	pop	r28
    4584:	1f 91       	pop	r17
    4586:	0f 91       	pop	r16
    4588:	ff 90       	pop	r15
    458a:	ef 90       	pop	r14
    458c:	08 95       	ret
			res = FR_INVALID_NAME;
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
    458e:	6b 89       	ldd	r22, Y+19	; 0x13
    4590:	7c 89       	ldd	r23, Y+20	; 0x14
    4592:	61 15       	cp	r22, r1
    4594:	71 05       	cpc	r23, r1
    4596:	09 f0       	breq	.+2      	; 0x459a <f_rename+0x1ca>
    4598:	56 cf       	rjmp	.-340    	; 0x4446 <f_rename+0x76>
    459a:	ea cf       	rjmp	.-44     	; 0x4570 <f_rename+0x1a0>
						dir[DIR_Attr] = buf[0] | AM_ARC;
						djo.fs->wflag = 1;
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
							if (!dw) {
								res = FR_INT_ERR;
    459c:	82 e0       	ldi	r24, 0x02	; 2
    459e:	e9 cf       	rjmp	.-46     	; 0x4572 <f_rename+0x1a2>

000045a0 <crankClock>:
}

void crankClock(){
	// Call after sdInit()
	// crank up clock rate fck/4
	SPCR &= 0b11111100;
    45a0:	8c b5       	in	r24, 0x2c	; 44
    45a2:	8c 7f       	andi	r24, 0xFC	; 252
    45a4:	8c bd       	out	0x2c, r24	; 44
	SPSR &= 0b11111110;
    45a6:	8d b5       	in	r24, 0x2d	; 45
    45a8:	8e 7f       	andi	r24, 0xFE	; 254
    45aa:	8d bd       	out	0x2d, r24	; 45
}
    45ac:	08 95       	ret

000045ae <ledInit>:
}

//LED Functions-------------------------------------------------------------

void ledInit(){
	DDRD = 0b01100000;  // Enabling PD5&PD6
    45ae:	80 e6       	ldi	r24, 0x60	; 96
    45b0:	8a b9       	out	0x0a, r24	; 10
}
    45b2:	08 95       	ret

000045b4 <SPI_MasterInit>:
//SPI Functions-------------------------------------------------------------

void SPI_MasterInit(void){
	//Function modified from ATmega 1284P Datasheet
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<CS2)|(1<<CS1)|(1<<MOSI)|(1<<SCK);
    45b4:	84 b1       	in	r24, 0x04	; 4
    45b6:	84 6b       	ori	r24, 0xB4	; 180
    45b8:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI, Master, set clock rate fck/4 -> 250kHz */
	SPCR = (1<<SPE)|(1<<MSTR);
    45ba:	80 e5       	ldi	r24, 0x50	; 80
    45bc:	8c bd       	out	0x2c, r24	; 44
	
	// set clock rate fck/64 (SD Initialization)(Crank up After)
	SPCR = SPCR|(0<<SPR0)|(1<<SPR1);
    45be:	8c b5       	in	r24, 0x2c	; 44
    45c0:	82 60       	ori	r24, 0x02	; 2
    45c2:	8c bd       	out	0x2c, r24	; 44
	SPSR = SPSR|(0<<SPI2X);
    45c4:	8d b5       	in	r24, 0x2d	; 45
    45c6:	8d bd       	out	0x2d, r24	; 45
}
    45c8:	08 95       	ret

000045ca <SPI_MasterTransmit>:

void SPI_MasterTransmit(unsigned char cData){
	//Function copied from ATmega 1284P Datasheet
	/* Start transmission */
	SPDR = cData;
    45ca:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
    45cc:	0d b4       	in	r0, 0x2d	; 45
    45ce:	07 fe       	sbrs	r0, 7
    45d0:	fd cf       	rjmp	.-6      	; 0x45cc <SPI_MasterTransmit+0x2>
	;
}
    45d2:	08 95       	ret

000045d4 <SPI_MasterReceive>:

uint8_t SPI_MasterReceive(unsigned char cdata){
	SPDR=cdata;
    45d4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){
    45d6:	0d b4       	in	r0, 0x2d	; 45
    45d8:	07 fe       	sbrs	r0, 7
    45da:	fd cf       	rjmp	.-6      	; 0x45d6 <SPI_MasterReceive+0x2>
		//do nothing
	}
	/* Return Data Register */
	return SPDR;
    45dc:	8e b5       	in	r24, 0x2e	; 46
}
    45de:	08 95       	ret

000045e0 <CS1up>:
	SPSR &= 0b11111110;
}

void CS1up(){
	//SDCARD
	PORTB |= (1<<CS1); //Assert PB2 HIGH
    45e0:	2c 9a       	sbi	0x05, 4	; 5
}
    45e2:	08 95       	ret

000045e4 <CS1down>:

void CS1down(){
	//SDCARD
	PORTB &= ~(1<<CS1); //Assert PB2 LOW
    45e4:	2c 98       	cbi	0x05, 4	; 5
}
    45e6:	08 95       	ret

000045e8 <CS2up>:

void CS2up(){
	//AFE4300
	PORTB |= (1<<CS2); //Assert PB2 HIGH
    45e8:	2a 9a       	sbi	0x05, 2	; 5
}
    45ea:	08 95       	ret

000045ec <CS2down>:

void CS2down(){
	//AFE4300
	PORTB &= ~(1<<CS2); //Assert PB2 LOW
    45ec:	2a 98       	cbi	0x05, 2	; 5
}
    45ee:	08 95       	ret

000045f0 <afeTurnOff>:
		msb_lsb_comb=((uint16_t) msb<<8)|lsb;
		return msb_lsb_comb;
}

void afeTurnOff(){
	CS2down();
    45f0:	0e 94 f6 22 	call	0x45ec	; 0x45ec <CS2down>
	
	//Config Code START
	SPI_MasterTransmit(0x02); // Misc Reg 1
    45f4:	82 e0       	ldi	r24, 0x02	; 2
    45f6:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    45fa:	80 e0       	ldi	r24, 0x00	; 0
    45fc:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4600:	80 e0       	ldi	r24, 0x00	; 0
    4602:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x03); // Misc Reg 2
    4606:	83 e0       	ldi	r24, 0x03	; 3
    4608:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
    460c:	8f ef       	ldi	r24, 0xFF	; 255
    460e:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
    4612:	8f ef       	ldi	r24, 0xFF	; 255
    4614:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x09); // Dev Cont 1
    4618:	89 e0       	ldi	r24, 0x09	; 9
    461a:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x60);
    461e:	80 e6       	ldi	r24, 0x60	; 96
    4620:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4624:	80 e0       	ldi	r24, 0x00	; 0
    4626:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x10); // ADC Control Reg 2
	SPI_MasterTransmit(0x00);
	SPI_MasterTransmit(0x63);
	*/
	SPI_MasterTransmit(0x1A); // Misc Reg 3
    462a:	8a e1       	ldi	r24, 0x1A	; 26
    462c:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4630:	80 e0       	ldi	r24, 0x00	; 0
    4632:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x30);
    4636:	80 e3       	ldi	r24, 0x30	; 48
    4638:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	//Config Code END
	
	//Begin ADC Conversion
	SPI_MasterTransmit(0x01); // ADC Control Reg 1
    463c:	81 e0       	ldi	r24, 0x01	; 1
    463e:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x41); 
    4642:	81 e4       	ldi	r24, 0x41	; 65
    4644:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0xC0); 
    4648:	80 ec       	ldi	r24, 0xC0	; 192
    464a:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	CS2up();
    464e:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <CS2up>
}
    4652:	08 95       	ret

00004654 <AFE_Init_BCM_SS>:
}

//AFE Functions-------------------------------------------------------------

void AFE_Init_BCM_SS(){
	CS2down();
    4654:	0e 94 f6 22 	call	0x45ec	; 0x45ec <CS2down>
	
	//Config Code START
	SPI_MasterTransmit(0x02); // Misc Reg 1
    4658:	82 e0       	ldi	r24, 0x02	; 2
    465a:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    465e:	80 e0       	ldi	r24, 0x00	; 0
    4660:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4664:	80 e0       	ldi	r24, 0x00	; 0
    4666:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x03); // Misc Reg 2
    466a:	83 e0       	ldi	r24, 0x03	; 3
    466c:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
    4670:	8f ef       	ldi	r24, 0xFF	; 255
    4672:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
    4676:	8f ef       	ldi	r24, 0xFF	; 255
    4678:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x09); // Dev Cont 1
    467c:	89 e0       	ldi	r24, 0x09	; 9
    467e:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x60);
    4682:	80 e6       	ldi	r24, 0x60	; 96
    4684:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x06);
    4688:	86 e0       	ldi	r24, 0x06	; 6
    468a:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0A); // ISW Mux
    468e:	8a e0       	ldi	r24, 0x0A	; 10
    4690:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x40);
    4694:	80 e4       	ldi	r24, 0x40	; 64
    4696:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x80);
    469a:	80 e8       	ldi	r24, 0x80	; 128
    469c:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0B); // VSense Mux
    46a0:	8b e0       	ldi	r24, 0x0B	; 11
    46a2:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x40);
    46a6:	80 e4       	ldi	r24, 0x40	; 64
    46a8:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x80);
    46ac:	80 e8       	ldi	r24, 0x80	; 128
    46ae:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0C); // IQ Mode Enable
    46b2:	8c e0       	ldi	r24, 0x0C	; 12
    46b4:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    46b8:	80 e0       	ldi	r24, 0x00	; 0
    46ba:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    46be:	80 e0       	ldi	r24, 0x00	; 0
    46c0:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0D); // Weight Scale Control
    46c4:	8d e0       	ldi	r24, 0x0D	; 13
    46c6:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    46ca:	80 e0       	ldi	r24, 0x00	; 0
    46cc:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    46d0:	80 e0       	ldi	r24, 0x00	; 0
    46d2:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0E); // BCM DAC Freq
    46d6:	8e e0       	ldi	r24, 0x0E	; 14
    46d8:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00); // Avg current Output = 300uA
    46dc:	80 e0       	ldi	r24, 0x00	; 0
    46de:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x0F); // 14kHz, Good up to 64kHz (0x41)
    46e2:	8f e0       	ldi	r24, 0x0F	; 15
    46e4:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>

	
	SPI_MasterTransmit(0x0F); // Dev Cont 2
    46e8:	8f e0       	ldi	r24, 0x0F	; 15
    46ea:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    46ee:	80 e0       	ldi	r24, 0x00	; 0
    46f0:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    46f4:	80 e0       	ldi	r24, 0x00	; 0
    46f6:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x10); // ADC Control Reg 2
    46fa:	80 e1       	ldi	r24, 0x10	; 16
    46fc:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4700:	80 e0       	ldi	r24, 0x00	; 0
    4702:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x63);
    4706:	83 e6       	ldi	r24, 0x63	; 99
    4708:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x1A); // Misc Reg 3
    470c:	8a e1       	ldi	r24, 0x1A	; 26
    470e:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4712:	80 e0       	ldi	r24, 0x00	; 0
    4714:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x30);
    4718:	80 e3       	ldi	r24, 0x30	; 48
    471a:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	//Config Code END
	
	//Begin ADC Conversion
	SPI_MasterTransmit(0x01); // ADC Control Reg 1
    471e:	81 e0       	ldi	r24, 0x01	; 1
    4720:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	//SPI_MasterTransmit(0xC9); // Single Ended ADC Meas Mode
	SPI_MasterTransmit(0xC1); // DIFF MODE 
    4724:	81 ec       	ldi	r24, 0xC1	; 193
    4726:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0xB0); // 64 SPS,
    472a:	80 eb       	ldi	r24, 0xB0	; 176
    472c:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	CS2up();
    4730:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <CS2up>
}
    4734:	08 95       	ret

00004736 <AFE_Init_BCM_Cont>:

void AFE_Init_BCM_Cont(){
	CS2down();
    4736:	0e 94 f6 22 	call	0x45ec	; 0x45ec <CS2down>
	
	//Config Code START
	SPI_MasterTransmit(0x02); // Misc Reg 1
    473a:	82 e0       	ldi	r24, 0x02	; 2
    473c:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4740:	80 e0       	ldi	r24, 0x00	; 0
    4742:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4746:	80 e0       	ldi	r24, 0x00	; 0
    4748:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x03); // Misc Reg 2
    474c:	83 e0       	ldi	r24, 0x03	; 3
    474e:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
    4752:	8f ef       	ldi	r24, 0xFF	; 255
    4754:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
    4758:	8f ef       	ldi	r24, 0xFF	; 255
    475a:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x09); // Dev Cont 1
    475e:	89 e0       	ldi	r24, 0x09	; 9
    4760:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x60);
    4764:	80 e6       	ldi	r24, 0x60	; 96
    4766:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x06);
    476a:	86 e0       	ldi	r24, 0x06	; 6
    476c:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0A); // ISW Mux
    4770:	8a e0       	ldi	r24, 0x0A	; 10
    4772:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x40);
    4776:	80 e4       	ldi	r24, 0x40	; 64
    4778:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x80);
    477c:	80 e8       	ldi	r24, 0x80	; 128
    477e:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0B); // VSense Mux
    4782:	8b e0       	ldi	r24, 0x0B	; 11
    4784:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x40);
    4788:	80 e4       	ldi	r24, 0x40	; 64
    478a:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x80);
    478e:	80 e8       	ldi	r24, 0x80	; 128
    4790:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0C); // IQ Mode Enable
    4794:	8c e0       	ldi	r24, 0x0C	; 12
    4796:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    479a:	80 e0       	ldi	r24, 0x00	; 0
    479c:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    47a0:	80 e0       	ldi	r24, 0x00	; 0
    47a2:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0D); // Weight Scale Control
    47a6:	8d e0       	ldi	r24, 0x0D	; 13
    47a8:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    47ac:	80 e0       	ldi	r24, 0x00	; 0
    47ae:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    47b2:	80 e0       	ldi	r24, 0x00	; 0
    47b4:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0E); // BCM DAC Freq
    47b8:	8e e0       	ldi	r24, 0x0E	; 14
    47ba:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x01);
    47be:	81 e0       	ldi	r24, 0x01	; 1
    47c0:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    47c4:	80 e0       	ldi	r24, 0x00	; 0
    47c6:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0F); // Dev Cont 2
    47ca:	8f e0       	ldi	r24, 0x0F	; 15
    47cc:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    47d0:	80 e0       	ldi	r24, 0x00	; 0
    47d2:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    47d6:	80 e0       	ldi	r24, 0x00	; 0
    47d8:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x10); // ADC Control Reg 2
    47dc:	80 e1       	ldi	r24, 0x10	; 16
    47de:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    47e2:	80 e0       	ldi	r24, 0x00	; 0
    47e4:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x63);
    47e8:	83 e6       	ldi	r24, 0x63	; 99
    47ea:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x1A); // Misc Reg 3
    47ee:	8a e1       	ldi	r24, 0x1A	; 26
    47f0:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    47f4:	80 e0       	ldi	r24, 0x00	; 0
    47f6:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x30);
    47fa:	80 e3       	ldi	r24, 0x30	; 48
    47fc:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	//Config Code END
	
	//Begin ADC Conversion
	SPI_MasterTransmit(0x01); // ADC Control Reg 1
    4800:	81 e0       	ldi	r24, 0x01	; 1
    4802:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x41); // Continuous Conversion w/ Differential Input
    4806:	81 e4       	ldi	r24, 0x41	; 65
    4808:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x50); //<-250 Samples/Sec
    480c:	80 e5       	ldi	r24, 0x50	; 80
    480e:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	CS2up();
    4812:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <CS2up>
}
    4816:	08 95       	ret

00004818 <readBCM>:

uint16_t readBCM(){
	AFE_Init_BCM_SS(); //BCM Read Single Shot Mode
    4818:	0e 94 2a 23 	call	0x4654	; 0x4654 <AFE_Init_BCM_SS>
	
	//Polling for RDY (PINB0 must transition 1>0)
	while(PINB & 0x01){}
    481c:	18 99       	sbic	0x03, 0	; 3
    481e:	fe cf       	rjmp	.-4      	; 0x481c <readBCM+0x4>

	//Read Conversion Data
	CS2down();
    4820:	0e 94 f6 22 	call	0x45ec	; 0x45ec <CS2down>
	SPI_MasterTransmit(0x20);
    4824:	80 e2       	ldi	r24, 0x20	; 32
    4826:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	msb=SPI_MasterReceive(0xff);
    482a:	8f ef       	ldi	r24, 0xFF	; 255
    482c:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <SPI_MasterReceive>
    4830:	80 93 66 04 	sts	0x0466, r24
	lsb=SPI_MasterReceive(0xff);
    4834:	8f ef       	ldi	r24, 0xFF	; 255
    4836:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <SPI_MasterReceive>
    483a:	80 93 34 02 	sts	0x0234, r24
	CS2up();
    483e:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <CS2up>

	//Combine [MSB(8) LSB(8)] into 16bit Val
	msb_lsb_comb=((uint16_t) msb<<8)|lsb;
    4842:	30 91 66 04 	lds	r19, 0x0466
    4846:	20 e0       	ldi	r18, 0x00	; 0
    4848:	80 91 34 02 	lds	r24, 0x0234
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	82 2b       	or	r24, r18
    4850:	93 2b       	or	r25, r19
    4852:	90 93 8c 06 	sts	0x068C, r25
    4856:	80 93 8b 06 	sts	0x068B, r24
	return msb_lsb_comb;

}
    485a:	08 95       	ret

0000485c <main>:
uint16_t rtd1Val();
uint16_t rtd2Val();


void main(void)
{
    485c:	cf 93       	push	r28
    485e:	df 93       	push	r29
    4860:	cd b7       	in	r28, 0x3d	; 61
    4862:	de b7       	in	r29, 0x3e	; 62
    4864:	c2 50       	subi	r28, 0x02	; 2
    4866:	d8 40       	sbci	r29, 0x08	; 8
    4868:	0f b6       	in	r0, 0x3f	; 63
    486a:	f8 94       	cli
    486c:	de bf       	out	0x3e, r29	; 62
    486e:	0f be       	out	0x3f, r0	; 63
    4870:	cd bf       	out	0x3d, r28	; 61
	//Initialize LED
	ledInit();
    4872:	0e 94 d7 22 	call	0x45ae	; 0x45ae <ledInit>
					
	//Initialize SPI & SD
	SPI_MasterInit();
    4876:	0e 94 da 22 	call	0x45b4	; 0x45b4 <SPI_MasterInit>
	//fat_init();
	crankClock();
    487a:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <crankClock>
	CS2up();
    487e:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <CS2up>
	
		
	while(1)
	{
		volatile int n[1024]; /* n is an array of integers */
		volatile int arrSize = sizeof(n)/sizeof(n[0]);
    4882:	ee 24       	eor	r14, r14
    4884:	ff 24       	eor	r15, r15
    4886:	68 94       	set
    4888:	f2 f8       	bld	r15, 2
		
		for(int i=0 ; i<arrSize ; i+=4){
    488a:	88 24       	eor	r8, r8
    488c:	99 24       	eor	r9, r9
			
			_delay_ms(1000);
		}
		
		
		errCode = f_write(&file, n, arrSize, &bytesRead); // Will attempt to write string 'helloworld' to file (data.txt)	
    488e:	0f 2e       	mov	r0, r31
    4890:	f9 e3       	ldi	r31, 0x39	; 57
    4892:	cf 2e       	mov	r12, r31
    4894:	f2 e0       	ldi	r31, 0x02	; 2
    4896:	df 2e       	mov	r13, r31
    4898:	f0 2d       	mov	r31, r0
    489a:	0f 2e       	mov	r0, r31
    489c:	f1 e3       	ldi	r31, 0x31	; 49
    489e:	af 2e       	mov	r10, r31
    48a0:	f2 e0       	ldi	r31, 0x02	; 2
    48a2:	bf 2e       	mov	r11, r31
    48a4:	f0 2d       	mov	r31, r0
	
		
	while(1)
	{
		volatile int n[1024]; /* n is an array of integers */
		volatile int arrSize = sizeof(n)/sizeof(n[0]);
    48a6:	fa 82       	std	Y+2, r15	; 0x02
    48a8:	e9 82       	std	Y+1, r14	; 0x01
		
		for(int i=0 ; i<arrSize ; i+=4){
    48aa:	89 81       	ldd	r24, Y+1	; 0x01
    48ac:	9a 81       	ldd	r25, Y+2	; 0x02
    48ae:	18 16       	cp	r1, r24
    48b0:	19 06       	cpc	r1, r25
    48b2:	0c f0       	brlt	.+2      	; 0x48b6 <main+0x5a>
    48b4:	54 c0       	rjmp	.+168    	; 0x495e <main+0x102>
    48b6:	84 01       	movw	r16, r8
uint16_t readWSM();
uint16_t rtd1Val();
uint16_t rtd2Val();


void main(void)
    48b8:	c8 01       	movw	r24, r16
    48ba:	03 96       	adiw	r24, 0x03	; 3
		
		for(int i=0 ; i<arrSize ; i+=4){
			//CS2down();
			//CS2up();
			//DATA_WSM  = readWSM(); ///////////////// NEED TO INITIALIZE ALL OF THE ABOVE STUFF (CS2, CRANK, ETC) WHEN READING BOTH WSM AND BCM
			n[i+3] = DATA_WSM;
    48bc:	20 91 67 04 	lds	r18, 0x0467
    48c0:	30 91 68 04 	lds	r19, 0x0468
    48c4:	88 0f       	add	r24, r24
    48c6:	99 1f       	adc	r25, r25
    48c8:	41 e0       	ldi	r20, 0x01	; 1
    48ca:	50 e0       	ldi	r21, 0x00	; 0
    48cc:	4c 0f       	add	r20, r28
    48ce:	5d 1f       	adc	r21, r29
    48d0:	84 0f       	add	r24, r20
    48d2:	95 1f       	adc	r25, r21
    48d4:	dc 01       	movw	r26, r24
    48d6:	13 96       	adiw	r26, 0x03	; 3
    48d8:	3c 93       	st	X, r19
    48da:	2e 93       	st	-X, r18
    48dc:	12 97       	sbiw	r26, 0x02	; 2
			//CS2down();
			//CS2up();
			DATA_BCM  = readBCM();
    48de:	0e 94 0c 24 	call	0x4818	; 0x4818 <readBCM>
    48e2:	80 93 64 04 	sts	0x0464, r24
    48e6:	90 93 65 04 	sts	0x0465, r25
uint16_t readWSM();
uint16_t rtd1Val();
uint16_t rtd2Val();


void main(void)
    48ea:	98 01       	movw	r18, r16
    48ec:	2e 5f       	subi	r18, 0xFE	; 254
    48ee:	3f 4f       	sbci	r19, 0xFF	; 255
			//DATA_WSM  = readWSM(); ///////////////// NEED TO INITIALIZE ALL OF THE ABOVE STUFF (CS2, CRANK, ETC) WHEN READING BOTH WSM AND BCM
			n[i+3] = DATA_WSM;
			//CS2down();
			//CS2up();
			DATA_BCM  = readBCM();
			n[i+2] = DATA_BCM;
    48f0:	48 2f       	mov	r20, r24
    48f2:	59 2f       	mov	r21, r25
    48f4:	22 0f       	add	r18, r18
    48f6:	33 1f       	adc	r19, r19
    48f8:	e1 e0       	ldi	r30, 0x01	; 1
    48fa:	f0 e0       	ldi	r31, 0x00	; 0
    48fc:	ec 0f       	add	r30, r28
    48fe:	fd 1f       	adc	r31, r29
    4900:	2e 0f       	add	r18, r30
    4902:	3f 1f       	adc	r19, r31
    4904:	d9 01       	movw	r26, r18
    4906:	13 96       	adiw	r26, 0x03	; 3
    4908:	5c 93       	st	X, r21
    490a:	4e 93       	st	-X, r20
    490c:	12 97       	sbiw	r26, 0x02	; 2
			//DATA_RTD1 = 200;
			n[i] = 0;
    490e:	c8 01       	movw	r24, r16
    4910:	88 0f       	add	r24, r24
    4912:	99 1f       	adc	r25, r25
    4914:	8e 0f       	add	r24, r30
    4916:	9f 1f       	adc	r25, r31
    4918:	fc 01       	movw	r30, r24
    491a:	13 82       	std	Z+3, r1	; 0x03
    491c:	12 82       	std	Z+2, r1	; 0x02
uint16_t readWSM();
uint16_t rtd1Val();
uint16_t rtd2Val();


void main(void)
    491e:	c8 01       	movw	r24, r16
    4920:	01 96       	adiw	r24, 0x01	; 1
			DATA_BCM  = readBCM();
			n[i+2] = DATA_BCM;
			//DATA_RTD1 = 200;
			n[i] = 0;
			//DATA_RTD2 = 100;			
			n[i+1] = 0;
    4922:	88 0f       	add	r24, r24
    4924:	99 1f       	adc	r25, r25
    4926:	21 e0       	ldi	r18, 0x01	; 1
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	2c 0f       	add	r18, r28
    492c:	3d 1f       	adc	r19, r29
    492e:	82 0f       	add	r24, r18
    4930:	93 1f       	adc	r25, r19
    4932:	dc 01       	movw	r26, r24
    4934:	13 96       	adiw	r26, 0x03	; 3
    4936:	1c 92       	st	X, r1
    4938:	1e 92       	st	-X, r1
    493a:	12 97       	sbiw	r26, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    493c:	2f e3       	ldi	r18, 0x3F	; 63
    493e:	3d e0       	ldi	r19, 0x0D	; 13
    4940:	43 e0       	ldi	r20, 0x03	; 3
    4942:	21 50       	subi	r18, 0x01	; 1
    4944:	30 40       	sbci	r19, 0x00	; 0
    4946:	40 40       	sbci	r20, 0x00	; 0
    4948:	e1 f7       	brne	.-8      	; 0x4942 <main+0xe6>
    494a:	00 c0       	rjmp	.+0      	; 0x494c <main+0xf0>
    494c:	00 00       	nop
	while(1)
	{
		volatile int n[1024]; /* n is an array of integers */
		volatile int arrSize = sizeof(n)/sizeof(n[0]);
		
		for(int i=0 ; i<arrSize ; i+=4){
    494e:	0c 5f       	subi	r16, 0xFC	; 252
    4950:	1f 4f       	sbci	r17, 0xFF	; 255
    4952:	89 81       	ldd	r24, Y+1	; 0x01
    4954:	9a 81       	ldd	r25, Y+2	; 0x02
    4956:	08 17       	cp	r16, r24
    4958:	19 07       	cpc	r17, r25
    495a:	0c f4       	brge	.+2      	; 0x495e <main+0x102>
    495c:	ad cf       	rjmp	.-166    	; 0x48b8 <main+0x5c>
			
			_delay_ms(1000);
		}
		
		
		errCode = f_write(&file, n, arrSize, &bytesRead); // Will attempt to write string 'helloworld' to file (data.txt)	
    495e:	49 81       	ldd	r20, Y+1	; 0x01
    4960:	5a 81       	ldd	r21, Y+2	; 0x02
    4962:	c6 01       	movw	r24, r12
    4964:	be 01       	movw	r22, r28
    4966:	6d 5f       	subi	r22, 0xFD	; 253
    4968:	7f 4f       	sbci	r23, 0xFF	; 255
    496a:	95 01       	movw	r18, r10
    496c:	0e 94 88 17 	call	0x2f10	; 0x2f10 <f_write>
    4970:	80 93 38 02 	sts	0x0238, r24
		errCode = f_close(&file);
    4974:	c6 01       	movw	r24, r12
    4976:	0e 94 e7 19 	call	0x33ce	; 0x33ce <f_close>
    497a:	80 93 38 02 	sts	0x0238, r24
		arrSize = sizeof(n)/sizeof(n[0]);
    497e:	fa 82       	std	Y+2, r15	; 0x02
    4980:	e9 82       	std	Y+1, r14	; 0x01
	}
    4982:	91 cf       	rjmp	.-222    	; 0x48a6 <main+0x4a>

00004984 <AFE_Init_WSM_SS>:
	return msb_lsb_comb;

}

void AFE_Init_WSM_SS(){
	CS2down();
    4984:	0e 94 f6 22 	call	0x45ec	; 0x45ec <CS2down>
	
	//Config Code START
	SPI_MasterTransmit(0x02); // Misc Reg 1
    4988:	82 e0       	ldi	r24, 0x02	; 2
    498a:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    498e:	80 e0       	ldi	r24, 0x00	; 0
    4990:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4994:	80 e0       	ldi	r24, 0x00	; 0
    4996:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x03); // Misc Reg 2
    499a:	83 e0       	ldi	r24, 0x03	; 3
    499c:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
    49a0:	8f ef       	ldi	r24, 0xFF	; 255
    49a2:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
    49a6:	8f ef       	ldi	r24, 0xFF	; 255
    49a8:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x09); // Dev Cont 1
    49ac:	89 e0       	ldi	r24, 0x09	; 9
    49ae:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x60);
    49b2:	80 e6       	ldi	r24, 0x60	; 96
    49b4:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x05);
    49b8:	85 e0       	ldi	r24, 0x05	; 5
    49ba:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x0C); // IQ Mode Enable
	SPI_MasterTransmit(0x00);
	SPI_MasterTransmit(0x00);
	*/
	
	SPI_MasterTransmit(0x0D); // Weight Scale Control
    49be:	8d e0       	ldi	r24, 0x0D	; 13
    49c0:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x60); //00
    49c4:	80 e6       	ldi	r24, 0x60	; 96
    49c6:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00); // 2nd Stage Gain = 1, No Offset DAC Val
    49ca:	80 e0       	ldi	r24, 0x00	; 0
    49cc:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	/*
	SPI_MasterTransmit(0x0E); // BCM DAC Freq
	SPI_MasterTransmit(0x00);
	SPI_MasterTransmit(0x00);
	*/
	SPI_MasterTransmit(0x0F); // Dev Cont 2
    49d0:	8f e0       	ldi	r24, 0x0F	; 15
    49d2:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    49d6:	80 e0       	ldi	r24, 0x00	; 0
    49d8:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    49dc:	80 e0       	ldi	r24, 0x00	; 0
    49de:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x10); // ADC Control Reg 2
    49e2:	80 e1       	ldi	r24, 0x10	; 16
    49e4:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    49e8:	80 e0       	ldi	r24, 0x00	; 0
    49ea:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    49ee:	80 e0       	ldi	r24, 0x00	; 0
    49f0:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x1A); // Misc Reg 3
    49f4:	8a e1       	ldi	r24, 0x1A	; 26
    49f6:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    49fa:	80 e0       	ldi	r24, 0x00	; 0
    49fc:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x30);
    4a00:	80 e3       	ldi	r24, 0x30	; 48
    4a02:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	//Config Code END
	
	//Begin ADC Conversion
	SPI_MasterTransmit(0x01); // ADC Control Reg 1
    4a06:	81 e0       	ldi	r24, 0x01	; 1
    4a08:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0xC1); //?
    4a0c:	81 ec       	ldi	r24, 0xC1	; 193
    4a0e:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0xD0); //250 SPS
    4a12:	80 ed       	ldi	r24, 0xD0	; 208
    4a14:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	CS2up();
    4a18:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <CS2up>
}
    4a1c:	08 95       	ret

00004a1e <AFE_Init_WSM_Cont>:

void AFE_Init_WSM_Cont(){
	CS2down();
    4a1e:	0e 94 f6 22 	call	0x45ec	; 0x45ec <CS2down>
	
	//Config Code START
	SPI_MasterTransmit(0x02); // Misc Reg 1
    4a22:	82 e0       	ldi	r24, 0x02	; 2
    4a24:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4a28:	80 e0       	ldi	r24, 0x00	; 0
    4a2a:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4a2e:	80 e0       	ldi	r24, 0x00	; 0
    4a30:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x03); // Misc Reg 2
    4a34:	83 e0       	ldi	r24, 0x03	; 3
    4a36:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
    4a3a:	8f ef       	ldi	r24, 0xFF	; 255
    4a3c:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0xFF);
    4a40:	8f ef       	ldi	r24, 0xFF	; 255
    4a42:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x09); // Dev Cont 1
    4a46:	89 e0       	ldi	r24, 0x09	; 9
    4a48:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x60);
    4a4c:	80 e6       	ldi	r24, 0x60	; 96
    4a4e:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x05);
    4a52:	85 e0       	ldi	r24, 0x05	; 5
    4a54:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0A); // ISW Mux
    4a58:	8a e0       	ldi	r24, 0x0A	; 10
    4a5a:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4a5e:	80 e0       	ldi	r24, 0x00	; 0
    4a60:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4a64:	80 e0       	ldi	r24, 0x00	; 0
    4a66:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0B); // VSense Mux
    4a6a:	8b e0       	ldi	r24, 0x0B	; 11
    4a6c:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4a70:	80 e0       	ldi	r24, 0x00	; 0
    4a72:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4a76:	80 e0       	ldi	r24, 0x00	; 0
    4a78:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0C); // IQ Mode Enable
    4a7c:	8c e0       	ldi	r24, 0x0C	; 12
    4a7e:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4a82:	80 e0       	ldi	r24, 0x00	; 0
    4a84:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4a88:	80 e0       	ldi	r24, 0x00	; 0
    4a8a:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0D); // Weight Scale Control
    4a8e:	8d e0       	ldi	r24, 0x0D	; 13
    4a90:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4a94:	80 e0       	ldi	r24, 0x00	; 0
    4a96:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00); // 2nd Stage Gain = 1, No Offset DAC Val
    4a9a:	80 e0       	ldi	r24, 0x00	; 0
    4a9c:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0E); // BCM DAC Freq
    4aa0:	8e e0       	ldi	r24, 0x0E	; 14
    4aa2:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4aa6:	80 e0       	ldi	r24, 0x00	; 0
    4aa8:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4aac:	80 e0       	ldi	r24, 0x00	; 0
    4aae:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x0F); // Dev Cont 2
    4ab2:	8f e0       	ldi	r24, 0x0F	; 15
    4ab4:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4ab8:	80 e0       	ldi	r24, 0x00	; 0
    4aba:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4abe:	80 e0       	ldi	r24, 0x00	; 0
    4ac0:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x10); // ADC Control Reg 2
    4ac4:	80 e1       	ldi	r24, 0x10	; 16
    4ac6:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4aca:	80 e0       	ldi	r24, 0x00	; 0
    4acc:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4ad0:	80 e0       	ldi	r24, 0x00	; 0
    4ad2:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	SPI_MasterTransmit(0x1A); // Misc Reg 3
    4ad6:	8a e1       	ldi	r24, 0x1A	; 26
    4ad8:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x00);
    4adc:	80 e0       	ldi	r24, 0x00	; 0
    4ade:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x30);
    4ae2:	80 e3       	ldi	r24, 0x30	; 48
    4ae4:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	//Config Code END
	
	//Begin ADC Conversion
	SPI_MasterTransmit(0x01); // ADC Control Reg 1
    4ae8:	81 e0       	ldi	r24, 0x01	; 1
    4aea:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x41);
    4aee:	81 e4       	ldi	r24, 0x41	; 65
    4af0:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	SPI_MasterTransmit(0x50);
    4af4:	80 e5       	ldi	r24, 0x50	; 80
    4af6:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
	
	CS2up();
    4afa:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <CS2up>
}
    4afe:	08 95       	ret

00004b00 <readWSM>:

uint16_t readWSM(){
		AFE_Init_WSM_SS();
    4b00:	0e 94 c2 24 	call	0x4984	; 0x4984 <AFE_Init_WSM_SS>
		
		//Polling for RDY (PINB0 must transition 1>0)
		while(PINB & 0x01){}
    4b04:	18 99       	sbic	0x03, 0	; 3
    4b06:	fe cf       	rjmp	.-4      	; 0x4b04 <readWSM+0x4>
			
		//Read Conversion Data
		CS2down();
    4b08:	0e 94 f6 22 	call	0x45ec	; 0x45ec <CS2down>
		SPI_MasterTransmit(0x20);
    4b0c:	80 e2       	ldi	r24, 0x20	; 32
    4b0e:	0e 94 e5 22 	call	0x45ca	; 0x45ca <SPI_MasterTransmit>
		msb=SPI_MasterReceive(0xff);
    4b12:	8f ef       	ldi	r24, 0xFF	; 255
    4b14:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <SPI_MasterReceive>
    4b18:	80 93 66 04 	sts	0x0466, r24
		lsb=SPI_MasterReceive(0xff);
    4b1c:	8f ef       	ldi	r24, 0xFF	; 255
    4b1e:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <SPI_MasterReceive>
    4b22:	80 93 34 02 	sts	0x0234, r24
		CS2up();
    4b26:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <CS2up>
		
		//Combine [MSB(8) LSB(8)] into 16bit Val
		msb_lsb_comb=((uint16_t) msb<<8)|lsb;
    4b2a:	30 91 66 04 	lds	r19, 0x0466
    4b2e:	20 e0       	ldi	r18, 0x00	; 0
    4b30:	80 91 34 02 	lds	r24, 0x0234
    4b34:	90 e0       	ldi	r25, 0x00	; 0
    4b36:	82 2b       	or	r24, r18
    4b38:	93 2b       	or	r25, r19
    4b3a:	90 93 8c 06 	sts	0x068C, r25
    4b3e:	80 93 8b 06 	sts	0x068B, r24
		return msb_lsb_comb;
}
    4b42:	08 95       	ret

00004b44 <set_PORTD_bit>:
	// either high or low (1 or 0) to match 'value'.
	// Leaves all other bits in PORTB unchanged.
	
	//Positions Used (5,6)
	
	if (value == 0)
    4b44:	61 15       	cp	r22, r1
    4b46:	71 05       	cpc	r23, r1
    4b48:	71 f4       	brne	.+28     	; 0x4b66 <set_PORTD_bit+0x22>
	{
		PORTD &= ~(1 << position);      // Set bit # 'position' low
    4b4a:	4b b1       	in	r20, 0x0b	; 11
    4b4c:	21 e0       	ldi	r18, 0x01	; 1
    4b4e:	30 e0       	ldi	r19, 0x00	; 0
    4b50:	b9 01       	movw	r22, r18
    4b52:	02 c0       	rjmp	.+4      	; 0x4b58 <set_PORTD_bit+0x14>
    4b54:	66 0f       	add	r22, r22
    4b56:	77 1f       	adc	r23, r23
    4b58:	8a 95       	dec	r24
    4b5a:	e2 f7       	brpl	.-8      	; 0x4b54 <set_PORTD_bit+0x10>
    4b5c:	cb 01       	movw	r24, r22
    4b5e:	80 95       	com	r24
    4b60:	84 23       	and	r24, r20
    4b62:	8b b9       	out	0x0b, r24	; 11
    4b64:	0c c0       	rjmp	.+24     	; 0x4b7e <set_PORTD_bit+0x3a>
	}
	else
	{
		PORTD |= (1 << position);       // Set bit # 'position' high
    4b66:	4b b1       	in	r20, 0x0b	; 11
    4b68:	21 e0       	ldi	r18, 0x01	; 1
    4b6a:	30 e0       	ldi	r19, 0x00	; 0
    4b6c:	b9 01       	movw	r22, r18
    4b6e:	02 c0       	rjmp	.+4      	; 0x4b74 <set_PORTD_bit+0x30>
    4b70:	66 0f       	add	r22, r22
    4b72:	77 1f       	adc	r23, r23
    4b74:	8a 95       	dec	r24
    4b76:	e2 f7       	brpl	.-8      	; 0x4b70 <set_PORTD_bit+0x2c>
    4b78:	cb 01       	movw	r24, r22
    4b7a:	84 2b       	or	r24, r20
    4b7c:	8b b9       	out	0x0b, r24	; 11
	}
	return 1;
}
    4b7e:	81 e0       	ldi	r24, 0x01	; 1
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	08 95       	ret

00004b84 <rtd1Init>:

//RTD Functions-------------------------------------------------------------

void rtd1Init(){
	ADMUX = 0x01; //enables ADC1 (RTD1)
    4b84:	81 e0       	ldi	r24, 0x01	; 1
    4b86:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADPS1) | (1 << ADPS0); // Enable ADC // Start A2D Conversions // ADC frequency @ 125kHz sample rate for 1Mhz clock (x8 Division Factor) 
    4b8a:	ea e7       	ldi	r30, 0x7A	; 122
    4b8c:	f0 e0       	ldi	r31, 0x00	; 0
    4b8e:	80 81       	ld	r24, Z
    4b90:	83 6c       	ori	r24, 0xC3	; 195
    4b92:	80 83       	st	Z, r24
}
    4b94:	08 95       	ret

00004b96 <rtd1Val>:

uint16_t rtd1Val(){
	//outputs 10bit result [ADCH,ADCL]
	rtd1Init();
    4b96:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <rtd1Init>
	adcl_val=ADCL;
    4b9a:	80 91 78 00 	lds	r24, 0x0078
    4b9e:	80 93 8a 06 	sts	0x068A, r24
	adch_val=ADCH;
    4ba2:	90 91 79 00 	lds	r25, 0x0079
    4ba6:	90 93 91 06 	sts	0x0691, r25
	adcvalComb = adch_val << 8 | adcl_val;
    4baa:	39 2f       	mov	r19, r25
    4bac:	20 e0       	ldi	r18, 0x00	; 0
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	82 2b       	or	r24, r18
    4bb2:	93 2b       	or	r25, r19
    4bb4:	90 93 37 02 	sts	0x0237, r25
    4bb8:	80 93 36 02 	sts	0x0236, r24
	return adcvalComb;
}
    4bbc:	08 95       	ret

00004bbe <mainOG>:
		arrSize = sizeof(n)/sizeof(n[0]);
	}
}

void mainOG(void)
{
    4bbe:	cf 93       	push	r28
    4bc0:	df 93       	push	r29
    4bc2:	cd b7       	in	r28, 0x3d	; 61
    4bc4:	de b7       	in	r29, 0x3e	; 62
    4bc6:	c2 50       	subi	r28, 0x02	; 2
    4bc8:	d4 40       	sbci	r29, 0x04	; 4
    4bca:	0f b6       	in	r0, 0x3f	; 63
    4bcc:	f8 94       	cli
    4bce:	de bf       	out	0x3e, r29	; 62
    4bd0:	0f be       	out	0x3f, r0	; 63
    4bd2:	cd bf       	out	0x3d, r28	; 61
	
	//Initialize LED
	ledInit();
    4bd4:	0e 94 d7 22 	call	0x45ae	; 0x45ae <ledInit>
	
	//Initialize SPI & SD

	SPI_MasterInit();
    4bd8:	0e 94 da 22 	call	0x45b4	; 0x45b4 <SPI_MasterInit>
	//fat_init();		
	crankClock();
    4bdc:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <crankClock>
	CS2up();
    4be0:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <CS2up>
	
	while(1)
	{
		set_PORTD_bit(6,0);
		volatile int n[512]; /* n is an array of 10 integers */
		volatile int arrSize = sizeof(n)/sizeof(n[0]);
    4be4:	ee 24       	eor	r14, r14
    4be6:	ff 24       	eor	r15, r15
    4be8:	68 94       	set
    4bea:	f1 f8       	bld	r15, 1
	crankClock();
	CS2up();
	
	while(1)
	{
		set_PORTD_bit(6,0);
    4bec:	86 e0       	ldi	r24, 0x06	; 6
    4bee:	90 e0       	ldi	r25, 0x00	; 0
    4bf0:	60 e0       	ldi	r22, 0x00	; 0
    4bf2:	70 e0       	ldi	r23, 0x00	; 0
    4bf4:	0e 94 a2 25 	call	0x4b44	; 0x4b44 <set_PORTD_bit>
		volatile int n[512]; /* n is an array of 10 integers */
		volatile int arrSize = sizeof(n)/sizeof(n[0]);
    4bf8:	fa 82       	std	Y+2, r15	; 0x02
    4bfa:	e9 82       	std	Y+1, r14	; 0x01
		
		for(int i=0 ; i<arrSize ; i+=3){
    4bfc:	89 81       	ldd	r24, Y+1	; 0x01
    4bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    4c00:	18 16       	cp	r1, r24
    4c02:	19 06       	cpc	r1, r25
    4c04:	84 f5       	brge	.+96     	; 0x4c66 <mainOG+0xa8>
    4c06:	00 e0       	ldi	r16, 0x00	; 0
    4c08:	10 e0       	ldi	r17, 0x00	; 0
			//DATA_WSM  = readWSM(); ///////////////// NEED TO INITIALIZE ALL OF THE ABOVE STUFF (CS2, CRANK, ETC) WHEN READING BOTH WSM AND BCM
			DATA_RTD1 = rtd1Val();
    4c0a:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <rtd1Val>
    4c0e:	90 93 8f 06 	sts	0x068F, r25
    4c12:	80 93 8e 06 	sts	0x068E, r24
    4c16:	8f e3       	ldi	r24, 0x3F	; 63
    4c18:	9d e0       	ldi	r25, 0x0D	; 13
    4c1a:	a3 e0       	ldi	r26, 0x03	; 3
    4c1c:	81 50       	subi	r24, 0x01	; 1
    4c1e:	90 40       	sbci	r25, 0x00	; 0
    4c20:	a0 40       	sbci	r26, 0x00	; 0
    4c22:	e1 f7       	brne	.-8      	; 0x4c1c <mainOG+0x5e>
    4c24:	00 c0       	rjmp	.+0      	; 0x4c26 <mainOG+0x68>
    4c26:	00 00       	nop
			_delay_ms(1000);
			DATA_BCM  = readBCM();
    4c28:	0e 94 0c 24 	call	0x4818	; 0x4818 <readBCM>
    4c2c:	90 93 65 04 	sts	0x0465, r25
    4c30:	80 93 64 04 	sts	0x0464, r24
			afeTurnOff();
    4c34:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <afeTurnOff>
		errCode = f_close(&file);
		arrSize = sizeof(n)/sizeof(n[0]);
	}
}

void mainOG(void)
    4c38:	f8 01       	movw	r30, r16
    4c3a:	31 96       	adiw	r30, 0x01	; 1
			_delay_ms(1000);
			DATA_BCM  = readBCM();
			afeTurnOff();
			
			//n[i] = DATA_RTD1;
			n[i+1] = DATA_BCM;
    4c3c:	80 91 64 04 	lds	r24, 0x0464
    4c40:	90 91 65 04 	lds	r25, 0x0465
    4c44:	ee 0f       	add	r30, r30
    4c46:	ff 1f       	adc	r31, r31
    4c48:	a1 e0       	ldi	r26, 0x01	; 1
    4c4a:	b0 e0       	ldi	r27, 0x00	; 0
    4c4c:	ac 0f       	add	r26, r28
    4c4e:	bd 1f       	adc	r27, r29
    4c50:	ea 0f       	add	r30, r26
    4c52:	fb 1f       	adc	r31, r27
    4c54:	93 83       	std	Z+3, r25	; 0x03
    4c56:	82 83       	std	Z+2, r24	; 0x02
	{
		set_PORTD_bit(6,0);
		volatile int n[512]; /* n is an array of 10 integers */
		volatile int arrSize = sizeof(n)/sizeof(n[0]);
		
		for(int i=0 ; i<arrSize ; i+=3){
    4c58:	0d 5f       	subi	r16, 0xFD	; 253
    4c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c5c:	89 81       	ldd	r24, Y+1	; 0x01
    4c5e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c60:	08 17       	cp	r16, r24
    4c62:	19 07       	cpc	r17, r25
    4c64:	94 f2       	brlt	.-92     	; 0x4c0a <mainOG+0x4c>
			//n[i+2] = DATA_WSM;
		}

		//errCode = f_write(&file, n, arrSize, &bytesRead); // Will attempt to write string 'helloworld' to file (data.txt)
		//errCode = f_close(&file);
		set_PORTD_bit(6,1);
    4c66:	86 e0       	ldi	r24, 0x06	; 6
    4c68:	90 e0       	ldi	r25, 0x00	; 0
    4c6a:	61 e0       	ldi	r22, 0x01	; 1
    4c6c:	70 e0       	ldi	r23, 0x00	; 0
    4c6e:	0e 94 a2 25 	call	0x4b44	; 0x4b44 <set_PORTD_bit>
		
	}
    4c72:	bc cf       	rjmp	.-136    	; 0x4bec <mainOG+0x2e>

00004c74 <rtd2Init>:
	adcvalComb = adch_val << 8 | adcl_val;
	return adcvalComb;
}

void rtd2Init(){
	ADMUX = 0x00; //enables ADC0 (RTD2)
    4c74:	10 92 7c 00 	sts	0x007C, r1
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADPS1) | (1 << ADPS0); // Enable ADC // Start A2D Conversions // ADC frequency @ 125kHz sample rate for 1Mhz clock (x8 Division Factor)
    4c78:	ea e7       	ldi	r30, 0x7A	; 122
    4c7a:	f0 e0       	ldi	r31, 0x00	; 0
    4c7c:	80 81       	ld	r24, Z
    4c7e:	83 6c       	ori	r24, 0xC3	; 195
    4c80:	80 83       	st	Z, r24
}
    4c82:	08 95       	ret

00004c84 <rtd2Val>:

uint16_t rtd2Val(){
	//outputs 10bit result [ADCH,ADCL]
	rtd2Init();
    4c84:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <rtd2Init>
	adcl_val2=ADCL;
    4c88:	80 91 78 00 	lds	r24, 0x0078
    4c8c:	80 93 59 04 	sts	0x0459, r24
	adch_val2=ADCH;
    4c90:	90 91 79 00 	lds	r25, 0x0079
    4c94:	90 93 33 02 	sts	0x0233, r25
	adcvalComb2 = adch_val2 << 8 | adcl_val2;
    4c98:	39 2f       	mov	r19, r25
    4c9a:	20 e0       	ldi	r18, 0x00	; 0
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	82 2b       	or	r24, r18
    4ca0:	93 2b       	or	r25, r19
    4ca2:	90 93 30 02 	sts	0x0230, r25
    4ca6:	80 93 2f 02 	sts	0x022F, r24
	return adcvalComb2;
}
    4caa:	08 95       	ret

00004cac <fat_init>:

//SD Functions-------------------------------------------------------------

void fat_init(void){
    4cac:	af 92       	push	r10
    4cae:	bf 92       	push	r11
    4cb0:	cf 92       	push	r12
    4cb2:	df 92       	push	r13
    4cb4:	ef 92       	push	r14
    4cb6:	ff 92       	push	r15
    4cb8:	0f 93       	push	r16
    4cba:	1f 93       	push	r17
    4cbc:	cf 93       	push	r28
    4cbe:	df 93       	push	r29
    errCode = -1;
    4cc0:	8f ef       	ldi	r24, 0xFF	; 255
    4cc2:	80 93 38 02 	sts	0x0238, r24
	
	//go until f_open returns FR_OK (function successful)
    while (errCode != FR_OK){                               
        errCode = f_mount(0, &fatfs);                       //mount drive number 0
    4cc6:	c2 e9       	ldi	r28, 0x92	; 146
    4cc8:	d6 e0       	ldi	r29, 0x06	; 6
        errCode = f_opendir(&dir, "/");				    	//root directory
    4cca:	04 e7       	ldi	r16, 0x74	; 116
    4ccc:	16 e0       	ldi	r17, 0x06	; 6
    4cce:	0f 2e       	mov	r0, r31
    4cd0:	f0 e9       	ldi	r31, 0x90	; 144
    4cd2:	ef 2e       	mov	r14, r31
    4cd4:	f1 e0       	ldi	r31, 0x01	; 1
    4cd6:	ff 2e       	mov	r15, r31
    4cd8:	f0 2d       	mov	r31, r0

        errCode = f_open(&file, "/hw1256.txt", FA_CREATE_ALWAYS | FA_WRITE);
    4cda:	0f 2e       	mov	r0, r31
    4cdc:	f9 e3       	ldi	r31, 0x39	; 57
    4cde:	cf 2e       	mov	r12, r31
    4ce0:	f2 e0       	ldi	r31, 0x02	; 2
    4ce2:	df 2e       	mov	r13, r31
    4ce4:	f0 2d       	mov	r31, r0
    4ce6:	0f 2e       	mov	r0, r31
    4ce8:	f2 e9       	ldi	r31, 0x92	; 146
    4cea:	af 2e       	mov	r10, r31
    4cec:	f1 e0       	ldi	r31, 0x01	; 1
    4cee:	bf 2e       	mov	r11, r31
    4cf0:	f0 2d       	mov	r31, r0

void fat_init(void){
    errCode = -1;
	
	//go until f_open returns FR_OK (function successful)
    while (errCode != FR_OK){                               
    4cf2:	19 c0       	rjmp	.+50     	; 0x4d26 <fat_init+0x7a>
        errCode = f_mount(0, &fatfs);                       //mount drive number 0
    4cf4:	80 e0       	ldi	r24, 0x00	; 0
    4cf6:	be 01       	movw	r22, r28
    4cf8:	0e 94 68 14 	call	0x28d0	; 0x28d0 <f_mount>
    4cfc:	80 93 38 02 	sts	0x0238, r24
        errCode = f_opendir(&dir, "/");				    	//root directory
    4d00:	c8 01       	movw	r24, r16
    4d02:	b7 01       	movw	r22, r14
    4d04:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <f_opendir>
    4d08:	80 93 38 02 	sts	0x0238, r24

        errCode = f_open(&file, "/hw1256.txt", FA_CREATE_ALWAYS | FA_WRITE);
    4d0c:	c6 01       	movw	r24, r12
    4d0e:	b5 01       	movw	r22, r10
    4d10:	4a e0       	ldi	r20, 0x0A	; 10
    4d12:	0e 94 7e 14 	call	0x28fc	; 0x28fc <f_open>
    4d16:	80 93 38 02 	sts	0x0238, r24
        if(errCode != FR_OK){
    4d1a:	88 23       	and	r24, r24
    4d1c:	21 f0       	breq	.+8      	; 0x4d26 <fat_init+0x7a>
            result=0; //used as a debugging flag
    4d1e:	10 92 9f 01 	sts	0x019F, r1
    4d22:	10 92 9e 01 	sts	0x019E, r1

void fat_init(void){
    errCode = -1;
	
	//go until f_open returns FR_OK (function successful)
    while (errCode != FR_OK){                               
    4d26:	80 91 38 02 	lds	r24, 0x0238
    4d2a:	88 23       	and	r24, r24
    4d2c:	19 f7       	brne	.-58     	; 0x4cf4 <fat_init+0x48>
        errCode = f_open(&file, "/hw1256.txt", FA_CREATE_ALWAYS | FA_WRITE);
        if(errCode != FR_OK){
            result=0; //used as a debugging flag
		}                                       
    }
}
    4d2e:	df 91       	pop	r29
    4d30:	cf 91       	pop	r28
    4d32:	1f 91       	pop	r17
    4d34:	0f 91       	pop	r16
    4d36:	ff 90       	pop	r15
    4d38:	ef 90       	pop	r14
    4d3a:	df 90       	pop	r13
    4d3c:	cf 90       	pop	r12
    4d3e:	bf 90       	pop	r11
    4d40:	af 90       	pop	r10
    4d42:	08 95       	ret

00004d44 <uart_init>:
// 	UBRR0L = F_CPU / BAUD / 16 - 1;
// 	UCSR0B = _BV(RXEN0) | _BV(RXCIE0) | _BV(TXEN0);
// 	
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
    4d44:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
    4d48:	80 93 c4 00 	sts	0x00C4, r24
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    4d4c:	e1 ec       	ldi	r30, 0xC1	; 193
    4d4e:	f0 e0       	ldi	r31, 0x00	; 0
    4d50:	88 e1       	ldi	r24, 0x18	; 24
    4d52:	80 83       	st	Z, r24
	
	UCSR0C = 0x06; //set asynchronous, no parity, one stop bit, 8 bit transfer.
    4d54:	86 e0       	ldi	r24, 0x06	; 6
    4d56:	80 93 c2 00 	sts	0x00C2, r24
	
	UCSR0B |= (1 << RXCIE0); //set RX interrupt on
    4d5a:	80 81       	ld	r24, Z
    4d5c:	80 68       	ori	r24, 0x80	; 128
    4d5e:	80 83       	st	Z, r24
}
    4d60:	08 95       	ret

00004d62 <uart_test>:

/* Get a received character */

uint8_t uart_test (void)
{
	return RxFifo.ct;
    4d62:	80 91 ab 01 	lds	r24, 0x01AB
}
    4d66:	08 95       	ret

00004d68 <uart_get>:
uint8_t uart_get (void)
{
	uint8_t d, i;


	while (RxFifo.ct == 0) ;
    4d68:	eb ea       	ldi	r30, 0xAB	; 171
    4d6a:	f1 e0       	ldi	r31, 0x01	; 1
    4d6c:	80 81       	ld	r24, Z
    4d6e:	88 23       	and	r24, r24
    4d70:	e9 f3       	breq	.-6      	; 0x4d6c <uart_get+0x4>
	i = RxFifo.ri;
    4d72:	90 91 aa 01 	lds	r25, 0x01AA
	d = RxFifo.buff[i];
    4d76:	e9 ea       	ldi	r30, 0xA9	; 169
    4d78:	f1 e0       	ldi	r31, 0x01	; 1
    4d7a:	df 01       	movw	r26, r30
    4d7c:	a9 0f       	add	r26, r25
    4d7e:	b1 1d       	adc	r27, r1
    4d80:	13 96       	adiw	r26, 0x03	; 3
    4d82:	8c 91       	ld	r24, X
    4d84:	13 97       	sbiw	r26, 0x03	; 3
	cli();
    4d86:	f8 94       	cli
	RxFifo.ct--;
    4d88:	22 81       	ldd	r18, Z+2	; 0x02
    4d8a:	21 50       	subi	r18, 0x01	; 1
    4d8c:	22 83       	std	Z+2, r18	; 0x02
	sei();
    4d8e:	78 94       	sei
	RxFifo.ri = (i + 1) % sizeof RxFifo.buff;
    4d90:	9f 5f       	subi	r25, 0xFF	; 255
    4d92:	9f 73       	andi	r25, 0x3F	; 63
    4d94:	90 93 aa 01 	sts	0x01AA, r25

	return d;
}
    4d98:	08 95       	ret

00004d9a <uart_put>:
void uart_put (uint8_t d)
{
	uint8_t i;


	while (TxFifo.ct >= sizeof TxFifo.buff) ;
    4d9a:	ee ee       	ldi	r30, 0xEE	; 238
    4d9c:	f1 e0       	ldi	r31, 0x01	; 1
    4d9e:	90 81       	ld	r25, Z
    4da0:	90 34       	cpi	r25, 0x40	; 64
    4da2:	e8 f7       	brcc	.-6      	; 0x4d9e <uart_put+0x4>
	i = TxFifo.wi;
    4da4:	90 91 ec 01 	lds	r25, 0x01EC
	TxFifo.buff[i] = d;
    4da8:	e9 2f       	mov	r30, r25
    4daa:	f0 e0       	ldi	r31, 0x00	; 0
    4dac:	e4 51       	subi	r30, 0x14	; 20
    4dae:	fe 4f       	sbci	r31, 0xFE	; 254
    4db0:	83 83       	std	Z+3, r24	; 0x03
	cli();
    4db2:	f8 94       	cli
	TxFifo.ct++;
    4db4:	80 91 ee 01 	lds	r24, 0x01EE
    4db8:	8f 5f       	subi	r24, 0xFF	; 255
    4dba:	80 93 ee 01 	sts	0x01EE, r24
	UCSR0B = _BV(RXEN0) | _BV(RXCIE0) | _BV(TXEN0) | _BV(UDRIE0);
    4dbe:	88 eb       	ldi	r24, 0xB8	; 184
    4dc0:	80 93 c1 00 	sts	0x00C1, r24
	sei();
    4dc4:	78 94       	sei
	TxFifo.wi = (i + 1) % sizeof TxFifo.buff;
    4dc6:	9f 5f       	subi	r25, 0xFF	; 255
    4dc8:	9f 73       	andi	r25, 0x3F	; 63
    4dca:	90 93 ec 01 	sts	0x01EC, r25
}
    4dce:	08 95       	ret

00004dd0 <__vector_20>:


/* UART RXC interrupt */

ISR(USART0_RX_vect)
{
    4dd0:	1f 92       	push	r1
    4dd2:	0f 92       	push	r0
    4dd4:	0f b6       	in	r0, 0x3f	; 63
    4dd6:	0f 92       	push	r0
    4dd8:	0b b6       	in	r0, 0x3b	; 59
    4dda:	0f 92       	push	r0
    4ddc:	11 24       	eor	r1, r1
    4dde:	8f 93       	push	r24
    4de0:	9f 93       	push	r25
    4de2:	af 93       	push	r26
    4de4:	bf 93       	push	r27
    4de6:	ef 93       	push	r30
    4de8:	ff 93       	push	r31
	uint8_t d, n, i;


	d = UDR0;
    4dea:	90 91 c6 00 	lds	r25, 0x00C6
	n = RxFifo.ct;
    4dee:	80 91 ab 01 	lds	r24, 0x01AB
	if (n < sizeof RxFifo.buff) {
    4df2:	80 34       	cpi	r24, 0x40	; 64
    4df4:	70 f4       	brcc	.+28     	; 0x4e12 <__vector_20+0x42>
		RxFifo.ct = ++n;
    4df6:	8f 5f       	subi	r24, 0xFF	; 255
    4df8:	80 93 ab 01 	sts	0x01AB, r24
		i = RxFifo.wi;
    4dfc:	e9 ea       	ldi	r30, 0xA9	; 169
    4dfe:	f1 e0       	ldi	r31, 0x01	; 1
    4e00:	80 81       	ld	r24, Z
		RxFifo.buff[i] = d;
    4e02:	df 01       	movw	r26, r30
    4e04:	a8 0f       	add	r26, r24
    4e06:	b1 1d       	adc	r27, r1
    4e08:	13 96       	adiw	r26, 0x03	; 3
    4e0a:	9c 93       	st	X, r25
		RxFifo.wi = (i + 1) % sizeof RxFifo.buff;
    4e0c:	8f 5f       	subi	r24, 0xFF	; 255
    4e0e:	8f 73       	andi	r24, 0x3F	; 63
    4e10:	80 83       	st	Z, r24
	}
}
    4e12:	ff 91       	pop	r31
    4e14:	ef 91       	pop	r30
    4e16:	bf 91       	pop	r27
    4e18:	af 91       	pop	r26
    4e1a:	9f 91       	pop	r25
    4e1c:	8f 91       	pop	r24
    4e1e:	0f 90       	pop	r0
    4e20:	0b be       	out	0x3b, r0	; 59
    4e22:	0f 90       	pop	r0
    4e24:	0f be       	out	0x3f, r0	; 63
    4e26:	0f 90       	pop	r0
    4e28:	1f 90       	pop	r1
    4e2a:	18 95       	reti

00004e2c <__vector_21>:


/* UART UDRE interrupt */

ISR(USART0_UDRE_vect)
{
    4e2c:	1f 92       	push	r1
    4e2e:	0f 92       	push	r0
    4e30:	0f b6       	in	r0, 0x3f	; 63
    4e32:	0f 92       	push	r0
    4e34:	0b b6       	in	r0, 0x3b	; 59
    4e36:	0f 92       	push	r0
    4e38:	11 24       	eor	r1, r1
    4e3a:	2f 93       	push	r18
    4e3c:	3f 93       	push	r19
    4e3e:	8f 93       	push	r24
    4e40:	9f 93       	push	r25
    4e42:	af 93       	push	r26
    4e44:	bf 93       	push	r27
    4e46:	ef 93       	push	r30
    4e48:	ff 93       	push	r31
	uint8_t n, i;


	n = TxFifo.ct;
    4e4a:	80 91 ee 01 	lds	r24, 0x01EE
	if (n) {
    4e4e:	88 23       	and	r24, r24
    4e50:	b1 f0       	breq	.+44     	; 0x4e7e <__vector_21+0x52>
		TxFifo.ct = --n;
    4e52:	28 2f       	mov	r18, r24
    4e54:	21 50       	subi	r18, 0x01	; 1
    4e56:	8e ee       	ldi	r24, 0xEE	; 238
    4e58:	91 e0       	ldi	r25, 0x01	; 1
    4e5a:	20 93 ee 01 	sts	0x01EE, r18
		i = TxFifo.ri;
    4e5e:	fc 01       	movw	r30, r24
    4e60:	32 91       	ld	r19, -Z
		UDR0 = TxFifo.buff[i];
    4e62:	02 97       	sbiw	r24, 0x02	; 2
    4e64:	dc 01       	movw	r26, r24
    4e66:	a3 0f       	add	r26, r19
    4e68:	b1 1d       	adc	r27, r1
    4e6a:	13 96       	adiw	r26, 0x03	; 3
    4e6c:	8c 91       	ld	r24, X
    4e6e:	13 97       	sbiw	r26, 0x03	; 3
    4e70:	80 93 c6 00 	sts	0x00C6, r24
		TxFifo.ri = (i + 1) % sizeof TxFifo.buff;
    4e74:	3f 5f       	subi	r19, 0xFF	; 255
    4e76:	3f 73       	andi	r19, 0x3F	; 63
    4e78:	30 83       	st	Z, r19
	}
	if (n == 0) UCSR0B = _BV(RXEN0) | _BV(RXCIE0) | _BV(TXEN0);
    4e7a:	22 23       	and	r18, r18
    4e7c:	19 f4       	brne	.+6      	; 0x4e84 <__vector_21+0x58>
    4e7e:	88 e9       	ldi	r24, 0x98	; 152
    4e80:	80 93 c1 00 	sts	0x00C1, r24
}
    4e84:	ff 91       	pop	r31
    4e86:	ef 91       	pop	r30
    4e88:	bf 91       	pop	r27
    4e8a:	af 91       	pop	r26
    4e8c:	9f 91       	pop	r25
    4e8e:	8f 91       	pop	r24
    4e90:	3f 91       	pop	r19
    4e92:	2f 91       	pop	r18
    4e94:	0f 90       	pop	r0
    4e96:	0b be       	out	0x3b, r0	; 59
    4e98:	0f 90       	pop	r0
    4e9a:	0f be       	out	0x3f, r0	; 63
    4e9c:	0f 90       	pop	r0
    4e9e:	1f 90       	pop	r1
    4ea0:	18 95       	reti

00004ea2 <__mulsi3>:
    4ea2:	62 9f       	mul	r22, r18
    4ea4:	d0 01       	movw	r26, r0
    4ea6:	73 9f       	mul	r23, r19
    4ea8:	f0 01       	movw	r30, r0
    4eaa:	82 9f       	mul	r24, r18
    4eac:	e0 0d       	add	r30, r0
    4eae:	f1 1d       	adc	r31, r1
    4eb0:	64 9f       	mul	r22, r20
    4eb2:	e0 0d       	add	r30, r0
    4eb4:	f1 1d       	adc	r31, r1
    4eb6:	92 9f       	mul	r25, r18
    4eb8:	f0 0d       	add	r31, r0
    4eba:	83 9f       	mul	r24, r19
    4ebc:	f0 0d       	add	r31, r0
    4ebe:	74 9f       	mul	r23, r20
    4ec0:	f0 0d       	add	r31, r0
    4ec2:	65 9f       	mul	r22, r21
    4ec4:	f0 0d       	add	r31, r0
    4ec6:	99 27       	eor	r25, r25
    4ec8:	72 9f       	mul	r23, r18
    4eca:	b0 0d       	add	r27, r0
    4ecc:	e1 1d       	adc	r30, r1
    4ece:	f9 1f       	adc	r31, r25
    4ed0:	63 9f       	mul	r22, r19
    4ed2:	b0 0d       	add	r27, r0
    4ed4:	e1 1d       	adc	r30, r1
    4ed6:	f9 1f       	adc	r31, r25
    4ed8:	bd 01       	movw	r22, r26
    4eda:	cf 01       	movw	r24, r30
    4edc:	11 24       	eor	r1, r1
    4ede:	08 95       	ret

00004ee0 <__udivmodsi4>:
    4ee0:	a1 e2       	ldi	r26, 0x21	; 33
    4ee2:	1a 2e       	mov	r1, r26
    4ee4:	aa 1b       	sub	r26, r26
    4ee6:	bb 1b       	sub	r27, r27
    4ee8:	fd 01       	movw	r30, r26
    4eea:	0d c0       	rjmp	.+26     	; 0x4f06 <__udivmodsi4_ep>

00004eec <__udivmodsi4_loop>:
    4eec:	aa 1f       	adc	r26, r26
    4eee:	bb 1f       	adc	r27, r27
    4ef0:	ee 1f       	adc	r30, r30
    4ef2:	ff 1f       	adc	r31, r31
    4ef4:	a2 17       	cp	r26, r18
    4ef6:	b3 07       	cpc	r27, r19
    4ef8:	e4 07       	cpc	r30, r20
    4efa:	f5 07       	cpc	r31, r21
    4efc:	20 f0       	brcs	.+8      	; 0x4f06 <__udivmodsi4_ep>
    4efe:	a2 1b       	sub	r26, r18
    4f00:	b3 0b       	sbc	r27, r19
    4f02:	e4 0b       	sbc	r30, r20
    4f04:	f5 0b       	sbc	r31, r21

00004f06 <__udivmodsi4_ep>:
    4f06:	66 1f       	adc	r22, r22
    4f08:	77 1f       	adc	r23, r23
    4f0a:	88 1f       	adc	r24, r24
    4f0c:	99 1f       	adc	r25, r25
    4f0e:	1a 94       	dec	r1
    4f10:	69 f7       	brne	.-38     	; 0x4eec <__udivmodsi4_loop>
    4f12:	60 95       	com	r22
    4f14:	70 95       	com	r23
    4f16:	80 95       	com	r24
    4f18:	90 95       	com	r25
    4f1a:	9b 01       	movw	r18, r22
    4f1c:	ac 01       	movw	r20, r24
    4f1e:	bd 01       	movw	r22, r26
    4f20:	cf 01       	movw	r24, r30
    4f22:	08 95       	ret

00004f24 <_exit>:
    4f24:	f8 94       	cli

00004f26 <__stop_program>:
    4f26:	ff cf       	rjmp	.-2      	; 0x4f26 <__stop_program>
